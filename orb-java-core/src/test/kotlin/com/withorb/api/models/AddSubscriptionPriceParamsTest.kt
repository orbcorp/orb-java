// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.withorb.api.core.JsonValue
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class AddSubscriptionPriceParamsTest {

    @Test
    fun createAddSubscriptionPriceParams() {
        val addSubscriptionPriceParams =
            AddSubscriptionPriceParams.builder()
                .allocationPrice(
                    AddSubscriptionPriceParams.AllocationPrice.builder()
                        .amount("10.00")
                        .cadence(AddSubscriptionPriceParams.AllocationPrice.Cadence.ONE_TIME)
                        .currency("USD")
                        .expiresAtEndOfCadence(true)
                        .build()
                )
                .addDiscount(
                    AddSubscriptionPriceParams.Discount.builder()
                        .discountType(AddSubscriptionPriceParams.Discount.DiscountType.PERCENTAGE)
                        .amountDiscount("amount_discount")
                        .percentageDiscount(0.15)
                        .usageDiscount(0.0)
                        .build()
                )
                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .externalPriceId("external_price_id")
                .maximumAmount("1.23")
                .minimumAmount("1.23")
                .planPhaseOrder(0L)
                .price(
                    AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice.builder()
                        .cadence(
                            AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice.Cadence.ANNUAL
                        )
                        .itemId("item_id")
                        .modelType(
                            AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice.ModelType.UNIT
                        )
                        .name("Annual fee")
                        .unitConfig(
                            AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice.UnitConfig
                                .builder()
                                .unitAmount("unit_amount")
                                .build()
                        )
                        .billableMetricId("billable_metric_id")
                        .billedInAdvance(true)
                        .billingCycleConfiguration(
                            AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice
                                .BillingCycleConfiguration
                                .builder()
                                .duration(0L)
                                .durationUnit(
                                    AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice
                                        .BillingCycleConfiguration
                                        .DurationUnit
                                        .DAY
                                )
                                .build()
                        )
                        .conversionRate(0.0)
                        .currency("currency")
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoiceGroupingKey("invoice_grouping_key")
                        .invoicingCycleConfiguration(
                            AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice
                                .InvoicingCycleConfiguration
                                .builder()
                                .duration(0L)
                                .durationUnit(
                                    AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice
                                        .InvoicingCycleConfiguration
                                        .DurationUnit
                                        .DAY
                                )
                                .build()
                        )
                        .metadata(
                            AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice.Metadata
                                .builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .referenceId("reference_id")
                        .build()
                )
                .priceId("h74gfhdjvn7ujokd")
                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .build()
        assertThat(addSubscriptionPriceParams).isNotNull
        assertThat(addSubscriptionPriceParams.allocationPrice())
            .contains(
                AddSubscriptionPriceParams.AllocationPrice.builder()
                    .amount("10.00")
                    .cadence(AddSubscriptionPriceParams.AllocationPrice.Cadence.ONE_TIME)
                    .currency("USD")
                    .expiresAtEndOfCadence(true)
                    .build()
            )
        assertThat(addSubscriptionPriceParams.discounts().get())
            .containsExactly(
                AddSubscriptionPriceParams.Discount.builder()
                    .discountType(AddSubscriptionPriceParams.Discount.DiscountType.PERCENTAGE)
                    .amountDiscount("amount_discount")
                    .percentageDiscount(0.15)
                    .usageDiscount(0.0)
                    .build()
            )
        assertThat(addSubscriptionPriceParams.endDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(addSubscriptionPriceParams.externalPriceId()).contains("external_price_id")
        assertThat(addSubscriptionPriceParams.maximumAmount()).contains("1.23")
        assertThat(addSubscriptionPriceParams.minimumAmount()).contains("1.23")
        assertThat(addSubscriptionPriceParams.planPhaseOrder()).contains(0L)
        assertThat(addSubscriptionPriceParams.price())
            .contains(
                AddSubscriptionPriceParams.Price.ofNewSubscriptionUnit(
                    AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice.builder()
                        .cadence(
                            AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice.Cadence.ANNUAL
                        )
                        .itemId("item_id")
                        .modelType(
                            AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice.ModelType.UNIT
                        )
                        .name("Annual fee")
                        .unitConfig(
                            AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice.UnitConfig
                                .builder()
                                .unitAmount("unit_amount")
                                .build()
                        )
                        .billableMetricId("billable_metric_id")
                        .billedInAdvance(true)
                        .billingCycleConfiguration(
                            AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice
                                .BillingCycleConfiguration
                                .builder()
                                .duration(0L)
                                .durationUnit(
                                    AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice
                                        .BillingCycleConfiguration
                                        .DurationUnit
                                        .DAY
                                )
                                .build()
                        )
                        .conversionRate(0.0)
                        .currency("currency")
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoiceGroupingKey("invoice_grouping_key")
                        .invoicingCycleConfiguration(
                            AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice
                                .InvoicingCycleConfiguration
                                .builder()
                                .duration(0L)
                                .durationUnit(
                                    AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice
                                        .InvoicingCycleConfiguration
                                        .DurationUnit
                                        .DAY
                                )
                                .build()
                        )
                        .metadata(
                            AddSubscriptionPriceParams.Price.NewSubscriptionUnitPrice.Metadata
                                .builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .referenceId("reference_id")
                        .build()
                )
            )
        assertThat(addSubscriptionPriceParams.priceId()).contains("h74gfhdjvn7ujokd")
        assertThat(addSubscriptionPriceParams.startDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
    }
}
