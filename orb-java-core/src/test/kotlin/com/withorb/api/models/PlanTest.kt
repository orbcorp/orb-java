// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.JsonValue
import com.withorb.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class PlanTest {

    @Test
    fun create() {
        val plan =
            Plan.builder()
                .id("id")
                .addAdjustment(
                    Plan.Adjustment.UsageDiscount.builder()
                        .id("id")
                        .addAppliesToPriceId("string")
                        .addFilter(
                            Plan.Adjustment.UsageDiscount.Filter.builder()
                                .field(Plan.Adjustment.UsageDiscount.Filter.Field.PRICE_ID)
                                .operator(Plan.Adjustment.UsageDiscount.Filter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .isInvoiceLevel(true)
                        .planPhaseOrder(0L)
                        .reason("reason")
                        .usageDiscount(0.0)
                        .build()
                )
                .basePlan(
                    Plan.BasePlan.builder()
                        .id("m2t5akQeh2obwxeU")
                        .externalPlanId("m2t5akQeh2obwxeU")
                        .name("Example plan")
                        .build()
                )
                .basePlanId("base_plan_id")
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency("currency")
                .defaultInvoiceMemo("default_invoice_memo")
                .description("description")
                .discount(
                    PercentageDiscount.builder()
                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(0.15)
                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                        .reason("reason")
                        .build()
                )
                .externalPlanId("external_plan_id")
                .invoicingCurrency("invoicing_currency")
                .maximum(
                    Plan.Maximum.builder()
                        .addAppliesToPriceId("string")
                        .addFilter(
                            Plan.Maximum.Filter.builder()
                                .field(Plan.Maximum.Filter.Field.PRICE_ID)
                                .operator(Plan.Maximum.Filter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .build()
                )
                .maximumAmount("maximum_amount")
                .metadata(
                    Plan.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .minimum(
                    Plan.Minimum.builder()
                        .addAppliesToPriceId("string")
                        .addFilter(
                            Plan.Minimum.Filter.builder()
                                .field(Plan.Minimum.Filter.Field.PRICE_ID)
                                .operator(Plan.Minimum.Filter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .build()
                )
                .minimumAmount("minimum_amount")
                .name("name")
                .netTerms(0L)
                .addPlanPhase(
                    Plan.PlanPhase.builder()
                        .id("id")
                        .description("description")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .reason("reason")
                                .build()
                        )
                        .duration(0L)
                        .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                        .maximum(
                            Plan.PlanPhase.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Plan.PlanPhase.Maximum.Filter.builder()
                                        .field(Plan.PlanPhase.Maximum.Filter.Field.PRICE_ID)
                                        .operator(Plan.PlanPhase.Maximum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .minimum(
                            Plan.PlanPhase.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Plan.PlanPhase.Minimum.Filter.builder()
                                        .field(Plan.PlanPhase.Minimum.Filter.Field.PRICE_ID)
                                        .operator(Plan.PlanPhase.Minimum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .order(0L)
                        .build()
                )
                .addPrice(
                    Price.Unit.builder()
                        .id("id")
                        .billableMetric(Price.Unit.BillableMetric.builder().id("id").build())
                        .billingCycleConfiguration(
                            Price.Unit.BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(Price.Unit.BillingCycleConfiguration.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(Price.Unit.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            Price.Unit.CreditAllocation.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            Price.Unit.InvoicingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(
                                    Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                )
                                .build()
                        )
                        .item(Price.Unit.Item.builder().id("id").name("name").build())
                        .maximum(
                            Price.Unit.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Price.Unit.Maximum.Filter.builder()
                                        .field(Price.Unit.Maximum.Filter.Field.PRICE_ID)
                                        .operator(Price.Unit.Maximum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Price.Unit.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Price.Unit.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Price.Unit.Minimum.Filter.builder()
                                        .field(Price.Unit.Minimum.Filter.Field.PRICE_ID)
                                        .operator(Price.Unit.Minimum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                        .unitConfig(
                            Price.Unit.UnitConfig.builder().unitAmount("unit_amount").build()
                        )
                        .dimensionalPriceConfiguration(
                            Price.Unit.DimensionalPriceConfiguration.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
                .product(
                    Plan.Product.builder()
                        .id("id")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .name("name")
                        .build()
                )
                .status(Plan.Status.ACTIVE)
                .trialConfig(
                    Plan.TrialConfig.builder()
                        .trialPeriod(0L)
                        .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                        .build()
                )
                .version(0L)
                .build()

        assertThat(plan.id()).isEqualTo("id")
        assertThat(plan.adjustments())
            .containsExactly(
                Plan.Adjustment.ofUsageDiscount(
                    Plan.Adjustment.UsageDiscount.builder()
                        .id("id")
                        .addAppliesToPriceId("string")
                        .addFilter(
                            Plan.Adjustment.UsageDiscount.Filter.builder()
                                .field(Plan.Adjustment.UsageDiscount.Filter.Field.PRICE_ID)
                                .operator(Plan.Adjustment.UsageDiscount.Filter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .isInvoiceLevel(true)
                        .planPhaseOrder(0L)
                        .reason("reason")
                        .usageDiscount(0.0)
                        .build()
                )
            )
        assertThat(plan.basePlan())
            .contains(
                Plan.BasePlan.builder()
                    .id("m2t5akQeh2obwxeU")
                    .externalPlanId("m2t5akQeh2obwxeU")
                    .name("Example plan")
                    .build()
            )
        assertThat(plan.basePlanId()).contains("base_plan_id")
        assertThat(plan.createdAt()).isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(plan.currency()).isEqualTo("currency")
        assertThat(plan.defaultInvoiceMemo()).contains("default_invoice_memo")
        assertThat(plan.description()).isEqualTo("description")
        assertThat(plan.discount())
            .contains(
                Discount.ofPercentage(
                    PercentageDiscount.builder()
                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(0.15)
                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                        .reason("reason")
                        .build()
                )
            )
        assertThat(plan.externalPlanId()).contains("external_plan_id")
        assertThat(plan.invoicingCurrency()).isEqualTo("invoicing_currency")
        assertThat(plan.maximum())
            .contains(
                Plan.Maximum.builder()
                    .addAppliesToPriceId("string")
                    .addFilter(
                        Plan.Maximum.Filter.builder()
                            .field(Plan.Maximum.Filter.Field.PRICE_ID)
                            .operator(Plan.Maximum.Filter.Operator.INCLUDES)
                            .addValue("string")
                            .build()
                    )
                    .maximumAmount("maximum_amount")
                    .build()
            )
        assertThat(plan.maximumAmount()).contains("maximum_amount")
        assertThat(plan.metadata())
            .isEqualTo(
                Plan.Metadata.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
        assertThat(plan.minimum())
            .contains(
                Plan.Minimum.builder()
                    .addAppliesToPriceId("string")
                    .addFilter(
                        Plan.Minimum.Filter.builder()
                            .field(Plan.Minimum.Filter.Field.PRICE_ID)
                            .operator(Plan.Minimum.Filter.Operator.INCLUDES)
                            .addValue("string")
                            .build()
                    )
                    .minimumAmount("minimum_amount")
                    .build()
            )
        assertThat(plan.minimumAmount()).contains("minimum_amount")
        assertThat(plan.name()).isEqualTo("name")
        assertThat(plan.netTerms()).contains(0L)
        assertThat(plan.planPhases().getOrNull())
            .containsExactly(
                Plan.PlanPhase.builder()
                    .id("id")
                    .description("description")
                    .discount(
                        PercentageDiscount.builder()
                            .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                            .percentageDiscount(0.15)
                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                            .reason("reason")
                            .build()
                    )
                    .duration(0L)
                    .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                    .maximum(
                        Plan.PlanPhase.Maximum.builder()
                            .addAppliesToPriceId("string")
                            .addFilter(
                                Plan.PlanPhase.Maximum.Filter.builder()
                                    .field(Plan.PlanPhase.Maximum.Filter.Field.PRICE_ID)
                                    .operator(Plan.PlanPhase.Maximum.Filter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .build()
                    )
                    .maximumAmount("maximum_amount")
                    .minimum(
                        Plan.PlanPhase.Minimum.builder()
                            .addAppliesToPriceId("string")
                            .addFilter(
                                Plan.PlanPhase.Minimum.Filter.builder()
                                    .field(Plan.PlanPhase.Minimum.Filter.Field.PRICE_ID)
                                    .operator(Plan.PlanPhase.Minimum.Filter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .build()
                    )
                    .minimumAmount("minimum_amount")
                    .name("name")
                    .order(0L)
                    .build()
            )
        assertThat(plan.prices())
            .containsExactly(
                Price.ofUnit(
                    Price.Unit.builder()
                        .id("id")
                        .billableMetric(Price.Unit.BillableMetric.builder().id("id").build())
                        .billingCycleConfiguration(
                            Price.Unit.BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(Price.Unit.BillingCycleConfiguration.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(Price.Unit.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            Price.Unit.CreditAllocation.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            Price.Unit.InvoicingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(
                                    Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                )
                                .build()
                        )
                        .item(Price.Unit.Item.builder().id("id").name("name").build())
                        .maximum(
                            Price.Unit.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Price.Unit.Maximum.Filter.builder()
                                        .field(Price.Unit.Maximum.Filter.Field.PRICE_ID)
                                        .operator(Price.Unit.Maximum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Price.Unit.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Price.Unit.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Price.Unit.Minimum.Filter.builder()
                                        .field(Price.Unit.Minimum.Filter.Field.PRICE_ID)
                                        .operator(Price.Unit.Minimum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                        .unitConfig(
                            Price.Unit.UnitConfig.builder().unitAmount("unit_amount").build()
                        )
                        .dimensionalPriceConfiguration(
                            Price.Unit.DimensionalPriceConfiguration.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
            )
        assertThat(plan.product())
            .isEqualTo(
                Plan.Product.builder()
                    .id("id")
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .name("name")
                    .build()
            )
        assertThat(plan.status()).isEqualTo(Plan.Status.ACTIVE)
        assertThat(plan.trialConfig())
            .isEqualTo(
                Plan.TrialConfig.builder()
                    .trialPeriod(0L)
                    .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                    .build()
            )
        assertThat(plan.version()).isEqualTo(0L)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val plan =
            Plan.builder()
                .id("id")
                .addAdjustment(
                    Plan.Adjustment.UsageDiscount.builder()
                        .id("id")
                        .addAppliesToPriceId("string")
                        .addFilter(
                            Plan.Adjustment.UsageDiscount.Filter.builder()
                                .field(Plan.Adjustment.UsageDiscount.Filter.Field.PRICE_ID)
                                .operator(Plan.Adjustment.UsageDiscount.Filter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .isInvoiceLevel(true)
                        .planPhaseOrder(0L)
                        .reason("reason")
                        .usageDiscount(0.0)
                        .build()
                )
                .basePlan(
                    Plan.BasePlan.builder()
                        .id("m2t5akQeh2obwxeU")
                        .externalPlanId("m2t5akQeh2obwxeU")
                        .name("Example plan")
                        .build()
                )
                .basePlanId("base_plan_id")
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency("currency")
                .defaultInvoiceMemo("default_invoice_memo")
                .description("description")
                .discount(
                    PercentageDiscount.builder()
                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(0.15)
                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                        .reason("reason")
                        .build()
                )
                .externalPlanId("external_plan_id")
                .invoicingCurrency("invoicing_currency")
                .maximum(
                    Plan.Maximum.builder()
                        .addAppliesToPriceId("string")
                        .addFilter(
                            Plan.Maximum.Filter.builder()
                                .field(Plan.Maximum.Filter.Field.PRICE_ID)
                                .operator(Plan.Maximum.Filter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .build()
                )
                .maximumAmount("maximum_amount")
                .metadata(
                    Plan.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .minimum(
                    Plan.Minimum.builder()
                        .addAppliesToPriceId("string")
                        .addFilter(
                            Plan.Minimum.Filter.builder()
                                .field(Plan.Minimum.Filter.Field.PRICE_ID)
                                .operator(Plan.Minimum.Filter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .build()
                )
                .minimumAmount("minimum_amount")
                .name("name")
                .netTerms(0L)
                .addPlanPhase(
                    Plan.PlanPhase.builder()
                        .id("id")
                        .description("description")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .reason("reason")
                                .build()
                        )
                        .duration(0L)
                        .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                        .maximum(
                            Plan.PlanPhase.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Plan.PlanPhase.Maximum.Filter.builder()
                                        .field(Plan.PlanPhase.Maximum.Filter.Field.PRICE_ID)
                                        .operator(Plan.PlanPhase.Maximum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .minimum(
                            Plan.PlanPhase.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Plan.PlanPhase.Minimum.Filter.builder()
                                        .field(Plan.PlanPhase.Minimum.Filter.Field.PRICE_ID)
                                        .operator(Plan.PlanPhase.Minimum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .order(0L)
                        .build()
                )
                .addPrice(
                    Price.Unit.builder()
                        .id("id")
                        .billableMetric(Price.Unit.BillableMetric.builder().id("id").build())
                        .billingCycleConfiguration(
                            Price.Unit.BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(Price.Unit.BillingCycleConfiguration.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(Price.Unit.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            Price.Unit.CreditAllocation.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            Price.Unit.InvoicingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(
                                    Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                )
                                .build()
                        )
                        .item(Price.Unit.Item.builder().id("id").name("name").build())
                        .maximum(
                            Price.Unit.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Price.Unit.Maximum.Filter.builder()
                                        .field(Price.Unit.Maximum.Filter.Field.PRICE_ID)
                                        .operator(Price.Unit.Maximum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Price.Unit.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Price.Unit.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Price.Unit.Minimum.Filter.builder()
                                        .field(Price.Unit.Minimum.Filter.Field.PRICE_ID)
                                        .operator(Price.Unit.Minimum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                        .unitConfig(
                            Price.Unit.UnitConfig.builder().unitAmount("unit_amount").build()
                        )
                        .dimensionalPriceConfiguration(
                            Price.Unit.DimensionalPriceConfiguration.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
                .product(
                    Plan.Product.builder()
                        .id("id")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .name("name")
                        .build()
                )
                .status(Plan.Status.ACTIVE)
                .trialConfig(
                    Plan.TrialConfig.builder()
                        .trialPeriod(0L)
                        .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                        .build()
                )
                .version(0L)
                .build()

        val roundtrippedPlan =
            jsonMapper.readValue(jsonMapper.writeValueAsString(plan), jacksonTypeRef<Plan>())

        assertThat(roundtrippedPlan).isEqualTo(plan)
    }
}
