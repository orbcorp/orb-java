// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.JsonValue
import com.withorb.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class InvoiceListPageResponseTest {

    @Test
    fun create() {
        val invoiceListPageResponse =
            InvoiceListPageResponse.builder()
                .addData(
                    Invoice.builder()
                        .id("id")
                        .amountDue("8.00")
                        .autoCollection(
                            Invoice.AutoCollection.builder()
                                .enabled(true)
                                .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .numAttempts(0L)
                                .previouslyAttemptedAt(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .build()
                        )
                        .billingAddress(
                            Invoice.BillingAddress.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                        .addCreditNote(
                            Invoice.CreditNote.builder()
                                .id("id")
                                .creditNoteNumber("credit_note_number")
                                .memo("memo")
                                .reason("reason")
                                .total("total")
                                .type("type")
                                .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                .build()
                        )
                        .currency("USD")
                        .customer(
                            Invoice.Customer.builder()
                                .id("id")
                                .externalCustomerId("external_customer_id")
                                .build()
                        )
                        .addCustomerBalanceTransaction(
                            Invoice.CustomerBalanceTransaction.builder()
                                .id("cgZa3SXcsPTVyC4Y")
                                .action(
                                    Invoice.CustomerBalanceTransaction.Action.APPLIED_TO_INVOICE
                                )
                                .amount("11.00")
                                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                .creditNote(
                                    Invoice.CustomerBalanceTransaction.CreditNote.builder()
                                        .id("id")
                                        .build()
                                )
                                .description("An optional description")
                                .endingBalance("22.00")
                                .invoice(
                                    Invoice.CustomerBalanceTransaction.InnerInvoice.builder()
                                        .id("gXcsPTVyC4YZa3Sc")
                                        .build()
                                )
                                .startingBalance("33.00")
                                .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                .build()
                        )
                        .customerTaxId(
                            Invoice.CustomerTaxId.builder()
                                .country(Invoice.CustomerTaxId.Country.AD)
                                .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                .value("value")
                                .build()
                        )
                        .discount(JsonValue.from(mapOf<String, Any>()))
                        .addDiscount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                        .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .hostedInvoiceUrl("hosted_invoice_url")
                        .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                        .invoiceNumber("JYEFHK-00001")
                        .invoicePdf(
                            "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                        )
                        .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                        .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addLineItem(
                            Invoice.LineItem.builder()
                                .id("id")
                                .adjustedSubtotal("5.00")
                                .addAdjustment(
                                    Invoice.LineItem.Adjustment.MonetaryUsageDiscountAdjustment
                                        .builder()
                                        .id("id")
                                        .adjustmentType(
                                            Invoice.LineItem.Adjustment
                                                .MonetaryUsageDiscountAdjustment
                                                .AdjustmentType
                                                .USAGE_DISCOUNT
                                        )
                                        .amount("amount")
                                        .addAppliesToPriceId("string")
                                        .isInvoiceLevel(true)
                                        .reason("reason")
                                        .usageDiscount(0.0)
                                        .build()
                                )
                                .amount("7.00")
                                .creditsApplied("6.00")
                                .discount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                .filter("filter")
                                .grouping("grouping")
                                .maximum(
                                    Invoice.LineItem.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .minimum(
                                    Invoice.LineItem.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("Fixed Fee")
                                .partiallyInvoicedAmount("4.00")
                                .price(
                                    Price.UnitPrice.builder()
                                        .id("id")
                                        .billableMetric(
                                            Price.UnitPrice.BillableMetric.builder()
                                                .id("id")
                                                .build()
                                        )
                                        .billingCycleConfiguration(
                                            Price.UnitPrice.BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.UnitPrice.BillingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                        .conversionRate(0.0)
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Price.UnitPrice.CreditAllocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .reason("reason")
                                                .build()
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(0.0)
                                        .invoicingCycleConfiguration(
                                            Price.UnitPrice.InvoicingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.UnitPrice.InvoicingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .item(
                                            Price.UnitPrice.Item.builder()
                                                .id("id")
                                                .name("name")
                                                .build()
                                        )
                                        .maximum(
                                            Price.UnitPrice.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(
                                            Price.UnitPrice.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Price.UnitPrice.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .modelType(Price.UnitPrice.ModelType.UNIT)
                                        .name("name")
                                        .planPhaseOrder(0L)
                                        .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            Price.UnitPrice.UnitConfig.builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .dimensionalPriceConfiguration(
                                            Price.UnitPrice.DimensionalPriceConfiguration.builder()
                                                .addDimensionValue("string")
                                                .dimensionalPriceGroupId(
                                                    "dimensional_price_group_id"
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .quantity(1.0)
                                .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                .addSubLineItem(
                                    Invoice.LineItem.SubLineItem.MatrixSubLineItem.builder()
                                        .amount("9.00")
                                        .grouping(
                                            Invoice.LineItem.SubLineItem.MatrixSubLineItem.Grouping
                                                .builder()
                                                .key("region")
                                                .value("west")
                                                .build()
                                        )
                                        .matrixConfig(
                                            Invoice.LineItem.SubLineItem.MatrixSubLineItem
                                                .MatrixConfig
                                                .builder()
                                                .addDimensionValue("string")
                                                .build()
                                        )
                                        .name("Tier One")
                                        .quantity(5.0)
                                        .type(
                                            Invoice.LineItem.SubLineItem.MatrixSubLineItem.Type
                                                .MATRIX
                                        )
                                        .build()
                                )
                                .subtotal("9.00")
                                .addTaxAmount(
                                    Invoice.LineItem.TaxAmount.builder()
                                        .amount("amount")
                                        .taxRateDescription("tax_rate_description")
                                        .taxRatePercentage("tax_rate_percentage")
                                        .build()
                                )
                                .addUsageCustomerId("string")
                                .build()
                        )
                        .maximum(
                            Invoice.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .memo("memo")
                        .metadata(
                            Invoice.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Invoice.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addPaymentAttempt(
                            Invoice.PaymentAttempt.builder()
                                .id("id")
                                .amount("amount")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .paymentProvider(Invoice.PaymentAttempt.PaymentProvider.STRIPE)
                                .paymentProviderId("payment_provider_id")
                                .succeeded(true)
                                .build()
                        )
                        .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .shippingAddress(
                            Invoice.ShippingAddress.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .status(Invoice.Status.ISSUED)
                        .subscription(Invoice.Subscription.builder().id("VDGsT23osdLb84KD").build())
                        .subtotal("8.00")
                        .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .total("8.00")
                        .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .willAutoIssue(true)
                        .build()
                )
                .paginationMetadata(
                    PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build()
                )
                .build()

        assertThat(invoiceListPageResponse.data())
            .containsExactly(
                Invoice.builder()
                    .id("id")
                    .amountDue("8.00")
                    .autoCollection(
                        Invoice.AutoCollection.builder()
                            .enabled(true)
                            .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .numAttempts(0L)
                            .previouslyAttemptedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .billingAddress(
                        Invoice.BillingAddress.builder()
                            .city("city")
                            .country("country")
                            .line1("line1")
                            .line2("line2")
                            .postalCode("postal_code")
                            .state("state")
                            .build()
                    )
                    .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                    .addCreditNote(
                        Invoice.CreditNote.builder()
                            .id("id")
                            .creditNoteNumber("credit_note_number")
                            .memo("memo")
                            .reason("reason")
                            .total("total")
                            .type("type")
                            .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                            .build()
                    )
                    .currency("USD")
                    .customer(
                        Invoice.Customer.builder()
                            .id("id")
                            .externalCustomerId("external_customer_id")
                            .build()
                    )
                    .addCustomerBalanceTransaction(
                        Invoice.CustomerBalanceTransaction.builder()
                            .id("cgZa3SXcsPTVyC4Y")
                            .action(Invoice.CustomerBalanceTransaction.Action.APPLIED_TO_INVOICE)
                            .amount("11.00")
                            .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                            .creditNote(
                                Invoice.CustomerBalanceTransaction.CreditNote.builder()
                                    .id("id")
                                    .build()
                            )
                            .description("An optional description")
                            .endingBalance("22.00")
                            .invoice(
                                Invoice.CustomerBalanceTransaction.InnerInvoice.builder()
                                    .id("gXcsPTVyC4YZa3Sc")
                                    .build()
                            )
                            .startingBalance("33.00")
                            .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                            .build()
                    )
                    .customerTaxId(
                        Invoice.CustomerTaxId.builder()
                            .country(Invoice.CustomerTaxId.Country.AD)
                            .type(Invoice.CustomerTaxId.Type.AD_NRT)
                            .value("value")
                            .build()
                    )
                    .discount(JsonValue.from(mapOf<String, Any>()))
                    .addDiscount(
                        PercentageDiscount.builder()
                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                            .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                            .percentageDiscount(0.15)
                            .reason("reason")
                            .build()
                    )
                    .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                    .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .hostedInvoiceUrl("hosted_invoice_url")
                    .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                    .invoiceNumber("JYEFHK-00001")
                    .invoicePdf(
                        "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                    )
                    .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                    .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .addLineItem(
                        Invoice.LineItem.builder()
                            .id("id")
                            .adjustedSubtotal("5.00")
                            .addAdjustment(
                                Invoice.LineItem.Adjustment.MonetaryUsageDiscountAdjustment
                                    .builder()
                                    .id("id")
                                    .adjustmentType(
                                        Invoice.LineItem.Adjustment.MonetaryUsageDiscountAdjustment
                                            .AdjustmentType
                                            .USAGE_DISCOUNT
                                    )
                                    .amount("amount")
                                    .addAppliesToPriceId("string")
                                    .isInvoiceLevel(true)
                                    .reason("reason")
                                    .usageDiscount(0.0)
                                    .build()
                            )
                            .amount("7.00")
                            .creditsApplied("6.00")
                            .discount(
                                PercentageDiscount.builder()
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .reason("reason")
                                    .build()
                            )
                            .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                            .filter("filter")
                            .grouping("grouping")
                            .maximum(
                                Invoice.LineItem.Maximum.builder()
                                    .addAppliesToPriceId("string")
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .minimum(
                                Invoice.LineItem.Minimum.builder()
                                    .addAppliesToPriceId("string")
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .name("Fixed Fee")
                            .partiallyInvoicedAmount("4.00")
                            .price(
                                Price.UnitPrice.builder()
                                    .id("id")
                                    .billableMetric(
                                        Price.UnitPrice.BillableMetric.builder().id("id").build()
                                    )
                                    .billingCycleConfiguration(
                                        Price.UnitPrice.BillingCycleConfiguration.builder()
                                            .duration(0L)
                                            .durationUnit(
                                                Price.UnitPrice.BillingCycleConfiguration
                                                    .DurationUnit
                                                    .DAY
                                            )
                                            .build()
                                    )
                                    .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                    .conversionRate(0.0)
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .creditAllocation(
                                        Price.UnitPrice.CreditAllocation.builder()
                                            .allowsRollover(true)
                                            .currency("currency")
                                            .build()
                                    )
                                    .currency("currency")
                                    .discount(
                                        PercentageDiscount.builder()
                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .reason("reason")
                                            .build()
                                    )
                                    .externalPriceId("external_price_id")
                                    .fixedPriceQuantity(0.0)
                                    .invoicingCycleConfiguration(
                                        Price.UnitPrice.InvoicingCycleConfiguration.builder()
                                            .duration(0L)
                                            .durationUnit(
                                                Price.UnitPrice.InvoicingCycleConfiguration
                                                    .DurationUnit
                                                    .DAY
                                            )
                                            .build()
                                    )
                                    .item(
                                        Price.UnitPrice.Item.builder().id("id").name("name").build()
                                    )
                                    .maximum(
                                        Price.UnitPrice.Maximum.builder()
                                            .addAppliesToPriceId("string")
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .metadata(
                                        Price.UnitPrice.Metadata.builder()
                                            .putAdditionalProperty("foo", JsonValue.from("string"))
                                            .build()
                                    )
                                    .minimum(
                                        Price.UnitPrice.Minimum.builder()
                                            .addAppliesToPriceId("string")
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .modelType(Price.UnitPrice.ModelType.UNIT)
                                    .name("name")
                                    .planPhaseOrder(0L)
                                    .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                    .unitConfig(
                                        Price.UnitPrice.UnitConfig.builder()
                                            .unitAmount("unit_amount")
                                            .build()
                                    )
                                    .dimensionalPriceConfiguration(
                                        Price.UnitPrice.DimensionalPriceConfiguration.builder()
                                            .addDimensionValue("string")
                                            .dimensionalPriceGroupId("dimensional_price_group_id")
                                            .build()
                                    )
                                    .build()
                            )
                            .quantity(1.0)
                            .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                            .addSubLineItem(
                                Invoice.LineItem.SubLineItem.MatrixSubLineItem.builder()
                                    .amount("9.00")
                                    .grouping(
                                        Invoice.LineItem.SubLineItem.MatrixSubLineItem.Grouping
                                            .builder()
                                            .key("region")
                                            .value("west")
                                            .build()
                                    )
                                    .matrixConfig(
                                        Invoice.LineItem.SubLineItem.MatrixSubLineItem.MatrixConfig
                                            .builder()
                                            .addDimensionValue("string")
                                            .build()
                                    )
                                    .name("Tier One")
                                    .quantity(5.0)
                                    .type(
                                        Invoice.LineItem.SubLineItem.MatrixSubLineItem.Type.MATRIX
                                    )
                                    .build()
                            )
                            .subtotal("9.00")
                            .addTaxAmount(
                                Invoice.LineItem.TaxAmount.builder()
                                    .amount("amount")
                                    .taxRateDescription("tax_rate_description")
                                    .taxRatePercentage("tax_rate_percentage")
                                    .build()
                            )
                            .addUsageCustomerId("string")
                            .build()
                    )
                    .maximum(
                        Invoice.Maximum.builder()
                            .addAppliesToPriceId("string")
                            .maximumAmount("maximum_amount")
                            .build()
                    )
                    .maximumAmount("maximum_amount")
                    .memo("memo")
                    .metadata(
                        Invoice.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .minimum(
                        Invoice.Minimum.builder()
                            .addAppliesToPriceId("string")
                            .minimumAmount("minimum_amount")
                            .build()
                    )
                    .minimumAmount("minimum_amount")
                    .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .addPaymentAttempt(
                        Invoice.PaymentAttempt.builder()
                            .id("id")
                            .amount("amount")
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .paymentProvider(Invoice.PaymentAttempt.PaymentProvider.STRIPE)
                            .paymentProviderId("payment_provider_id")
                            .succeeded(true)
                            .build()
                    )
                    .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .shippingAddress(
                        Invoice.ShippingAddress.builder()
                            .city("city")
                            .country("country")
                            .line1("line1")
                            .line2("line2")
                            .postalCode("postal_code")
                            .state("state")
                            .build()
                    )
                    .status(Invoice.Status.ISSUED)
                    .subscription(Invoice.Subscription.builder().id("VDGsT23osdLb84KD").build())
                    .subtotal("8.00")
                    .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .total("8.00")
                    .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .willAutoIssue(true)
                    .build()
            )
        assertThat(invoiceListPageResponse.paginationMetadata())
            .isEqualTo(PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build())
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val invoiceListPageResponse =
            InvoiceListPageResponse.builder()
                .addData(
                    Invoice.builder()
                        .id("id")
                        .amountDue("8.00")
                        .autoCollection(
                            Invoice.AutoCollection.builder()
                                .enabled(true)
                                .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .numAttempts(0L)
                                .previouslyAttemptedAt(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .build()
                        )
                        .billingAddress(
                            Invoice.BillingAddress.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                        .addCreditNote(
                            Invoice.CreditNote.builder()
                                .id("id")
                                .creditNoteNumber("credit_note_number")
                                .memo("memo")
                                .reason("reason")
                                .total("total")
                                .type("type")
                                .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                .build()
                        )
                        .currency("USD")
                        .customer(
                            Invoice.Customer.builder()
                                .id("id")
                                .externalCustomerId("external_customer_id")
                                .build()
                        )
                        .addCustomerBalanceTransaction(
                            Invoice.CustomerBalanceTransaction.builder()
                                .id("cgZa3SXcsPTVyC4Y")
                                .action(
                                    Invoice.CustomerBalanceTransaction.Action.APPLIED_TO_INVOICE
                                )
                                .amount("11.00")
                                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                .creditNote(
                                    Invoice.CustomerBalanceTransaction.CreditNote.builder()
                                        .id("id")
                                        .build()
                                )
                                .description("An optional description")
                                .endingBalance("22.00")
                                .invoice(
                                    Invoice.CustomerBalanceTransaction.InnerInvoice.builder()
                                        .id("gXcsPTVyC4YZa3Sc")
                                        .build()
                                )
                                .startingBalance("33.00")
                                .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                .build()
                        )
                        .customerTaxId(
                            Invoice.CustomerTaxId.builder()
                                .country(Invoice.CustomerTaxId.Country.AD)
                                .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                .value("value")
                                .build()
                        )
                        .discount(JsonValue.from(mapOf<String, Any>()))
                        .addDiscount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                        .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .hostedInvoiceUrl("hosted_invoice_url")
                        .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                        .invoiceNumber("JYEFHK-00001")
                        .invoicePdf(
                            "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                        )
                        .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                        .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addLineItem(
                            Invoice.LineItem.builder()
                                .id("id")
                                .adjustedSubtotal("5.00")
                                .addAdjustment(
                                    Invoice.LineItem.Adjustment.MonetaryUsageDiscountAdjustment
                                        .builder()
                                        .id("id")
                                        .adjustmentType(
                                            Invoice.LineItem.Adjustment
                                                .MonetaryUsageDiscountAdjustment
                                                .AdjustmentType
                                                .USAGE_DISCOUNT
                                        )
                                        .amount("amount")
                                        .addAppliesToPriceId("string")
                                        .isInvoiceLevel(true)
                                        .reason("reason")
                                        .usageDiscount(0.0)
                                        .build()
                                )
                                .amount("7.00")
                                .creditsApplied("6.00")
                                .discount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                .filter("filter")
                                .grouping("grouping")
                                .maximum(
                                    Invoice.LineItem.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .minimum(
                                    Invoice.LineItem.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("Fixed Fee")
                                .partiallyInvoicedAmount("4.00")
                                .price(
                                    Price.UnitPrice.builder()
                                        .id("id")
                                        .billableMetric(
                                            Price.UnitPrice.BillableMetric.builder()
                                                .id("id")
                                                .build()
                                        )
                                        .billingCycleConfiguration(
                                            Price.UnitPrice.BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.UnitPrice.BillingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                        .conversionRate(0.0)
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Price.UnitPrice.CreditAllocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .reason("reason")
                                                .build()
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(0.0)
                                        .invoicingCycleConfiguration(
                                            Price.UnitPrice.InvoicingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.UnitPrice.InvoicingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .item(
                                            Price.UnitPrice.Item.builder()
                                                .id("id")
                                                .name("name")
                                                .build()
                                        )
                                        .maximum(
                                            Price.UnitPrice.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(
                                            Price.UnitPrice.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Price.UnitPrice.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .modelType(Price.UnitPrice.ModelType.UNIT)
                                        .name("name")
                                        .planPhaseOrder(0L)
                                        .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            Price.UnitPrice.UnitConfig.builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .dimensionalPriceConfiguration(
                                            Price.UnitPrice.DimensionalPriceConfiguration.builder()
                                                .addDimensionValue("string")
                                                .dimensionalPriceGroupId(
                                                    "dimensional_price_group_id"
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .quantity(1.0)
                                .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                .addSubLineItem(
                                    Invoice.LineItem.SubLineItem.MatrixSubLineItem.builder()
                                        .amount("9.00")
                                        .grouping(
                                            Invoice.LineItem.SubLineItem.MatrixSubLineItem.Grouping
                                                .builder()
                                                .key("region")
                                                .value("west")
                                                .build()
                                        )
                                        .matrixConfig(
                                            Invoice.LineItem.SubLineItem.MatrixSubLineItem
                                                .MatrixConfig
                                                .builder()
                                                .addDimensionValue("string")
                                                .build()
                                        )
                                        .name("Tier One")
                                        .quantity(5.0)
                                        .type(
                                            Invoice.LineItem.SubLineItem.MatrixSubLineItem.Type
                                                .MATRIX
                                        )
                                        .build()
                                )
                                .subtotal("9.00")
                                .addTaxAmount(
                                    Invoice.LineItem.TaxAmount.builder()
                                        .amount("amount")
                                        .taxRateDescription("tax_rate_description")
                                        .taxRatePercentage("tax_rate_percentage")
                                        .build()
                                )
                                .addUsageCustomerId("string")
                                .build()
                        )
                        .maximum(
                            Invoice.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .memo("memo")
                        .metadata(
                            Invoice.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Invoice.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addPaymentAttempt(
                            Invoice.PaymentAttempt.builder()
                                .id("id")
                                .amount("amount")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .paymentProvider(Invoice.PaymentAttempt.PaymentProvider.STRIPE)
                                .paymentProviderId("payment_provider_id")
                                .succeeded(true)
                                .build()
                        )
                        .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .shippingAddress(
                            Invoice.ShippingAddress.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .status(Invoice.Status.ISSUED)
                        .subscription(Invoice.Subscription.builder().id("VDGsT23osdLb84KD").build())
                        .subtotal("8.00")
                        .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .total("8.00")
                        .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .willAutoIssue(true)
                        .build()
                )
                .paginationMetadata(
                    PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build()
                )
                .build()

        val roundtrippedInvoiceListPageResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(invoiceListPageResponse),
                jacksonTypeRef<InvoiceListPageResponse>(),
            )

        assertThat(roundtrippedInvoiceListPageResponse).isEqualTo(invoiceListPageResponse)
    }
}
