// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.JsonValue
import com.withorb.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class PriceIntervalTest {

    @Test
    fun create() {
        val priceInterval =
            PriceInterval.builder()
                .id("id")
                .billingCycleDay(0L)
                .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .filter("filter")
                .addFixedFeeQuantityTransition(
                    FixedFeeQuantityTransition.builder()
                        .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .priceId("price_id")
                        .quantity(0L)
                        .build()
                )
                .price(
                    Price.Unit.builder()
                        .id("id")
                        .billableMetric(BillableMetricTiny.builder().id("id").build())
                        .billingCycleConfiguration(
                            BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfiguration.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(Price.Unit.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .unitConversionRateConfig(
                            ConversionRateUnitConfig.builder().unitAmount("unit_amount").build()
                        )
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            Allocation.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .customExpiration(
                                    CustomExpiration.builder()
                                        .duration(0L)
                                        .durationUnit(CustomExpiration.DurationUnit.DAY)
                                        .build()
                                )
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfiguration.DurationUnit.DAY)
                                .build()
                        )
                        .item(ItemSlim.builder().id("id").name("name").build())
                        .maximum(
                            Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Price.Unit.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                        .unitConfig(UnitConfig.builder().unitAmount("unit_amount").build())
                        .dimensionalPriceConfiguration(
                            DimensionalPriceConfiguration.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .addUsageCustomerId("string")
                .build()

        assertThat(priceInterval.id()).isEqualTo("id")
        assertThat(priceInterval.billingCycleDay()).isEqualTo(0L)
        assertThat(priceInterval.currentBillingPeriodEndDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(priceInterval.currentBillingPeriodStartDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(priceInterval.endDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(priceInterval.filter()).contains("filter")
        assertThat(priceInterval.fixedFeeQuantityTransitions().getOrNull())
            .containsExactly(
                FixedFeeQuantityTransition.builder()
                    .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .priceId("price_id")
                    .quantity(0L)
                    .build()
            )
        assertThat(priceInterval.price())
            .isEqualTo(
                Price.ofUnit(
                    Price.Unit.builder()
                        .id("id")
                        .billableMetric(BillableMetricTiny.builder().id("id").build())
                        .billingCycleConfiguration(
                            BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfiguration.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(Price.Unit.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .unitConversionRateConfig(
                            ConversionRateUnitConfig.builder().unitAmount("unit_amount").build()
                        )
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            Allocation.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .customExpiration(
                                    CustomExpiration.builder()
                                        .duration(0L)
                                        .durationUnit(CustomExpiration.DurationUnit.DAY)
                                        .build()
                                )
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfiguration.DurationUnit.DAY)
                                .build()
                        )
                        .item(ItemSlim.builder().id("id").name("name").build())
                        .maximum(
                            Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Price.Unit.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                        .unitConfig(UnitConfig.builder().unitAmount("unit_amount").build())
                        .dimensionalPriceConfiguration(
                            DimensionalPriceConfiguration.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
            )
        assertThat(priceInterval.startDate())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(priceInterval.usageCustomerIds().getOrNull()).containsExactly("string")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val priceInterval =
            PriceInterval.builder()
                .id("id")
                .billingCycleDay(0L)
                .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .filter("filter")
                .addFixedFeeQuantityTransition(
                    FixedFeeQuantityTransition.builder()
                        .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .priceId("price_id")
                        .quantity(0L)
                        .build()
                )
                .price(
                    Price.Unit.builder()
                        .id("id")
                        .billableMetric(BillableMetricTiny.builder().id("id").build())
                        .billingCycleConfiguration(
                            BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfiguration.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(Price.Unit.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .unitConversionRateConfig(
                            ConversionRateUnitConfig.builder().unitAmount("unit_amount").build()
                        )
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            Allocation.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .customExpiration(
                                    CustomExpiration.builder()
                                        .duration(0L)
                                        .durationUnit(CustomExpiration.DurationUnit.DAY)
                                        .build()
                                )
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfiguration.DurationUnit.DAY)
                                .build()
                        )
                        .item(ItemSlim.builder().id("id").name("name").build())
                        .maximum(
                            Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Price.Unit.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                        .unitConfig(UnitConfig.builder().unitAmount("unit_amount").build())
                        .dimensionalPriceConfiguration(
                            DimensionalPriceConfiguration.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .addUsageCustomerId("string")
                .build()

        val roundtrippedPriceInterval =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(priceInterval),
                jacksonTypeRef<PriceInterval>(),
            )

        assertThat(roundtrippedPriceInterval).isEqualTo(priceInterval)
    }
}
