// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.withorb.api.core.JsonValue
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class InvoiceLineItemModelTest {

    @Test
    fun createInvoiceLineItemModel() {
        val invoiceLineItemModel =
            InvoiceLineItemModel.builder()
                .id("id")
                .adjustedSubtotal("5.00")
                .addAdjustment(
                    InvoiceLineItemModel.Adjustment.MonetaryUsageDiscountAdjustment.builder()
                        .id("id")
                        .adjustmentType(
                            InvoiceLineItemModel.Adjustment.MonetaryUsageDiscountAdjustment
                                .AdjustmentType
                                .USAGE_DISCOUNT
                        )
                        .amount("amount")
                        .addAppliesToPriceId("string")
                        .isInvoiceLevel(true)
                        .reason("reason")
                        .usageDiscount(0.0)
                        .build()
                )
                .amount("7.00")
                .creditsApplied("6.00")
                .discount(
                    PercentageDiscount.builder()
                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(0.15)
                        .reason("reason")
                        .build()
                )
                .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                .filter("filter")
                .grouping("grouping")
                .maximum(
                    MaximumModel.builder()
                        .addAppliesToPriceId("string")
                        .maximumAmount("maximum_amount")
                        .build()
                )
                .maximumAmount("maximum_amount")
                .minimum(
                    MinimumModel.builder()
                        .addAppliesToPriceId("string")
                        .minimumAmount("minimum_amount")
                        .build()
                )
                .minimumAmount("minimum_amount")
                .name("Fixed Fee")
                .partiallyInvoicedAmount("4.00")
                .price(
                    PriceModel.UnitPrice.builder()
                        .id("id")
                        .billableMetric(BillableMetricTinyModel.builder().id("id").build())
                        .billingCycleConfiguration(
                            BillingCycleConfigurationModel.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(PriceModel.UnitPrice.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            AllocationModel.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            BillingCycleConfigurationModel.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                .build()
                        )
                        .item(ItemSlimModel.builder().id("id").name("name").build())
                        .maximum(
                            MaximumModel.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            PriceModel.UnitPrice.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            MinimumModel.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .modelType(PriceModel.UnitPrice.ModelType.UNIT)
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(PriceModel.UnitPrice.PriceType.USAGE_PRICE)
                        .unitConfig(UnitConfigModel.builder().unitAmount("unit_amount").build())
                        .dimensionalPriceConfiguration(
                            DimensionalPriceConfigurationModel.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
                .quantity(1.0)
                .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                .addSubLineItem(
                    InvoiceLineItemModel.SubLineItem.MatrixSubLineItem.builder()
                        .amount("9.00")
                        .grouping(
                            SubLineItemGroupingModel.builder().key("region").value("west").build()
                        )
                        .matrixConfig(
                            InvoiceLineItemModel.SubLineItem.MatrixSubLineItem.MatrixConfig
                                .builder()
                                .addDimensionValue("string")
                                .build()
                        )
                        .name("Tier One")
                        .quantity(5.0)
                        .type(InvoiceLineItemModel.SubLineItem.MatrixSubLineItem.Type.MATRIX)
                        .build()
                )
                .subtotal("9.00")
                .addTaxAmount(
                    TaxAmountModel.builder()
                        .amount("amount")
                        .taxRateDescription("tax_rate_description")
                        .taxRatePercentage("tax_rate_percentage")
                        .build()
                )
                .addUsageCustomerId("string")
                .build()
        assertThat(invoiceLineItemModel).isNotNull
        assertThat(invoiceLineItemModel.id()).isEqualTo("id")
        assertThat(invoiceLineItemModel.adjustedSubtotal()).isEqualTo("5.00")
        assertThat(invoiceLineItemModel.adjustments())
            .containsExactly(
                InvoiceLineItemModel.Adjustment.ofMonetaryUsageDiscount(
                    InvoiceLineItemModel.Adjustment.MonetaryUsageDiscountAdjustment.builder()
                        .id("id")
                        .adjustmentType(
                            InvoiceLineItemModel.Adjustment.MonetaryUsageDiscountAdjustment
                                .AdjustmentType
                                .USAGE_DISCOUNT
                        )
                        .amount("amount")
                        .addAppliesToPriceId("string")
                        .isInvoiceLevel(true)
                        .reason("reason")
                        .usageDiscount(0.0)
                        .build()
                )
            )
        assertThat(invoiceLineItemModel.amount()).isEqualTo("7.00")
        assertThat(invoiceLineItemModel.creditsApplied()).isEqualTo("6.00")
        assertThat(invoiceLineItemModel.discount())
            .contains(
                Discount.ofPercentage(
                    PercentageDiscount.builder()
                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(0.15)
                        .reason("reason")
                        .build()
                )
            )
        assertThat(invoiceLineItemModel.endDate())
            .isEqualTo(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
        assertThat(invoiceLineItemModel.filter()).contains("filter")
        assertThat(invoiceLineItemModel.grouping()).contains("grouping")
        assertThat(invoiceLineItemModel.maximum())
            .contains(
                MaximumModel.builder()
                    .addAppliesToPriceId("string")
                    .maximumAmount("maximum_amount")
                    .build()
            )
        assertThat(invoiceLineItemModel.maximumAmount()).contains("maximum_amount")
        assertThat(invoiceLineItemModel.minimum())
            .contains(
                MinimumModel.builder()
                    .addAppliesToPriceId("string")
                    .minimumAmount("minimum_amount")
                    .build()
            )
        assertThat(invoiceLineItemModel.minimumAmount()).contains("minimum_amount")
        assertThat(invoiceLineItemModel.name()).isEqualTo("Fixed Fee")
        assertThat(invoiceLineItemModel.partiallyInvoicedAmount()).isEqualTo("4.00")
        assertThat(invoiceLineItemModel.price())
            .contains(
                PriceModel.ofUnitPrice(
                    PriceModel.UnitPrice.builder()
                        .id("id")
                        .billableMetric(BillableMetricTinyModel.builder().id("id").build())
                        .billingCycleConfiguration(
                            BillingCycleConfigurationModel.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(PriceModel.UnitPrice.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            AllocationModel.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            BillingCycleConfigurationModel.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                .build()
                        )
                        .item(ItemSlimModel.builder().id("id").name("name").build())
                        .maximum(
                            MaximumModel.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            PriceModel.UnitPrice.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            MinimumModel.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .modelType(PriceModel.UnitPrice.ModelType.UNIT)
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(PriceModel.UnitPrice.PriceType.USAGE_PRICE)
                        .unitConfig(UnitConfigModel.builder().unitAmount("unit_amount").build())
                        .dimensionalPriceConfiguration(
                            DimensionalPriceConfigurationModel.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
            )
        assertThat(invoiceLineItemModel.quantity()).isEqualTo(1.0)
        assertThat(invoiceLineItemModel.startDate())
            .isEqualTo(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
        assertThat(invoiceLineItemModel.subLineItems())
            .containsExactly(
                InvoiceLineItemModel.SubLineItem.ofMatrix(
                    InvoiceLineItemModel.SubLineItem.MatrixSubLineItem.builder()
                        .amount("9.00")
                        .grouping(
                            SubLineItemGroupingModel.builder().key("region").value("west").build()
                        )
                        .matrixConfig(
                            InvoiceLineItemModel.SubLineItem.MatrixSubLineItem.MatrixConfig
                                .builder()
                                .addDimensionValue("string")
                                .build()
                        )
                        .name("Tier One")
                        .quantity(5.0)
                        .type(InvoiceLineItemModel.SubLineItem.MatrixSubLineItem.Type.MATRIX)
                        .build()
                )
            )
        assertThat(invoiceLineItemModel.subtotal()).isEqualTo("9.00")
        assertThat(invoiceLineItemModel.taxAmounts())
            .containsExactly(
                TaxAmountModel.builder()
                    .amount("amount")
                    .taxRateDescription("tax_rate_description")
                    .taxRatePercentage("tax_rate_percentage")
                    .build()
            )
        assertThat(invoiceLineItemModel.usageCustomerIds().get()).containsExactly("string")
    }
}
