// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.withorb.api.core.JsonValue
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class SubscriptionUpdateTrialResponseTest {

    @Test
    fun createSubscriptionUpdateTrialResponse() {
      val subscriptionUpdateTrialResponse = SubscriptionUpdateTrialResponse.builder()
          .id("id")
          .activePlanPhaseOrder(0L)
          .addAdjustmentInterval(SubscriptionUpdateTrialResponse.AdjustmentInterval.builder()
              .id("id")
              .adjustment(SubscriptionUpdateTrialResponse.AdjustmentInterval.Adjustment.PlanPhaseUsageDiscountAdjustment.builder()
                  .id("id")
                  .adjustmentType(SubscriptionUpdateTrialResponse.AdjustmentInterval.Adjustment.PlanPhaseUsageDiscountAdjustment.AdjustmentType.USAGE_DISCOUNT)
                  .addAppliesToPriceId("string")
                  .isInvoiceLevel(true)
                  .planPhaseOrder(0L)
                  .reason("reason")
                  .usageDiscount(0.0)
                  .build())
              .addAppliesToPriceIntervalId("string")
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build())
          .autoCollection(true)
          .billingCycleAnchorConfiguration(SubscriptionUpdateTrialResponse.BillingCycleAnchorConfiguration.builder()
              .day(1L)
              .month(1L)
              .year(0L)
              .build())
          .billingCycleDay(1L)
          .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .customer(Customer.builder()
              .id("id")
              .addAdditionalEmail("string")
              .autoCollection(true)
              .balance("balance")
              .billingAddress(Customer.BillingAddress.builder()
                  .city("city")
                  .country("country")
                  .line1("line1")
                  .line2("line2")
                  .postalCode("postal_code")
                  .state("state")
                  .build())
              .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .currency("currency")
              .email("email")
              .emailDelivery(true)
              .exemptFromAutomatedTax(true)
              .externalCustomerId("external_customer_id")
              .hierarchy(Customer.Hierarchy.builder()
                  .addChild(Customer.Hierarchy.Child.builder()
                      .id("id")
                      .externalCustomerId("external_customer_id")
                      .build())
                  .parent(Customer.Hierarchy.Parent.builder()
                      .id("id")
                      .externalCustomerId("external_customer_id")
                      .build())
                  .build())
              .metadata(Customer.Metadata.builder()
                  .putAdditionalProperty("foo", JsonValue.from("string"))
                  .build())
              .name("name")
              .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
              .paymentProviderId("payment_provider_id")
              .portalUrl("portal_url")
              .shippingAddress(Customer.ShippingAddress.builder()
                  .city("city")
                  .country("country")
                  .line1("line1")
                  .line2("line2")
                  .postalCode("postal_code")
                  .state("state")
                  .build())
              .taxId(Customer.TaxId.builder()
                  .country(Customer.TaxId.Country.AD)
                  .type(Customer.TaxId.Type.AD_NRT)
                  .value("value")
                  .build())
              .timezone("timezone")
              .accountingSyncConfiguration(Customer.AccountingSyncConfiguration.builder()
                  .addAccountingProvider(Customer.AccountingSyncConfiguration.AccountingProvider.builder()
                      .externalProviderId("external_provider_id")
                      .providerType(Customer.AccountingSyncConfiguration.AccountingProvider.ProviderType.QUICKBOOKS)
                      .build())
                  .excluded(true)
                  .build())
              .reportingConfiguration(Customer.ReportingConfiguration.builder()
                  .exempt(true)
                  .build())
              .build())
          .defaultInvoiceMemo("default_invoice_memo")
          .addDiscountInterval(SubscriptionUpdateTrialResponse.DiscountInterval.AmountDiscountInterval.builder()
              .amountDiscount("amount_discount")
              .addAppliesToPriceId("string")
              .addAppliesToPriceIntervalId("string")
              .discountType(SubscriptionUpdateTrialResponse.DiscountInterval.AmountDiscountInterval.DiscountType.AMOUNT)
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build())
          .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .addFixedFeeQuantitySchedule(SubscriptionUpdateTrialResponse.FixedFeeQuantitySchedule.builder()
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .priceId("price_id")
              .quantity(0.0)
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build())
          .invoicingThreshold("invoicing_threshold")
          .addMaximumInterval(SubscriptionUpdateTrialResponse.MaximumInterval.builder()
              .addAppliesToPriceId("string")
              .addAppliesToPriceIntervalId("string")
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .maximumAmount("maximum_amount")
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build())
          .metadata(SubscriptionUpdateTrialResponse.Metadata.builder()
              .putAdditionalProperty("foo", JsonValue.from("string"))
              .build())
          .addMinimumInterval(SubscriptionUpdateTrialResponse.MinimumInterval.builder()
              .addAppliesToPriceId("string")
              .addAppliesToPriceIntervalId("string")
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .minimumAmount("minimum_amount")
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build())
          .netTerms(0L)
          .plan(Plan.builder()
              .id("id")
              .addAdjustment(Plan.Adjustment.PlanPhaseUsageDiscountAdjustment.builder()
                  .id("id")
                  .adjustmentType(Plan.Adjustment.PlanPhaseUsageDiscountAdjustment.AdjustmentType.USAGE_DISCOUNT)
                  .addAppliesToPriceId("string")
                  .isInvoiceLevel(true)
                  .planPhaseOrder(0L)
                  .reason("reason")
                  .usageDiscount(0.0)
                  .build())
              .basePlan(Plan.BasePlan.builder()
                  .id("m2t5akQeh2obwxeU")
                  .externalPlanId("m2t5akQeh2obwxeU")
                  .name("Example plan")
                  .build())
              .basePlanId("base_plan_id")
              .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .currency("currency")
              .defaultInvoiceMemo("default_invoice_memo")
              .description("description")
              .discount(PercentageDiscount.builder()
                  .addAppliesToPriceId("h74gfhdjvn7ujokd")
                  .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                  .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                  .percentageDiscount(0.15)
                  .reason("reason")
                  .build())
              .externalPlanId("external_plan_id")
              .invoicingCurrency("invoicing_currency")
              .maximum(Plan.Maximum.builder()
                  .addAppliesToPriceId("string")
                  .maximumAmount("maximum_amount")
                  .build())
              .maximumAmount("maximum_amount")
              .metadata(Plan.Metadata.builder()
                  .putAdditionalProperty("foo", JsonValue.from("string"))
                  .build())
              .minimum(Plan.Minimum.builder()
                  .addAppliesToPriceId("string")
                  .minimumAmount("minimum_amount")
                  .build())
              .minimumAmount("minimum_amount")
              .name("name")
              .netTerms(0L)
              .addPlanPhase(Plan.PlanPhase.builder()
                  .id("id")
                  .description("description")
                  .discount(PercentageDiscount.builder()
                      .addAppliesToPriceId("h74gfhdjvn7ujokd")
                      .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                      .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                      .percentageDiscount(0.15)
                      .reason("reason")
                      .build())
                  .duration(0L)
                  .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                  .maximum(Plan.PlanPhase.Maximum.builder()
                      .addAppliesToPriceId("string")
                      .maximumAmount("maximum_amount")
                      .build())
                  .maximumAmount("maximum_amount")
                  .minimum(Plan.PlanPhase.Minimum.builder()
                      .addAppliesToPriceId("string")
                      .minimumAmount("minimum_amount")
                      .build())
                  .minimumAmount("minimum_amount")
                  .name("name")
                  .order(0L)
                  .build())
              .addPrice(Price.UnitPrice.builder()
                  .id("id")
                  .billableMetric(Price.UnitPrice.BillableMetric.builder()
                      .id("id")
                      .build())
                  .billingCycleConfiguration(Price.UnitPrice.BillingCycleConfiguration.builder()
                      .duration(0L)
                      .durationUnit(Price.UnitPrice.BillingCycleConfiguration.DurationUnit.DAY)
                      .build())
                  .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                  .conversionRate(0.0)
                  .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .creditAllocation(Price.UnitPrice.CreditAllocation.builder()
                      .allowsRollover(true)
                      .currency("currency")
                      .build())
                  .currency("currency")
                  .discount(PercentageDiscount.builder()
                      .addAppliesToPriceId("h74gfhdjvn7ujokd")
                      .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                      .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                      .percentageDiscount(0.15)
                      .reason("reason")
                      .build())
                  .externalPriceId("external_price_id")
                  .fixedPriceQuantity(0.0)
                  .invoicingCycleConfiguration(Price.UnitPrice.InvoicingCycleConfiguration.builder()
                      .duration(0L)
                      .durationUnit(Price.UnitPrice.InvoicingCycleConfiguration.DurationUnit.DAY)
                      .build())
                  .item(Price.UnitPrice.Item.builder()
                      .id("id")
                      .name("name")
                      .build())
                  .maximum(Price.UnitPrice.Maximum.builder()
                      .addAppliesToPriceId("string")
                      .maximumAmount("maximum_amount")
                      .build())
                  .maximumAmount("maximum_amount")
                  .metadata(Price.UnitPrice.Metadata.builder()
                      .putAdditionalProperty("foo", JsonValue.from("string"))
                      .build())
                  .minimum(Price.UnitPrice.Minimum.builder()
                      .addAppliesToPriceId("string")
                      .minimumAmount("minimum_amount")
                      .build())
                  .minimumAmount("minimum_amount")
                  .modelType(Price.UnitPrice.ModelType.UNIT)
                  .name("name")
                  .planPhaseOrder(0L)
                  .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                  .unitConfig(Price.UnitPrice.UnitConfig.builder()
                      .unitAmount("unit_amount")
                      .build())
                  .dimensionalPriceConfiguration(Price.UnitPrice.DimensionalPriceConfiguration.builder()
                      .addDimensionValue("string")
                      .dimensionalPriceGroupId("dimensional_price_group_id")
                      .build())
                  .build())
              .product(Plan.Product.builder()
                  .id("id")
                  .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .name("name")
                  .build())
              .status(Plan.Status.ACTIVE)
              .trialConfig(Plan.TrialConfig.builder()
                  .trialPeriod(0L)
                  .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                  .build())
              .version(0L)
              .build())
          .addPriceInterval(SubscriptionUpdateTrialResponse.PriceInterval.builder()
              .id("id")
              .billingCycleDay(0L)
              .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .filter("filter")
              .addFixedFeeQuantityTransition(SubscriptionUpdateTrialResponse.PriceInterval.FixedFeeQuantityTransition.builder()
                  .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .priceId("price_id")
                  .quantity(0L)
                  .build())
              .price(Price.UnitPrice.builder()
                  .id("id")
                  .billableMetric(Price.UnitPrice.BillableMetric.builder()
                      .id("id")
                      .build())
                  .billingCycleConfiguration(Price.UnitPrice.BillingCycleConfiguration.builder()
                      .duration(0L)
                      .durationUnit(Price.UnitPrice.BillingCycleConfiguration.DurationUnit.DAY)
                      .build())
                  .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                  .conversionRate(0.0)
                  .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .creditAllocation(Price.UnitPrice.CreditAllocation.builder()
                      .allowsRollover(true)
                      .currency("currency")
                      .build())
                  .currency("currency")
                  .discount(PercentageDiscount.builder()
                      .addAppliesToPriceId("h74gfhdjvn7ujokd")
                      .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                      .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                      .percentageDiscount(0.15)
                      .reason("reason")
                      .build())
                  .externalPriceId("external_price_id")
                  .fixedPriceQuantity(0.0)
                  .invoicingCycleConfiguration(Price.UnitPrice.InvoicingCycleConfiguration.builder()
                      .duration(0L)
                      .durationUnit(Price.UnitPrice.InvoicingCycleConfiguration.DurationUnit.DAY)
                      .build())
                  .item(Price.UnitPrice.Item.builder()
                      .id("id")
                      .name("name")
                      .build())
                  .maximum(Price.UnitPrice.Maximum.builder()
                      .addAppliesToPriceId("string")
                      .maximumAmount("maximum_amount")
                      .build())
                  .maximumAmount("maximum_amount")
                  .metadata(Price.UnitPrice.Metadata.builder()
                      .putAdditionalProperty("foo", JsonValue.from("string"))
                      .build())
                  .minimum(Price.UnitPrice.Minimum.builder()
                      .addAppliesToPriceId("string")
                      .minimumAmount("minimum_amount")
                      .build())
                  .minimumAmount("minimum_amount")
                  .modelType(Price.UnitPrice.ModelType.UNIT)
                  .name("name")
                  .planPhaseOrder(0L)
                  .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                  .unitConfig(Price.UnitPrice.UnitConfig.builder()
                      .unitAmount("unit_amount")
                      .build())
                  .dimensionalPriceConfiguration(Price.UnitPrice.DimensionalPriceConfiguration.builder()
                      .addDimensionValue("string")
                      .dimensionalPriceGroupId("dimensional_price_group_id")
                      .build())
                  .build())
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .addUsageCustomerId("string")
              .build())
          .redeemedCoupon(SubscriptionUpdateTrialResponse.RedeemedCoupon.builder()
              .couponId("coupon_id")
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build())
          .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .status(SubscriptionUpdateTrialResponse.Status.ACTIVE)
          .trialInfo(SubscriptionUpdateTrialResponse.TrialInfo.builder()
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build())
          .build()
      assertThat(subscriptionUpdateTrialResponse).isNotNull
      assertThat(subscriptionUpdateTrialResponse.id()).isEqualTo("id")
      assertThat(subscriptionUpdateTrialResponse.activePlanPhaseOrder()).contains(0L)
      assertThat(subscriptionUpdateTrialResponse.adjustmentIntervals()).containsExactly(SubscriptionUpdateTrialResponse.AdjustmentInterval.builder()
          .id("id")
          .adjustment(SubscriptionUpdateTrialResponse.AdjustmentInterval.Adjustment.PlanPhaseUsageDiscountAdjustment.builder()
              .id("id")
              .adjustmentType(SubscriptionUpdateTrialResponse.AdjustmentInterval.Adjustment.PlanPhaseUsageDiscountAdjustment.AdjustmentType.USAGE_DISCOUNT)
              .addAppliesToPriceId("string")
              .isInvoiceLevel(true)
              .planPhaseOrder(0L)
              .reason("reason")
              .usageDiscount(0.0)
              .build())
          .addAppliesToPriceIntervalId("string")
          .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .build())
      assertThat(subscriptionUpdateTrialResponse.autoCollection()).contains(true)
      assertThat(subscriptionUpdateTrialResponse.billingCycleAnchorConfiguration()).isEqualTo(SubscriptionUpdateTrialResponse.BillingCycleAnchorConfiguration.builder()
          .day(1L)
          .month(1L)
          .year(0L)
          .build())
      assertThat(subscriptionUpdateTrialResponse.billingCycleDay()).isEqualTo(1L)
      assertThat(subscriptionUpdateTrialResponse.createdAt()).isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
      assertThat(subscriptionUpdateTrialResponse.currentBillingPeriodEndDate()).contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
      assertThat(subscriptionUpdateTrialResponse.currentBillingPeriodStartDate()).contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
      assertThat(subscriptionUpdateTrialResponse.customer()).isEqualTo(Customer.builder()
          .id("id")
          .addAdditionalEmail("string")
          .autoCollection(true)
          .balance("balance")
          .billingAddress(Customer.BillingAddress.builder()
              .city("city")
              .country("country")
              .line1("line1")
              .line2("line2")
              .postalCode("postal_code")
              .state("state")
              .build())
          .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .currency("currency")
          .email("email")
          .emailDelivery(true)
          .exemptFromAutomatedTax(true)
          .externalCustomerId("external_customer_id")
          .hierarchy(Customer.Hierarchy.builder()
              .addChild(Customer.Hierarchy.Child.builder()
                  .id("id")
                  .externalCustomerId("external_customer_id")
                  .build())
              .parent(Customer.Hierarchy.Parent.builder()
                  .id("id")
                  .externalCustomerId("external_customer_id")
                  .build())
              .build())
          .metadata(Customer.Metadata.builder()
              .putAdditionalProperty("foo", JsonValue.from("string"))
              .build())
          .name("name")
          .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
          .paymentProviderId("payment_provider_id")
          .portalUrl("portal_url")
          .shippingAddress(Customer.ShippingAddress.builder()
              .city("city")
              .country("country")
              .line1("line1")
              .line2("line2")
              .postalCode("postal_code")
              .state("state")
              .build())
          .taxId(Customer.TaxId.builder()
              .country(Customer.TaxId.Country.AD)
              .type(Customer.TaxId.Type.AD_NRT)
              .value("value")
              .build())
          .timezone("timezone")
          .accountingSyncConfiguration(Customer.AccountingSyncConfiguration.builder()
              .addAccountingProvider(Customer.AccountingSyncConfiguration.AccountingProvider.builder()
                  .externalProviderId("external_provider_id")
                  .providerType(Customer.AccountingSyncConfiguration.AccountingProvider.ProviderType.QUICKBOOKS)
                  .build())
              .excluded(true)
              .build())
          .reportingConfiguration(Customer.ReportingConfiguration.builder()
              .exempt(true)
              .build())
          .build())
      assertThat(subscriptionUpdateTrialResponse.defaultInvoiceMemo()).contains("default_invoice_memo")
      assertThat(subscriptionUpdateTrialResponse.discountIntervals()).containsExactly(SubscriptionUpdateTrialResponse.DiscountInterval.ofAmount(SubscriptionUpdateTrialResponse.DiscountInterval.AmountDiscountInterval.builder()
          .amountDiscount("amount_discount")
          .addAppliesToPriceId("string")
          .addAppliesToPriceIntervalId("string")
          .discountType(SubscriptionUpdateTrialResponse.DiscountInterval.AmountDiscountInterval.DiscountType.AMOUNT)
          .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .build()))
      assertThat(subscriptionUpdateTrialResponse.endDate()).contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
      assertThat(subscriptionUpdateTrialResponse.fixedFeeQuantitySchedule()).containsExactly(SubscriptionUpdateTrialResponse.FixedFeeQuantitySchedule.builder()
          .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .priceId("price_id")
          .quantity(0.0)
          .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .build())
      assertThat(subscriptionUpdateTrialResponse.invoicingThreshold()).contains("invoicing_threshold")
      assertThat(subscriptionUpdateTrialResponse.maximumIntervals()).containsExactly(SubscriptionUpdateTrialResponse.MaximumInterval.builder()
          .addAppliesToPriceId("string")
          .addAppliesToPriceIntervalId("string")
          .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .maximumAmount("maximum_amount")
          .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .build())
      assertThat(subscriptionUpdateTrialResponse.metadata()).isEqualTo(SubscriptionUpdateTrialResponse.Metadata.builder()
          .putAdditionalProperty("foo", JsonValue.from("string"))
          .build())
      assertThat(subscriptionUpdateTrialResponse.minimumIntervals()).containsExactly(SubscriptionUpdateTrialResponse.MinimumInterval.builder()
          .addAppliesToPriceId("string")
          .addAppliesToPriceIntervalId("string")
          .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .minimumAmount("minimum_amount")
          .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .build())
      assertThat(subscriptionUpdateTrialResponse.netTerms()).isEqualTo(0L)
      assertThat(subscriptionUpdateTrialResponse.plan()).isEqualTo(Plan.builder()
          .id("id")
          .addAdjustment(Plan.Adjustment.PlanPhaseUsageDiscountAdjustment.builder()
              .id("id")
              .adjustmentType(Plan.Adjustment.PlanPhaseUsageDiscountAdjustment.AdjustmentType.USAGE_DISCOUNT)
              .addAppliesToPriceId("string")
              .isInvoiceLevel(true)
              .planPhaseOrder(0L)
              .reason("reason")
              .usageDiscount(0.0)
              .build())
          .basePlan(Plan.BasePlan.builder()
              .id("m2t5akQeh2obwxeU")
              .externalPlanId("m2t5akQeh2obwxeU")
              .name("Example plan")
              .build())
          .basePlanId("base_plan_id")
          .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .currency("currency")
          .defaultInvoiceMemo("default_invoice_memo")
          .description("description")
          .discount(PercentageDiscount.builder()
              .addAppliesToPriceId("h74gfhdjvn7ujokd")
              .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
              .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
              .percentageDiscount(0.15)
              .reason("reason")
              .build())
          .externalPlanId("external_plan_id")
          .invoicingCurrency("invoicing_currency")
          .maximum(Plan.Maximum.builder()
              .addAppliesToPriceId("string")
              .maximumAmount("maximum_amount")
              .build())
          .maximumAmount("maximum_amount")
          .metadata(Plan.Metadata.builder()
              .putAdditionalProperty("foo", JsonValue.from("string"))
              .build())
          .minimum(Plan.Minimum.builder()
              .addAppliesToPriceId("string")
              .minimumAmount("minimum_amount")
              .build())
          .minimumAmount("minimum_amount")
          .name("name")
          .netTerms(0L)
          .addPlanPhase(Plan.PlanPhase.builder()
              .id("id")
              .description("description")
              .discount(PercentageDiscount.builder()
                  .addAppliesToPriceId("h74gfhdjvn7ujokd")
                  .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                  .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                  .percentageDiscount(0.15)
                  .reason("reason")
                  .build())
              .duration(0L)
              .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
              .maximum(Plan.PlanPhase.Maximum.builder()
                  .addAppliesToPriceId("string")
                  .maximumAmount("maximum_amount")
                  .build())
              .maximumAmount("maximum_amount")
              .minimum(Plan.PlanPhase.Minimum.builder()
                  .addAppliesToPriceId("string")
                  .minimumAmount("minimum_amount")
                  .build())
              .minimumAmount("minimum_amount")
              .name("name")
              .order(0L)
              .build())
          .addPrice(Price.UnitPrice.builder()
              .id("id")
              .billableMetric(Price.UnitPrice.BillableMetric.builder()
                  .id("id")
                  .build())
              .billingCycleConfiguration(Price.UnitPrice.BillingCycleConfiguration.builder()
                  .duration(0L)
                  .durationUnit(Price.UnitPrice.BillingCycleConfiguration.DurationUnit.DAY)
                  .build())
              .cadence(Price.UnitPrice.Cadence.ONE_TIME)
              .conversionRate(0.0)
              .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .creditAllocation(Price.UnitPrice.CreditAllocation.builder()
                  .allowsRollover(true)
                  .currency("currency")
                  .build())
              .currency("currency")
              .discount(PercentageDiscount.builder()
                  .addAppliesToPriceId("h74gfhdjvn7ujokd")
                  .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                  .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                  .percentageDiscount(0.15)
                  .reason("reason")
                  .build())
              .externalPriceId("external_price_id")
              .fixedPriceQuantity(0.0)
              .invoicingCycleConfiguration(Price.UnitPrice.InvoicingCycleConfiguration.builder()
                  .duration(0L)
                  .durationUnit(Price.UnitPrice.InvoicingCycleConfiguration.DurationUnit.DAY)
                  .build())
              .item(Price.UnitPrice.Item.builder()
                  .id("id")
                  .name("name")
                  .build())
              .maximum(Price.UnitPrice.Maximum.builder()
                  .addAppliesToPriceId("string")
                  .maximumAmount("maximum_amount")
                  .build())
              .maximumAmount("maximum_amount")
              .metadata(Price.UnitPrice.Metadata.builder()
                  .putAdditionalProperty("foo", JsonValue.from("string"))
                  .build())
              .minimum(Price.UnitPrice.Minimum.builder()
                  .addAppliesToPriceId("string")
                  .minimumAmount("minimum_amount")
                  .build())
              .minimumAmount("minimum_amount")
              .modelType(Price.UnitPrice.ModelType.UNIT)
              .name("name")
              .planPhaseOrder(0L)
              .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
              .unitConfig(Price.UnitPrice.UnitConfig.builder()
                  .unitAmount("unit_amount")
                  .build())
              .dimensionalPriceConfiguration(Price.UnitPrice.DimensionalPriceConfiguration.builder()
                  .addDimensionValue("string")
                  .dimensionalPriceGroupId("dimensional_price_group_id")
                  .build())
              .build())
          .product(Plan.Product.builder()
              .id("id")
              .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .name("name")
              .build())
          .status(Plan.Status.ACTIVE)
          .trialConfig(Plan.TrialConfig.builder()
              .trialPeriod(0L)
              .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
              .build())
          .version(0L)
          .build())
      assertThat(subscriptionUpdateTrialResponse.priceIntervals()).containsExactly(SubscriptionUpdateTrialResponse.PriceInterval.builder()
          .id("id")
          .billingCycleDay(0L)
          .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .filter("filter")
          .addFixedFeeQuantityTransition(SubscriptionUpdateTrialResponse.PriceInterval.FixedFeeQuantityTransition.builder()
              .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .priceId("price_id")
              .quantity(0L)
              .build())
          .price(Price.UnitPrice.builder()
              .id("id")
              .billableMetric(Price.UnitPrice.BillableMetric.builder()
                  .id("id")
                  .build())
              .billingCycleConfiguration(Price.UnitPrice.BillingCycleConfiguration.builder()
                  .duration(0L)
                  .durationUnit(Price.UnitPrice.BillingCycleConfiguration.DurationUnit.DAY)
                  .build())
              .cadence(Price.UnitPrice.Cadence.ONE_TIME)
              .conversionRate(0.0)
              .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .creditAllocation(Price.UnitPrice.CreditAllocation.builder()
                  .allowsRollover(true)
                  .currency("currency")
                  .build())
              .currency("currency")
              .discount(PercentageDiscount.builder()
                  .addAppliesToPriceId("h74gfhdjvn7ujokd")
                  .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                  .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                  .percentageDiscount(0.15)
                  .reason("reason")
                  .build())
              .externalPriceId("external_price_id")
              .fixedPriceQuantity(0.0)
              .invoicingCycleConfiguration(Price.UnitPrice.InvoicingCycleConfiguration.builder()
                  .duration(0L)
                  .durationUnit(Price.UnitPrice.InvoicingCycleConfiguration.DurationUnit.DAY)
                  .build())
              .item(Price.UnitPrice.Item.builder()
                  .id("id")
                  .name("name")
                  .build())
              .maximum(Price.UnitPrice.Maximum.builder()
                  .addAppliesToPriceId("string")
                  .maximumAmount("maximum_amount")
                  .build())
              .maximumAmount("maximum_amount")
              .metadata(Price.UnitPrice.Metadata.builder()
                  .putAdditionalProperty("foo", JsonValue.from("string"))
                  .build())
              .minimum(Price.UnitPrice.Minimum.builder()
                  .addAppliesToPriceId("string")
                  .minimumAmount("minimum_amount")
                  .build())
              .minimumAmount("minimum_amount")
              .modelType(Price.UnitPrice.ModelType.UNIT)
              .name("name")
              .planPhaseOrder(0L)
              .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
              .unitConfig(Price.UnitPrice.UnitConfig.builder()
                  .unitAmount("unit_amount")
                  .build())
              .dimensionalPriceConfiguration(Price.UnitPrice.DimensionalPriceConfiguration.builder()
                  .addDimensionValue("string")
                  .dimensionalPriceGroupId("dimensional_price_group_id")
                  .build())
              .build())
          .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .addUsageCustomerId("string")
          .build())
      assertThat(subscriptionUpdateTrialResponse.redeemedCoupon()).contains(SubscriptionUpdateTrialResponse.RedeemedCoupon.builder()
          .couponId("coupon_id")
          .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .build())
      assertThat(subscriptionUpdateTrialResponse.startDate()).isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
      assertThat(subscriptionUpdateTrialResponse.status()).isEqualTo(SubscriptionUpdateTrialResponse.Status.ACTIVE)
      assertThat(subscriptionUpdateTrialResponse.trialInfo()).isEqualTo(SubscriptionUpdateTrialResponse.TrialInfo.builder()
          .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .build())
    }
}
