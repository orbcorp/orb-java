// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import java.time.LocalDate
import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter
import java.util.UUID
import org.junit.jupiter.api.Test
import org.assertj.core.api.Assertions.assertThat
import com.withorb.api.core.JsonNull
import com.withorb.api.core.JsonString
import com.withorb.api.core.JsonValue
import com.withorb.api.models.CreditNote

class CreditNoteTest {

    @Test
    fun createCreditNote() {
      val creditNote = CreditNote.builder()
          .id("id")
          .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .creditNoteNumber("credit_note_number")
          .creditNotePdf("credit_note_pdf")
          .customer(CreditNote.Customer.builder()
              .id("id")
              .externalCustomerId("external_customer_id")
              .build())
          .invoiceId("invoice_id")
          .lineItems(listOf(CreditNote.LineItem.builder()
              .id("id")
              .amount("amount")
              .name("name")
              .quantity(42.23)
              .subtotal("subtotal")
              .taxAmounts(listOf(CreditNote.LineItem.TaxAmount.builder()
                  .amount("amount")
                  .taxRateDescription("tax_rate_description")
                  .taxRatePercentage("tax_rate_percentage")
                  .build()))
              .discounts(listOf(CreditNote.LineItem.Discount.builder()
                  .id("id")
                  .amountApplied("amount_applied")
                  .appliesToPriceIds(listOf("string"))
                  .discountType(CreditNote.LineItem.Discount.DiscountType.PERCENTAGE)
                  .percentageDiscount(42.23)
                  .amountDiscount("amount_discount")
                  .reason("reason")
                  .build()))
              .build()))
          .maximumAmountAdjustment(CreditNote.MaximumAmountAdjustment.builder()
              .amountApplied("amount_applied")
              .discountType(CreditNote.MaximumAmountAdjustment.DiscountType.PERCENTAGE)
              .percentageDiscount(42.23)
              .appliesToPrices(listOf(CreditNote.MaximumAmountAdjustment.AppliesToPrice.builder()
                  .id("id")
                  .name("name")
                  .build()))
              .reason("reason")
              .build())
          .memo("memo")
          .minimumAmountRefunded("minimum_amount_refunded")
          .reason(CreditNote.Reason.DUPLICATE)
          .subtotal("subtotal")
          .total("total")
          .type(CreditNote.Type.REFUND)
          .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .discounts(listOf(CreditNote.Discount.builder()
              .amountApplied("amount_applied")
              .discountType(CreditNote.Discount.DiscountType.PERCENTAGE)
              .percentageDiscount(42.23)
              .appliesToPrices(listOf(CreditNote.Discount.AppliesToPrice.builder()
                  .id("id")
                  .name("name")
                  .build()))
              .reason("reason")
              .build()))
          .build()
      assertThat(creditNote).isNotNull
      assertThat(creditNote.id()).isEqualTo("id")
      assertThat(creditNote.createdAt()).isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
      assertThat(creditNote.creditNoteNumber()).isEqualTo("credit_note_number")
      assertThat(creditNote.creditNotePdf()).contains("credit_note_pdf")
      assertThat(creditNote.customer()).isEqualTo(CreditNote.Customer.builder()
          .id("id")
          .externalCustomerId("external_customer_id")
          .build())
      assertThat(creditNote.invoiceId()).isEqualTo("invoice_id")
      assertThat(creditNote.lineItems()).containsExactly(CreditNote.LineItem.builder()
          .id("id")
          .amount("amount")
          .name("name")
          .quantity(42.23)
          .subtotal("subtotal")
          .taxAmounts(listOf(CreditNote.LineItem.TaxAmount.builder()
              .amount("amount")
              .taxRateDescription("tax_rate_description")
              .taxRatePercentage("tax_rate_percentage")
              .build()))
          .discounts(listOf(CreditNote.LineItem.Discount.builder()
              .id("id")
              .amountApplied("amount_applied")
              .appliesToPriceIds(listOf("string"))
              .discountType(CreditNote.LineItem.Discount.DiscountType.PERCENTAGE)
              .percentageDiscount(42.23)
              .amountDiscount("amount_discount")
              .reason("reason")
              .build()))
          .build())
      assertThat(creditNote.maximumAmountAdjustment()).contains(CreditNote.MaximumAmountAdjustment.builder()
          .amountApplied("amount_applied")
          .discountType(CreditNote.MaximumAmountAdjustment.DiscountType.PERCENTAGE)
          .percentageDiscount(42.23)
          .appliesToPrices(listOf(CreditNote.MaximumAmountAdjustment.AppliesToPrice.builder()
              .id("id")
              .name("name")
              .build()))
          .reason("reason")
          .build())
      assertThat(creditNote.memo()).contains("memo")
      assertThat(creditNote.minimumAmountRefunded()).contains("minimum_amount_refunded")
      assertThat(creditNote.reason()).contains(CreditNote.Reason.DUPLICATE)
      assertThat(creditNote.subtotal()).isEqualTo("subtotal")
      assertThat(creditNote.total()).isEqualTo("total")
      assertThat(creditNote.type()).isEqualTo(CreditNote.Type.REFUND)
      assertThat(creditNote.voidedAt()).contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
      assertThat(creditNote.discounts().get()).containsExactly(CreditNote.Discount.builder()
          .amountApplied("amount_applied")
          .discountType(CreditNote.Discount.DiscountType.PERCENTAGE)
          .percentageDiscount(42.23)
          .appliesToPrices(listOf(CreditNote.Discount.AppliesToPrice.builder()
              .id("id")
              .name("name")
              .build()))
          .reason("reason")
          .build())
    }
}
