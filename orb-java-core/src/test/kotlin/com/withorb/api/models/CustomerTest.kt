// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import java.time.LocalDate
import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter
import java.util.UUID
import org.junit.jupiter.api.Test
import org.assertj.core.api.Assertions.assertThat
import com.withorb.api.core.JsonNull
import com.withorb.api.core.JsonString
import com.withorb.api.core.JsonValue
import com.withorb.api.models.Customer

class CustomerTest {

    @Test
    fun createCustomer() {
      val customer = Customer.builder()
          .id("id")
          .additionalEmails(listOf("string"))
          .autoCollection(true)
          .balance("balance")
          .billingAddress(Customer.BillingAddress.builder()
              .city("city")
              .country("country")
              .line1("line1")
              .line2("line2")
              .postalCode("postal_code")
              .state("state")
              .build())
          .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .currency("currency")
          .email("email")
          .emailDelivery(true)
          .externalCustomerId("external_customer_id")
          .metadata(Customer.Metadata.builder().build())
          .name("name")
          .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
          .paymentProviderId("payment_provider_id")
          .portalUrl("portal_url")
          .shippingAddress(Customer.ShippingAddress.builder()
              .city("city")
              .country("country")
              .line1("line1")
              .line2("line2")
              .postalCode("postal_code")
              .state("state")
              .build())
          .taxId(Customer.TaxId.builder()
              .country(Customer.TaxId.Country.AD)
              .type(Customer.TaxId.Type.AD_NRT)
              .value("value")
              .build())
          .timezone("timezone")
          .accountingSyncConfiguration(Customer.AccountingSyncConfiguration.builder()
              .accountingProviders(listOf(Customer.AccountingSyncConfiguration.AccountingProvider.builder()
                  .externalProviderId("external_provider_id")
                  .providerType(Customer.AccountingSyncConfiguration.AccountingProvider.ProviderType.QUICKBOOKS)
                  .build()))
              .excluded(true)
              .build())
          .reportingConfiguration(Customer.ReportingConfiguration.builder()
              .exempt(true)
              .build())
          .build()
      assertThat(customer).isNotNull
      assertThat(customer.id()).isEqualTo("id")
      assertThat(customer.additionalEmails()).containsExactly("string")
      assertThat(customer.autoCollection()).isEqualTo(true)
      assertThat(customer.balance()).isEqualTo("balance")
      assertThat(customer.billingAddress()).contains(Customer.BillingAddress.builder()
          .city("city")
          .country("country")
          .line1("line1")
          .line2("line2")
          .postalCode("postal_code")
          .state("state")
          .build())
      assertThat(customer.createdAt()).isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
      assertThat(customer.currency()).contains("currency")
      assertThat(customer.email()).isEqualTo("email")
      assertThat(customer.emailDelivery()).isEqualTo(true)
      assertThat(customer.externalCustomerId()).contains("external_customer_id")
      assertThat(customer.metadata()).isEqualTo(Customer.Metadata.builder().build())
      assertThat(customer.name()).isEqualTo("name")
      assertThat(customer.paymentProvider()).contains(Customer.PaymentProvider.QUICKBOOKS)
      assertThat(customer.paymentProviderId()).contains("payment_provider_id")
      assertThat(customer.portalUrl()).contains("portal_url")
      assertThat(customer.shippingAddress()).contains(Customer.ShippingAddress.builder()
          .city("city")
          .country("country")
          .line1("line1")
          .line2("line2")
          .postalCode("postal_code")
          .state("state")
          .build())
      assertThat(customer.taxId()).contains(Customer.TaxId.builder()
          .country(Customer.TaxId.Country.AD)
          .type(Customer.TaxId.Type.AD_NRT)
          .value("value")
          .build())
      assertThat(customer.timezone()).isEqualTo("timezone")
      assertThat(customer.accountingSyncConfiguration()).contains(Customer.AccountingSyncConfiguration.builder()
          .accountingProviders(listOf(Customer.AccountingSyncConfiguration.AccountingProvider.builder()
              .externalProviderId("external_provider_id")
              .providerType(Customer.AccountingSyncConfiguration.AccountingProvider.ProviderType.QUICKBOOKS)
              .build()))
          .excluded(true)
          .build())
      assertThat(customer.reportingConfiguration()).contains(Customer.ReportingConfiguration.builder()
          .exempt(true)
          .build())
    }
}
