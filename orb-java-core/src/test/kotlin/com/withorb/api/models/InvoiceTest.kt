// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class InvoiceTest {

    @Test
    fun createInvoice() {
        val invoice =
            Invoice.builder()
                .id("id")
                .amountDue("8.00")
                .autoCollection(
                    Invoice.AutoCollection.builder()
                        .enabled(true)
                        .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .numAttempts(123L)
                        .previouslyAttemptedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .billingAddress(
                    Invoice.BillingAddress.builder()
                        .city("city")
                        .country("country")
                        .line1("line1")
                        .line2("line2")
                        .postalCode("postal_code")
                        .state("state")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                .creditNotes(
                    listOf(
                        Invoice.CreditNote.builder()
                            .id("id")
                            .creditNoteNumber("credit_note_number")
                            .memo("memo")
                            .reason("reason")
                            .total("total")
                            .type("type")
                            .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                            .build()
                    )
                )
                .currency("USD")
                .customer(
                    Invoice.Customer.builder()
                        .id("id")
                        .externalCustomerId("external_customer_id")
                        .build()
                )
                .customerBalanceTransactions(
                    listOf(
                        Invoice.CustomerBalanceTransaction.builder()
                            .id("cgZa3SXcsPTVyC4Y")
                            .action(Invoice.CustomerBalanceTransaction.Action.APPLIED_TO_INVOICE)
                            .amount("11.00")
                            .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                            .creditNote(
                                Invoice.CustomerBalanceTransaction.CreditNote.builder()
                                    .id("id")
                                    .build()
                            )
                            .description("An optional description")
                            .endingBalance("22.00")
                            .invoice(
                                Invoice.CustomerBalanceTransaction.Invoice.builder()
                                    .id("gXcsPTVyC4YZa3Sc")
                                    .build()
                            )
                            .startingBalance("33.00")
                            .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                            .build()
                    )
                )
                .customerTaxId(
                    Invoice.CustomerTaxId.builder()
                        .country(Invoice.CustomerTaxId.Country.AD)
                        .type(Invoice.CustomerTaxId.Type.AD_NRT)
                        .value("value")
                        .build()
                )
                .discount(
                    Discount.ofPercentageDiscount(
                        Discount.PercentageDiscount.builder()
                            .appliesToPriceIds(listOf("string"))
                            .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                            .percentageDiscount(1.0)
                            .reason("reason")
                            .build()
                    )
                )
                .discounts(
                    listOf(
                        Discount.ofPercentageDiscount(
                            Discount.PercentageDiscount.builder()
                                .appliesToPriceIds(listOf("string"))
                                .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(1.0)
                                .reason("reason")
                                .build()
                        )
                    )
                )
                .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .hostedInvoiceUrl("hosted_invoice_url")
                .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                .invoiceNumber("JYEFHK-00001")
                .invoicePdf("https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb")
                .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .lineItems(
                    listOf(
                        Invoice.LineItem.builder()
                            .id("id")
                            .amount("7.00")
                            .discount(
                                Discount.ofPercentageDiscount(
                                    Discount.PercentageDiscount.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .discountType(
                                            Discount.PercentageDiscount.DiscountType.PERCENTAGE
                                        )
                                        .percentageDiscount(1.0)
                                        .reason("reason")
                                        .build()
                                )
                            )
                            .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                            .grouping("grouping")
                            .maximum(
                                Invoice.LineItem.Maximum.builder()
                                    .appliesToPriceIds(listOf("string"))
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .minimum(
                                Invoice.LineItem.Minimum.builder()
                                    .appliesToPriceIds(listOf("string"))
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .name("Fixed Fee")
                            .price(
                                Price.ofUnitPrice(
                                    Price.UnitPrice.builder()
                                        .id("id")
                                        .billableMetric(
                                            Price.UnitPrice.BillableMetric.builder()
                                                .id("id")
                                                .build()
                                        )
                                        .billingCycleConfiguration(
                                            Price.UnitPrice.BillingCycleConfiguration.builder()
                                                .duration(123L)
                                                .durationUnit(
                                                    Price.UnitPrice.BillingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                        .conversionRate(42.23)
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Price.UnitPrice.CreditAllocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            Discount.ofPercentageDiscount(
                                                Discount.PercentageDiscount.builder()
                                                    .appliesToPriceIds(listOf("string"))
                                                    .discountType(
                                                        Discount.PercentageDiscount.DiscountType
                                                            .PERCENTAGE
                                                    )
                                                    .percentageDiscount(1.0)
                                                    .reason("reason")
                                                    .build()
                                            )
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(42.23)
                                        .item(
                                            Price.UnitPrice.Item.builder()
                                                .id("id")
                                                .name("name")
                                                .build()
                                        )
                                        .maximum(
                                            Price.UnitPrice.Maximum.builder()
                                                .appliesToPriceIds(listOf("string"))
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(Price.UnitPrice.Metadata.builder().build())
                                        .minimum(
                                            Price.UnitPrice.Minimum.builder()
                                                .appliesToPriceIds(listOf("string"))
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .modelType(Price.UnitPrice.ModelType.UNIT)
                                        .name("name")
                                        .planPhaseOrder(123L)
                                        .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            Price.UnitPrice.UnitConfig.builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .build()
                                )
                            )
                            .quantity(42.23)
                            .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                            .subLineItems(
                                listOf(
                                    Invoice.LineItem.SubLineItem.ofMatrixSubLineItem(
                                        Invoice.LineItem.SubLineItem.MatrixSubLineItem.builder()
                                            .amount("9.00")
                                            .grouping(
                                                Invoice.LineItem.SubLineItem.MatrixSubLineItem
                                                    .Grouping
                                                    .builder()
                                                    .key("region")
                                                    .value("west")
                                                    .build()
                                            )
                                            .matrixConfig(
                                                Invoice.LineItem.SubLineItem.MatrixSubLineItem
                                                    .MatrixConfig
                                                    .builder()
                                                    .dimensionValues(listOf("string"))
                                                    .build()
                                            )
                                            .name("Tier One")
                                            .quantity(42.23)
                                            .type(
                                                Invoice.LineItem.SubLineItem.MatrixSubLineItem.Type
                                                    .MATRIX
                                            )
                                            .build()
                                    )
                                )
                            )
                            .subtotal("9.00")
                            .taxAmounts(
                                listOf(
                                    Invoice.LineItem.TaxAmount.builder()
                                        .amount("amount")
                                        .taxRateDescription("tax_rate_description")
                                        .taxRatePercentage("tax_rate_percentage")
                                        .build()
                                )
                            )
                            .build()
                    )
                )
                .maximum(
                    Invoice.Maximum.builder()
                        .appliesToPriceIds(listOf("string"))
                        .maximumAmount("maximum_amount")
                        .build()
                )
                .maximumAmount("maximum_amount")
                .memo("memo")
                .metadata(Invoice.Metadata.builder().build())
                .minimum(
                    Invoice.Minimum.builder()
                        .appliesToPriceIds(listOf("string"))
                        .minimumAmount("minimum_amount")
                        .build()
                )
                .minimumAmount("minimum_amount")
                .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .shippingAddress(
                    Invoice.ShippingAddress.builder()
                        .city("city")
                        .country("country")
                        .line1("line1")
                        .line2("line2")
                        .postalCode("postal_code")
                        .state("state")
                        .build()
                )
                .status(Invoice.Status.ISSUED)
                .subscription(Invoice.Subscription.builder().id("VDGsT23osdLb84KD").build())
                .subtotal("8.00")
                .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .total("8.00")
                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .willAutoIssue(true)
                .build()
        assertThat(invoice).isNotNull
        assertThat(invoice.id()).isEqualTo("id")
        assertThat(invoice.amountDue()).isEqualTo("8.00")
        assertThat(invoice.autoCollection())
            .isEqualTo(
                Invoice.AutoCollection.builder()
                    .enabled(true)
                    .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .numAttempts(123L)
                    .previouslyAttemptedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(invoice.billingAddress())
            .contains(
                Invoice.BillingAddress.builder()
                    .city("city")
                    .country("country")
                    .line1("line1")
                    .line2("line2")
                    .postalCode("postal_code")
                    .state("state")
                    .build()
            )
        assertThat(invoice.createdAt()).isEqualTo(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
        assertThat(invoice.creditNotes())
            .containsExactly(
                Invoice.CreditNote.builder()
                    .id("id")
                    .creditNoteNumber("credit_note_number")
                    .memo("memo")
                    .reason("reason")
                    .total("total")
                    .type("type")
                    .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                    .build()
            )
        assertThat(invoice.currency()).isEqualTo("USD")
        assertThat(invoice.customer())
            .isEqualTo(
                Invoice.Customer.builder()
                    .id("id")
                    .externalCustomerId("external_customer_id")
                    .build()
            )
        assertThat(invoice.customerBalanceTransactions())
            .containsExactly(
                Invoice.CustomerBalanceTransaction.builder()
                    .id("cgZa3SXcsPTVyC4Y")
                    .action(Invoice.CustomerBalanceTransaction.Action.APPLIED_TO_INVOICE)
                    .amount("11.00")
                    .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                    .creditNote(
                        Invoice.CustomerBalanceTransaction.CreditNote.builder().id("id").build()
                    )
                    .description("An optional description")
                    .endingBalance("22.00")
                    .invoice(
                        Invoice.CustomerBalanceTransaction.Invoice.builder()
                            .id("gXcsPTVyC4YZa3Sc")
                            .build()
                    )
                    .startingBalance("33.00")
                    .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                    .build()
            )
        assertThat(invoice.customerTaxId())
            .contains(
                Invoice.CustomerTaxId.builder()
                    .country(Invoice.CustomerTaxId.Country.AD)
                    .type(Invoice.CustomerTaxId.Type.AD_NRT)
                    .value("value")
                    .build()
            )
        assertThat(invoice.discount())
            .contains(
                Discount.ofPercentageDiscount(
                    Discount.PercentageDiscount.builder()
                        .appliesToPriceIds(listOf("string"))
                        .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(1.0)
                        .reason("reason")
                        .build()
                )
            )
        assertThat(invoice.discounts())
            .containsExactly(
                Discount.ofPercentageDiscount(
                    Discount.PercentageDiscount.builder()
                        .appliesToPriceIds(listOf("string"))
                        .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(1.0)
                        .reason("reason")
                        .build()
                )
            )
        assertThat(invoice.dueDate()).isEqualTo(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
        assertThat(invoice.eligibleToIssueAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.hostedInvoiceUrl()).contains("hosted_invoice_url")
        assertThat(invoice.invoiceDate())
            .isEqualTo(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
        assertThat(invoice.invoiceNumber()).isEqualTo("JYEFHK-00001")
        assertThat(invoice.invoicePdf())
            .contains("https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb")
        assertThat(invoice.invoiceSource()).isEqualTo(Invoice.InvoiceSource.SUBSCRIPTION)
        assertThat(invoice.issueFailedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.issuedAt()).contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.lineItems())
            .containsExactly(
                Invoice.LineItem.builder()
                    .id("id")
                    .amount("7.00")
                    .discount(
                        Discount.ofPercentageDiscount(
                            Discount.PercentageDiscount.builder()
                                .appliesToPriceIds(listOf("string"))
                                .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(1.0)
                                .reason("reason")
                                .build()
                        )
                    )
                    .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                    .grouping("grouping")
                    .maximum(
                        Invoice.LineItem.Maximum.builder()
                            .appliesToPriceIds(listOf("string"))
                            .maximumAmount("maximum_amount")
                            .build()
                    )
                    .maximumAmount("maximum_amount")
                    .minimum(
                        Invoice.LineItem.Minimum.builder()
                            .appliesToPriceIds(listOf("string"))
                            .minimumAmount("minimum_amount")
                            .build()
                    )
                    .minimumAmount("minimum_amount")
                    .name("Fixed Fee")
                    .price(
                        Price.ofUnitPrice(
                            Price.UnitPrice.builder()
                                .id("id")
                                .billableMetric(
                                    Price.UnitPrice.BillableMetric.builder().id("id").build()
                                )
                                .billingCycleConfiguration(
                                    Price.UnitPrice.BillingCycleConfiguration.builder()
                                        .duration(123L)
                                        .durationUnit(
                                            Price.UnitPrice.BillingCycleConfiguration.DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                .conversionRate(42.23)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    Price.UnitPrice.CreditAllocation.builder()
                                        .allowsRollover(true)
                                        .currency("currency")
                                        .build()
                                )
                                .currency("currency")
                                .discount(
                                    Discount.ofPercentageDiscount(
                                        Discount.PercentageDiscount.builder()
                                            .appliesToPriceIds(listOf("string"))
                                            .discountType(
                                                Discount.PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(1.0)
                                            .reason("reason")
                                            .build()
                                    )
                                )
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(42.23)
                                .item(Price.UnitPrice.Item.builder().id("id").name("name").build())
                                .maximum(
                                    Price.UnitPrice.Maximum.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(Price.UnitPrice.Metadata.builder().build())
                                .minimum(
                                    Price.UnitPrice.Minimum.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .modelType(Price.UnitPrice.ModelType.UNIT)
                                .name("name")
                                .planPhaseOrder(123L)
                                .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                .unitConfig(
                                    Price.UnitPrice.UnitConfig.builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .build()
                        )
                    )
                    .quantity(42.23)
                    .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                    .subLineItems(
                        listOf(
                            Invoice.LineItem.SubLineItem.ofMatrixSubLineItem(
                                Invoice.LineItem.SubLineItem.MatrixSubLineItem.builder()
                                    .amount("9.00")
                                    .grouping(
                                        Invoice.LineItem.SubLineItem.MatrixSubLineItem.Grouping
                                            .builder()
                                            .key("region")
                                            .value("west")
                                            .build()
                                    )
                                    .matrixConfig(
                                        Invoice.LineItem.SubLineItem.MatrixSubLineItem.MatrixConfig
                                            .builder()
                                            .dimensionValues(listOf("string"))
                                            .build()
                                    )
                                    .name("Tier One")
                                    .quantity(42.23)
                                    .type(
                                        Invoice.LineItem.SubLineItem.MatrixSubLineItem.Type.MATRIX
                                    )
                                    .build()
                            )
                        )
                    )
                    .subtotal("9.00")
                    .taxAmounts(
                        listOf(
                            Invoice.LineItem.TaxAmount.builder()
                                .amount("amount")
                                .taxRateDescription("tax_rate_description")
                                .taxRatePercentage("tax_rate_percentage")
                                .build()
                        )
                    )
                    .build()
            )
        assertThat(invoice.maximum())
            .contains(
                Invoice.Maximum.builder()
                    .appliesToPriceIds(listOf("string"))
                    .maximumAmount("maximum_amount")
                    .build()
            )
        assertThat(invoice.maximumAmount()).contains("maximum_amount")
        assertThat(invoice.memo()).contains("memo")
        assertThat(invoice.metadata()).isEqualTo(Invoice.Metadata.builder().build())
        assertThat(invoice.minimum())
            .contains(
                Invoice.Minimum.builder()
                    .appliesToPriceIds(listOf("string"))
                    .minimumAmount("minimum_amount")
                    .build()
            )
        assertThat(invoice.minimumAmount()).contains("minimum_amount")
        assertThat(invoice.paidAt()).contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.paymentFailedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.paymentStartedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.scheduledIssueAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.shippingAddress())
            .contains(
                Invoice.ShippingAddress.builder()
                    .city("city")
                    .country("country")
                    .line1("line1")
                    .line2("line2")
                    .postalCode("postal_code")
                    .state("state")
                    .build()
            )
        assertThat(invoice.status()).isEqualTo(Invoice.Status.ISSUED)
        assertThat(invoice.subscription())
            .contains(Invoice.Subscription.builder().id("VDGsT23osdLb84KD").build())
        assertThat(invoice.subtotal()).isEqualTo("8.00")
        assertThat(invoice.syncFailedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.total()).isEqualTo("8.00")
        assertThat(invoice.voidedAt()).contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.willAutoIssue()).isEqualTo(true)
    }
}
