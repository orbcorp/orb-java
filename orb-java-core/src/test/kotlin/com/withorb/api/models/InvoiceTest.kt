// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.JsonValue
import com.withorb.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class InvoiceTest {

    @Test
    fun create() {
        val invoice =
            Invoice.builder()
                .id("id")
                .amountDue("8.00")
                .autoCollection(
                    Invoice.AutoCollection.builder()
                        .enabled(true)
                        .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .numAttempts(0L)
                        .previouslyAttemptedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .billingAddress(
                    Address.builder()
                        .city("city")
                        .country("country")
                        .line1("line1")
                        .line2("line2")
                        .postalCode("postal_code")
                        .state("state")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                .addCreditNote(
                    Invoice.CreditNote.builder()
                        .id("id")
                        .creditNoteNumber("credit_note_number")
                        .memo("memo")
                        .reason("reason")
                        .total("total")
                        .type("type")
                        .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                        .build()
                )
                .currency("USD")
                .customer(
                    CustomerMinified.builder()
                        .id("id")
                        .externalCustomerId("external_customer_id")
                        .build()
                )
                .addCustomerBalanceTransaction(
                    Invoice.CustomerBalanceTransaction.builder()
                        .id("cgZa3SXcsPTVyC4Y")
                        .action(Invoice.CustomerBalanceTransaction.Action.APPLIED_TO_INVOICE)
                        .amount("11.00")
                        .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                        .creditNote(CreditNoteTiny.builder().id("id").build())
                        .description("An optional description")
                        .endingBalance("22.00")
                        .invoice(InvoiceTiny.builder().id("gXcsPTVyC4YZa3Sc").build())
                        .startingBalance("33.00")
                        .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                        .build()
                )
                .customerTaxId(
                    CustomerTaxId.builder()
                        .country(CustomerTaxId.Country.AD)
                        .type(CustomerTaxId.Type.AD_NRT)
                        .value("value")
                        .build()
                )
                .discount(JsonValue.from(mapOf<String, Any>()))
                .addDiscount(
                    PercentageDiscount.builder()
                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(0.15)
                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                        .addFilter(
                            TransformPriceFilter.builder()
                                .field(TransformPriceFilter.Field.PRICE_ID)
                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .reason("reason")
                        .build()
                )
                .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .hostedInvoiceUrl("hosted_invoice_url")
                .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                .invoiceNumber("JYEFHK-00001")
                .invoicePdf("https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb")
                .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .addLineItem(
                    Invoice.LineItem.builder()
                        .id("id")
                        .adjustedSubtotal("5.00")
                        .addAdjustment(
                            MonetaryUsageDiscountAdjustment.builder()
                                .id("id")
                                .adjustmentType(
                                    MonetaryUsageDiscountAdjustment.AdjustmentType.USAGE_DISCOUNT
                                )
                                .amount("amount")
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .isInvoiceLevel(true)
                                .reason("reason")
                                .usageDiscount(0.0)
                                .build()
                        )
                        .amount("7.00")
                        .creditsApplied("6.00")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .reason("reason")
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                        .filter("filter")
                        .grouping("grouping")
                        .maximum(
                            Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .minimum(
                            Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("Fixed Fee")
                        .partiallyInvoicedAmount("4.00")
                        .price(
                            Price.Unit.builder()
                                .id("id")
                                .billableMetric(BillableMetricTiny.builder().id("id").build())
                                .billingCycleConfiguration(
                                    BillingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(BillingCycleConfiguration.DurationUnit.DAY)
                                        .build()
                                )
                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                .conversionRate(0.0)
                                .unitConversionRateConfig(
                                    ConversionRateUnitConfig.builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    Allocation.builder()
                                        .allowsRollover(true)
                                        .currency("currency")
                                        .customExpiration(
                                            CustomExpiration.builder()
                                                .duration(0L)
                                                .durationUnit(CustomExpiration.DurationUnit.DAY)
                                                .build()
                                        )
                                        .build()
                                )
                                .currency("currency")
                                .discount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoicingCycleConfiguration(
                                    BillingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(BillingCycleConfiguration.DurationUnit.DAY)
                                        .build()
                                )
                                .item(ItemSlim.builder().id("id").name("name").build())
                                .maximum(
                                    Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    Price.Unit.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .planPhaseOrder(0L)
                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                .unitConfig(UnitConfig.builder().unitAmount("unit_amount").build())
                                .dimensionalPriceConfiguration(
                                    DimensionalPriceConfiguration.builder()
                                        .addDimensionValue("string")
                                        .dimensionalPriceGroupId("dimensional_price_group_id")
                                        .build()
                                )
                                .build()
                        )
                        .quantity(1.0)
                        .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                        .addSubLineItem(
                            MatrixSubLineItem.builder()
                                .amount("9.00")
                                .grouping(
                                    SubLineItemGrouping.builder()
                                        .key("region")
                                        .value("west")
                                        .build()
                                )
                                .matrixConfig(
                                    SubLineItemMatrixConfig.builder()
                                        .addDimensionValue("string")
                                        .build()
                                )
                                .name("Tier One")
                                .quantity(5.0)
                                .type(MatrixSubLineItem.Type.MATRIX)
                                .build()
                        )
                        .subtotal("9.00")
                        .addTaxAmount(
                            TaxAmount.builder()
                                .amount("amount")
                                .taxRateDescription("tax_rate_description")
                                .taxRatePercentage("tax_rate_percentage")
                                .build()
                        )
                        .addUsageCustomerId("string")
                        .build()
                )
                .maximum(
                    Maximum.builder()
                        .addAppliesToPriceId("string")
                        .addFilter(
                            TransformPriceFilter.builder()
                                .field(TransformPriceFilter.Field.PRICE_ID)
                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .build()
                )
                .maximumAmount("maximum_amount")
                .memo("memo")
                .metadata(
                    Invoice.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .minimum(
                    Minimum.builder()
                        .addAppliesToPriceId("string")
                        .addFilter(
                            TransformPriceFilter.builder()
                                .field(TransformPriceFilter.Field.PRICE_ID)
                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .build()
                )
                .minimumAmount("minimum_amount")
                .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .addPaymentAttempt(
                    Invoice.PaymentAttempt.builder()
                        .id("id")
                        .amount("amount")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .paymentProvider(Invoice.PaymentAttempt.PaymentProvider.STRIPE)
                        .paymentProviderId("payment_provider_id")
                        .succeeded(true)
                        .build()
                )
                .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .shippingAddress(
                    Address.builder()
                        .city("city")
                        .country("country")
                        .line1("line1")
                        .line2("line2")
                        .postalCode("postal_code")
                        .state("state")
                        .build()
                )
                .status(Invoice.Status.ISSUED)
                .subscription(SubscriptionMinified.builder().id("VDGsT23osdLb84KD").build())
                .subtotal("8.00")
                .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .total("8.00")
                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .willAutoIssue(true)
                .build()

        assertThat(invoice.id()).isEqualTo("id")
        assertThat(invoice.amountDue()).isEqualTo("8.00")
        assertThat(invoice.autoCollection())
            .isEqualTo(
                Invoice.AutoCollection.builder()
                    .enabled(true)
                    .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .numAttempts(0L)
                    .previouslyAttemptedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(invoice.billingAddress())
            .contains(
                Address.builder()
                    .city("city")
                    .country("country")
                    .line1("line1")
                    .line2("line2")
                    .postalCode("postal_code")
                    .state("state")
                    .build()
            )
        assertThat(invoice.createdAt()).isEqualTo(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
        assertThat(invoice.creditNotes())
            .containsExactly(
                Invoice.CreditNote.builder()
                    .id("id")
                    .creditNoteNumber("credit_note_number")
                    .memo("memo")
                    .reason("reason")
                    .total("total")
                    .type("type")
                    .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                    .build()
            )
        assertThat(invoice.currency()).isEqualTo("USD")
        assertThat(invoice.customer())
            .isEqualTo(
                CustomerMinified.builder()
                    .id("id")
                    .externalCustomerId("external_customer_id")
                    .build()
            )
        assertThat(invoice.customerBalanceTransactions())
            .containsExactly(
                Invoice.CustomerBalanceTransaction.builder()
                    .id("cgZa3SXcsPTVyC4Y")
                    .action(Invoice.CustomerBalanceTransaction.Action.APPLIED_TO_INVOICE)
                    .amount("11.00")
                    .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                    .creditNote(CreditNoteTiny.builder().id("id").build())
                    .description("An optional description")
                    .endingBalance("22.00")
                    .invoice(InvoiceTiny.builder().id("gXcsPTVyC4YZa3Sc").build())
                    .startingBalance("33.00")
                    .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                    .build()
            )
        assertThat(invoice.customerTaxId())
            .contains(
                CustomerTaxId.builder()
                    .country(CustomerTaxId.Country.AD)
                    .type(CustomerTaxId.Type.AD_NRT)
                    .value("value")
                    .build()
            )
        assertThat(invoice._discount()).isEqualTo(JsonValue.from(mapOf<String, Any>()))
        assertThat(invoice.discounts())
            .containsExactly(
                InvoiceLevelDiscount.ofPercentage(
                    PercentageDiscount.builder()
                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(0.15)
                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                        .addFilter(
                            TransformPriceFilter.builder()
                                .field(TransformPriceFilter.Field.PRICE_ID)
                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .reason("reason")
                        .build()
                )
            )
        assertThat(invoice.dueDate()).contains(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
        assertThat(invoice.eligibleToIssueAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.hostedInvoiceUrl()).contains("hosted_invoice_url")
        assertThat(invoice.invoiceDate())
            .isEqualTo(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
        assertThat(invoice.invoiceNumber()).isEqualTo("JYEFHK-00001")
        assertThat(invoice.invoicePdf())
            .contains("https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb")
        assertThat(invoice.invoiceSource()).isEqualTo(Invoice.InvoiceSource.SUBSCRIPTION)
        assertThat(invoice.issueFailedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.issuedAt()).contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.lineItems())
            .containsExactly(
                Invoice.LineItem.builder()
                    .id("id")
                    .adjustedSubtotal("5.00")
                    .addAdjustment(
                        MonetaryUsageDiscountAdjustment.builder()
                            .id("id")
                            .adjustmentType(
                                MonetaryUsageDiscountAdjustment.AdjustmentType.USAGE_DISCOUNT
                            )
                            .amount("amount")
                            .addAppliesToPriceId("string")
                            .addFilter(
                                TransformPriceFilter.builder()
                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                    .operator(TransformPriceFilter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .isInvoiceLevel(true)
                            .reason("reason")
                            .usageDiscount(0.0)
                            .build()
                    )
                    .amount("7.00")
                    .creditsApplied("6.00")
                    .discount(
                        PercentageDiscount.builder()
                            .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                            .percentageDiscount(0.15)
                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                            .addFilter(
                                TransformPriceFilter.builder()
                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                    .operator(TransformPriceFilter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .reason("reason")
                            .build()
                    )
                    .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                    .filter("filter")
                    .grouping("grouping")
                    .maximum(
                        Maximum.builder()
                            .addAppliesToPriceId("string")
                            .addFilter(
                                TransformPriceFilter.builder()
                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                    .operator(TransformPriceFilter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .build()
                    )
                    .maximumAmount("maximum_amount")
                    .minimum(
                        Minimum.builder()
                            .addAppliesToPriceId("string")
                            .addFilter(
                                TransformPriceFilter.builder()
                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                    .operator(TransformPriceFilter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .build()
                    )
                    .minimumAmount("minimum_amount")
                    .name("Fixed Fee")
                    .partiallyInvoicedAmount("4.00")
                    .price(
                        Price.Unit.builder()
                            .id("id")
                            .billableMetric(BillableMetricTiny.builder().id("id").build())
                            .billingCycleConfiguration(
                                BillingCycleConfiguration.builder()
                                    .duration(0L)
                                    .durationUnit(BillingCycleConfiguration.DurationUnit.DAY)
                                    .build()
                            )
                            .cadence(Price.Unit.Cadence.ONE_TIME)
                            .conversionRate(0.0)
                            .unitConversionRateConfig(
                                ConversionRateUnitConfig.builder().unitAmount("unit_amount").build()
                            )
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .creditAllocation(
                                Allocation.builder()
                                    .allowsRollover(true)
                                    .currency("currency")
                                    .customExpiration(
                                        CustomExpiration.builder()
                                            .duration(0L)
                                            .durationUnit(CustomExpiration.DurationUnit.DAY)
                                            .build()
                                    )
                                    .build()
                            )
                            .currency("currency")
                            .discount(
                                PercentageDiscount.builder()
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .addFilter(
                                        TransformPriceFilter.builder()
                                            .field(TransformPriceFilter.Field.PRICE_ID)
                                            .operator(TransformPriceFilter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .reason("reason")
                                    .build()
                            )
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoicingCycleConfiguration(
                                BillingCycleConfiguration.builder()
                                    .duration(0L)
                                    .durationUnit(BillingCycleConfiguration.DurationUnit.DAY)
                                    .build()
                            )
                            .item(ItemSlim.builder().id("id").name("name").build())
                            .maximum(
                                Maximum.builder()
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        TransformPriceFilter.builder()
                                            .field(TransformPriceFilter.Field.PRICE_ID)
                                            .operator(TransformPriceFilter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .metadata(
                                Price.Unit.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .minimum(
                                Minimum.builder()
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        TransformPriceFilter.builder()
                                            .field(TransformPriceFilter.Field.PRICE_ID)
                                            .operator(TransformPriceFilter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .name("name")
                            .planPhaseOrder(0L)
                            .priceType(Price.Unit.PriceType.USAGE_PRICE)
                            .unitConfig(UnitConfig.builder().unitAmount("unit_amount").build())
                            .dimensionalPriceConfiguration(
                                DimensionalPriceConfiguration.builder()
                                    .addDimensionValue("string")
                                    .dimensionalPriceGroupId("dimensional_price_group_id")
                                    .build()
                            )
                            .build()
                    )
                    .quantity(1.0)
                    .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                    .addSubLineItem(
                        MatrixSubLineItem.builder()
                            .amount("9.00")
                            .grouping(
                                SubLineItemGrouping.builder().key("region").value("west").build()
                            )
                            .matrixConfig(
                                SubLineItemMatrixConfig.builder()
                                    .addDimensionValue("string")
                                    .build()
                            )
                            .name("Tier One")
                            .quantity(5.0)
                            .type(MatrixSubLineItem.Type.MATRIX)
                            .build()
                    )
                    .subtotal("9.00")
                    .addTaxAmount(
                        TaxAmount.builder()
                            .amount("amount")
                            .taxRateDescription("tax_rate_description")
                            .taxRatePercentage("tax_rate_percentage")
                            .build()
                    )
                    .addUsageCustomerId("string")
                    .build()
            )
        assertThat(invoice.maximum())
            .contains(
                Maximum.builder()
                    .addAppliesToPriceId("string")
                    .addFilter(
                        TransformPriceFilter.builder()
                            .field(TransformPriceFilter.Field.PRICE_ID)
                            .operator(TransformPriceFilter.Operator.INCLUDES)
                            .addValue("string")
                            .build()
                    )
                    .maximumAmount("maximum_amount")
                    .build()
            )
        assertThat(invoice.maximumAmount()).contains("maximum_amount")
        assertThat(invoice.memo()).contains("memo")
        assertThat(invoice.metadata())
            .isEqualTo(
                Invoice.Metadata.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
        assertThat(invoice.minimum())
            .contains(
                Minimum.builder()
                    .addAppliesToPriceId("string")
                    .addFilter(
                        TransformPriceFilter.builder()
                            .field(TransformPriceFilter.Field.PRICE_ID)
                            .operator(TransformPriceFilter.Operator.INCLUDES)
                            .addValue("string")
                            .build()
                    )
                    .minimumAmount("minimum_amount")
                    .build()
            )
        assertThat(invoice.minimumAmount()).contains("minimum_amount")
        assertThat(invoice.paidAt()).contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.paymentAttempts())
            .containsExactly(
                Invoice.PaymentAttempt.builder()
                    .id("id")
                    .amount("amount")
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .paymentProvider(Invoice.PaymentAttempt.PaymentProvider.STRIPE)
                    .paymentProviderId("payment_provider_id")
                    .succeeded(true)
                    .build()
            )
        assertThat(invoice.paymentFailedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.paymentStartedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.scheduledIssueAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.shippingAddress())
            .contains(
                Address.builder()
                    .city("city")
                    .country("country")
                    .line1("line1")
                    .line2("line2")
                    .postalCode("postal_code")
                    .state("state")
                    .build()
            )
        assertThat(invoice.status()).isEqualTo(Invoice.Status.ISSUED)
        assertThat(invoice.subscription())
            .contains(SubscriptionMinified.builder().id("VDGsT23osdLb84KD").build())
        assertThat(invoice.subtotal()).isEqualTo("8.00")
        assertThat(invoice.syncFailedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.total()).isEqualTo("8.00")
        assertThat(invoice.voidedAt()).contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoice.willAutoIssue()).isEqualTo(true)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val invoice =
            Invoice.builder()
                .id("id")
                .amountDue("8.00")
                .autoCollection(
                    Invoice.AutoCollection.builder()
                        .enabled(true)
                        .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .numAttempts(0L)
                        .previouslyAttemptedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .billingAddress(
                    Address.builder()
                        .city("city")
                        .country("country")
                        .line1("line1")
                        .line2("line2")
                        .postalCode("postal_code")
                        .state("state")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                .addCreditNote(
                    Invoice.CreditNote.builder()
                        .id("id")
                        .creditNoteNumber("credit_note_number")
                        .memo("memo")
                        .reason("reason")
                        .total("total")
                        .type("type")
                        .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                        .build()
                )
                .currency("USD")
                .customer(
                    CustomerMinified.builder()
                        .id("id")
                        .externalCustomerId("external_customer_id")
                        .build()
                )
                .addCustomerBalanceTransaction(
                    Invoice.CustomerBalanceTransaction.builder()
                        .id("cgZa3SXcsPTVyC4Y")
                        .action(Invoice.CustomerBalanceTransaction.Action.APPLIED_TO_INVOICE)
                        .amount("11.00")
                        .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                        .creditNote(CreditNoteTiny.builder().id("id").build())
                        .description("An optional description")
                        .endingBalance("22.00")
                        .invoice(InvoiceTiny.builder().id("gXcsPTVyC4YZa3Sc").build())
                        .startingBalance("33.00")
                        .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                        .build()
                )
                .customerTaxId(
                    CustomerTaxId.builder()
                        .country(CustomerTaxId.Country.AD)
                        .type(CustomerTaxId.Type.AD_NRT)
                        .value("value")
                        .build()
                )
                .discount(JsonValue.from(mapOf<String, Any>()))
                .addDiscount(
                    PercentageDiscount.builder()
                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(0.15)
                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                        .addFilter(
                            TransformPriceFilter.builder()
                                .field(TransformPriceFilter.Field.PRICE_ID)
                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .reason("reason")
                        .build()
                )
                .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .hostedInvoiceUrl("hosted_invoice_url")
                .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                .invoiceNumber("JYEFHK-00001")
                .invoicePdf("https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb")
                .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .addLineItem(
                    Invoice.LineItem.builder()
                        .id("id")
                        .adjustedSubtotal("5.00")
                        .addAdjustment(
                            MonetaryUsageDiscountAdjustment.builder()
                                .id("id")
                                .adjustmentType(
                                    MonetaryUsageDiscountAdjustment.AdjustmentType.USAGE_DISCOUNT
                                )
                                .amount("amount")
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .isInvoiceLevel(true)
                                .reason("reason")
                                .usageDiscount(0.0)
                                .build()
                        )
                        .amount("7.00")
                        .creditsApplied("6.00")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .reason("reason")
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                        .filter("filter")
                        .grouping("grouping")
                        .maximum(
                            Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .minimum(
                            Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("Fixed Fee")
                        .partiallyInvoicedAmount("4.00")
                        .price(
                            Price.Unit.builder()
                                .id("id")
                                .billableMetric(BillableMetricTiny.builder().id("id").build())
                                .billingCycleConfiguration(
                                    BillingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(BillingCycleConfiguration.DurationUnit.DAY)
                                        .build()
                                )
                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                .conversionRate(0.0)
                                .unitConversionRateConfig(
                                    ConversionRateUnitConfig.builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    Allocation.builder()
                                        .allowsRollover(true)
                                        .currency("currency")
                                        .customExpiration(
                                            CustomExpiration.builder()
                                                .duration(0L)
                                                .durationUnit(CustomExpiration.DurationUnit.DAY)
                                                .build()
                                        )
                                        .build()
                                )
                                .currency("currency")
                                .discount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoicingCycleConfiguration(
                                    BillingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(BillingCycleConfiguration.DurationUnit.DAY)
                                        .build()
                                )
                                .item(ItemSlim.builder().id("id").name("name").build())
                                .maximum(
                                    Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    Price.Unit.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .planPhaseOrder(0L)
                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                .unitConfig(UnitConfig.builder().unitAmount("unit_amount").build())
                                .dimensionalPriceConfiguration(
                                    DimensionalPriceConfiguration.builder()
                                        .addDimensionValue("string")
                                        .dimensionalPriceGroupId("dimensional_price_group_id")
                                        .build()
                                )
                                .build()
                        )
                        .quantity(1.0)
                        .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                        .addSubLineItem(
                            MatrixSubLineItem.builder()
                                .amount("9.00")
                                .grouping(
                                    SubLineItemGrouping.builder()
                                        .key("region")
                                        .value("west")
                                        .build()
                                )
                                .matrixConfig(
                                    SubLineItemMatrixConfig.builder()
                                        .addDimensionValue("string")
                                        .build()
                                )
                                .name("Tier One")
                                .quantity(5.0)
                                .type(MatrixSubLineItem.Type.MATRIX)
                                .build()
                        )
                        .subtotal("9.00")
                        .addTaxAmount(
                            TaxAmount.builder()
                                .amount("amount")
                                .taxRateDescription("tax_rate_description")
                                .taxRatePercentage("tax_rate_percentage")
                                .build()
                        )
                        .addUsageCustomerId("string")
                        .build()
                )
                .maximum(
                    Maximum.builder()
                        .addAppliesToPriceId("string")
                        .addFilter(
                            TransformPriceFilter.builder()
                                .field(TransformPriceFilter.Field.PRICE_ID)
                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .build()
                )
                .maximumAmount("maximum_amount")
                .memo("memo")
                .metadata(
                    Invoice.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .minimum(
                    Minimum.builder()
                        .addAppliesToPriceId("string")
                        .addFilter(
                            TransformPriceFilter.builder()
                                .field(TransformPriceFilter.Field.PRICE_ID)
                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                .addValue("string")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .build()
                )
                .minimumAmount("minimum_amount")
                .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .addPaymentAttempt(
                    Invoice.PaymentAttempt.builder()
                        .id("id")
                        .amount("amount")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .paymentProvider(Invoice.PaymentAttempt.PaymentProvider.STRIPE)
                        .paymentProviderId("payment_provider_id")
                        .succeeded(true)
                        .build()
                )
                .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .shippingAddress(
                    Address.builder()
                        .city("city")
                        .country("country")
                        .line1("line1")
                        .line2("line2")
                        .postalCode("postal_code")
                        .state("state")
                        .build()
                )
                .status(Invoice.Status.ISSUED)
                .subscription(SubscriptionMinified.builder().id("VDGsT23osdLb84KD").build())
                .subtotal("8.00")
                .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .total("8.00")
                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .willAutoIssue(true)
                .build()

        val roundtrippedInvoice =
            jsonMapper.readValue(jsonMapper.writeValueAsString(invoice), jacksonTypeRef<Invoice>())

        assertThat(roundtrippedInvoice).isEqualTo(invoice)
    }
}
