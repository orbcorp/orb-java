// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.JsonValue
import com.withorb.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SubscriptionPriceIntervalsResponseTest {

    @Test
    fun create() {
        val subscriptionPriceIntervalsResponse =
            SubscriptionPriceIntervalsResponse.builder()
                .id("id")
                .activePlanPhaseOrder(0L)
                .addAdjustmentInterval(
                    SubscriptionPriceIntervalsResponse.AdjustmentInterval.builder()
                        .id("id")
                        .adjustment(
                            SubscriptionPriceIntervalsResponse.AdjustmentInterval.Adjustment
                                .UsageDiscount
                                .builder()
                                .id("id")
                                .addAppliesToPriceId("string")
                                .isInvoiceLevel(true)
                                .planPhaseOrder(0L)
                                .reason("reason")
                                .usageDiscount(0.0)
                                .build()
                        )
                        .addAppliesToPriceIntervalId("string")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .autoCollection(true)
                .billingCycleAnchorConfiguration(
                    SubscriptionPriceIntervalsResponse.BillingCycleAnchorConfiguration.builder()
                        .day(1L)
                        .month(1L)
                        .year(0L)
                        .build()
                )
                .billingCycleDay(1L)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .customer(
                    Customer.builder()
                        .id("id")
                        .addAdditionalEmail("string")
                        .autoCollection(true)
                        .balance("balance")
                        .billingAddress(
                            Customer.BillingAddress.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currency("currency")
                        .email("email")
                        .emailDelivery(true)
                        .exemptFromAutomatedTax(true)
                        .externalCustomerId("external_customer_id")
                        .hierarchy(
                            Customer.Hierarchy.builder()
                                .addChild(
                                    Customer.Hierarchy.Child.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .parent(
                                    Customer.Hierarchy.Parent.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .build()
                        )
                        .metadata(
                            Customer.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .name("name")
                        .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                        .paymentProviderId("payment_provider_id")
                        .portalUrl("portal_url")
                        .shippingAddress(
                            Customer.ShippingAddress.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .taxId(
                            Customer.TaxId.builder()
                                .country(Customer.TaxId.Country.AD)
                                .type(Customer.TaxId.Type.AD_NRT)
                                .value("value")
                                .build()
                        )
                        .timezone("timezone")
                        .accountingSyncConfiguration(
                            Customer.AccountingSyncConfiguration.builder()
                                .addAccountingProvider(
                                    Customer.AccountingSyncConfiguration.AccountingProvider
                                        .builder()
                                        .externalProviderId("external_provider_id")
                                        .providerType(
                                            Customer.AccountingSyncConfiguration.AccountingProvider
                                                .ProviderType
                                                .QUICKBOOKS
                                        )
                                        .build()
                                )
                                .excluded(true)
                                .build()
                        )
                        .reportingConfiguration(
                            Customer.ReportingConfiguration.builder().exempt(true).build()
                        )
                        .build()
                )
                .defaultInvoiceMemo("default_invoice_memo")
                .addDiscountInterval(
                    SubscriptionPriceIntervalsResponse.DiscountInterval.Amount.builder()
                        .amountDiscount("amount_discount")
                        .addAppliesToPriceId("string")
                        .addAppliesToPriceIntervalId("string")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .addFixedFeeQuantitySchedule(
                    SubscriptionPriceIntervalsResponse.FixedFeeQuantitySchedule.builder()
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .priceId("price_id")
                        .quantity(0.0)
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .invoicingThreshold("invoicing_threshold")
                .addMaximumInterval(
                    SubscriptionPriceIntervalsResponse.MaximumInterval.builder()
                        .addAppliesToPriceId("string")
                        .addAppliesToPriceIntervalId("string")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .maximumAmount("maximum_amount")
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .metadata(
                    SubscriptionPriceIntervalsResponse.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .addMinimumInterval(
                    SubscriptionPriceIntervalsResponse.MinimumInterval.builder()
                        .addAppliesToPriceId("string")
                        .addAppliesToPriceIntervalId("string")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .minimumAmount("minimum_amount")
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .netTerms(0L)
                .pendingSubscriptionChange(
                    SubscriptionPriceIntervalsResponse.PendingSubscriptionChange.builder()
                        .id("id")
                        .build()
                )
                .plan(
                    Plan.builder()
                        .id("id")
                        .addAdjustment(
                            Plan.Adjustment.UsageDiscount.builder()
                                .id("id")
                                .addAppliesToPriceId("string")
                                .isInvoiceLevel(true)
                                .planPhaseOrder(0L)
                                .reason("reason")
                                .usageDiscount(0.0)
                                .build()
                        )
                        .basePlan(
                            Plan.BasePlan.builder()
                                .id("m2t5akQeh2obwxeU")
                                .externalPlanId("m2t5akQeh2obwxeU")
                                .name("Example plan")
                                .build()
                        )
                        .basePlanId("base_plan_id")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currency("currency")
                        .defaultInvoiceMemo("default_invoice_memo")
                        .description("description")
                        .discount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .externalPlanId("external_plan_id")
                        .invoicingCurrency("invoicing_currency")
                        .maximum(
                            Plan.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Plan.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Plan.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .netTerms(0L)
                        .addPlanPhase(
                            Plan.PlanPhase.builder()
                                .id("id")
                                .description("description")
                                .discount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .duration(0L)
                                .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                .maximum(
                                    Plan.PlanPhase.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .minimum(
                                    Plan.PlanPhase.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .order(0L)
                                .build()
                        )
                        .addPrice(
                            Price.Unit.builder()
                                .id("id")
                                .billableMetric(
                                    Price.Unit.BillableMetric.builder().id("id").build()
                                )
                                .billingCycleConfiguration(
                                    Price.Unit.BillingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.BillingCycleConfiguration.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                .conversionRate(0.0)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    Price.Unit.CreditAllocation.builder()
                                        .allowsRollover(true)
                                        .currency("currency")
                                        .build()
                                )
                                .currency("currency")
                                .discount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoicingCycleConfiguration(
                                    Price.Unit.InvoicingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .item(Price.Unit.Item.builder().id("id").name("name").build())
                                .maximum(
                                    Price.Unit.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    Price.Unit.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Price.Unit.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .planPhaseOrder(0L)
                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                .unitConfig(
                                    Price.Unit.UnitConfig.builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .dimensionalPriceConfiguration(
                                    Price.Unit.DimensionalPriceConfiguration.builder()
                                        .addDimensionValue("string")
                                        .dimensionalPriceGroupId("dimensional_price_group_id")
                                        .build()
                                )
                                .build()
                        )
                        .product(
                            Plan.Product.builder()
                                .id("id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .name("name")
                                .build()
                        )
                        .status(Plan.Status.ACTIVE)
                        .trialConfig(
                            Plan.TrialConfig.builder()
                                .trialPeriod(0L)
                                .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                                .build()
                        )
                        .version(0L)
                        .build()
                )
                .addPriceInterval(
                    SubscriptionPriceIntervalsResponse.PriceInterval.builder()
                        .id("id")
                        .billingCycleDay(0L)
                        .currentBillingPeriodEndDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .currentBillingPeriodStartDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .filter("filter")
                        .addFixedFeeQuantityTransition(
                            SubscriptionPriceIntervalsResponse.PriceInterval
                                .FixedFeeQuantityTransition
                                .builder()
                                .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .priceId("price_id")
                                .quantity(0L)
                                .build()
                        )
                        .price(
                            Price.Unit.builder()
                                .id("id")
                                .billableMetric(
                                    Price.Unit.BillableMetric.builder().id("id").build()
                                )
                                .billingCycleConfiguration(
                                    Price.Unit.BillingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.BillingCycleConfiguration.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                .conversionRate(0.0)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    Price.Unit.CreditAllocation.builder()
                                        .allowsRollover(true)
                                        .currency("currency")
                                        .build()
                                )
                                .currency("currency")
                                .discount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoicingCycleConfiguration(
                                    Price.Unit.InvoicingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .item(Price.Unit.Item.builder().id("id").name("name").build())
                                .maximum(
                                    Price.Unit.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    Price.Unit.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Price.Unit.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .planPhaseOrder(0L)
                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                .unitConfig(
                                    Price.Unit.UnitConfig.builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .dimensionalPriceConfiguration(
                                    Price.Unit.DimensionalPriceConfiguration.builder()
                                        .addDimensionValue("string")
                                        .dimensionalPriceGroupId("dimensional_price_group_id")
                                        .build()
                                )
                                .build()
                        )
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addUsageCustomerId("string")
                        .build()
                )
                .redeemedCoupon(
                    SubscriptionPriceIntervalsResponse.RedeemedCoupon.builder()
                        .couponId("coupon_id")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .status(SubscriptionPriceIntervalsResponse.Status.ACTIVE)
                .trialInfo(
                    SubscriptionPriceIntervalsResponse.TrialInfo.builder()
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .changedResources(
                    SubscriptionPriceIntervalsResponse.ChangedResources.builder()
                        .addCreatedCreditNote(
                            CreditNote.builder()
                                .id("id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditNoteNumber("credit_note_number")
                                .creditNotePdf("credit_note_pdf")
                                .customer(
                                    CreditNote.Customer.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .invoiceId("invoice_id")
                                .addLineItem(
                                    CreditNote.LineItem.builder()
                                        .id("id")
                                        .amount("amount")
                                        .itemId("item_id")
                                        .name("name")
                                        .quantity(0.0)
                                        .subtotal("subtotal")
                                        .addTaxAmount(
                                            CreditNote.LineItem.TaxAmount.builder()
                                                .amount("amount")
                                                .taxRateDescription("tax_rate_description")
                                                .taxRatePercentage("tax_rate_percentage")
                                                .build()
                                        )
                                        .addDiscount(
                                            CreditNote.LineItem.Discount.builder()
                                                .id("id")
                                                .amountApplied("amount_applied")
                                                .addAppliesToPriceId("string")
                                                .discountType(
                                                    CreditNote.LineItem.Discount.DiscountType
                                                        .PERCENTAGE
                                                )
                                                .percentageDiscount(0.0)
                                                .amountDiscount("amount_discount")
                                                .reason("reason")
                                                .build()
                                        )
                                        .build()
                                )
                                .maximumAmountAdjustment(
                                    CreditNote.MaximumAmountAdjustment.builder()
                                        .amountApplied("amount_applied")
                                        .discountType(
                                            CreditNote.MaximumAmountAdjustment.DiscountType
                                                .PERCENTAGE
                                        )
                                        .percentageDiscount(0.0)
                                        .addAppliesToPrice(
                                            CreditNote.MaximumAmountAdjustment.AppliesToPrice
                                                .builder()
                                                .id("id")
                                                .name("name")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .memo("memo")
                                .minimumAmountRefunded("minimum_amount_refunded")
                                .reason(CreditNote.Reason.DUPLICATE)
                                .subtotal("subtotal")
                                .total("total")
                                .type(CreditNote.Type.REFUND)
                                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addDiscount(
                                    CreditNote.Discount.builder()
                                        .amountApplied("amount_applied")
                                        .discountType(CreditNote.Discount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.0)
                                        .addAppliesToPrice(
                                            CreditNote.Discount.AppliesToPrice.builder()
                                                .id("id")
                                                .name("name")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .build()
                        )
                        .addCreatedInvoice(
                            Invoice.builder()
                                .id("id")
                                .amountDue("8.00")
                                .autoCollection(
                                    Invoice.AutoCollection.builder()
                                        .enabled(true)
                                        .nextAttemptAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .numAttempts(0L)
                                        .previouslyAttemptedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .build()
                                )
                                .billingAddress(
                                    Invoice.BillingAddress.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                .addCreditNote(
                                    Invoice.CreditNote.builder()
                                        .id("id")
                                        .creditNoteNumber("credit_note_number")
                                        .memo("memo")
                                        .reason("reason")
                                        .total("total")
                                        .type("type")
                                        .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                        .build()
                                )
                                .currency("USD")
                                .customer(
                                    Invoice.Customer.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .addCustomerBalanceTransaction(
                                    Invoice.CustomerBalanceTransaction.builder()
                                        .id("cgZa3SXcsPTVyC4Y")
                                        .action(
                                            Invoice.CustomerBalanceTransaction.Action
                                                .APPLIED_TO_INVOICE
                                        )
                                        .amount("11.00")
                                        .createdAt(
                                            OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                        )
                                        .creditNote(
                                            Invoice.CustomerBalanceTransaction.CreditNote.builder()
                                                .id("id")
                                                .build()
                                        )
                                        .description("An optional description")
                                        .endingBalance("22.00")
                                        .invoice(
                                            Invoice.CustomerBalanceTransaction.InnerInvoice
                                                .builder()
                                                .id("gXcsPTVyC4YZa3Sc")
                                                .build()
                                        )
                                        .startingBalance("33.00")
                                        .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                        .build()
                                )
                                .customerTaxId(
                                    Invoice.CustomerTaxId.builder()
                                        .country(Invoice.CustomerTaxId.Country.AD)
                                        .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                        .value("value")
                                        .build()
                                )
                                .discount(JsonValue.from(mapOf<String, Any>()))
                                .addDiscount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                                .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .hostedInvoiceUrl("hosted_invoice_url")
                                .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                                .invoiceNumber("JYEFHK-00001")
                                .invoicePdf(
                                    "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                                )
                                .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                                .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addLineItem(
                                    Invoice.LineItem.builder()
                                        .id("id")
                                        .adjustedSubtotal("5.00")
                                        .addAdjustment(
                                            Invoice.LineItem.Adjustment.UsageDiscount.builder()
                                                .id("id")
                                                .amount("amount")
                                                .addAppliesToPriceId("string")
                                                .isInvoiceLevel(true)
                                                .reason("reason")
                                                .usageDiscount(0.0)
                                                .build()
                                        )
                                        .amount("7.00")
                                        .creditsApplied("6.00")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .reason("reason")
                                                .build()
                                        )
                                        .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                        .filter("filter")
                                        .grouping("grouping")
                                        .maximum(
                                            Invoice.LineItem.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .minimum(
                                            Invoice.LineItem.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("Fixed Fee")
                                        .partiallyInvoicedAmount("4.00")
                                        .price(
                                            Price.Unit.builder()
                                                .id("id")
                                                .billableMetric(
                                                    Price.Unit.BillableMetric.builder()
                                                        .id("id")
                                                        .build()
                                                )
                                                .billingCycleConfiguration(
                                                    Price.Unit.BillingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            Price.Unit.BillingCycleConfiguration
                                                                .DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                                .conversionRate(0.0)
                                                .createdAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .creditAllocation(
                                                    Price.Unit.CreditAllocation.builder()
                                                        .allowsRollover(true)
                                                        .currency("currency")
                                                        .build()
                                                )
                                                .currency("currency")
                                                .discount(
                                                    PercentageDiscount.builder()
                                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                        .discountType(
                                                            PercentageDiscount.DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.15)
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .externalPriceId("external_price_id")
                                                .fixedPriceQuantity(0.0)
                                                .invoicingCycleConfiguration(
                                                    Price.Unit.InvoicingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            Price.Unit.InvoicingCycleConfiguration
                                                                .DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .item(
                                                    Price.Unit.Item.builder()
                                                        .id("id")
                                                        .name("name")
                                                        .build()
                                                )
                                                .maximum(
                                                    Price.Unit.Maximum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .maximumAmount("maximum_amount")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .metadata(
                                                    Price.Unit.Metadata.builder()
                                                        .putAdditionalProperty(
                                                            "foo",
                                                            JsonValue.from("string"),
                                                        )
                                                        .build()
                                                )
                                                .minimum(
                                                    Price.Unit.Minimum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .minimumAmount("minimum_amount")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .name("name")
                                                .planPhaseOrder(0L)
                                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                                .unitConfig(
                                                    Price.Unit.UnitConfig.builder()
                                                        .unitAmount("unit_amount")
                                                        .build()
                                                )
                                                .dimensionalPriceConfiguration(
                                                    Price.Unit.DimensionalPriceConfiguration
                                                        .builder()
                                                        .addDimensionValue("string")
                                                        .dimensionalPriceGroupId(
                                                            "dimensional_price_group_id"
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .quantity(1.0)
                                        .startDate(
                                            OffsetDateTime.parse("2022-02-01T08:00:00+00:00")
                                        )
                                        .addSubLineItem(
                                            Invoice.LineItem.SubLineItem.Matrix.builder()
                                                .amount("9.00")
                                                .grouping(
                                                    Invoice.LineItem.SubLineItem.Matrix.Grouping
                                                        .builder()
                                                        .key("region")
                                                        .value("west")
                                                        .build()
                                                )
                                                .matrixConfig(
                                                    Invoice.LineItem.SubLineItem.Matrix.MatrixConfig
                                                        .builder()
                                                        .addDimensionValue("string")
                                                        .build()
                                                )
                                                .name("Tier One")
                                                .quantity(5.0)
                                                .build()
                                        )
                                        .subtotal("9.00")
                                        .addTaxAmount(
                                            Invoice.LineItem.TaxAmount.builder()
                                                .amount("amount")
                                                .taxRateDescription("tax_rate_description")
                                                .taxRatePercentage("tax_rate_percentage")
                                                .build()
                                        )
                                        .addUsageCustomerId("string")
                                        .build()
                                )
                                .maximum(
                                    Invoice.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .memo("memo")
                                .metadata(
                                    Invoice.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Invoice.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addPaymentAttempt(
                                    Invoice.PaymentAttempt.builder()
                                        .id("id")
                                        .amount("amount")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .paymentProvider(
                                            Invoice.PaymentAttempt.PaymentProvider.STRIPE
                                        )
                                        .paymentProviderId("payment_provider_id")
                                        .succeeded(true)
                                        .build()
                                )
                                .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .shippingAddress(
                                    Invoice.ShippingAddress.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .status(Invoice.Status.ISSUED)
                                .subscription(
                                    Invoice.Subscription.builder().id("VDGsT23osdLb84KD").build()
                                )
                                .subtotal("8.00")
                                .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .total("8.00")
                                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .willAutoIssue(true)
                                .build()
                        )
                        .addVoidedCreditNote(
                            CreditNote.builder()
                                .id("id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditNoteNumber("credit_note_number")
                                .creditNotePdf("credit_note_pdf")
                                .customer(
                                    CreditNote.Customer.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .invoiceId("invoice_id")
                                .addLineItem(
                                    CreditNote.LineItem.builder()
                                        .id("id")
                                        .amount("amount")
                                        .itemId("item_id")
                                        .name("name")
                                        .quantity(0.0)
                                        .subtotal("subtotal")
                                        .addTaxAmount(
                                            CreditNote.LineItem.TaxAmount.builder()
                                                .amount("amount")
                                                .taxRateDescription("tax_rate_description")
                                                .taxRatePercentage("tax_rate_percentage")
                                                .build()
                                        )
                                        .addDiscount(
                                            CreditNote.LineItem.Discount.builder()
                                                .id("id")
                                                .amountApplied("amount_applied")
                                                .addAppliesToPriceId("string")
                                                .discountType(
                                                    CreditNote.LineItem.Discount.DiscountType
                                                        .PERCENTAGE
                                                )
                                                .percentageDiscount(0.0)
                                                .amountDiscount("amount_discount")
                                                .reason("reason")
                                                .build()
                                        )
                                        .build()
                                )
                                .maximumAmountAdjustment(
                                    CreditNote.MaximumAmountAdjustment.builder()
                                        .amountApplied("amount_applied")
                                        .discountType(
                                            CreditNote.MaximumAmountAdjustment.DiscountType
                                                .PERCENTAGE
                                        )
                                        .percentageDiscount(0.0)
                                        .addAppliesToPrice(
                                            CreditNote.MaximumAmountAdjustment.AppliesToPrice
                                                .builder()
                                                .id("id")
                                                .name("name")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .memo("memo")
                                .minimumAmountRefunded("minimum_amount_refunded")
                                .reason(CreditNote.Reason.DUPLICATE)
                                .subtotal("subtotal")
                                .total("total")
                                .type(CreditNote.Type.REFUND)
                                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addDiscount(
                                    CreditNote.Discount.builder()
                                        .amountApplied("amount_applied")
                                        .discountType(CreditNote.Discount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.0)
                                        .addAppliesToPrice(
                                            CreditNote.Discount.AppliesToPrice.builder()
                                                .id("id")
                                                .name("name")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .build()
                        )
                        .addVoidedInvoice(
                            Invoice.builder()
                                .id("id")
                                .amountDue("8.00")
                                .autoCollection(
                                    Invoice.AutoCollection.builder()
                                        .enabled(true)
                                        .nextAttemptAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .numAttempts(0L)
                                        .previouslyAttemptedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .build()
                                )
                                .billingAddress(
                                    Invoice.BillingAddress.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                .addCreditNote(
                                    Invoice.CreditNote.builder()
                                        .id("id")
                                        .creditNoteNumber("credit_note_number")
                                        .memo("memo")
                                        .reason("reason")
                                        .total("total")
                                        .type("type")
                                        .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                        .build()
                                )
                                .currency("USD")
                                .customer(
                                    Invoice.Customer.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .addCustomerBalanceTransaction(
                                    Invoice.CustomerBalanceTransaction.builder()
                                        .id("cgZa3SXcsPTVyC4Y")
                                        .action(
                                            Invoice.CustomerBalanceTransaction.Action
                                                .APPLIED_TO_INVOICE
                                        )
                                        .amount("11.00")
                                        .createdAt(
                                            OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                        )
                                        .creditNote(
                                            Invoice.CustomerBalanceTransaction.CreditNote.builder()
                                                .id("id")
                                                .build()
                                        )
                                        .description("An optional description")
                                        .endingBalance("22.00")
                                        .invoice(
                                            Invoice.CustomerBalanceTransaction.InnerInvoice
                                                .builder()
                                                .id("gXcsPTVyC4YZa3Sc")
                                                .build()
                                        )
                                        .startingBalance("33.00")
                                        .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                        .build()
                                )
                                .customerTaxId(
                                    Invoice.CustomerTaxId.builder()
                                        .country(Invoice.CustomerTaxId.Country.AD)
                                        .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                        .value("value")
                                        .build()
                                )
                                .discount(JsonValue.from(mapOf<String, Any>()))
                                .addDiscount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                                .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .hostedInvoiceUrl("hosted_invoice_url")
                                .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                                .invoiceNumber("JYEFHK-00001")
                                .invoicePdf(
                                    "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                                )
                                .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                                .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addLineItem(
                                    Invoice.LineItem.builder()
                                        .id("id")
                                        .adjustedSubtotal("5.00")
                                        .addAdjustment(
                                            Invoice.LineItem.Adjustment.UsageDiscount.builder()
                                                .id("id")
                                                .amount("amount")
                                                .addAppliesToPriceId("string")
                                                .isInvoiceLevel(true)
                                                .reason("reason")
                                                .usageDiscount(0.0)
                                                .build()
                                        )
                                        .amount("7.00")
                                        .creditsApplied("6.00")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .reason("reason")
                                                .build()
                                        )
                                        .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                        .filter("filter")
                                        .grouping("grouping")
                                        .maximum(
                                            Invoice.LineItem.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .minimum(
                                            Invoice.LineItem.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("Fixed Fee")
                                        .partiallyInvoicedAmount("4.00")
                                        .price(
                                            Price.Unit.builder()
                                                .id("id")
                                                .billableMetric(
                                                    Price.Unit.BillableMetric.builder()
                                                        .id("id")
                                                        .build()
                                                )
                                                .billingCycleConfiguration(
                                                    Price.Unit.BillingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            Price.Unit.BillingCycleConfiguration
                                                                .DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                                .conversionRate(0.0)
                                                .createdAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .creditAllocation(
                                                    Price.Unit.CreditAllocation.builder()
                                                        .allowsRollover(true)
                                                        .currency("currency")
                                                        .build()
                                                )
                                                .currency("currency")
                                                .discount(
                                                    PercentageDiscount.builder()
                                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                        .discountType(
                                                            PercentageDiscount.DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.15)
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .externalPriceId("external_price_id")
                                                .fixedPriceQuantity(0.0)
                                                .invoicingCycleConfiguration(
                                                    Price.Unit.InvoicingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            Price.Unit.InvoicingCycleConfiguration
                                                                .DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .item(
                                                    Price.Unit.Item.builder()
                                                        .id("id")
                                                        .name("name")
                                                        .build()
                                                )
                                                .maximum(
                                                    Price.Unit.Maximum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .maximumAmount("maximum_amount")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .metadata(
                                                    Price.Unit.Metadata.builder()
                                                        .putAdditionalProperty(
                                                            "foo",
                                                            JsonValue.from("string"),
                                                        )
                                                        .build()
                                                )
                                                .minimum(
                                                    Price.Unit.Minimum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .minimumAmount("minimum_amount")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .name("name")
                                                .planPhaseOrder(0L)
                                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                                .unitConfig(
                                                    Price.Unit.UnitConfig.builder()
                                                        .unitAmount("unit_amount")
                                                        .build()
                                                )
                                                .dimensionalPriceConfiguration(
                                                    Price.Unit.DimensionalPriceConfiguration
                                                        .builder()
                                                        .addDimensionValue("string")
                                                        .dimensionalPriceGroupId(
                                                            "dimensional_price_group_id"
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .quantity(1.0)
                                        .startDate(
                                            OffsetDateTime.parse("2022-02-01T08:00:00+00:00")
                                        )
                                        .addSubLineItem(
                                            Invoice.LineItem.SubLineItem.Matrix.builder()
                                                .amount("9.00")
                                                .grouping(
                                                    Invoice.LineItem.SubLineItem.Matrix.Grouping
                                                        .builder()
                                                        .key("region")
                                                        .value("west")
                                                        .build()
                                                )
                                                .matrixConfig(
                                                    Invoice.LineItem.SubLineItem.Matrix.MatrixConfig
                                                        .builder()
                                                        .addDimensionValue("string")
                                                        .build()
                                                )
                                                .name("Tier One")
                                                .quantity(5.0)
                                                .build()
                                        )
                                        .subtotal("9.00")
                                        .addTaxAmount(
                                            Invoice.LineItem.TaxAmount.builder()
                                                .amount("amount")
                                                .taxRateDescription("tax_rate_description")
                                                .taxRatePercentage("tax_rate_percentage")
                                                .build()
                                        )
                                        .addUsageCustomerId("string")
                                        .build()
                                )
                                .maximum(
                                    Invoice.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .memo("memo")
                                .metadata(
                                    Invoice.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Invoice.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addPaymentAttempt(
                                    Invoice.PaymentAttempt.builder()
                                        .id("id")
                                        .amount("amount")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .paymentProvider(
                                            Invoice.PaymentAttempt.PaymentProvider.STRIPE
                                        )
                                        .paymentProviderId("payment_provider_id")
                                        .succeeded(true)
                                        .build()
                                )
                                .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .shippingAddress(
                                    Invoice.ShippingAddress.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .status(Invoice.Status.ISSUED)
                                .subscription(
                                    Invoice.Subscription.builder().id("VDGsT23osdLb84KD").build()
                                )
                                .subtotal("8.00")
                                .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .total("8.00")
                                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .willAutoIssue(true)
                                .build()
                        )
                        .build()
                )
                .build()

        assertThat(subscriptionPriceIntervalsResponse.id()).isEqualTo("id")
        assertThat(subscriptionPriceIntervalsResponse.activePlanPhaseOrder()).contains(0L)
        assertThat(subscriptionPriceIntervalsResponse.adjustmentIntervals())
            .containsExactly(
                SubscriptionPriceIntervalsResponse.AdjustmentInterval.builder()
                    .id("id")
                    .adjustment(
                        SubscriptionPriceIntervalsResponse.AdjustmentInterval.Adjustment
                            .UsageDiscount
                            .builder()
                            .id("id")
                            .addAppliesToPriceId("string")
                            .isInvoiceLevel(true)
                            .planPhaseOrder(0L)
                            .reason("reason")
                            .usageDiscount(0.0)
                            .build()
                    )
                    .addAppliesToPriceIntervalId("string")
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionPriceIntervalsResponse.autoCollection()).contains(true)
        assertThat(subscriptionPriceIntervalsResponse.billingCycleAnchorConfiguration())
            .isEqualTo(
                SubscriptionPriceIntervalsResponse.BillingCycleAnchorConfiguration.builder()
                    .day(1L)
                    .month(1L)
                    .year(0L)
                    .build()
            )
        assertThat(subscriptionPriceIntervalsResponse.billingCycleDay()).isEqualTo(1L)
        assertThat(subscriptionPriceIntervalsResponse.createdAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionPriceIntervalsResponse.currentBillingPeriodEndDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionPriceIntervalsResponse.currentBillingPeriodStartDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionPriceIntervalsResponse.customer())
            .isEqualTo(
                Customer.builder()
                    .id("id")
                    .addAdditionalEmail("string")
                    .autoCollection(true)
                    .balance("balance")
                    .billingAddress(
                        Customer.BillingAddress.builder()
                            .city("city")
                            .country("country")
                            .line1("line1")
                            .line2("line2")
                            .postalCode("postal_code")
                            .state("state")
                            .build()
                    )
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currency("currency")
                    .email("email")
                    .emailDelivery(true)
                    .exemptFromAutomatedTax(true)
                    .externalCustomerId("external_customer_id")
                    .hierarchy(
                        Customer.Hierarchy.builder()
                            .addChild(
                                Customer.Hierarchy.Child.builder()
                                    .id("id")
                                    .externalCustomerId("external_customer_id")
                                    .build()
                            )
                            .parent(
                                Customer.Hierarchy.Parent.builder()
                                    .id("id")
                                    .externalCustomerId("external_customer_id")
                                    .build()
                            )
                            .build()
                    )
                    .metadata(
                        Customer.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .name("name")
                    .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                    .paymentProviderId("payment_provider_id")
                    .portalUrl("portal_url")
                    .shippingAddress(
                        Customer.ShippingAddress.builder()
                            .city("city")
                            .country("country")
                            .line1("line1")
                            .line2("line2")
                            .postalCode("postal_code")
                            .state("state")
                            .build()
                    )
                    .taxId(
                        Customer.TaxId.builder()
                            .country(Customer.TaxId.Country.AD)
                            .type(Customer.TaxId.Type.AD_NRT)
                            .value("value")
                            .build()
                    )
                    .timezone("timezone")
                    .accountingSyncConfiguration(
                        Customer.AccountingSyncConfiguration.builder()
                            .addAccountingProvider(
                                Customer.AccountingSyncConfiguration.AccountingProvider.builder()
                                    .externalProviderId("external_provider_id")
                                    .providerType(
                                        Customer.AccountingSyncConfiguration.AccountingProvider
                                            .ProviderType
                                            .QUICKBOOKS
                                    )
                                    .build()
                            )
                            .excluded(true)
                            .build()
                    )
                    .reportingConfiguration(
                        Customer.ReportingConfiguration.builder().exempt(true).build()
                    )
                    .build()
            )
        assertThat(subscriptionPriceIntervalsResponse.defaultInvoiceMemo())
            .contains("default_invoice_memo")
        assertThat(subscriptionPriceIntervalsResponse.discountIntervals())
            .containsExactly(
                SubscriptionPriceIntervalsResponse.DiscountInterval.ofAmount(
                    SubscriptionPriceIntervalsResponse.DiscountInterval.Amount.builder()
                        .amountDiscount("amount_discount")
                        .addAppliesToPriceId("string")
                        .addAppliesToPriceIntervalId("string")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
            )
        assertThat(subscriptionPriceIntervalsResponse.endDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionPriceIntervalsResponse.fixedFeeQuantitySchedule())
            .containsExactly(
                SubscriptionPriceIntervalsResponse.FixedFeeQuantitySchedule.builder()
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .priceId("price_id")
                    .quantity(0.0)
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionPriceIntervalsResponse.invoicingThreshold())
            .contains("invoicing_threshold")
        assertThat(subscriptionPriceIntervalsResponse.maximumIntervals())
            .containsExactly(
                SubscriptionPriceIntervalsResponse.MaximumInterval.builder()
                    .addAppliesToPriceId("string")
                    .addAppliesToPriceIntervalId("string")
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .maximumAmount("maximum_amount")
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionPriceIntervalsResponse.metadata())
            .isEqualTo(
                SubscriptionPriceIntervalsResponse.Metadata.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
        assertThat(subscriptionPriceIntervalsResponse.minimumIntervals())
            .containsExactly(
                SubscriptionPriceIntervalsResponse.MinimumInterval.builder()
                    .addAppliesToPriceId("string")
                    .addAppliesToPriceIntervalId("string")
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .minimumAmount("minimum_amount")
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionPriceIntervalsResponse.netTerms()).isEqualTo(0L)
        assertThat(subscriptionPriceIntervalsResponse.pendingSubscriptionChange())
            .contains(
                SubscriptionPriceIntervalsResponse.PendingSubscriptionChange.builder()
                    .id("id")
                    .build()
            )
        assertThat(subscriptionPriceIntervalsResponse.plan())
            .isEqualTo(
                Plan.builder()
                    .id("id")
                    .addAdjustment(
                        Plan.Adjustment.UsageDiscount.builder()
                            .id("id")
                            .addAppliesToPriceId("string")
                            .isInvoiceLevel(true)
                            .planPhaseOrder(0L)
                            .reason("reason")
                            .usageDiscount(0.0)
                            .build()
                    )
                    .basePlan(
                        Plan.BasePlan.builder()
                            .id("m2t5akQeh2obwxeU")
                            .externalPlanId("m2t5akQeh2obwxeU")
                            .name("Example plan")
                            .build()
                    )
                    .basePlanId("base_plan_id")
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currency("currency")
                    .defaultInvoiceMemo("default_invoice_memo")
                    .description("description")
                    .discount(
                        PercentageDiscount.builder()
                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                            .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                            .percentageDiscount(0.15)
                            .reason("reason")
                            .build()
                    )
                    .externalPlanId("external_plan_id")
                    .invoicingCurrency("invoicing_currency")
                    .maximum(
                        Plan.Maximum.builder()
                            .addAppliesToPriceId("string")
                            .maximumAmount("maximum_amount")
                            .build()
                    )
                    .maximumAmount("maximum_amount")
                    .metadata(
                        Plan.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .minimum(
                        Plan.Minimum.builder()
                            .addAppliesToPriceId("string")
                            .minimumAmount("minimum_amount")
                            .build()
                    )
                    .minimumAmount("minimum_amount")
                    .name("name")
                    .netTerms(0L)
                    .addPlanPhase(
                        Plan.PlanPhase.builder()
                            .id("id")
                            .description("description")
                            .discount(
                                PercentageDiscount.builder()
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .reason("reason")
                                    .build()
                            )
                            .duration(0L)
                            .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                            .maximum(
                                Plan.PlanPhase.Maximum.builder()
                                    .addAppliesToPriceId("string")
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .minimum(
                                Plan.PlanPhase.Minimum.builder()
                                    .addAppliesToPriceId("string")
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .name("name")
                            .order(0L)
                            .build()
                    )
                    .addPrice(
                        Price.Unit.builder()
                            .id("id")
                            .billableMetric(Price.Unit.BillableMetric.builder().id("id").build())
                            .billingCycleConfiguration(
                                Price.Unit.BillingCycleConfiguration.builder()
                                    .duration(0L)
                                    .durationUnit(
                                        Price.Unit.BillingCycleConfiguration.DurationUnit.DAY
                                    )
                                    .build()
                            )
                            .cadence(Price.Unit.Cadence.ONE_TIME)
                            .conversionRate(0.0)
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .creditAllocation(
                                Price.Unit.CreditAllocation.builder()
                                    .allowsRollover(true)
                                    .currency("currency")
                                    .build()
                            )
                            .currency("currency")
                            .discount(
                                PercentageDiscount.builder()
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .reason("reason")
                                    .build()
                            )
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoicingCycleConfiguration(
                                Price.Unit.InvoicingCycleConfiguration.builder()
                                    .duration(0L)
                                    .durationUnit(
                                        Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                    )
                                    .build()
                            )
                            .item(Price.Unit.Item.builder().id("id").name("name").build())
                            .maximum(
                                Price.Unit.Maximum.builder()
                                    .addAppliesToPriceId("string")
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .metadata(
                                Price.Unit.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .minimum(
                                Price.Unit.Minimum.builder()
                                    .addAppliesToPriceId("string")
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .name("name")
                            .planPhaseOrder(0L)
                            .priceType(Price.Unit.PriceType.USAGE_PRICE)
                            .unitConfig(
                                Price.Unit.UnitConfig.builder().unitAmount("unit_amount").build()
                            )
                            .dimensionalPriceConfiguration(
                                Price.Unit.DimensionalPriceConfiguration.builder()
                                    .addDimensionValue("string")
                                    .dimensionalPriceGroupId("dimensional_price_group_id")
                                    .build()
                            )
                            .build()
                    )
                    .product(
                        Plan.Product.builder()
                            .id("id")
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .name("name")
                            .build()
                    )
                    .status(Plan.Status.ACTIVE)
                    .trialConfig(
                        Plan.TrialConfig.builder()
                            .trialPeriod(0L)
                            .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                            .build()
                    )
                    .version(0L)
                    .build()
            )
        assertThat(subscriptionPriceIntervalsResponse.priceIntervals())
            .containsExactly(
                SubscriptionPriceIntervalsResponse.PriceInterval.builder()
                    .id("id")
                    .billingCycleDay(0L)
                    .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .filter("filter")
                    .addFixedFeeQuantityTransition(
                        SubscriptionPriceIntervalsResponse.PriceInterval.FixedFeeQuantityTransition
                            .builder()
                            .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .priceId("price_id")
                            .quantity(0L)
                            .build()
                    )
                    .price(
                        Price.Unit.builder()
                            .id("id")
                            .billableMetric(Price.Unit.BillableMetric.builder().id("id").build())
                            .billingCycleConfiguration(
                                Price.Unit.BillingCycleConfiguration.builder()
                                    .duration(0L)
                                    .durationUnit(
                                        Price.Unit.BillingCycleConfiguration.DurationUnit.DAY
                                    )
                                    .build()
                            )
                            .cadence(Price.Unit.Cadence.ONE_TIME)
                            .conversionRate(0.0)
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .creditAllocation(
                                Price.Unit.CreditAllocation.builder()
                                    .allowsRollover(true)
                                    .currency("currency")
                                    .build()
                            )
                            .currency("currency")
                            .discount(
                                PercentageDiscount.builder()
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .reason("reason")
                                    .build()
                            )
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoicingCycleConfiguration(
                                Price.Unit.InvoicingCycleConfiguration.builder()
                                    .duration(0L)
                                    .durationUnit(
                                        Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                    )
                                    .build()
                            )
                            .item(Price.Unit.Item.builder().id("id").name("name").build())
                            .maximum(
                                Price.Unit.Maximum.builder()
                                    .addAppliesToPriceId("string")
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .metadata(
                                Price.Unit.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .minimum(
                                Price.Unit.Minimum.builder()
                                    .addAppliesToPriceId("string")
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .name("name")
                            .planPhaseOrder(0L)
                            .priceType(Price.Unit.PriceType.USAGE_PRICE)
                            .unitConfig(
                                Price.Unit.UnitConfig.builder().unitAmount("unit_amount").build()
                            )
                            .dimensionalPriceConfiguration(
                                Price.Unit.DimensionalPriceConfiguration.builder()
                                    .addDimensionValue("string")
                                    .dimensionalPriceGroupId("dimensional_price_group_id")
                                    .build()
                            )
                            .build()
                    )
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .addUsageCustomerId("string")
                    .build()
            )
        assertThat(subscriptionPriceIntervalsResponse.redeemedCoupon())
            .contains(
                SubscriptionPriceIntervalsResponse.RedeemedCoupon.builder()
                    .couponId("coupon_id")
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionPriceIntervalsResponse.startDate())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionPriceIntervalsResponse.status())
            .isEqualTo(SubscriptionPriceIntervalsResponse.Status.ACTIVE)
        assertThat(subscriptionPriceIntervalsResponse.trialInfo())
            .isEqualTo(
                SubscriptionPriceIntervalsResponse.TrialInfo.builder()
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionPriceIntervalsResponse.changedResources())
            .contains(
                SubscriptionPriceIntervalsResponse.ChangedResources.builder()
                    .addCreatedCreditNote(
                        CreditNote.builder()
                            .id("id")
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .creditNoteNumber("credit_note_number")
                            .creditNotePdf("credit_note_pdf")
                            .customer(
                                CreditNote.Customer.builder()
                                    .id("id")
                                    .externalCustomerId("external_customer_id")
                                    .build()
                            )
                            .invoiceId("invoice_id")
                            .addLineItem(
                                CreditNote.LineItem.builder()
                                    .id("id")
                                    .amount("amount")
                                    .itemId("item_id")
                                    .name("name")
                                    .quantity(0.0)
                                    .subtotal("subtotal")
                                    .addTaxAmount(
                                        CreditNote.LineItem.TaxAmount.builder()
                                            .amount("amount")
                                            .taxRateDescription("tax_rate_description")
                                            .taxRatePercentage("tax_rate_percentage")
                                            .build()
                                    )
                                    .addDiscount(
                                        CreditNote.LineItem.Discount.builder()
                                            .id("id")
                                            .amountApplied("amount_applied")
                                            .addAppliesToPriceId("string")
                                            .discountType(
                                                CreditNote.LineItem.Discount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.0)
                                            .amountDiscount("amount_discount")
                                            .reason("reason")
                                            .build()
                                    )
                                    .build()
                            )
                            .maximumAmountAdjustment(
                                CreditNote.MaximumAmountAdjustment.builder()
                                    .amountApplied("amount_applied")
                                    .discountType(
                                        CreditNote.MaximumAmountAdjustment.DiscountType.PERCENTAGE
                                    )
                                    .percentageDiscount(0.0)
                                    .addAppliesToPrice(
                                        CreditNote.MaximumAmountAdjustment.AppliesToPrice.builder()
                                            .id("id")
                                            .name("name")
                                            .build()
                                    )
                                    .reason("reason")
                                    .build()
                            )
                            .memo("memo")
                            .minimumAmountRefunded("minimum_amount_refunded")
                            .reason(CreditNote.Reason.DUPLICATE)
                            .subtotal("subtotal")
                            .total("total")
                            .type(CreditNote.Type.REFUND)
                            .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addDiscount(
                                CreditNote.Discount.builder()
                                    .amountApplied("amount_applied")
                                    .discountType(CreditNote.Discount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.0)
                                    .addAppliesToPrice(
                                        CreditNote.Discount.AppliesToPrice.builder()
                                            .id("id")
                                            .name("name")
                                            .build()
                                    )
                                    .reason("reason")
                                    .build()
                            )
                            .build()
                    )
                    .addCreatedInvoice(
                        Invoice.builder()
                            .id("id")
                            .amountDue("8.00")
                            .autoCollection(
                                Invoice.AutoCollection.builder()
                                    .enabled(true)
                                    .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .numAttempts(0L)
                                    .previouslyAttemptedAt(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                                    .build()
                            )
                            .billingAddress(
                                Invoice.BillingAddress.builder()
                                    .city("city")
                                    .country("country")
                                    .line1("line1")
                                    .line2("line2")
                                    .postalCode("postal_code")
                                    .state("state")
                                    .build()
                            )
                            .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                            .addCreditNote(
                                Invoice.CreditNote.builder()
                                    .id("id")
                                    .creditNoteNumber("credit_note_number")
                                    .memo("memo")
                                    .reason("reason")
                                    .total("total")
                                    .type("type")
                                    .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                    .build()
                            )
                            .currency("USD")
                            .customer(
                                Invoice.Customer.builder()
                                    .id("id")
                                    .externalCustomerId("external_customer_id")
                                    .build()
                            )
                            .addCustomerBalanceTransaction(
                                Invoice.CustomerBalanceTransaction.builder()
                                    .id("cgZa3SXcsPTVyC4Y")
                                    .action(
                                        Invoice.CustomerBalanceTransaction.Action.APPLIED_TO_INVOICE
                                    )
                                    .amount("11.00")
                                    .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                    .creditNote(
                                        Invoice.CustomerBalanceTransaction.CreditNote.builder()
                                            .id("id")
                                            .build()
                                    )
                                    .description("An optional description")
                                    .endingBalance("22.00")
                                    .invoice(
                                        Invoice.CustomerBalanceTransaction.InnerInvoice.builder()
                                            .id("gXcsPTVyC4YZa3Sc")
                                            .build()
                                    )
                                    .startingBalance("33.00")
                                    .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                    .build()
                            )
                            .customerTaxId(
                                Invoice.CustomerTaxId.builder()
                                    .country(Invoice.CustomerTaxId.Country.AD)
                                    .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                    .value("value")
                                    .build()
                            )
                            .discount(JsonValue.from(mapOf<String, Any>()))
                            .addDiscount(
                                PercentageDiscount.builder()
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .reason("reason")
                                    .build()
                            )
                            .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                            .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .hostedInvoiceUrl("hosted_invoice_url")
                            .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                            .invoiceNumber("JYEFHK-00001")
                            .invoicePdf(
                                "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                            )
                            .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                            .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addLineItem(
                                Invoice.LineItem.builder()
                                    .id("id")
                                    .adjustedSubtotal("5.00")
                                    .addAdjustment(
                                        Invoice.LineItem.Adjustment.UsageDiscount.builder()
                                            .id("id")
                                            .amount("amount")
                                            .addAppliesToPriceId("string")
                                            .isInvoiceLevel(true)
                                            .reason("reason")
                                            .usageDiscount(0.0)
                                            .build()
                                    )
                                    .amount("7.00")
                                    .creditsApplied("6.00")
                                    .discount(
                                        PercentageDiscount.builder()
                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .reason("reason")
                                            .build()
                                    )
                                    .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                    .filter("filter")
                                    .grouping("grouping")
                                    .maximum(
                                        Invoice.LineItem.Maximum.builder()
                                            .addAppliesToPriceId("string")
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .minimum(
                                        Invoice.LineItem.Minimum.builder()
                                            .addAppliesToPriceId("string")
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .name("Fixed Fee")
                                    .partiallyInvoicedAmount("4.00")
                                    .price(
                                        Price.Unit.builder()
                                            .id("id")
                                            .billableMetric(
                                                Price.Unit.BillableMetric.builder().id("id").build()
                                            )
                                            .billingCycleConfiguration(
                                                Price.Unit.BillingCycleConfiguration.builder()
                                                    .duration(0L)
                                                    .durationUnit(
                                                        Price.Unit.BillingCycleConfiguration
                                                            .DurationUnit
                                                            .DAY
                                                    )
                                                    .build()
                                            )
                                            .cadence(Price.Unit.Cadence.ONE_TIME)
                                            .conversionRate(0.0)
                                            .createdAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .creditAllocation(
                                                Price.Unit.CreditAllocation.builder()
                                                    .allowsRollover(true)
                                                    .currency("currency")
                                                    .build()
                                            )
                                            .currency("currency")
                                            .discount(
                                                PercentageDiscount.builder()
                                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                    .discountType(
                                                        PercentageDiscount.DiscountType.PERCENTAGE
                                                    )
                                                    .percentageDiscount(0.15)
                                                    .reason("reason")
                                                    .build()
                                            )
                                            .externalPriceId("external_price_id")
                                            .fixedPriceQuantity(0.0)
                                            .invoicingCycleConfiguration(
                                                Price.Unit.InvoicingCycleConfiguration.builder()
                                                    .duration(0L)
                                                    .durationUnit(
                                                        Price.Unit.InvoicingCycleConfiguration
                                                            .DurationUnit
                                                            .DAY
                                                    )
                                                    .build()
                                            )
                                            .item(
                                                Price.Unit.Item.builder()
                                                    .id("id")
                                                    .name("name")
                                                    .build()
                                            )
                                            .maximum(
                                                Price.Unit.Maximum.builder()
                                                    .addAppliesToPriceId("string")
                                                    .maximumAmount("maximum_amount")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .metadata(
                                                Price.Unit.Metadata.builder()
                                                    .putAdditionalProperty(
                                                        "foo",
                                                        JsonValue.from("string"),
                                                    )
                                                    .build()
                                            )
                                            .minimum(
                                                Price.Unit.Minimum.builder()
                                                    .addAppliesToPriceId("string")
                                                    .minimumAmount("minimum_amount")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .name("name")
                                            .planPhaseOrder(0L)
                                            .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                            .unitConfig(
                                                Price.Unit.UnitConfig.builder()
                                                    .unitAmount("unit_amount")
                                                    .build()
                                            )
                                            .dimensionalPriceConfiguration(
                                                Price.Unit.DimensionalPriceConfiguration.builder()
                                                    .addDimensionValue("string")
                                                    .dimensionalPriceGroupId(
                                                        "dimensional_price_group_id"
                                                    )
                                                    .build()
                                            )
                                            .build()
                                    )
                                    .quantity(1.0)
                                    .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                    .addSubLineItem(
                                        Invoice.LineItem.SubLineItem.Matrix.builder()
                                            .amount("9.00")
                                            .grouping(
                                                Invoice.LineItem.SubLineItem.Matrix.Grouping
                                                    .builder()
                                                    .key("region")
                                                    .value("west")
                                                    .build()
                                            )
                                            .matrixConfig(
                                                Invoice.LineItem.SubLineItem.Matrix.MatrixConfig
                                                    .builder()
                                                    .addDimensionValue("string")
                                                    .build()
                                            )
                                            .name("Tier One")
                                            .quantity(5.0)
                                            .build()
                                    )
                                    .subtotal("9.00")
                                    .addTaxAmount(
                                        Invoice.LineItem.TaxAmount.builder()
                                            .amount("amount")
                                            .taxRateDescription("tax_rate_description")
                                            .taxRatePercentage("tax_rate_percentage")
                                            .build()
                                    )
                                    .addUsageCustomerId("string")
                                    .build()
                            )
                            .maximum(
                                Invoice.Maximum.builder()
                                    .addAppliesToPriceId("string")
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .memo("memo")
                            .metadata(
                                Invoice.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .minimum(
                                Invoice.Minimum.builder()
                                    .addAppliesToPriceId("string")
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addPaymentAttempt(
                                Invoice.PaymentAttempt.builder()
                                    .id("id")
                                    .amount("amount")
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .paymentProvider(Invoice.PaymentAttempt.PaymentProvider.STRIPE)
                                    .paymentProviderId("payment_provider_id")
                                    .succeeded(true)
                                    .build()
                            )
                            .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .shippingAddress(
                                Invoice.ShippingAddress.builder()
                                    .city("city")
                                    .country("country")
                                    .line1("line1")
                                    .line2("line2")
                                    .postalCode("postal_code")
                                    .state("state")
                                    .build()
                            )
                            .status(Invoice.Status.ISSUED)
                            .subscription(
                                Invoice.Subscription.builder().id("VDGsT23osdLb84KD").build()
                            )
                            .subtotal("8.00")
                            .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .total("8.00")
                            .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .willAutoIssue(true)
                            .build()
                    )
                    .addVoidedCreditNote(
                        CreditNote.builder()
                            .id("id")
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .creditNoteNumber("credit_note_number")
                            .creditNotePdf("credit_note_pdf")
                            .customer(
                                CreditNote.Customer.builder()
                                    .id("id")
                                    .externalCustomerId("external_customer_id")
                                    .build()
                            )
                            .invoiceId("invoice_id")
                            .addLineItem(
                                CreditNote.LineItem.builder()
                                    .id("id")
                                    .amount("amount")
                                    .itemId("item_id")
                                    .name("name")
                                    .quantity(0.0)
                                    .subtotal("subtotal")
                                    .addTaxAmount(
                                        CreditNote.LineItem.TaxAmount.builder()
                                            .amount("amount")
                                            .taxRateDescription("tax_rate_description")
                                            .taxRatePercentage("tax_rate_percentage")
                                            .build()
                                    )
                                    .addDiscount(
                                        CreditNote.LineItem.Discount.builder()
                                            .id("id")
                                            .amountApplied("amount_applied")
                                            .addAppliesToPriceId("string")
                                            .discountType(
                                                CreditNote.LineItem.Discount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.0)
                                            .amountDiscount("amount_discount")
                                            .reason("reason")
                                            .build()
                                    )
                                    .build()
                            )
                            .maximumAmountAdjustment(
                                CreditNote.MaximumAmountAdjustment.builder()
                                    .amountApplied("amount_applied")
                                    .discountType(
                                        CreditNote.MaximumAmountAdjustment.DiscountType.PERCENTAGE
                                    )
                                    .percentageDiscount(0.0)
                                    .addAppliesToPrice(
                                        CreditNote.MaximumAmountAdjustment.AppliesToPrice.builder()
                                            .id("id")
                                            .name("name")
                                            .build()
                                    )
                                    .reason("reason")
                                    .build()
                            )
                            .memo("memo")
                            .minimumAmountRefunded("minimum_amount_refunded")
                            .reason(CreditNote.Reason.DUPLICATE)
                            .subtotal("subtotal")
                            .total("total")
                            .type(CreditNote.Type.REFUND)
                            .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addDiscount(
                                CreditNote.Discount.builder()
                                    .amountApplied("amount_applied")
                                    .discountType(CreditNote.Discount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.0)
                                    .addAppliesToPrice(
                                        CreditNote.Discount.AppliesToPrice.builder()
                                            .id("id")
                                            .name("name")
                                            .build()
                                    )
                                    .reason("reason")
                                    .build()
                            )
                            .build()
                    )
                    .addVoidedInvoice(
                        Invoice.builder()
                            .id("id")
                            .amountDue("8.00")
                            .autoCollection(
                                Invoice.AutoCollection.builder()
                                    .enabled(true)
                                    .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .numAttempts(0L)
                                    .previouslyAttemptedAt(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                                    .build()
                            )
                            .billingAddress(
                                Invoice.BillingAddress.builder()
                                    .city("city")
                                    .country("country")
                                    .line1("line1")
                                    .line2("line2")
                                    .postalCode("postal_code")
                                    .state("state")
                                    .build()
                            )
                            .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                            .addCreditNote(
                                Invoice.CreditNote.builder()
                                    .id("id")
                                    .creditNoteNumber("credit_note_number")
                                    .memo("memo")
                                    .reason("reason")
                                    .total("total")
                                    .type("type")
                                    .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                    .build()
                            )
                            .currency("USD")
                            .customer(
                                Invoice.Customer.builder()
                                    .id("id")
                                    .externalCustomerId("external_customer_id")
                                    .build()
                            )
                            .addCustomerBalanceTransaction(
                                Invoice.CustomerBalanceTransaction.builder()
                                    .id("cgZa3SXcsPTVyC4Y")
                                    .action(
                                        Invoice.CustomerBalanceTransaction.Action.APPLIED_TO_INVOICE
                                    )
                                    .amount("11.00")
                                    .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                    .creditNote(
                                        Invoice.CustomerBalanceTransaction.CreditNote.builder()
                                            .id("id")
                                            .build()
                                    )
                                    .description("An optional description")
                                    .endingBalance("22.00")
                                    .invoice(
                                        Invoice.CustomerBalanceTransaction.InnerInvoice.builder()
                                            .id("gXcsPTVyC4YZa3Sc")
                                            .build()
                                    )
                                    .startingBalance("33.00")
                                    .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                    .build()
                            )
                            .customerTaxId(
                                Invoice.CustomerTaxId.builder()
                                    .country(Invoice.CustomerTaxId.Country.AD)
                                    .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                    .value("value")
                                    .build()
                            )
                            .discount(JsonValue.from(mapOf<String, Any>()))
                            .addDiscount(
                                PercentageDiscount.builder()
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .reason("reason")
                                    .build()
                            )
                            .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                            .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .hostedInvoiceUrl("hosted_invoice_url")
                            .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                            .invoiceNumber("JYEFHK-00001")
                            .invoicePdf(
                                "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                            )
                            .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                            .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addLineItem(
                                Invoice.LineItem.builder()
                                    .id("id")
                                    .adjustedSubtotal("5.00")
                                    .addAdjustment(
                                        Invoice.LineItem.Adjustment.UsageDiscount.builder()
                                            .id("id")
                                            .amount("amount")
                                            .addAppliesToPriceId("string")
                                            .isInvoiceLevel(true)
                                            .reason("reason")
                                            .usageDiscount(0.0)
                                            .build()
                                    )
                                    .amount("7.00")
                                    .creditsApplied("6.00")
                                    .discount(
                                        PercentageDiscount.builder()
                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .reason("reason")
                                            .build()
                                    )
                                    .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                    .filter("filter")
                                    .grouping("grouping")
                                    .maximum(
                                        Invoice.LineItem.Maximum.builder()
                                            .addAppliesToPriceId("string")
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .minimum(
                                        Invoice.LineItem.Minimum.builder()
                                            .addAppliesToPriceId("string")
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .name("Fixed Fee")
                                    .partiallyInvoicedAmount("4.00")
                                    .price(
                                        Price.Unit.builder()
                                            .id("id")
                                            .billableMetric(
                                                Price.Unit.BillableMetric.builder().id("id").build()
                                            )
                                            .billingCycleConfiguration(
                                                Price.Unit.BillingCycleConfiguration.builder()
                                                    .duration(0L)
                                                    .durationUnit(
                                                        Price.Unit.BillingCycleConfiguration
                                                            .DurationUnit
                                                            .DAY
                                                    )
                                                    .build()
                                            )
                                            .cadence(Price.Unit.Cadence.ONE_TIME)
                                            .conversionRate(0.0)
                                            .createdAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .creditAllocation(
                                                Price.Unit.CreditAllocation.builder()
                                                    .allowsRollover(true)
                                                    .currency("currency")
                                                    .build()
                                            )
                                            .currency("currency")
                                            .discount(
                                                PercentageDiscount.builder()
                                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                    .discountType(
                                                        PercentageDiscount.DiscountType.PERCENTAGE
                                                    )
                                                    .percentageDiscount(0.15)
                                                    .reason("reason")
                                                    .build()
                                            )
                                            .externalPriceId("external_price_id")
                                            .fixedPriceQuantity(0.0)
                                            .invoicingCycleConfiguration(
                                                Price.Unit.InvoicingCycleConfiguration.builder()
                                                    .duration(0L)
                                                    .durationUnit(
                                                        Price.Unit.InvoicingCycleConfiguration
                                                            .DurationUnit
                                                            .DAY
                                                    )
                                                    .build()
                                            )
                                            .item(
                                                Price.Unit.Item.builder()
                                                    .id("id")
                                                    .name("name")
                                                    .build()
                                            )
                                            .maximum(
                                                Price.Unit.Maximum.builder()
                                                    .addAppliesToPriceId("string")
                                                    .maximumAmount("maximum_amount")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .metadata(
                                                Price.Unit.Metadata.builder()
                                                    .putAdditionalProperty(
                                                        "foo",
                                                        JsonValue.from("string"),
                                                    )
                                                    .build()
                                            )
                                            .minimum(
                                                Price.Unit.Minimum.builder()
                                                    .addAppliesToPriceId("string")
                                                    .minimumAmount("minimum_amount")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .name("name")
                                            .planPhaseOrder(0L)
                                            .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                            .unitConfig(
                                                Price.Unit.UnitConfig.builder()
                                                    .unitAmount("unit_amount")
                                                    .build()
                                            )
                                            .dimensionalPriceConfiguration(
                                                Price.Unit.DimensionalPriceConfiguration.builder()
                                                    .addDimensionValue("string")
                                                    .dimensionalPriceGroupId(
                                                        "dimensional_price_group_id"
                                                    )
                                                    .build()
                                            )
                                            .build()
                                    )
                                    .quantity(1.0)
                                    .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                    .addSubLineItem(
                                        Invoice.LineItem.SubLineItem.Matrix.builder()
                                            .amount("9.00")
                                            .grouping(
                                                Invoice.LineItem.SubLineItem.Matrix.Grouping
                                                    .builder()
                                                    .key("region")
                                                    .value("west")
                                                    .build()
                                            )
                                            .matrixConfig(
                                                Invoice.LineItem.SubLineItem.Matrix.MatrixConfig
                                                    .builder()
                                                    .addDimensionValue("string")
                                                    .build()
                                            )
                                            .name("Tier One")
                                            .quantity(5.0)
                                            .build()
                                    )
                                    .subtotal("9.00")
                                    .addTaxAmount(
                                        Invoice.LineItem.TaxAmount.builder()
                                            .amount("amount")
                                            .taxRateDescription("tax_rate_description")
                                            .taxRatePercentage("tax_rate_percentage")
                                            .build()
                                    )
                                    .addUsageCustomerId("string")
                                    .build()
                            )
                            .maximum(
                                Invoice.Maximum.builder()
                                    .addAppliesToPriceId("string")
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .memo("memo")
                            .metadata(
                                Invoice.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .minimum(
                                Invoice.Minimum.builder()
                                    .addAppliesToPriceId("string")
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addPaymentAttempt(
                                Invoice.PaymentAttempt.builder()
                                    .id("id")
                                    .amount("amount")
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .paymentProvider(Invoice.PaymentAttempt.PaymentProvider.STRIPE)
                                    .paymentProviderId("payment_provider_id")
                                    .succeeded(true)
                                    .build()
                            )
                            .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .shippingAddress(
                                Invoice.ShippingAddress.builder()
                                    .city("city")
                                    .country("country")
                                    .line1("line1")
                                    .line2("line2")
                                    .postalCode("postal_code")
                                    .state("state")
                                    .build()
                            )
                            .status(Invoice.Status.ISSUED)
                            .subscription(
                                Invoice.Subscription.builder().id("VDGsT23osdLb84KD").build()
                            )
                            .subtotal("8.00")
                            .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .total("8.00")
                            .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .willAutoIssue(true)
                            .build()
                    )
                    .build()
            )
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val subscriptionPriceIntervalsResponse =
            SubscriptionPriceIntervalsResponse.builder()
                .id("id")
                .activePlanPhaseOrder(0L)
                .addAdjustmentInterval(
                    SubscriptionPriceIntervalsResponse.AdjustmentInterval.builder()
                        .id("id")
                        .adjustment(
                            SubscriptionPriceIntervalsResponse.AdjustmentInterval.Adjustment
                                .UsageDiscount
                                .builder()
                                .id("id")
                                .addAppliesToPriceId("string")
                                .isInvoiceLevel(true)
                                .planPhaseOrder(0L)
                                .reason("reason")
                                .usageDiscount(0.0)
                                .build()
                        )
                        .addAppliesToPriceIntervalId("string")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .autoCollection(true)
                .billingCycleAnchorConfiguration(
                    SubscriptionPriceIntervalsResponse.BillingCycleAnchorConfiguration.builder()
                        .day(1L)
                        .month(1L)
                        .year(0L)
                        .build()
                )
                .billingCycleDay(1L)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .customer(
                    Customer.builder()
                        .id("id")
                        .addAdditionalEmail("string")
                        .autoCollection(true)
                        .balance("balance")
                        .billingAddress(
                            Customer.BillingAddress.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currency("currency")
                        .email("email")
                        .emailDelivery(true)
                        .exemptFromAutomatedTax(true)
                        .externalCustomerId("external_customer_id")
                        .hierarchy(
                            Customer.Hierarchy.builder()
                                .addChild(
                                    Customer.Hierarchy.Child.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .parent(
                                    Customer.Hierarchy.Parent.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .build()
                        )
                        .metadata(
                            Customer.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .name("name")
                        .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                        .paymentProviderId("payment_provider_id")
                        .portalUrl("portal_url")
                        .shippingAddress(
                            Customer.ShippingAddress.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .taxId(
                            Customer.TaxId.builder()
                                .country(Customer.TaxId.Country.AD)
                                .type(Customer.TaxId.Type.AD_NRT)
                                .value("value")
                                .build()
                        )
                        .timezone("timezone")
                        .accountingSyncConfiguration(
                            Customer.AccountingSyncConfiguration.builder()
                                .addAccountingProvider(
                                    Customer.AccountingSyncConfiguration.AccountingProvider
                                        .builder()
                                        .externalProviderId("external_provider_id")
                                        .providerType(
                                            Customer.AccountingSyncConfiguration.AccountingProvider
                                                .ProviderType
                                                .QUICKBOOKS
                                        )
                                        .build()
                                )
                                .excluded(true)
                                .build()
                        )
                        .reportingConfiguration(
                            Customer.ReportingConfiguration.builder().exempt(true).build()
                        )
                        .build()
                )
                .defaultInvoiceMemo("default_invoice_memo")
                .addDiscountInterval(
                    SubscriptionPriceIntervalsResponse.DiscountInterval.Amount.builder()
                        .amountDiscount("amount_discount")
                        .addAppliesToPriceId("string")
                        .addAppliesToPriceIntervalId("string")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .addFixedFeeQuantitySchedule(
                    SubscriptionPriceIntervalsResponse.FixedFeeQuantitySchedule.builder()
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .priceId("price_id")
                        .quantity(0.0)
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .invoicingThreshold("invoicing_threshold")
                .addMaximumInterval(
                    SubscriptionPriceIntervalsResponse.MaximumInterval.builder()
                        .addAppliesToPriceId("string")
                        .addAppliesToPriceIntervalId("string")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .maximumAmount("maximum_amount")
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .metadata(
                    SubscriptionPriceIntervalsResponse.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .addMinimumInterval(
                    SubscriptionPriceIntervalsResponse.MinimumInterval.builder()
                        .addAppliesToPriceId("string")
                        .addAppliesToPriceIntervalId("string")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .minimumAmount("minimum_amount")
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .netTerms(0L)
                .pendingSubscriptionChange(
                    SubscriptionPriceIntervalsResponse.PendingSubscriptionChange.builder()
                        .id("id")
                        .build()
                )
                .plan(
                    Plan.builder()
                        .id("id")
                        .addAdjustment(
                            Plan.Adjustment.UsageDiscount.builder()
                                .id("id")
                                .addAppliesToPriceId("string")
                                .isInvoiceLevel(true)
                                .planPhaseOrder(0L)
                                .reason("reason")
                                .usageDiscount(0.0)
                                .build()
                        )
                        .basePlan(
                            Plan.BasePlan.builder()
                                .id("m2t5akQeh2obwxeU")
                                .externalPlanId("m2t5akQeh2obwxeU")
                                .name("Example plan")
                                .build()
                        )
                        .basePlanId("base_plan_id")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currency("currency")
                        .defaultInvoiceMemo("default_invoice_memo")
                        .description("description")
                        .discount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .externalPlanId("external_plan_id")
                        .invoicingCurrency("invoicing_currency")
                        .maximum(
                            Plan.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Plan.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Plan.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .netTerms(0L)
                        .addPlanPhase(
                            Plan.PlanPhase.builder()
                                .id("id")
                                .description("description")
                                .discount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .duration(0L)
                                .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                .maximum(
                                    Plan.PlanPhase.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .minimum(
                                    Plan.PlanPhase.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .order(0L)
                                .build()
                        )
                        .addPrice(
                            Price.Unit.builder()
                                .id("id")
                                .billableMetric(
                                    Price.Unit.BillableMetric.builder().id("id").build()
                                )
                                .billingCycleConfiguration(
                                    Price.Unit.BillingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.BillingCycleConfiguration.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                .conversionRate(0.0)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    Price.Unit.CreditAllocation.builder()
                                        .allowsRollover(true)
                                        .currency("currency")
                                        .build()
                                )
                                .currency("currency")
                                .discount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoicingCycleConfiguration(
                                    Price.Unit.InvoicingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .item(Price.Unit.Item.builder().id("id").name("name").build())
                                .maximum(
                                    Price.Unit.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    Price.Unit.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Price.Unit.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .planPhaseOrder(0L)
                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                .unitConfig(
                                    Price.Unit.UnitConfig.builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .dimensionalPriceConfiguration(
                                    Price.Unit.DimensionalPriceConfiguration.builder()
                                        .addDimensionValue("string")
                                        .dimensionalPriceGroupId("dimensional_price_group_id")
                                        .build()
                                )
                                .build()
                        )
                        .product(
                            Plan.Product.builder()
                                .id("id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .name("name")
                                .build()
                        )
                        .status(Plan.Status.ACTIVE)
                        .trialConfig(
                            Plan.TrialConfig.builder()
                                .trialPeriod(0L)
                                .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                                .build()
                        )
                        .version(0L)
                        .build()
                )
                .addPriceInterval(
                    SubscriptionPriceIntervalsResponse.PriceInterval.builder()
                        .id("id")
                        .billingCycleDay(0L)
                        .currentBillingPeriodEndDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .currentBillingPeriodStartDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .filter("filter")
                        .addFixedFeeQuantityTransition(
                            SubscriptionPriceIntervalsResponse.PriceInterval
                                .FixedFeeQuantityTransition
                                .builder()
                                .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .priceId("price_id")
                                .quantity(0L)
                                .build()
                        )
                        .price(
                            Price.Unit.builder()
                                .id("id")
                                .billableMetric(
                                    Price.Unit.BillableMetric.builder().id("id").build()
                                )
                                .billingCycleConfiguration(
                                    Price.Unit.BillingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.BillingCycleConfiguration.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                .conversionRate(0.0)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    Price.Unit.CreditAllocation.builder()
                                        .allowsRollover(true)
                                        .currency("currency")
                                        .build()
                                )
                                .currency("currency")
                                .discount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoicingCycleConfiguration(
                                    Price.Unit.InvoicingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .item(Price.Unit.Item.builder().id("id").name("name").build())
                                .maximum(
                                    Price.Unit.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    Price.Unit.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Price.Unit.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .planPhaseOrder(0L)
                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                .unitConfig(
                                    Price.Unit.UnitConfig.builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .dimensionalPriceConfiguration(
                                    Price.Unit.DimensionalPriceConfiguration.builder()
                                        .addDimensionValue("string")
                                        .dimensionalPriceGroupId("dimensional_price_group_id")
                                        .build()
                                )
                                .build()
                        )
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addUsageCustomerId("string")
                        .build()
                )
                .redeemedCoupon(
                    SubscriptionPriceIntervalsResponse.RedeemedCoupon.builder()
                        .couponId("coupon_id")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .status(SubscriptionPriceIntervalsResponse.Status.ACTIVE)
                .trialInfo(
                    SubscriptionPriceIntervalsResponse.TrialInfo.builder()
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .changedResources(
                    SubscriptionPriceIntervalsResponse.ChangedResources.builder()
                        .addCreatedCreditNote(
                            CreditNote.builder()
                                .id("id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditNoteNumber("credit_note_number")
                                .creditNotePdf("credit_note_pdf")
                                .customer(
                                    CreditNote.Customer.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .invoiceId("invoice_id")
                                .addLineItem(
                                    CreditNote.LineItem.builder()
                                        .id("id")
                                        .amount("amount")
                                        .itemId("item_id")
                                        .name("name")
                                        .quantity(0.0)
                                        .subtotal("subtotal")
                                        .addTaxAmount(
                                            CreditNote.LineItem.TaxAmount.builder()
                                                .amount("amount")
                                                .taxRateDescription("tax_rate_description")
                                                .taxRatePercentage("tax_rate_percentage")
                                                .build()
                                        )
                                        .addDiscount(
                                            CreditNote.LineItem.Discount.builder()
                                                .id("id")
                                                .amountApplied("amount_applied")
                                                .addAppliesToPriceId("string")
                                                .discountType(
                                                    CreditNote.LineItem.Discount.DiscountType
                                                        .PERCENTAGE
                                                )
                                                .percentageDiscount(0.0)
                                                .amountDiscount("amount_discount")
                                                .reason("reason")
                                                .build()
                                        )
                                        .build()
                                )
                                .maximumAmountAdjustment(
                                    CreditNote.MaximumAmountAdjustment.builder()
                                        .amountApplied("amount_applied")
                                        .discountType(
                                            CreditNote.MaximumAmountAdjustment.DiscountType
                                                .PERCENTAGE
                                        )
                                        .percentageDiscount(0.0)
                                        .addAppliesToPrice(
                                            CreditNote.MaximumAmountAdjustment.AppliesToPrice
                                                .builder()
                                                .id("id")
                                                .name("name")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .memo("memo")
                                .minimumAmountRefunded("minimum_amount_refunded")
                                .reason(CreditNote.Reason.DUPLICATE)
                                .subtotal("subtotal")
                                .total("total")
                                .type(CreditNote.Type.REFUND)
                                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addDiscount(
                                    CreditNote.Discount.builder()
                                        .amountApplied("amount_applied")
                                        .discountType(CreditNote.Discount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.0)
                                        .addAppliesToPrice(
                                            CreditNote.Discount.AppliesToPrice.builder()
                                                .id("id")
                                                .name("name")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .build()
                        )
                        .addCreatedInvoice(
                            Invoice.builder()
                                .id("id")
                                .amountDue("8.00")
                                .autoCollection(
                                    Invoice.AutoCollection.builder()
                                        .enabled(true)
                                        .nextAttemptAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .numAttempts(0L)
                                        .previouslyAttemptedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .build()
                                )
                                .billingAddress(
                                    Invoice.BillingAddress.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                .addCreditNote(
                                    Invoice.CreditNote.builder()
                                        .id("id")
                                        .creditNoteNumber("credit_note_number")
                                        .memo("memo")
                                        .reason("reason")
                                        .total("total")
                                        .type("type")
                                        .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                        .build()
                                )
                                .currency("USD")
                                .customer(
                                    Invoice.Customer.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .addCustomerBalanceTransaction(
                                    Invoice.CustomerBalanceTransaction.builder()
                                        .id("cgZa3SXcsPTVyC4Y")
                                        .action(
                                            Invoice.CustomerBalanceTransaction.Action
                                                .APPLIED_TO_INVOICE
                                        )
                                        .amount("11.00")
                                        .createdAt(
                                            OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                        )
                                        .creditNote(
                                            Invoice.CustomerBalanceTransaction.CreditNote.builder()
                                                .id("id")
                                                .build()
                                        )
                                        .description("An optional description")
                                        .endingBalance("22.00")
                                        .invoice(
                                            Invoice.CustomerBalanceTransaction.InnerInvoice
                                                .builder()
                                                .id("gXcsPTVyC4YZa3Sc")
                                                .build()
                                        )
                                        .startingBalance("33.00")
                                        .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                        .build()
                                )
                                .customerTaxId(
                                    Invoice.CustomerTaxId.builder()
                                        .country(Invoice.CustomerTaxId.Country.AD)
                                        .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                        .value("value")
                                        .build()
                                )
                                .discount(JsonValue.from(mapOf<String, Any>()))
                                .addDiscount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                                .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .hostedInvoiceUrl("hosted_invoice_url")
                                .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                                .invoiceNumber("JYEFHK-00001")
                                .invoicePdf(
                                    "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                                )
                                .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                                .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addLineItem(
                                    Invoice.LineItem.builder()
                                        .id("id")
                                        .adjustedSubtotal("5.00")
                                        .addAdjustment(
                                            Invoice.LineItem.Adjustment.UsageDiscount.builder()
                                                .id("id")
                                                .amount("amount")
                                                .addAppliesToPriceId("string")
                                                .isInvoiceLevel(true)
                                                .reason("reason")
                                                .usageDiscount(0.0)
                                                .build()
                                        )
                                        .amount("7.00")
                                        .creditsApplied("6.00")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .reason("reason")
                                                .build()
                                        )
                                        .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                        .filter("filter")
                                        .grouping("grouping")
                                        .maximum(
                                            Invoice.LineItem.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .minimum(
                                            Invoice.LineItem.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("Fixed Fee")
                                        .partiallyInvoicedAmount("4.00")
                                        .price(
                                            Price.Unit.builder()
                                                .id("id")
                                                .billableMetric(
                                                    Price.Unit.BillableMetric.builder()
                                                        .id("id")
                                                        .build()
                                                )
                                                .billingCycleConfiguration(
                                                    Price.Unit.BillingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            Price.Unit.BillingCycleConfiguration
                                                                .DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                                .conversionRate(0.0)
                                                .createdAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .creditAllocation(
                                                    Price.Unit.CreditAllocation.builder()
                                                        .allowsRollover(true)
                                                        .currency("currency")
                                                        .build()
                                                )
                                                .currency("currency")
                                                .discount(
                                                    PercentageDiscount.builder()
                                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                        .discountType(
                                                            PercentageDiscount.DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.15)
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .externalPriceId("external_price_id")
                                                .fixedPriceQuantity(0.0)
                                                .invoicingCycleConfiguration(
                                                    Price.Unit.InvoicingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            Price.Unit.InvoicingCycleConfiguration
                                                                .DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .item(
                                                    Price.Unit.Item.builder()
                                                        .id("id")
                                                        .name("name")
                                                        .build()
                                                )
                                                .maximum(
                                                    Price.Unit.Maximum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .maximumAmount("maximum_amount")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .metadata(
                                                    Price.Unit.Metadata.builder()
                                                        .putAdditionalProperty(
                                                            "foo",
                                                            JsonValue.from("string"),
                                                        )
                                                        .build()
                                                )
                                                .minimum(
                                                    Price.Unit.Minimum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .minimumAmount("minimum_amount")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .name("name")
                                                .planPhaseOrder(0L)
                                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                                .unitConfig(
                                                    Price.Unit.UnitConfig.builder()
                                                        .unitAmount("unit_amount")
                                                        .build()
                                                )
                                                .dimensionalPriceConfiguration(
                                                    Price.Unit.DimensionalPriceConfiguration
                                                        .builder()
                                                        .addDimensionValue("string")
                                                        .dimensionalPriceGroupId(
                                                            "dimensional_price_group_id"
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .quantity(1.0)
                                        .startDate(
                                            OffsetDateTime.parse("2022-02-01T08:00:00+00:00")
                                        )
                                        .addSubLineItem(
                                            Invoice.LineItem.SubLineItem.Matrix.builder()
                                                .amount("9.00")
                                                .grouping(
                                                    Invoice.LineItem.SubLineItem.Matrix.Grouping
                                                        .builder()
                                                        .key("region")
                                                        .value("west")
                                                        .build()
                                                )
                                                .matrixConfig(
                                                    Invoice.LineItem.SubLineItem.Matrix.MatrixConfig
                                                        .builder()
                                                        .addDimensionValue("string")
                                                        .build()
                                                )
                                                .name("Tier One")
                                                .quantity(5.0)
                                                .build()
                                        )
                                        .subtotal("9.00")
                                        .addTaxAmount(
                                            Invoice.LineItem.TaxAmount.builder()
                                                .amount("amount")
                                                .taxRateDescription("tax_rate_description")
                                                .taxRatePercentage("tax_rate_percentage")
                                                .build()
                                        )
                                        .addUsageCustomerId("string")
                                        .build()
                                )
                                .maximum(
                                    Invoice.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .memo("memo")
                                .metadata(
                                    Invoice.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Invoice.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addPaymentAttempt(
                                    Invoice.PaymentAttempt.builder()
                                        .id("id")
                                        .amount("amount")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .paymentProvider(
                                            Invoice.PaymentAttempt.PaymentProvider.STRIPE
                                        )
                                        .paymentProviderId("payment_provider_id")
                                        .succeeded(true)
                                        .build()
                                )
                                .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .shippingAddress(
                                    Invoice.ShippingAddress.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .status(Invoice.Status.ISSUED)
                                .subscription(
                                    Invoice.Subscription.builder().id("VDGsT23osdLb84KD").build()
                                )
                                .subtotal("8.00")
                                .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .total("8.00")
                                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .willAutoIssue(true)
                                .build()
                        )
                        .addVoidedCreditNote(
                            CreditNote.builder()
                                .id("id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditNoteNumber("credit_note_number")
                                .creditNotePdf("credit_note_pdf")
                                .customer(
                                    CreditNote.Customer.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .invoiceId("invoice_id")
                                .addLineItem(
                                    CreditNote.LineItem.builder()
                                        .id("id")
                                        .amount("amount")
                                        .itemId("item_id")
                                        .name("name")
                                        .quantity(0.0)
                                        .subtotal("subtotal")
                                        .addTaxAmount(
                                            CreditNote.LineItem.TaxAmount.builder()
                                                .amount("amount")
                                                .taxRateDescription("tax_rate_description")
                                                .taxRatePercentage("tax_rate_percentage")
                                                .build()
                                        )
                                        .addDiscount(
                                            CreditNote.LineItem.Discount.builder()
                                                .id("id")
                                                .amountApplied("amount_applied")
                                                .addAppliesToPriceId("string")
                                                .discountType(
                                                    CreditNote.LineItem.Discount.DiscountType
                                                        .PERCENTAGE
                                                )
                                                .percentageDiscount(0.0)
                                                .amountDiscount("amount_discount")
                                                .reason("reason")
                                                .build()
                                        )
                                        .build()
                                )
                                .maximumAmountAdjustment(
                                    CreditNote.MaximumAmountAdjustment.builder()
                                        .amountApplied("amount_applied")
                                        .discountType(
                                            CreditNote.MaximumAmountAdjustment.DiscountType
                                                .PERCENTAGE
                                        )
                                        .percentageDiscount(0.0)
                                        .addAppliesToPrice(
                                            CreditNote.MaximumAmountAdjustment.AppliesToPrice
                                                .builder()
                                                .id("id")
                                                .name("name")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .memo("memo")
                                .minimumAmountRefunded("minimum_amount_refunded")
                                .reason(CreditNote.Reason.DUPLICATE)
                                .subtotal("subtotal")
                                .total("total")
                                .type(CreditNote.Type.REFUND)
                                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addDiscount(
                                    CreditNote.Discount.builder()
                                        .amountApplied("amount_applied")
                                        .discountType(CreditNote.Discount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.0)
                                        .addAppliesToPrice(
                                            CreditNote.Discount.AppliesToPrice.builder()
                                                .id("id")
                                                .name("name")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .build()
                        )
                        .addVoidedInvoice(
                            Invoice.builder()
                                .id("id")
                                .amountDue("8.00")
                                .autoCollection(
                                    Invoice.AutoCollection.builder()
                                        .enabled(true)
                                        .nextAttemptAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .numAttempts(0L)
                                        .previouslyAttemptedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .build()
                                )
                                .billingAddress(
                                    Invoice.BillingAddress.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                .addCreditNote(
                                    Invoice.CreditNote.builder()
                                        .id("id")
                                        .creditNoteNumber("credit_note_number")
                                        .memo("memo")
                                        .reason("reason")
                                        .total("total")
                                        .type("type")
                                        .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                        .build()
                                )
                                .currency("USD")
                                .customer(
                                    Invoice.Customer.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .addCustomerBalanceTransaction(
                                    Invoice.CustomerBalanceTransaction.builder()
                                        .id("cgZa3SXcsPTVyC4Y")
                                        .action(
                                            Invoice.CustomerBalanceTransaction.Action
                                                .APPLIED_TO_INVOICE
                                        )
                                        .amount("11.00")
                                        .createdAt(
                                            OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                        )
                                        .creditNote(
                                            Invoice.CustomerBalanceTransaction.CreditNote.builder()
                                                .id("id")
                                                .build()
                                        )
                                        .description("An optional description")
                                        .endingBalance("22.00")
                                        .invoice(
                                            Invoice.CustomerBalanceTransaction.InnerInvoice
                                                .builder()
                                                .id("gXcsPTVyC4YZa3Sc")
                                                .build()
                                        )
                                        .startingBalance("33.00")
                                        .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                        .build()
                                )
                                .customerTaxId(
                                    Invoice.CustomerTaxId.builder()
                                        .country(Invoice.CustomerTaxId.Country.AD)
                                        .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                        .value("value")
                                        .build()
                                )
                                .discount(JsonValue.from(mapOf<String, Any>()))
                                .addDiscount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                                .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .hostedInvoiceUrl("hosted_invoice_url")
                                .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                                .invoiceNumber("JYEFHK-00001")
                                .invoicePdf(
                                    "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                                )
                                .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                                .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addLineItem(
                                    Invoice.LineItem.builder()
                                        .id("id")
                                        .adjustedSubtotal("5.00")
                                        .addAdjustment(
                                            Invoice.LineItem.Adjustment.UsageDiscount.builder()
                                                .id("id")
                                                .amount("amount")
                                                .addAppliesToPriceId("string")
                                                .isInvoiceLevel(true)
                                                .reason("reason")
                                                .usageDiscount(0.0)
                                                .build()
                                        )
                                        .amount("7.00")
                                        .creditsApplied("6.00")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .reason("reason")
                                                .build()
                                        )
                                        .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                        .filter("filter")
                                        .grouping("grouping")
                                        .maximum(
                                            Invoice.LineItem.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .minimum(
                                            Invoice.LineItem.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("Fixed Fee")
                                        .partiallyInvoicedAmount("4.00")
                                        .price(
                                            Price.Unit.builder()
                                                .id("id")
                                                .billableMetric(
                                                    Price.Unit.BillableMetric.builder()
                                                        .id("id")
                                                        .build()
                                                )
                                                .billingCycleConfiguration(
                                                    Price.Unit.BillingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            Price.Unit.BillingCycleConfiguration
                                                                .DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                                .conversionRate(0.0)
                                                .createdAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .creditAllocation(
                                                    Price.Unit.CreditAllocation.builder()
                                                        .allowsRollover(true)
                                                        .currency("currency")
                                                        .build()
                                                )
                                                .currency("currency")
                                                .discount(
                                                    PercentageDiscount.builder()
                                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                        .discountType(
                                                            PercentageDiscount.DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.15)
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .externalPriceId("external_price_id")
                                                .fixedPriceQuantity(0.0)
                                                .invoicingCycleConfiguration(
                                                    Price.Unit.InvoicingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            Price.Unit.InvoicingCycleConfiguration
                                                                .DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .item(
                                                    Price.Unit.Item.builder()
                                                        .id("id")
                                                        .name("name")
                                                        .build()
                                                )
                                                .maximum(
                                                    Price.Unit.Maximum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .maximumAmount("maximum_amount")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .metadata(
                                                    Price.Unit.Metadata.builder()
                                                        .putAdditionalProperty(
                                                            "foo",
                                                            JsonValue.from("string"),
                                                        )
                                                        .build()
                                                )
                                                .minimum(
                                                    Price.Unit.Minimum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .minimumAmount("minimum_amount")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .name("name")
                                                .planPhaseOrder(0L)
                                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                                .unitConfig(
                                                    Price.Unit.UnitConfig.builder()
                                                        .unitAmount("unit_amount")
                                                        .build()
                                                )
                                                .dimensionalPriceConfiguration(
                                                    Price.Unit.DimensionalPriceConfiguration
                                                        .builder()
                                                        .addDimensionValue("string")
                                                        .dimensionalPriceGroupId(
                                                            "dimensional_price_group_id"
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .quantity(1.0)
                                        .startDate(
                                            OffsetDateTime.parse("2022-02-01T08:00:00+00:00")
                                        )
                                        .addSubLineItem(
                                            Invoice.LineItem.SubLineItem.Matrix.builder()
                                                .amount("9.00")
                                                .grouping(
                                                    Invoice.LineItem.SubLineItem.Matrix.Grouping
                                                        .builder()
                                                        .key("region")
                                                        .value("west")
                                                        .build()
                                                )
                                                .matrixConfig(
                                                    Invoice.LineItem.SubLineItem.Matrix.MatrixConfig
                                                        .builder()
                                                        .addDimensionValue("string")
                                                        .build()
                                                )
                                                .name("Tier One")
                                                .quantity(5.0)
                                                .build()
                                        )
                                        .subtotal("9.00")
                                        .addTaxAmount(
                                            Invoice.LineItem.TaxAmount.builder()
                                                .amount("amount")
                                                .taxRateDescription("tax_rate_description")
                                                .taxRatePercentage("tax_rate_percentage")
                                                .build()
                                        )
                                        .addUsageCustomerId("string")
                                        .build()
                                )
                                .maximum(
                                    Invoice.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .memo("memo")
                                .metadata(
                                    Invoice.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Invoice.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addPaymentAttempt(
                                    Invoice.PaymentAttempt.builder()
                                        .id("id")
                                        .amount("amount")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .paymentProvider(
                                            Invoice.PaymentAttempt.PaymentProvider.STRIPE
                                        )
                                        .paymentProviderId("payment_provider_id")
                                        .succeeded(true)
                                        .build()
                                )
                                .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .shippingAddress(
                                    Invoice.ShippingAddress.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .status(Invoice.Status.ISSUED)
                                .subscription(
                                    Invoice.Subscription.builder().id("VDGsT23osdLb84KD").build()
                                )
                                .subtotal("8.00")
                                .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .total("8.00")
                                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .willAutoIssue(true)
                                .build()
                        )
                        .build()
                )
                .build()

        val roundtrippedSubscriptionPriceIntervalsResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(subscriptionPriceIntervalsResponse),
                jacksonTypeRef<SubscriptionPriceIntervalsResponse>(),
            )

        assertThat(roundtrippedSubscriptionPriceIntervalsResponse)
            .isEqualTo(subscriptionPriceIntervalsResponse)
    }
}
