// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.withorb.api.core.JsonValue
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class InvoiceLineItemCreateResponseTest {

    @Test
    fun createInvoiceLineItemCreateResponse() {
        val invoiceLineItemCreateResponse =
            InvoiceLineItemCreateResponse.builder()
                .id("id")
                .amount("7.00")
                .discount(
                    PercentageDiscount.builder()
                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(0.15)
                        .reason("reason")
                        .build()
                )
                .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                .grouping("grouping")
                .maximum(
                    InvoiceLineItemCreateResponse.Maximum.builder()
                        .addAppliesToPriceId("string")
                        .maximumAmount("maximum_amount")
                        .build()
                )
                .maximumAmount("maximum_amount")
                .minimum(
                    InvoiceLineItemCreateResponse.Minimum.builder()
                        .addAppliesToPriceId("string")
                        .minimumAmount("minimum_amount")
                        .build()
                )
                .minimumAmount("minimum_amount")
                .name("Fixed Fee")
                .price(
                    Price.UnitPrice.builder()
                        .id("id")
                        .billableMetric(Price.UnitPrice.BillableMetric.builder().id("id").build())
                        .billingCycleConfiguration(
                            Price.UnitPrice.BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(
                                    Price.UnitPrice.BillingCycleConfiguration.DurationUnit.DAY
                                )
                                .build()
                        )
                        .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            Price.UnitPrice.CreditAllocation.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            Price.UnitPrice.InvoicingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(
                                    Price.UnitPrice.InvoicingCycleConfiguration.DurationUnit.DAY
                                )
                                .build()
                        )
                        .item(Price.UnitPrice.Item.builder().id("id").name("name").build())
                        .maximum(
                            Price.UnitPrice.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Price.UnitPrice.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Price.UnitPrice.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .modelType(Price.UnitPrice.ModelType.UNIT)
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                        .unitConfig(
                            Price.UnitPrice.UnitConfig.builder().unitAmount("unit_amount").build()
                        )
                        .build()
                )
                .quantity(1.0)
                .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                .addSubLineItem(
                    InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.builder()
                        .amount("9.00")
                        .grouping(
                            InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.Grouping
                                .builder()
                                .key("region")
                                .value("west")
                                .build()
                        )
                        .matrixConfig(
                            InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.MatrixConfig
                                .builder()
                                .addDimensionValue("string")
                                .build()
                        )
                        .name("Tier One")
                        .quantity(5.0)
                        .type(
                            InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.Type.MATRIX
                        )
                        .build()
                )
                .subtotal("9.00")
                .addTaxAmount(
                    InvoiceLineItemCreateResponse.TaxAmount.builder()
                        .amount("amount")
                        .taxRateDescription("tax_rate_description")
                        .taxRatePercentage("tax_rate_percentage")
                        .build()
                )
                .build()
        assertThat(invoiceLineItemCreateResponse).isNotNull
        assertThat(invoiceLineItemCreateResponse.id()).isEqualTo("id")
        assertThat(invoiceLineItemCreateResponse.amount()).isEqualTo("7.00")
        assertThat(invoiceLineItemCreateResponse.discount())
            .contains(
                Discount.ofPercentageDiscount(
                    PercentageDiscount.builder()
                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(0.15)
                        .reason("reason")
                        .build()
                )
            )
        assertThat(invoiceLineItemCreateResponse.endDate())
            .isEqualTo(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
        assertThat(invoiceLineItemCreateResponse.grouping()).contains("grouping")
        assertThat(invoiceLineItemCreateResponse.maximum())
            .contains(
                InvoiceLineItemCreateResponse.Maximum.builder()
                    .addAppliesToPriceId("string")
                    .maximumAmount("maximum_amount")
                    .build()
            )
        assertThat(invoiceLineItemCreateResponse.maximumAmount()).contains("maximum_amount")
        assertThat(invoiceLineItemCreateResponse.minimum())
            .contains(
                InvoiceLineItemCreateResponse.Minimum.builder()
                    .addAppliesToPriceId("string")
                    .minimumAmount("minimum_amount")
                    .build()
            )
        assertThat(invoiceLineItemCreateResponse.minimumAmount()).contains("minimum_amount")
        assertThat(invoiceLineItemCreateResponse.name()).isEqualTo("Fixed Fee")
        assertThat(invoiceLineItemCreateResponse.price())
            .contains(
                Price.ofUnitPrice(
                    Price.UnitPrice.builder()
                        .id("id")
                        .billableMetric(Price.UnitPrice.BillableMetric.builder().id("id").build())
                        .billingCycleConfiguration(
                            Price.UnitPrice.BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(
                                    Price.UnitPrice.BillingCycleConfiguration.DurationUnit.DAY
                                )
                                .build()
                        )
                        .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            Price.UnitPrice.CreditAllocation.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            Price.UnitPrice.InvoicingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(
                                    Price.UnitPrice.InvoicingCycleConfiguration.DurationUnit.DAY
                                )
                                .build()
                        )
                        .item(Price.UnitPrice.Item.builder().id("id").name("name").build())
                        .maximum(
                            Price.UnitPrice.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Price.UnitPrice.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Price.UnitPrice.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .modelType(Price.UnitPrice.ModelType.UNIT)
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                        .unitConfig(
                            Price.UnitPrice.UnitConfig.builder().unitAmount("unit_amount").build()
                        )
                        .build()
                )
            )
        assertThat(invoiceLineItemCreateResponse.quantity()).isEqualTo(1.0)
        assertThat(invoiceLineItemCreateResponse.startDate())
            .isEqualTo(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
        assertThat(invoiceLineItemCreateResponse.subLineItems())
            .containsExactly(
                InvoiceLineItemCreateResponse.SubLineItem.ofMatrixSubLineItem(
                    InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.builder()
                        .amount("9.00")
                        .grouping(
                            InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.Grouping
                                .builder()
                                .key("region")
                                .value("west")
                                .build()
                        )
                        .matrixConfig(
                            InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.MatrixConfig
                                .builder()
                                .addDimensionValue("string")
                                .build()
                        )
                        .name("Tier One")
                        .quantity(5.0)
                        .type(
                            InvoiceLineItemCreateResponse.SubLineItem.MatrixSubLineItem.Type.MATRIX
                        )
                        .build()
                )
            )
        assertThat(invoiceLineItemCreateResponse.subtotal()).isEqualTo("9.00")
        assertThat(invoiceLineItemCreateResponse.taxAmounts())
            .containsExactly(
                InvoiceLineItemCreateResponse.TaxAmount.builder()
                    .amount("amount")
                    .taxRateDescription("tax_rate_description")
                    .taxRatePercentage("tax_rate_percentage")
                    .build()
            )
    }
}
