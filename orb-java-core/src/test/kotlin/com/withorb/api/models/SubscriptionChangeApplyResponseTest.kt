// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.JsonValue
import com.withorb.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SubscriptionChangeApplyResponseTest {

    @Test
    fun create() {
        val subscriptionChangeApplyResponse =
            SubscriptionChangeApplyResponse.builder()
                .id("id")
                .expirationTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .status(SubscriptionChangeApplyResponse.Status.PENDING)
                .subscription(
                    SubscriptionChangeApplyResponse.Subscription.builder()
                        .id("id")
                        .activePlanPhaseOrder(0L)
                        .addAdjustmentInterval(
                            SubscriptionChangeApplyResponse.Subscription.AdjustmentInterval
                                .builder()
                                .id("id")
                                .adjustment(
                                    SubscriptionChangeApplyResponse.Subscription.AdjustmentInterval
                                        .Adjustment
                                        .UsageDiscount
                                        .builder()
                                        .id("id")
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .AdjustmentInterval
                                                .Adjustment
                                                .UsageDiscount
                                                .Filter
                                                .builder()
                                                .field(
                                                    SubscriptionChangeApplyResponse.Subscription
                                                        .AdjustmentInterval
                                                        .Adjustment
                                                        .UsageDiscount
                                                        .Filter
                                                        .Field
                                                        .PRICE_ID
                                                )
                                                .operator(
                                                    SubscriptionChangeApplyResponse.Subscription
                                                        .AdjustmentInterval
                                                        .Adjustment
                                                        .UsageDiscount
                                                        .Filter
                                                        .Operator
                                                        .INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .isInvoiceLevel(true)
                                        .planPhaseOrder(0L)
                                        .reason("reason")
                                        .usageDiscount(0.0)
                                        .build()
                                )
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .autoCollection(true)
                        .billingCycleAnchorConfiguration(
                            SubscriptionChangeApplyResponse.Subscription
                                .BillingCycleAnchorConfiguration
                                .builder()
                                .day(1L)
                                .month(1L)
                                .year(0L)
                                .build()
                        )
                        .billingCycleDay(1L)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currentBillingPeriodEndDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .currentBillingPeriodStartDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .customer(
                            Customer.builder()
                                .id("id")
                                .addAdditionalEmail("string")
                                .autoCollection(true)
                                .balance("balance")
                                .billingAddress(
                                    Customer.BillingAddress.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .currency("currency")
                                .email("email")
                                .emailDelivery(true)
                                .exemptFromAutomatedTax(true)
                                .externalCustomerId("external_customer_id")
                                .hierarchy(
                                    Customer.Hierarchy.builder()
                                        .addChild(
                                            Customer.Hierarchy.Child.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .parent(
                                            Customer.Hierarchy.Parent.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .build()
                                )
                                .metadata(
                                    Customer.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .name("name")
                                .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                                .paymentProviderId("payment_provider_id")
                                .portalUrl("portal_url")
                                .shippingAddress(
                                    Customer.ShippingAddress.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .taxId(
                                    Customer.TaxId.builder()
                                        .country(Customer.TaxId.Country.AD)
                                        .type(Customer.TaxId.Type.AD_NRT)
                                        .value("value")
                                        .build()
                                )
                                .timezone("timezone")
                                .accountingSyncConfiguration(
                                    Customer.AccountingSyncConfiguration.builder()
                                        .addAccountingProvider(
                                            Customer.AccountingSyncConfiguration.AccountingProvider
                                                .builder()
                                                .externalProviderId("external_provider_id")
                                                .providerType(
                                                    Customer.AccountingSyncConfiguration
                                                        .AccountingProvider
                                                        .ProviderType
                                                        .QUICKBOOKS
                                                )
                                                .build()
                                        )
                                        .excluded(true)
                                        .build()
                                )
                                .reportingConfiguration(
                                    Customer.ReportingConfiguration.builder().exempt(true).build()
                                )
                                .build()
                        )
                        .defaultInvoiceMemo("default_invoice_memo")
                        .addDiscountInterval(
                            SubscriptionChangeApplyResponse.Subscription.DiscountInterval.Amount
                                .builder()
                                .amountDiscount("amount_discount")
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addFilter(
                                    SubscriptionChangeApplyResponse.Subscription.DiscountInterval
                                        .Amount
                                        .Filter
                                        .builder()
                                        .field(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .DiscountInterval
                                                .Amount
                                                .Filter
                                                .Field
                                                .PRICE_ID
                                        )
                                        .operator(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .DiscountInterval
                                                .Amount
                                                .Filter
                                                .Operator
                                                .INCLUDES
                                        )
                                        .addValue("string")
                                        .build()
                                )
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addFixedFeeQuantitySchedule(
                            SubscriptionChangeApplyResponse.Subscription.FixedFeeQuantitySchedule
                                .builder()
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .priceId("price_id")
                                .quantity(0.0)
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .invoicingThreshold("invoicing_threshold")
                        .addMaximumInterval(
                            SubscriptionChangeApplyResponse.Subscription.MaximumInterval.builder()
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addFilter(
                                    SubscriptionChangeApplyResponse.Subscription.MaximumInterval
                                        .Filter
                                        .builder()
                                        .field(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .MaximumInterval
                                                .Filter
                                                .Field
                                                .PRICE_ID
                                        )
                                        .operator(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .MaximumInterval
                                                .Filter
                                                .Operator
                                                .INCLUDES
                                        )
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .metadata(
                            SubscriptionChangeApplyResponse.Subscription.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .addMinimumInterval(
                            SubscriptionChangeApplyResponse.Subscription.MinimumInterval.builder()
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addFilter(
                                    SubscriptionChangeApplyResponse.Subscription.MinimumInterval
                                        .Filter
                                        .builder()
                                        .field(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .MinimumInterval
                                                .Filter
                                                .Field
                                                .PRICE_ID
                                        )
                                        .operator(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .MinimumInterval
                                                .Filter
                                                .Operator
                                                .INCLUDES
                                        )
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .name("name")
                        .netTerms(0L)
                        .pendingSubscriptionChange(
                            SubscriptionChangeApplyResponse.Subscription.PendingSubscriptionChange
                                .builder()
                                .id("id")
                                .build()
                        )
                        .plan(
                            Plan.builder()
                                .id("id")
                                .addAdjustment(
                                    Plan.Adjustment.UsageDiscount.builder()
                                        .id("id")
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Plan.Adjustment.UsageDiscount.Filter.builder()
                                                .field(
                                                    Plan.Adjustment.UsageDiscount.Filter.Field
                                                        .PRICE_ID
                                                )
                                                .operator(
                                                    Plan.Adjustment.UsageDiscount.Filter.Operator
                                                        .INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .isInvoiceLevel(true)
                                        .planPhaseOrder(0L)
                                        .reason("reason")
                                        .usageDiscount(0.0)
                                        .build()
                                )
                                .basePlan(
                                    Plan.BasePlan.builder()
                                        .id("m2t5akQeh2obwxeU")
                                        .externalPlanId("m2t5akQeh2obwxeU")
                                        .name("Example plan")
                                        .build()
                                )
                                .basePlanId("base_plan_id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .currency("currency")
                                .defaultInvoiceMemo("default_invoice_memo")
                                .description("description")
                                .discount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .reason("reason")
                                        .build()
                                )
                                .externalPlanId("external_plan_id")
                                .invoicingCurrency("invoicing_currency")
                                .maximum(
                                    Plan.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Plan.Maximum.Filter.builder()
                                                .field(Plan.Maximum.Filter.Field.PRICE_ID)
                                                .operator(Plan.Maximum.Filter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    Plan.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Plan.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Plan.Minimum.Filter.builder()
                                                .field(Plan.Minimum.Filter.Field.PRICE_ID)
                                                .operator(Plan.Minimum.Filter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .netTerms(0L)
                                .addPlanPhase(
                                    Plan.PlanPhase.builder()
                                        .id("id")
                                        .description("description")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .reason("reason")
                                                .build()
                                        )
                                        .duration(0L)
                                        .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                        .maximum(
                                            Plan.PlanPhase.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Plan.PlanPhase.Maximum.Filter.builder()
                                                        .field(
                                                            Plan.PlanPhase.Maximum.Filter.Field
                                                                .PRICE_ID
                                                        )
                                                        .operator(
                                                            Plan.PlanPhase.Maximum.Filter.Operator
                                                                .INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .minimum(
                                            Plan.PlanPhase.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Plan.PlanPhase.Minimum.Filter.builder()
                                                        .field(
                                                            Plan.PlanPhase.Minimum.Filter.Field
                                                                .PRICE_ID
                                                        )
                                                        .operator(
                                                            Plan.PlanPhase.Minimum.Filter.Operator
                                                                .INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("name")
                                        .order(0L)
                                        .build()
                                )
                                .addPrice(
                                    Price.Unit.builder()
                                        .id("id")
                                        .billableMetric(
                                            Price.Unit.BillableMetric.builder().id("id").build()
                                        )
                                        .billingCycleConfiguration(
                                            Price.Unit.BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.Unit.BillingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.Unit.Cadence.ONE_TIME)
                                        .conversionRate(0.0)
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Price.Unit.CreditAllocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .customExpiration(
                                                    Price.Unit.CreditAllocation.CustomExpiration
                                                        .builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            Price.Unit.CreditAllocation
                                                                .CustomExpiration
                                                                .DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .reason("reason")
                                                .build()
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(0.0)
                                        .invoicingCycleConfiguration(
                                            Price.Unit.InvoicingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.Unit.InvoicingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .item(
                                            Price.Unit.Item.builder().id("id").name("name").build()
                                        )
                                        .maximum(
                                            Price.Unit.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Price.Unit.Maximum.Filter.builder()
                                                        .field(
                                                            Price.Unit.Maximum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Price.Unit.Maximum.Filter.Operator
                                                                .INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(
                                            Price.Unit.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Price.Unit.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Price.Unit.Minimum.Filter.builder()
                                                        .field(
                                                            Price.Unit.Minimum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Price.Unit.Minimum.Filter.Operator
                                                                .INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("name")
                                        .planPhaseOrder(0L)
                                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            Price.Unit.UnitConfig.builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .dimensionalPriceConfiguration(
                                            Price.Unit.DimensionalPriceConfiguration.builder()
                                                .addDimensionValue("string")
                                                .dimensionalPriceGroupId(
                                                    "dimensional_price_group_id"
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .product(
                                    Plan.Product.builder()
                                        .id("id")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .name("name")
                                        .build()
                                )
                                .status(Plan.Status.ACTIVE)
                                .trialConfig(
                                    Plan.TrialConfig.builder()
                                        .trialPeriod(0L)
                                        .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                                        .build()
                                )
                                .version(0L)
                                .build()
                        )
                        .addPriceInterval(
                            SubscriptionChangeApplyResponse.Subscription.PriceInterval.builder()
                                .id("id")
                                .billingCycleDay(0L)
                                .currentBillingPeriodEndDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .currentBillingPeriodStartDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .filter("filter")
                                .addFixedFeeQuantityTransition(
                                    SubscriptionChangeApplyResponse.Subscription.PriceInterval
                                        .FixedFeeQuantityTransition
                                        .builder()
                                        .effectiveDate(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .priceId("price_id")
                                        .quantity(0L)
                                        .build()
                                )
                                .price(
                                    Price.Unit.builder()
                                        .id("id")
                                        .billableMetric(
                                            Price.Unit.BillableMetric.builder().id("id").build()
                                        )
                                        .billingCycleConfiguration(
                                            Price.Unit.BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.Unit.BillingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.Unit.Cadence.ONE_TIME)
                                        .conversionRate(0.0)
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Price.Unit.CreditAllocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .customExpiration(
                                                    Price.Unit.CreditAllocation.CustomExpiration
                                                        .builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            Price.Unit.CreditAllocation
                                                                .CustomExpiration
                                                                .DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .reason("reason")
                                                .build()
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(0.0)
                                        .invoicingCycleConfiguration(
                                            Price.Unit.InvoicingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.Unit.InvoicingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .item(
                                            Price.Unit.Item.builder().id("id").name("name").build()
                                        )
                                        .maximum(
                                            Price.Unit.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Price.Unit.Maximum.Filter.builder()
                                                        .field(
                                                            Price.Unit.Maximum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Price.Unit.Maximum.Filter.Operator
                                                                .INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(
                                            Price.Unit.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Price.Unit.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Price.Unit.Minimum.Filter.builder()
                                                        .field(
                                                            Price.Unit.Minimum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Price.Unit.Minimum.Filter.Operator
                                                                .INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("name")
                                        .planPhaseOrder(0L)
                                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            Price.Unit.UnitConfig.builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .dimensionalPriceConfiguration(
                                            Price.Unit.DimensionalPriceConfiguration.builder()
                                                .addDimensionValue("string")
                                                .dimensionalPriceGroupId(
                                                    "dimensional_price_group_id"
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addUsageCustomerId("string")
                                .build()
                        )
                        .redeemedCoupon(
                            SubscriptionChangeApplyResponse.Subscription.RedeemedCoupon.builder()
                                .couponId("coupon_id")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .status(SubscriptionChangeApplyResponse.Subscription.Status.ACTIVE)
                        .trialInfo(
                            SubscriptionChangeApplyResponse.Subscription.TrialInfo.builder()
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .changedResources(
                            SubscriptionChangeApplyResponse.Subscription.ChangedResources.builder()
                                .addCreatedCreditNote(
                                    CreditNote.builder()
                                        .id("id")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditNoteNumber("credit_note_number")
                                        .creditNotePdf("credit_note_pdf")
                                        .customer(
                                            CreditNote.Customer.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .invoiceId("invoice_id")
                                        .addLineItem(
                                            CreditNote.LineItem.builder()
                                                .id("id")
                                                .amount("amount")
                                                .itemId("item_id")
                                                .name("name")
                                                .quantity(0.0)
                                                .subtotal("subtotal")
                                                .addTaxAmount(
                                                    CreditNote.LineItem.TaxAmount.builder()
                                                        .amount("amount")
                                                        .taxRateDescription("tax_rate_description")
                                                        .taxRatePercentage("tax_rate_percentage")
                                                        .build()
                                                )
                                                .addDiscount(
                                                    CreditNote.LineItem.Discount.builder()
                                                        .id("id")
                                                        .amountApplied("amount_applied")
                                                        .addAppliesToPriceId("string")
                                                        .discountType(
                                                            CreditNote.LineItem.Discount
                                                                .DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.0)
                                                        .amountDiscount("amount_discount")
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .maximumAmountAdjustment(
                                            CreditNote.MaximumAmountAdjustment.builder()
                                                .amountApplied("amount_applied")
                                                .discountType(
                                                    CreditNote.MaximumAmountAdjustment.DiscountType
                                                        .PERCENTAGE
                                                )
                                                .percentageDiscount(0.0)
                                                .addAppliesToPrice(
                                                    CreditNote.MaximumAmountAdjustment
                                                        .AppliesToPrice
                                                        .builder()
                                                        .id("id")
                                                        .name("name")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .memo("memo")
                                        .minimumAmountRefunded("minimum_amount_refunded")
                                        .reason(CreditNote.Reason.DUPLICATE)
                                        .subtotal("subtotal")
                                        .total("total")
                                        .type(CreditNote.Type.REFUND)
                                        .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .addDiscount(
                                            CreditNote.Discount.builder()
                                                .amountApplied("amount_applied")
                                                .discountType(
                                                    CreditNote.Discount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.0)
                                                .addAppliesToPrice(
                                                    CreditNote.Discount.AppliesToPrice.builder()
                                                        .id("id")
                                                        .name("name")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .build()
                                )
                                .addCreatedInvoice(
                                    Invoice.builder()
                                        .id("id")
                                        .amountDue("8.00")
                                        .autoCollection(
                                            Invoice.AutoCollection.builder()
                                                .enabled(true)
                                                .nextAttemptAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .numAttempts(0L)
                                                .previouslyAttemptedAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .build()
                                        )
                                        .billingAddress(
                                            Invoice.BillingAddress.builder()
                                                .city("city")
                                                .country("country")
                                                .line1("line1")
                                                .line2("line2")
                                                .postalCode("postal_code")
                                                .state("state")
                                                .build()
                                        )
                                        .createdAt(
                                            OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                        )
                                        .addCreditNote(
                                            Invoice.CreditNote.builder()
                                                .id("id")
                                                .creditNoteNumber("credit_note_number")
                                                .memo("memo")
                                                .reason("reason")
                                                .total("total")
                                                .type("type")
                                                .voidedAt(
                                                    OffsetDateTime.parse(
                                                        "2022-05-01T07:01:31+00:00"
                                                    )
                                                )
                                                .build()
                                        )
                                        .currency("USD")
                                        .customer(
                                            Invoice.Customer.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .addCustomerBalanceTransaction(
                                            Invoice.CustomerBalanceTransaction.builder()
                                                .id("cgZa3SXcsPTVyC4Y")
                                                .action(
                                                    Invoice.CustomerBalanceTransaction.Action
                                                        .APPLIED_TO_INVOICE
                                                )
                                                .amount("11.00")
                                                .createdAt(
                                                    OffsetDateTime.parse(
                                                        "2022-05-01T07:01:31+00:00"
                                                    )
                                                )
                                                .creditNote(
                                                    Invoice.CustomerBalanceTransaction.CreditNote
                                                        .builder()
                                                        .id("id")
                                                        .build()
                                                )
                                                .description("An optional description")
                                                .endingBalance("22.00")
                                                .invoice(
                                                    Invoice.CustomerBalanceTransaction.InnerInvoice
                                                        .builder()
                                                        .id("gXcsPTVyC4YZa3Sc")
                                                        .build()
                                                )
                                                .startingBalance("33.00")
                                                .type(
                                                    Invoice.CustomerBalanceTransaction.Type
                                                        .INCREMENT
                                                )
                                                .build()
                                        )
                                        .customerTaxId(
                                            Invoice.CustomerTaxId.builder()
                                                .country(Invoice.CustomerTaxId.Country.AD)
                                                .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                                .value("value")
                                                .build()
                                        )
                                        .discount(JsonValue.from(mapOf<String, Any>()))
                                        .addDiscount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .reason("reason")
                                                .build()
                                        )
                                        .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                                        .eligibleToIssueAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .hostedInvoiceUrl("hosted_invoice_url")
                                        .invoiceDate(
                                            OffsetDateTime.parse("2022-05-01T07:00:00+00:00")
                                        )
                                        .invoiceNumber("JYEFHK-00001")
                                        .invoicePdf(
                                            "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                                        )
                                        .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                                        .issueFailedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .addLineItem(
                                            Invoice.LineItem.builder()
                                                .id("id")
                                                .adjustedSubtotal("5.00")
                                                .addAdjustment(
                                                    Invoice.LineItem.Adjustment.UsageDiscount
                                                        .builder()
                                                        .id("id")
                                                        .amount("amount")
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            Invoice.LineItem.Adjustment
                                                                .UsageDiscount
                                                                .Filter
                                                                .builder()
                                                                .field(
                                                                    Invoice.LineItem.Adjustment
                                                                        .UsageDiscount
                                                                        .Filter
                                                                        .Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    Invoice.LineItem.Adjustment
                                                                        .UsageDiscount
                                                                        .Filter
                                                                        .Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .isInvoiceLevel(true)
                                                        .reason("reason")
                                                        .usageDiscount(0.0)
                                                        .build()
                                                )
                                                .amount("7.00")
                                                .creditsApplied("6.00")
                                                .discount(
                                                    PercentageDiscount.builder()
                                                        .discountType(
                                                            PercentageDiscount.DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.15)
                                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .endDate(
                                                    OffsetDateTime.parse(
                                                        "2022-02-01T08:00:00+00:00"
                                                    )
                                                )
                                                .filter("filter")
                                                .grouping("grouping")
                                                .maximum(
                                                    Invoice.LineItem.Maximum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            Invoice.LineItem.Maximum.Filter
                                                                .builder()
                                                                .field(
                                                                    Invoice.LineItem.Maximum.Filter
                                                                        .Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    Invoice.LineItem.Maximum.Filter
                                                                        .Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .maximumAmount("maximum_amount")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .minimum(
                                                    Invoice.LineItem.Minimum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            Invoice.LineItem.Minimum.Filter
                                                                .builder()
                                                                .field(
                                                                    Invoice.LineItem.Minimum.Filter
                                                                        .Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    Invoice.LineItem.Minimum.Filter
                                                                        .Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .minimumAmount("minimum_amount")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .name("Fixed Fee")
                                                .partiallyInvoicedAmount("4.00")
                                                .price(
                                                    Price.Unit.builder()
                                                        .id("id")
                                                        .billableMetric(
                                                            Price.Unit.BillableMetric.builder()
                                                                .id("id")
                                                                .build()
                                                        )
                                                        .billingCycleConfiguration(
                                                            Price.Unit.BillingCycleConfiguration
                                                                .builder()
                                                                .duration(0L)
                                                                .durationUnit(
                                                                    Price.Unit
                                                                        .BillingCycleConfiguration
                                                                        .DurationUnit
                                                                        .DAY
                                                                )
                                                                .build()
                                                        )
                                                        .cadence(Price.Unit.Cadence.ONE_TIME)
                                                        .conversionRate(0.0)
                                                        .createdAt(
                                                            OffsetDateTime.parse(
                                                                "2019-12-27T18:11:19.117Z"
                                                            )
                                                        )
                                                        .creditAllocation(
                                                            Price.Unit.CreditAllocation.builder()
                                                                .allowsRollover(true)
                                                                .currency("currency")
                                                                .customExpiration(
                                                                    Price.Unit.CreditAllocation
                                                                        .CustomExpiration
                                                                        .builder()
                                                                        .duration(0L)
                                                                        .durationUnit(
                                                                            Price.Unit
                                                                                .CreditAllocation
                                                                                .CustomExpiration
                                                                                .DurationUnit
                                                                                .DAY
                                                                        )
                                                                        .build()
                                                                )
                                                                .build()
                                                        )
                                                        .currency("currency")
                                                        .discount(
                                                            PercentageDiscount.builder()
                                                                .discountType(
                                                                    PercentageDiscount.DiscountType
                                                                        .PERCENTAGE
                                                                )
                                                                .percentageDiscount(0.15)
                                                                .addAppliesToPriceId(
                                                                    "h74gfhdjvn7ujokd"
                                                                )
                                                                .addAppliesToPriceId(
                                                                    "7hfgtgjnbvc3ujkl"
                                                                )
                                                                .reason("reason")
                                                                .build()
                                                        )
                                                        .externalPriceId("external_price_id")
                                                        .fixedPriceQuantity(0.0)
                                                        .invoicingCycleConfiguration(
                                                            Price.Unit.InvoicingCycleConfiguration
                                                                .builder()
                                                                .duration(0L)
                                                                .durationUnit(
                                                                    Price.Unit
                                                                        .InvoicingCycleConfiguration
                                                                        .DurationUnit
                                                                        .DAY
                                                                )
                                                                .build()
                                                        )
                                                        .item(
                                                            Price.Unit.Item.builder()
                                                                .id("id")
                                                                .name("name")
                                                                .build()
                                                        )
                                                        .maximum(
                                                            Price.Unit.Maximum.builder()
                                                                .addAppliesToPriceId("string")
                                                                .addFilter(
                                                                    Price.Unit.Maximum.Filter
                                                                        .builder()
                                                                        .field(
                                                                            Price.Unit.Maximum
                                                                                .Filter
                                                                                .Field
                                                                                .PRICE_ID
                                                                        )
                                                                        .operator(
                                                                            Price.Unit.Maximum
                                                                                .Filter
                                                                                .Operator
                                                                                .INCLUDES
                                                                        )
                                                                        .addValue("string")
                                                                        .build()
                                                                )
                                                                .maximumAmount("maximum_amount")
                                                                .build()
                                                        )
                                                        .maximumAmount("maximum_amount")
                                                        .metadata(
                                                            Price.Unit.Metadata.builder()
                                                                .putAdditionalProperty(
                                                                    "foo",
                                                                    JsonValue.from("string"),
                                                                )
                                                                .build()
                                                        )
                                                        .minimum(
                                                            Price.Unit.Minimum.builder()
                                                                .addAppliesToPriceId("string")
                                                                .addFilter(
                                                                    Price.Unit.Minimum.Filter
                                                                        .builder()
                                                                        .field(
                                                                            Price.Unit.Minimum
                                                                                .Filter
                                                                                .Field
                                                                                .PRICE_ID
                                                                        )
                                                                        .operator(
                                                                            Price.Unit.Minimum
                                                                                .Filter
                                                                                .Operator
                                                                                .INCLUDES
                                                                        )
                                                                        .addValue("string")
                                                                        .build()
                                                                )
                                                                .minimumAmount("minimum_amount")
                                                                .build()
                                                        )
                                                        .minimumAmount("minimum_amount")
                                                        .name("name")
                                                        .planPhaseOrder(0L)
                                                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                                        .unitConfig(
                                                            Price.Unit.UnitConfig.builder()
                                                                .unitAmount("unit_amount")
                                                                .build()
                                                        )
                                                        .dimensionalPriceConfiguration(
                                                            Price.Unit.DimensionalPriceConfiguration
                                                                .builder()
                                                                .addDimensionValue("string")
                                                                .dimensionalPriceGroupId(
                                                                    "dimensional_price_group_id"
                                                                )
                                                                .build()
                                                        )
                                                        .build()
                                                )
                                                .quantity(1.0)
                                                .startDate(
                                                    OffsetDateTime.parse(
                                                        "2022-02-01T08:00:00+00:00"
                                                    )
                                                )
                                                .addSubLineItem(
                                                    Invoice.LineItem.SubLineItem.Matrix.builder()
                                                        .amount("9.00")
                                                        .grouping(
                                                            Invoice.LineItem.SubLineItem.Matrix
                                                                .Grouping
                                                                .builder()
                                                                .key("region")
                                                                .value("west")
                                                                .build()
                                                        )
                                                        .matrixConfig(
                                                            Invoice.LineItem.SubLineItem.Matrix
                                                                .MatrixConfig
                                                                .builder()
                                                                .addDimensionValue("string")
                                                                .build()
                                                        )
                                                        .name("Tier One")
                                                        .quantity(5.0)
                                                        .build()
                                                )
                                                .subtotal("9.00")
                                                .addTaxAmount(
                                                    Invoice.LineItem.TaxAmount.builder()
                                                        .amount("amount")
                                                        .taxRateDescription("tax_rate_description")
                                                        .taxRatePercentage("tax_rate_percentage")
                                                        .build()
                                                )
                                                .addUsageCustomerId("string")
                                                .build()
                                        )
                                        .maximum(
                                            Invoice.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Invoice.Maximum.Filter.builder()
                                                        .field(
                                                            Invoice.Maximum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Invoice.Maximum.Filter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .memo("memo")
                                        .metadata(
                                            Invoice.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Invoice.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Invoice.Minimum.Filter.builder()
                                                        .field(
                                                            Invoice.Minimum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Invoice.Minimum.Filter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .addPaymentAttempt(
                                            Invoice.PaymentAttempt.builder()
                                                .id("id")
                                                .amount("amount")
                                                .createdAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .paymentProvider(
                                                    Invoice.PaymentAttempt.PaymentProvider.STRIPE
                                                )
                                                .paymentProviderId("payment_provider_id")
                                                .succeeded(true)
                                                .build()
                                        )
                                        .paymentFailedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .paymentStartedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .scheduledIssueAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .shippingAddress(
                                            Invoice.ShippingAddress.builder()
                                                .city("city")
                                                .country("country")
                                                .line1("line1")
                                                .line2("line2")
                                                .postalCode("postal_code")
                                                .state("state")
                                                .build()
                                        )
                                        .status(Invoice.Status.ISSUED)
                                        .subscription(
                                            Invoice.Subscription.builder()
                                                .id("VDGsT23osdLb84KD")
                                                .build()
                                        )
                                        .subtotal("8.00")
                                        .syncFailedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .total("8.00")
                                        .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .willAutoIssue(true)
                                        .build()
                                )
                                .addVoidedCreditNote(
                                    CreditNote.builder()
                                        .id("id")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditNoteNumber("credit_note_number")
                                        .creditNotePdf("credit_note_pdf")
                                        .customer(
                                            CreditNote.Customer.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .invoiceId("invoice_id")
                                        .addLineItem(
                                            CreditNote.LineItem.builder()
                                                .id("id")
                                                .amount("amount")
                                                .itemId("item_id")
                                                .name("name")
                                                .quantity(0.0)
                                                .subtotal("subtotal")
                                                .addTaxAmount(
                                                    CreditNote.LineItem.TaxAmount.builder()
                                                        .amount("amount")
                                                        .taxRateDescription("tax_rate_description")
                                                        .taxRatePercentage("tax_rate_percentage")
                                                        .build()
                                                )
                                                .addDiscount(
                                                    CreditNote.LineItem.Discount.builder()
                                                        .id("id")
                                                        .amountApplied("amount_applied")
                                                        .addAppliesToPriceId("string")
                                                        .discountType(
                                                            CreditNote.LineItem.Discount
                                                                .DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.0)
                                                        .amountDiscount("amount_discount")
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .maximumAmountAdjustment(
                                            CreditNote.MaximumAmountAdjustment.builder()
                                                .amountApplied("amount_applied")
                                                .discountType(
                                                    CreditNote.MaximumAmountAdjustment.DiscountType
                                                        .PERCENTAGE
                                                )
                                                .percentageDiscount(0.0)
                                                .addAppliesToPrice(
                                                    CreditNote.MaximumAmountAdjustment
                                                        .AppliesToPrice
                                                        .builder()
                                                        .id("id")
                                                        .name("name")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .memo("memo")
                                        .minimumAmountRefunded("minimum_amount_refunded")
                                        .reason(CreditNote.Reason.DUPLICATE)
                                        .subtotal("subtotal")
                                        .total("total")
                                        .type(CreditNote.Type.REFUND)
                                        .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .addDiscount(
                                            CreditNote.Discount.builder()
                                                .amountApplied("amount_applied")
                                                .discountType(
                                                    CreditNote.Discount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.0)
                                                .addAppliesToPrice(
                                                    CreditNote.Discount.AppliesToPrice.builder()
                                                        .id("id")
                                                        .name("name")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .build()
                                )
                                .addVoidedInvoice(
                                    Invoice.builder()
                                        .id("id")
                                        .amountDue("8.00")
                                        .autoCollection(
                                            Invoice.AutoCollection.builder()
                                                .enabled(true)
                                                .nextAttemptAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .numAttempts(0L)
                                                .previouslyAttemptedAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .build()
                                        )
                                        .billingAddress(
                                            Invoice.BillingAddress.builder()
                                                .city("city")
                                                .country("country")
                                                .line1("line1")
                                                .line2("line2")
                                                .postalCode("postal_code")
                                                .state("state")
                                                .build()
                                        )
                                        .createdAt(
                                            OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                        )
                                        .addCreditNote(
                                            Invoice.CreditNote.builder()
                                                .id("id")
                                                .creditNoteNumber("credit_note_number")
                                                .memo("memo")
                                                .reason("reason")
                                                .total("total")
                                                .type("type")
                                                .voidedAt(
                                                    OffsetDateTime.parse(
                                                        "2022-05-01T07:01:31+00:00"
                                                    )
                                                )
                                                .build()
                                        )
                                        .currency("USD")
                                        .customer(
                                            Invoice.Customer.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .addCustomerBalanceTransaction(
                                            Invoice.CustomerBalanceTransaction.builder()
                                                .id("cgZa3SXcsPTVyC4Y")
                                                .action(
                                                    Invoice.CustomerBalanceTransaction.Action
                                                        .APPLIED_TO_INVOICE
                                                )
                                                .amount("11.00")
                                                .createdAt(
                                                    OffsetDateTime.parse(
                                                        "2022-05-01T07:01:31+00:00"
                                                    )
                                                )
                                                .creditNote(
                                                    Invoice.CustomerBalanceTransaction.CreditNote
                                                        .builder()
                                                        .id("id")
                                                        .build()
                                                )
                                                .description("An optional description")
                                                .endingBalance("22.00")
                                                .invoice(
                                                    Invoice.CustomerBalanceTransaction.InnerInvoice
                                                        .builder()
                                                        .id("gXcsPTVyC4YZa3Sc")
                                                        .build()
                                                )
                                                .startingBalance("33.00")
                                                .type(
                                                    Invoice.CustomerBalanceTransaction.Type
                                                        .INCREMENT
                                                )
                                                .build()
                                        )
                                        .customerTaxId(
                                            Invoice.CustomerTaxId.builder()
                                                .country(Invoice.CustomerTaxId.Country.AD)
                                                .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                                .value("value")
                                                .build()
                                        )
                                        .discount(JsonValue.from(mapOf<String, Any>()))
                                        .addDiscount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .reason("reason")
                                                .build()
                                        )
                                        .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                                        .eligibleToIssueAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .hostedInvoiceUrl("hosted_invoice_url")
                                        .invoiceDate(
                                            OffsetDateTime.parse("2022-05-01T07:00:00+00:00")
                                        )
                                        .invoiceNumber("JYEFHK-00001")
                                        .invoicePdf(
                                            "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                                        )
                                        .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                                        .issueFailedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .addLineItem(
                                            Invoice.LineItem.builder()
                                                .id("id")
                                                .adjustedSubtotal("5.00")
                                                .addAdjustment(
                                                    Invoice.LineItem.Adjustment.UsageDiscount
                                                        .builder()
                                                        .id("id")
                                                        .amount("amount")
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            Invoice.LineItem.Adjustment
                                                                .UsageDiscount
                                                                .Filter
                                                                .builder()
                                                                .field(
                                                                    Invoice.LineItem.Adjustment
                                                                        .UsageDiscount
                                                                        .Filter
                                                                        .Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    Invoice.LineItem.Adjustment
                                                                        .UsageDiscount
                                                                        .Filter
                                                                        .Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .isInvoiceLevel(true)
                                                        .reason("reason")
                                                        .usageDiscount(0.0)
                                                        .build()
                                                )
                                                .amount("7.00")
                                                .creditsApplied("6.00")
                                                .discount(
                                                    PercentageDiscount.builder()
                                                        .discountType(
                                                            PercentageDiscount.DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.15)
                                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .endDate(
                                                    OffsetDateTime.parse(
                                                        "2022-02-01T08:00:00+00:00"
                                                    )
                                                )
                                                .filter("filter")
                                                .grouping("grouping")
                                                .maximum(
                                                    Invoice.LineItem.Maximum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            Invoice.LineItem.Maximum.Filter
                                                                .builder()
                                                                .field(
                                                                    Invoice.LineItem.Maximum.Filter
                                                                        .Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    Invoice.LineItem.Maximum.Filter
                                                                        .Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .maximumAmount("maximum_amount")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .minimum(
                                                    Invoice.LineItem.Minimum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            Invoice.LineItem.Minimum.Filter
                                                                .builder()
                                                                .field(
                                                                    Invoice.LineItem.Minimum.Filter
                                                                        .Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    Invoice.LineItem.Minimum.Filter
                                                                        .Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .minimumAmount("minimum_amount")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .name("Fixed Fee")
                                                .partiallyInvoicedAmount("4.00")
                                                .price(
                                                    Price.Unit.builder()
                                                        .id("id")
                                                        .billableMetric(
                                                            Price.Unit.BillableMetric.builder()
                                                                .id("id")
                                                                .build()
                                                        )
                                                        .billingCycleConfiguration(
                                                            Price.Unit.BillingCycleConfiguration
                                                                .builder()
                                                                .duration(0L)
                                                                .durationUnit(
                                                                    Price.Unit
                                                                        .BillingCycleConfiguration
                                                                        .DurationUnit
                                                                        .DAY
                                                                )
                                                                .build()
                                                        )
                                                        .cadence(Price.Unit.Cadence.ONE_TIME)
                                                        .conversionRate(0.0)
                                                        .createdAt(
                                                            OffsetDateTime.parse(
                                                                "2019-12-27T18:11:19.117Z"
                                                            )
                                                        )
                                                        .creditAllocation(
                                                            Price.Unit.CreditAllocation.builder()
                                                                .allowsRollover(true)
                                                                .currency("currency")
                                                                .customExpiration(
                                                                    Price.Unit.CreditAllocation
                                                                        .CustomExpiration
                                                                        .builder()
                                                                        .duration(0L)
                                                                        .durationUnit(
                                                                            Price.Unit
                                                                                .CreditAllocation
                                                                                .CustomExpiration
                                                                                .DurationUnit
                                                                                .DAY
                                                                        )
                                                                        .build()
                                                                )
                                                                .build()
                                                        )
                                                        .currency("currency")
                                                        .discount(
                                                            PercentageDiscount.builder()
                                                                .discountType(
                                                                    PercentageDiscount.DiscountType
                                                                        .PERCENTAGE
                                                                )
                                                                .percentageDiscount(0.15)
                                                                .addAppliesToPriceId(
                                                                    "h74gfhdjvn7ujokd"
                                                                )
                                                                .addAppliesToPriceId(
                                                                    "7hfgtgjnbvc3ujkl"
                                                                )
                                                                .reason("reason")
                                                                .build()
                                                        )
                                                        .externalPriceId("external_price_id")
                                                        .fixedPriceQuantity(0.0)
                                                        .invoicingCycleConfiguration(
                                                            Price.Unit.InvoicingCycleConfiguration
                                                                .builder()
                                                                .duration(0L)
                                                                .durationUnit(
                                                                    Price.Unit
                                                                        .InvoicingCycleConfiguration
                                                                        .DurationUnit
                                                                        .DAY
                                                                )
                                                                .build()
                                                        )
                                                        .item(
                                                            Price.Unit.Item.builder()
                                                                .id("id")
                                                                .name("name")
                                                                .build()
                                                        )
                                                        .maximum(
                                                            Price.Unit.Maximum.builder()
                                                                .addAppliesToPriceId("string")
                                                                .addFilter(
                                                                    Price.Unit.Maximum.Filter
                                                                        .builder()
                                                                        .field(
                                                                            Price.Unit.Maximum
                                                                                .Filter
                                                                                .Field
                                                                                .PRICE_ID
                                                                        )
                                                                        .operator(
                                                                            Price.Unit.Maximum
                                                                                .Filter
                                                                                .Operator
                                                                                .INCLUDES
                                                                        )
                                                                        .addValue("string")
                                                                        .build()
                                                                )
                                                                .maximumAmount("maximum_amount")
                                                                .build()
                                                        )
                                                        .maximumAmount("maximum_amount")
                                                        .metadata(
                                                            Price.Unit.Metadata.builder()
                                                                .putAdditionalProperty(
                                                                    "foo",
                                                                    JsonValue.from("string"),
                                                                )
                                                                .build()
                                                        )
                                                        .minimum(
                                                            Price.Unit.Minimum.builder()
                                                                .addAppliesToPriceId("string")
                                                                .addFilter(
                                                                    Price.Unit.Minimum.Filter
                                                                        .builder()
                                                                        .field(
                                                                            Price.Unit.Minimum
                                                                                .Filter
                                                                                .Field
                                                                                .PRICE_ID
                                                                        )
                                                                        .operator(
                                                                            Price.Unit.Minimum
                                                                                .Filter
                                                                                .Operator
                                                                                .INCLUDES
                                                                        )
                                                                        .addValue("string")
                                                                        .build()
                                                                )
                                                                .minimumAmount("minimum_amount")
                                                                .build()
                                                        )
                                                        .minimumAmount("minimum_amount")
                                                        .name("name")
                                                        .planPhaseOrder(0L)
                                                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                                        .unitConfig(
                                                            Price.Unit.UnitConfig.builder()
                                                                .unitAmount("unit_amount")
                                                                .build()
                                                        )
                                                        .dimensionalPriceConfiguration(
                                                            Price.Unit.DimensionalPriceConfiguration
                                                                .builder()
                                                                .addDimensionValue("string")
                                                                .dimensionalPriceGroupId(
                                                                    "dimensional_price_group_id"
                                                                )
                                                                .build()
                                                        )
                                                        .build()
                                                )
                                                .quantity(1.0)
                                                .startDate(
                                                    OffsetDateTime.parse(
                                                        "2022-02-01T08:00:00+00:00"
                                                    )
                                                )
                                                .addSubLineItem(
                                                    Invoice.LineItem.SubLineItem.Matrix.builder()
                                                        .amount("9.00")
                                                        .grouping(
                                                            Invoice.LineItem.SubLineItem.Matrix
                                                                .Grouping
                                                                .builder()
                                                                .key("region")
                                                                .value("west")
                                                                .build()
                                                        )
                                                        .matrixConfig(
                                                            Invoice.LineItem.SubLineItem.Matrix
                                                                .MatrixConfig
                                                                .builder()
                                                                .addDimensionValue("string")
                                                                .build()
                                                        )
                                                        .name("Tier One")
                                                        .quantity(5.0)
                                                        .build()
                                                )
                                                .subtotal("9.00")
                                                .addTaxAmount(
                                                    Invoice.LineItem.TaxAmount.builder()
                                                        .amount("amount")
                                                        .taxRateDescription("tax_rate_description")
                                                        .taxRatePercentage("tax_rate_percentage")
                                                        .build()
                                                )
                                                .addUsageCustomerId("string")
                                                .build()
                                        )
                                        .maximum(
                                            Invoice.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Invoice.Maximum.Filter.builder()
                                                        .field(
                                                            Invoice.Maximum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Invoice.Maximum.Filter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .memo("memo")
                                        .metadata(
                                            Invoice.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Invoice.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Invoice.Minimum.Filter.builder()
                                                        .field(
                                                            Invoice.Minimum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Invoice.Minimum.Filter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .addPaymentAttempt(
                                            Invoice.PaymentAttempt.builder()
                                                .id("id")
                                                .amount("amount")
                                                .createdAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .paymentProvider(
                                                    Invoice.PaymentAttempt.PaymentProvider.STRIPE
                                                )
                                                .paymentProviderId("payment_provider_id")
                                                .succeeded(true)
                                                .build()
                                        )
                                        .paymentFailedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .paymentStartedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .scheduledIssueAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .shippingAddress(
                                            Invoice.ShippingAddress.builder()
                                                .city("city")
                                                .country("country")
                                                .line1("line1")
                                                .line2("line2")
                                                .postalCode("postal_code")
                                                .state("state")
                                                .build()
                                        )
                                        .status(Invoice.Status.ISSUED)
                                        .subscription(
                                            Invoice.Subscription.builder()
                                                .id("VDGsT23osdLb84KD")
                                                .build()
                                        )
                                        .subtotal("8.00")
                                        .syncFailedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .total("8.00")
                                        .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .willAutoIssue(true)
                                        .build()
                                )
                                .build()
                        )
                        .build()
                )
                .appliedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .cancelledAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .build()

        assertThat(subscriptionChangeApplyResponse.id()).isEqualTo("id")
        assertThat(subscriptionChangeApplyResponse.expirationTime())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionChangeApplyResponse.status())
            .isEqualTo(SubscriptionChangeApplyResponse.Status.PENDING)
        assertThat(subscriptionChangeApplyResponse.subscription())
            .contains(
                SubscriptionChangeApplyResponse.Subscription.builder()
                    .id("id")
                    .activePlanPhaseOrder(0L)
                    .addAdjustmentInterval(
                        SubscriptionChangeApplyResponse.Subscription.AdjustmentInterval.builder()
                            .id("id")
                            .adjustment(
                                SubscriptionChangeApplyResponse.Subscription.AdjustmentInterval
                                    .Adjustment
                                    .UsageDiscount
                                    .builder()
                                    .id("id")
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        SubscriptionChangeApplyResponse.Subscription
                                            .AdjustmentInterval
                                            .Adjustment
                                            .UsageDiscount
                                            .Filter
                                            .builder()
                                            .field(
                                                SubscriptionChangeApplyResponse.Subscription
                                                    .AdjustmentInterval
                                                    .Adjustment
                                                    .UsageDiscount
                                                    .Filter
                                                    .Field
                                                    .PRICE_ID
                                            )
                                            .operator(
                                                SubscriptionChangeApplyResponse.Subscription
                                                    .AdjustmentInterval
                                                    .Adjustment
                                                    .UsageDiscount
                                                    .Filter
                                                    .Operator
                                                    .INCLUDES
                                            )
                                            .addValue("string")
                                            .build()
                                    )
                                    .isInvoiceLevel(true)
                                    .planPhaseOrder(0L)
                                    .reason("reason")
                                    .usageDiscount(0.0)
                                    .build()
                            )
                            .addAppliesToPriceIntervalId("string")
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .autoCollection(true)
                    .billingCycleAnchorConfiguration(
                        SubscriptionChangeApplyResponse.Subscription.BillingCycleAnchorConfiguration
                            .builder()
                            .day(1L)
                            .month(1L)
                            .year(0L)
                            .build()
                    )
                    .billingCycleDay(1L)
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .customer(
                        Customer.builder()
                            .id("id")
                            .addAdditionalEmail("string")
                            .autoCollection(true)
                            .balance("balance")
                            .billingAddress(
                                Customer.BillingAddress.builder()
                                    .city("city")
                                    .country("country")
                                    .line1("line1")
                                    .line2("line2")
                                    .postalCode("postal_code")
                                    .state("state")
                                    .build()
                            )
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .currency("currency")
                            .email("email")
                            .emailDelivery(true)
                            .exemptFromAutomatedTax(true)
                            .externalCustomerId("external_customer_id")
                            .hierarchy(
                                Customer.Hierarchy.builder()
                                    .addChild(
                                        Customer.Hierarchy.Child.builder()
                                            .id("id")
                                            .externalCustomerId("external_customer_id")
                                            .build()
                                    )
                                    .parent(
                                        Customer.Hierarchy.Parent.builder()
                                            .id("id")
                                            .externalCustomerId("external_customer_id")
                                            .build()
                                    )
                                    .build()
                            )
                            .metadata(
                                Customer.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .name("name")
                            .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                            .paymentProviderId("payment_provider_id")
                            .portalUrl("portal_url")
                            .shippingAddress(
                                Customer.ShippingAddress.builder()
                                    .city("city")
                                    .country("country")
                                    .line1("line1")
                                    .line2("line2")
                                    .postalCode("postal_code")
                                    .state("state")
                                    .build()
                            )
                            .taxId(
                                Customer.TaxId.builder()
                                    .country(Customer.TaxId.Country.AD)
                                    .type(Customer.TaxId.Type.AD_NRT)
                                    .value("value")
                                    .build()
                            )
                            .timezone("timezone")
                            .accountingSyncConfiguration(
                                Customer.AccountingSyncConfiguration.builder()
                                    .addAccountingProvider(
                                        Customer.AccountingSyncConfiguration.AccountingProvider
                                            .builder()
                                            .externalProviderId("external_provider_id")
                                            .providerType(
                                                Customer.AccountingSyncConfiguration
                                                    .AccountingProvider
                                                    .ProviderType
                                                    .QUICKBOOKS
                                            )
                                            .build()
                                    )
                                    .excluded(true)
                                    .build()
                            )
                            .reportingConfiguration(
                                Customer.ReportingConfiguration.builder().exempt(true).build()
                            )
                            .build()
                    )
                    .defaultInvoiceMemo("default_invoice_memo")
                    .addDiscountInterval(
                        SubscriptionChangeApplyResponse.Subscription.DiscountInterval.Amount
                            .builder()
                            .amountDiscount("amount_discount")
                            .addAppliesToPriceIntervalId("string")
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addFilter(
                                SubscriptionChangeApplyResponse.Subscription.DiscountInterval.Amount
                                    .Filter
                                    .builder()
                                    .field(
                                        SubscriptionChangeApplyResponse.Subscription
                                            .DiscountInterval
                                            .Amount
                                            .Filter
                                            .Field
                                            .PRICE_ID
                                    )
                                    .operator(
                                        SubscriptionChangeApplyResponse.Subscription
                                            .DiscountInterval
                                            .Amount
                                            .Filter
                                            .Operator
                                            .INCLUDES
                                    )
                                    .addValue("string")
                                    .build()
                            )
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .addFixedFeeQuantitySchedule(
                        SubscriptionChangeApplyResponse.Subscription.FixedFeeQuantitySchedule
                            .builder()
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .priceId("price_id")
                            .quantity(0.0)
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .invoicingThreshold("invoicing_threshold")
                    .addMaximumInterval(
                        SubscriptionChangeApplyResponse.Subscription.MaximumInterval.builder()
                            .addAppliesToPriceIntervalId("string")
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addFilter(
                                SubscriptionChangeApplyResponse.Subscription.MaximumInterval.Filter
                                    .builder()
                                    .field(
                                        SubscriptionChangeApplyResponse.Subscription.MaximumInterval
                                            .Filter
                                            .Field
                                            .PRICE_ID
                                    )
                                    .operator(
                                        SubscriptionChangeApplyResponse.Subscription.MaximumInterval
                                            .Filter
                                            .Operator
                                            .INCLUDES
                                    )
                                    .addValue("string")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .metadata(
                        SubscriptionChangeApplyResponse.Subscription.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .addMinimumInterval(
                        SubscriptionChangeApplyResponse.Subscription.MinimumInterval.builder()
                            .addAppliesToPriceIntervalId("string")
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addFilter(
                                SubscriptionChangeApplyResponse.Subscription.MinimumInterval.Filter
                                    .builder()
                                    .field(
                                        SubscriptionChangeApplyResponse.Subscription.MinimumInterval
                                            .Filter
                                            .Field
                                            .PRICE_ID
                                    )
                                    .operator(
                                        SubscriptionChangeApplyResponse.Subscription.MinimumInterval
                                            .Filter
                                            .Operator
                                            .INCLUDES
                                    )
                                    .addValue("string")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .name("name")
                    .netTerms(0L)
                    .pendingSubscriptionChange(
                        SubscriptionChangeApplyResponse.Subscription.PendingSubscriptionChange
                            .builder()
                            .id("id")
                            .build()
                    )
                    .plan(
                        Plan.builder()
                            .id("id")
                            .addAdjustment(
                                Plan.Adjustment.UsageDiscount.builder()
                                    .id("id")
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        Plan.Adjustment.UsageDiscount.Filter.builder()
                                            .field(
                                                Plan.Adjustment.UsageDiscount.Filter.Field.PRICE_ID
                                            )
                                            .operator(
                                                Plan.Adjustment.UsageDiscount.Filter.Operator
                                                    .INCLUDES
                                            )
                                            .addValue("string")
                                            .build()
                                    )
                                    .isInvoiceLevel(true)
                                    .planPhaseOrder(0L)
                                    .reason("reason")
                                    .usageDiscount(0.0)
                                    .build()
                            )
                            .basePlan(
                                Plan.BasePlan.builder()
                                    .id("m2t5akQeh2obwxeU")
                                    .externalPlanId("m2t5akQeh2obwxeU")
                                    .name("Example plan")
                                    .build()
                            )
                            .basePlanId("base_plan_id")
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .currency("currency")
                            .defaultInvoiceMemo("default_invoice_memo")
                            .description("description")
                            .discount(
                                PercentageDiscount.builder()
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .reason("reason")
                                    .build()
                            )
                            .externalPlanId("external_plan_id")
                            .invoicingCurrency("invoicing_currency")
                            .maximum(
                                Plan.Maximum.builder()
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        Plan.Maximum.Filter.builder()
                                            .field(Plan.Maximum.Filter.Field.PRICE_ID)
                                            .operator(Plan.Maximum.Filter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .metadata(
                                Plan.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .minimum(
                                Plan.Minimum.builder()
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        Plan.Minimum.Filter.builder()
                                            .field(Plan.Minimum.Filter.Field.PRICE_ID)
                                            .operator(Plan.Minimum.Filter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .name("name")
                            .netTerms(0L)
                            .addPlanPhase(
                                Plan.PlanPhase.builder()
                                    .id("id")
                                    .description("description")
                                    .discount(
                                        PercentageDiscount.builder()
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                            .reason("reason")
                                            .build()
                                    )
                                    .duration(0L)
                                    .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                    .maximum(
                                        Plan.PlanPhase.Maximum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                Plan.PlanPhase.Maximum.Filter.builder()
                                                    .field(
                                                        Plan.PlanPhase.Maximum.Filter.Field.PRICE_ID
                                                    )
                                                    .operator(
                                                        Plan.PlanPhase.Maximum.Filter.Operator
                                                            .INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .minimum(
                                        Plan.PlanPhase.Minimum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                Plan.PlanPhase.Minimum.Filter.builder()
                                                    .field(
                                                        Plan.PlanPhase.Minimum.Filter.Field.PRICE_ID
                                                    )
                                                    .operator(
                                                        Plan.PlanPhase.Minimum.Filter.Operator
                                                            .INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .name("name")
                                    .order(0L)
                                    .build()
                            )
                            .addPrice(
                                Price.Unit.builder()
                                    .id("id")
                                    .billableMetric(
                                        Price.Unit.BillableMetric.builder().id("id").build()
                                    )
                                    .billingCycleConfiguration(
                                        Price.Unit.BillingCycleConfiguration.builder()
                                            .duration(0L)
                                            .durationUnit(
                                                Price.Unit.BillingCycleConfiguration.DurationUnit
                                                    .DAY
                                            )
                                            .build()
                                    )
                                    .cadence(Price.Unit.Cadence.ONE_TIME)
                                    .conversionRate(0.0)
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .creditAllocation(
                                        Price.Unit.CreditAllocation.builder()
                                            .allowsRollover(true)
                                            .currency("currency")
                                            .customExpiration(
                                                Price.Unit.CreditAllocation.CustomExpiration
                                                    .builder()
                                                    .duration(0L)
                                                    .durationUnit(
                                                        Price.Unit.CreditAllocation.CustomExpiration
                                                            .DurationUnit
                                                            .DAY
                                                    )
                                                    .build()
                                            )
                                            .build()
                                    )
                                    .currency("currency")
                                    .discount(
                                        PercentageDiscount.builder()
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                            .reason("reason")
                                            .build()
                                    )
                                    .externalPriceId("external_price_id")
                                    .fixedPriceQuantity(0.0)
                                    .invoicingCycleConfiguration(
                                        Price.Unit.InvoicingCycleConfiguration.builder()
                                            .duration(0L)
                                            .durationUnit(
                                                Price.Unit.InvoicingCycleConfiguration.DurationUnit
                                                    .DAY
                                            )
                                            .build()
                                    )
                                    .item(Price.Unit.Item.builder().id("id").name("name").build())
                                    .maximum(
                                        Price.Unit.Maximum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                Price.Unit.Maximum.Filter.builder()
                                                    .field(Price.Unit.Maximum.Filter.Field.PRICE_ID)
                                                    .operator(
                                                        Price.Unit.Maximum.Filter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .metadata(
                                        Price.Unit.Metadata.builder()
                                            .putAdditionalProperty("foo", JsonValue.from("string"))
                                            .build()
                                    )
                                    .minimum(
                                        Price.Unit.Minimum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                Price.Unit.Minimum.Filter.builder()
                                                    .field(Price.Unit.Minimum.Filter.Field.PRICE_ID)
                                                    .operator(
                                                        Price.Unit.Minimum.Filter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .name("name")
                                    .planPhaseOrder(0L)
                                    .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                    .unitConfig(
                                        Price.Unit.UnitConfig.builder()
                                            .unitAmount("unit_amount")
                                            .build()
                                    )
                                    .dimensionalPriceConfiguration(
                                        Price.Unit.DimensionalPriceConfiguration.builder()
                                            .addDimensionValue("string")
                                            .dimensionalPriceGroupId("dimensional_price_group_id")
                                            .build()
                                    )
                                    .build()
                            )
                            .product(
                                Plan.Product.builder()
                                    .id("id")
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .name("name")
                                    .build()
                            )
                            .status(Plan.Status.ACTIVE)
                            .trialConfig(
                                Plan.TrialConfig.builder()
                                    .trialPeriod(0L)
                                    .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                                    .build()
                            )
                            .version(0L)
                            .build()
                    )
                    .addPriceInterval(
                        SubscriptionChangeApplyResponse.Subscription.PriceInterval.builder()
                            .id("id")
                            .billingCycleDay(0L)
                            .currentBillingPeriodEndDate(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                            .currentBillingPeriodStartDate(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .filter("filter")
                            .addFixedFeeQuantityTransition(
                                SubscriptionChangeApplyResponse.Subscription.PriceInterval
                                    .FixedFeeQuantityTransition
                                    .builder()
                                    .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .priceId("price_id")
                                    .quantity(0L)
                                    .build()
                            )
                            .price(
                                Price.Unit.builder()
                                    .id("id")
                                    .billableMetric(
                                        Price.Unit.BillableMetric.builder().id("id").build()
                                    )
                                    .billingCycleConfiguration(
                                        Price.Unit.BillingCycleConfiguration.builder()
                                            .duration(0L)
                                            .durationUnit(
                                                Price.Unit.BillingCycleConfiguration.DurationUnit
                                                    .DAY
                                            )
                                            .build()
                                    )
                                    .cadence(Price.Unit.Cadence.ONE_TIME)
                                    .conversionRate(0.0)
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .creditAllocation(
                                        Price.Unit.CreditAllocation.builder()
                                            .allowsRollover(true)
                                            .currency("currency")
                                            .customExpiration(
                                                Price.Unit.CreditAllocation.CustomExpiration
                                                    .builder()
                                                    .duration(0L)
                                                    .durationUnit(
                                                        Price.Unit.CreditAllocation.CustomExpiration
                                                            .DurationUnit
                                                            .DAY
                                                    )
                                                    .build()
                                            )
                                            .build()
                                    )
                                    .currency("currency")
                                    .discount(
                                        PercentageDiscount.builder()
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                            .reason("reason")
                                            .build()
                                    )
                                    .externalPriceId("external_price_id")
                                    .fixedPriceQuantity(0.0)
                                    .invoicingCycleConfiguration(
                                        Price.Unit.InvoicingCycleConfiguration.builder()
                                            .duration(0L)
                                            .durationUnit(
                                                Price.Unit.InvoicingCycleConfiguration.DurationUnit
                                                    .DAY
                                            )
                                            .build()
                                    )
                                    .item(Price.Unit.Item.builder().id("id").name("name").build())
                                    .maximum(
                                        Price.Unit.Maximum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                Price.Unit.Maximum.Filter.builder()
                                                    .field(Price.Unit.Maximum.Filter.Field.PRICE_ID)
                                                    .operator(
                                                        Price.Unit.Maximum.Filter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .metadata(
                                        Price.Unit.Metadata.builder()
                                            .putAdditionalProperty("foo", JsonValue.from("string"))
                                            .build()
                                    )
                                    .minimum(
                                        Price.Unit.Minimum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                Price.Unit.Minimum.Filter.builder()
                                                    .field(Price.Unit.Minimum.Filter.Field.PRICE_ID)
                                                    .operator(
                                                        Price.Unit.Minimum.Filter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .name("name")
                                    .planPhaseOrder(0L)
                                    .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                    .unitConfig(
                                        Price.Unit.UnitConfig.builder()
                                            .unitAmount("unit_amount")
                                            .build()
                                    )
                                    .dimensionalPriceConfiguration(
                                        Price.Unit.DimensionalPriceConfiguration.builder()
                                            .addDimensionValue("string")
                                            .dimensionalPriceGroupId("dimensional_price_group_id")
                                            .build()
                                    )
                                    .build()
                            )
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addUsageCustomerId("string")
                            .build()
                    )
                    .redeemedCoupon(
                        SubscriptionChangeApplyResponse.Subscription.RedeemedCoupon.builder()
                            .couponId("coupon_id")
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .status(SubscriptionChangeApplyResponse.Subscription.Status.ACTIVE)
                    .trialInfo(
                        SubscriptionChangeApplyResponse.Subscription.TrialInfo.builder()
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .changedResources(
                        SubscriptionChangeApplyResponse.Subscription.ChangedResources.builder()
                            .addCreatedCreditNote(
                                CreditNote.builder()
                                    .id("id")
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .creditNoteNumber("credit_note_number")
                                    .creditNotePdf("credit_note_pdf")
                                    .customer(
                                        CreditNote.Customer.builder()
                                            .id("id")
                                            .externalCustomerId("external_customer_id")
                                            .build()
                                    )
                                    .invoiceId("invoice_id")
                                    .addLineItem(
                                        CreditNote.LineItem.builder()
                                            .id("id")
                                            .amount("amount")
                                            .itemId("item_id")
                                            .name("name")
                                            .quantity(0.0)
                                            .subtotal("subtotal")
                                            .addTaxAmount(
                                                CreditNote.LineItem.TaxAmount.builder()
                                                    .amount("amount")
                                                    .taxRateDescription("tax_rate_description")
                                                    .taxRatePercentage("tax_rate_percentage")
                                                    .build()
                                            )
                                            .addDiscount(
                                                CreditNote.LineItem.Discount.builder()
                                                    .id("id")
                                                    .amountApplied("amount_applied")
                                                    .addAppliesToPriceId("string")
                                                    .discountType(
                                                        CreditNote.LineItem.Discount.DiscountType
                                                            .PERCENTAGE
                                                    )
                                                    .percentageDiscount(0.0)
                                                    .amountDiscount("amount_discount")
                                                    .reason("reason")
                                                    .build()
                                            )
                                            .build()
                                    )
                                    .maximumAmountAdjustment(
                                        CreditNote.MaximumAmountAdjustment.builder()
                                            .amountApplied("amount_applied")
                                            .discountType(
                                                CreditNote.MaximumAmountAdjustment.DiscountType
                                                    .PERCENTAGE
                                            )
                                            .percentageDiscount(0.0)
                                            .addAppliesToPrice(
                                                CreditNote.MaximumAmountAdjustment.AppliesToPrice
                                                    .builder()
                                                    .id("id")
                                                    .name("name")
                                                    .build()
                                            )
                                            .reason("reason")
                                            .build()
                                    )
                                    .memo("memo")
                                    .minimumAmountRefunded("minimum_amount_refunded")
                                    .reason(CreditNote.Reason.DUPLICATE)
                                    .subtotal("subtotal")
                                    .total("total")
                                    .type(CreditNote.Type.REFUND)
                                    .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .addDiscount(
                                        CreditNote.Discount.builder()
                                            .amountApplied("amount_applied")
                                            .discountType(
                                                CreditNote.Discount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.0)
                                            .addAppliesToPrice(
                                                CreditNote.Discount.AppliesToPrice.builder()
                                                    .id("id")
                                                    .name("name")
                                                    .build()
                                            )
                                            .reason("reason")
                                            .build()
                                    )
                                    .build()
                            )
                            .addCreatedInvoice(
                                Invoice.builder()
                                    .id("id")
                                    .amountDue("8.00")
                                    .autoCollection(
                                        Invoice.AutoCollection.builder()
                                            .enabled(true)
                                            .nextAttemptAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .numAttempts(0L)
                                            .previouslyAttemptedAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .build()
                                    )
                                    .billingAddress(
                                        Invoice.BillingAddress.builder()
                                            .city("city")
                                            .country("country")
                                            .line1("line1")
                                            .line2("line2")
                                            .postalCode("postal_code")
                                            .state("state")
                                            .build()
                                    )
                                    .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                    .addCreditNote(
                                        Invoice.CreditNote.builder()
                                            .id("id")
                                            .creditNoteNumber("credit_note_number")
                                            .memo("memo")
                                            .reason("reason")
                                            .total("total")
                                            .type("type")
                                            .voidedAt(
                                                OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                            )
                                            .build()
                                    )
                                    .currency("USD")
                                    .customer(
                                        Invoice.Customer.builder()
                                            .id("id")
                                            .externalCustomerId("external_customer_id")
                                            .build()
                                    )
                                    .addCustomerBalanceTransaction(
                                        Invoice.CustomerBalanceTransaction.builder()
                                            .id("cgZa3SXcsPTVyC4Y")
                                            .action(
                                                Invoice.CustomerBalanceTransaction.Action
                                                    .APPLIED_TO_INVOICE
                                            )
                                            .amount("11.00")
                                            .createdAt(
                                                OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                            )
                                            .creditNote(
                                                Invoice.CustomerBalanceTransaction.CreditNote
                                                    .builder()
                                                    .id("id")
                                                    .build()
                                            )
                                            .description("An optional description")
                                            .endingBalance("22.00")
                                            .invoice(
                                                Invoice.CustomerBalanceTransaction.InnerInvoice
                                                    .builder()
                                                    .id("gXcsPTVyC4YZa3Sc")
                                                    .build()
                                            )
                                            .startingBalance("33.00")
                                            .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                            .build()
                                    )
                                    .customerTaxId(
                                        Invoice.CustomerTaxId.builder()
                                            .country(Invoice.CustomerTaxId.Country.AD)
                                            .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                            .value("value")
                                            .build()
                                    )
                                    .discount(JsonValue.from(mapOf<String, Any>()))
                                    .addDiscount(
                                        PercentageDiscount.builder()
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                            .reason("reason")
                                            .build()
                                    )
                                    .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                                    .eligibleToIssueAt(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                                    .hostedInvoiceUrl("hosted_invoice_url")
                                    .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                                    .invoiceNumber("JYEFHK-00001")
                                    .invoicePdf(
                                        "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                                    )
                                    .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                                    .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .addLineItem(
                                        Invoice.LineItem.builder()
                                            .id("id")
                                            .adjustedSubtotal("5.00")
                                            .addAdjustment(
                                                Invoice.LineItem.Adjustment.UsageDiscount.builder()
                                                    .id("id")
                                                    .amount("amount")
                                                    .addAppliesToPriceId("string")
                                                    .addFilter(
                                                        Invoice.LineItem.Adjustment.UsageDiscount
                                                            .Filter
                                                            .builder()
                                                            .field(
                                                                Invoice.LineItem.Adjustment
                                                                    .UsageDiscount
                                                                    .Filter
                                                                    .Field
                                                                    .PRICE_ID
                                                            )
                                                            .operator(
                                                                Invoice.LineItem.Adjustment
                                                                    .UsageDiscount
                                                                    .Filter
                                                                    .Operator
                                                                    .INCLUDES
                                                            )
                                                            .addValue("string")
                                                            .build()
                                                    )
                                                    .isInvoiceLevel(true)
                                                    .reason("reason")
                                                    .usageDiscount(0.0)
                                                    .build()
                                            )
                                            .amount("7.00")
                                            .creditsApplied("6.00")
                                            .discount(
                                                PercentageDiscount.builder()
                                                    .discountType(
                                                        PercentageDiscount.DiscountType.PERCENTAGE
                                                    )
                                                    .percentageDiscount(0.15)
                                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                    .reason("reason")
                                                    .build()
                                            )
                                            .endDate(
                                                OffsetDateTime.parse("2022-02-01T08:00:00+00:00")
                                            )
                                            .filter("filter")
                                            .grouping("grouping")
                                            .maximum(
                                                Invoice.LineItem.Maximum.builder()
                                                    .addAppliesToPriceId("string")
                                                    .addFilter(
                                                        Invoice.LineItem.Maximum.Filter.builder()
                                                            .field(
                                                                Invoice.LineItem.Maximum.Filter
                                                                    .Field
                                                                    .PRICE_ID
                                                            )
                                                            .operator(
                                                                Invoice.LineItem.Maximum.Filter
                                                                    .Operator
                                                                    .INCLUDES
                                                            )
                                                            .addValue("string")
                                                            .build()
                                                    )
                                                    .maximumAmount("maximum_amount")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .minimum(
                                                Invoice.LineItem.Minimum.builder()
                                                    .addAppliesToPriceId("string")
                                                    .addFilter(
                                                        Invoice.LineItem.Minimum.Filter.builder()
                                                            .field(
                                                                Invoice.LineItem.Minimum.Filter
                                                                    .Field
                                                                    .PRICE_ID
                                                            )
                                                            .operator(
                                                                Invoice.LineItem.Minimum.Filter
                                                                    .Operator
                                                                    .INCLUDES
                                                            )
                                                            .addValue("string")
                                                            .build()
                                                    )
                                                    .minimumAmount("minimum_amount")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .name("Fixed Fee")
                                            .partiallyInvoicedAmount("4.00")
                                            .price(
                                                Price.Unit.builder()
                                                    .id("id")
                                                    .billableMetric(
                                                        Price.Unit.BillableMetric.builder()
                                                            .id("id")
                                                            .build()
                                                    )
                                                    .billingCycleConfiguration(
                                                        Price.Unit.BillingCycleConfiguration
                                                            .builder()
                                                            .duration(0L)
                                                            .durationUnit(
                                                                Price.Unit.BillingCycleConfiguration
                                                                    .DurationUnit
                                                                    .DAY
                                                            )
                                                            .build()
                                                    )
                                                    .cadence(Price.Unit.Cadence.ONE_TIME)
                                                    .conversionRate(0.0)
                                                    .createdAt(
                                                        OffsetDateTime.parse(
                                                            "2019-12-27T18:11:19.117Z"
                                                        )
                                                    )
                                                    .creditAllocation(
                                                        Price.Unit.CreditAllocation.builder()
                                                            .allowsRollover(true)
                                                            .currency("currency")
                                                            .customExpiration(
                                                                Price.Unit.CreditAllocation
                                                                    .CustomExpiration
                                                                    .builder()
                                                                    .duration(0L)
                                                                    .durationUnit(
                                                                        Price.Unit.CreditAllocation
                                                                            .CustomExpiration
                                                                            .DurationUnit
                                                                            .DAY
                                                                    )
                                                                    .build()
                                                            )
                                                            .build()
                                                    )
                                                    .currency("currency")
                                                    .discount(
                                                        PercentageDiscount.builder()
                                                            .discountType(
                                                                PercentageDiscount.DiscountType
                                                                    .PERCENTAGE
                                                            )
                                                            .percentageDiscount(0.15)
                                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                            .reason("reason")
                                                            .build()
                                                    )
                                                    .externalPriceId("external_price_id")
                                                    .fixedPriceQuantity(0.0)
                                                    .invoicingCycleConfiguration(
                                                        Price.Unit.InvoicingCycleConfiguration
                                                            .builder()
                                                            .duration(0L)
                                                            .durationUnit(
                                                                Price.Unit
                                                                    .InvoicingCycleConfiguration
                                                                    .DurationUnit
                                                                    .DAY
                                                            )
                                                            .build()
                                                    )
                                                    .item(
                                                        Price.Unit.Item.builder()
                                                            .id("id")
                                                            .name("name")
                                                            .build()
                                                    )
                                                    .maximum(
                                                        Price.Unit.Maximum.builder()
                                                            .addAppliesToPriceId("string")
                                                            .addFilter(
                                                                Price.Unit.Maximum.Filter.builder()
                                                                    .field(
                                                                        Price.Unit.Maximum.Filter
                                                                            .Field
                                                                            .PRICE_ID
                                                                    )
                                                                    .operator(
                                                                        Price.Unit.Maximum.Filter
                                                                            .Operator
                                                                            .INCLUDES
                                                                    )
                                                                    .addValue("string")
                                                                    .build()
                                                            )
                                                            .maximumAmount("maximum_amount")
                                                            .build()
                                                    )
                                                    .maximumAmount("maximum_amount")
                                                    .metadata(
                                                        Price.Unit.Metadata.builder()
                                                            .putAdditionalProperty(
                                                                "foo",
                                                                JsonValue.from("string"),
                                                            )
                                                            .build()
                                                    )
                                                    .minimum(
                                                        Price.Unit.Minimum.builder()
                                                            .addAppliesToPriceId("string")
                                                            .addFilter(
                                                                Price.Unit.Minimum.Filter.builder()
                                                                    .field(
                                                                        Price.Unit.Minimum.Filter
                                                                            .Field
                                                                            .PRICE_ID
                                                                    )
                                                                    .operator(
                                                                        Price.Unit.Minimum.Filter
                                                                            .Operator
                                                                            .INCLUDES
                                                                    )
                                                                    .addValue("string")
                                                                    .build()
                                                            )
                                                            .minimumAmount("minimum_amount")
                                                            .build()
                                                    )
                                                    .minimumAmount("minimum_amount")
                                                    .name("name")
                                                    .planPhaseOrder(0L)
                                                    .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                                    .unitConfig(
                                                        Price.Unit.UnitConfig.builder()
                                                            .unitAmount("unit_amount")
                                                            .build()
                                                    )
                                                    .dimensionalPriceConfiguration(
                                                        Price.Unit.DimensionalPriceConfiguration
                                                            .builder()
                                                            .addDimensionValue("string")
                                                            .dimensionalPriceGroupId(
                                                                "dimensional_price_group_id"
                                                            )
                                                            .build()
                                                    )
                                                    .build()
                                            )
                                            .quantity(1.0)
                                            .startDate(
                                                OffsetDateTime.parse("2022-02-01T08:00:00+00:00")
                                            )
                                            .addSubLineItem(
                                                Invoice.LineItem.SubLineItem.Matrix.builder()
                                                    .amount("9.00")
                                                    .grouping(
                                                        Invoice.LineItem.SubLineItem.Matrix.Grouping
                                                            .builder()
                                                            .key("region")
                                                            .value("west")
                                                            .build()
                                                    )
                                                    .matrixConfig(
                                                        Invoice.LineItem.SubLineItem.Matrix
                                                            .MatrixConfig
                                                            .builder()
                                                            .addDimensionValue("string")
                                                            .build()
                                                    )
                                                    .name("Tier One")
                                                    .quantity(5.0)
                                                    .build()
                                            )
                                            .subtotal("9.00")
                                            .addTaxAmount(
                                                Invoice.LineItem.TaxAmount.builder()
                                                    .amount("amount")
                                                    .taxRateDescription("tax_rate_description")
                                                    .taxRatePercentage("tax_rate_percentage")
                                                    .build()
                                            )
                                            .addUsageCustomerId("string")
                                            .build()
                                    )
                                    .maximum(
                                        Invoice.Maximum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                Invoice.Maximum.Filter.builder()
                                                    .field(Invoice.Maximum.Filter.Field.PRICE_ID)
                                                    .operator(
                                                        Invoice.Maximum.Filter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .memo("memo")
                                    .metadata(
                                        Invoice.Metadata.builder()
                                            .putAdditionalProperty("foo", JsonValue.from("string"))
                                            .build()
                                    )
                                    .minimum(
                                        Invoice.Minimum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                Invoice.Minimum.Filter.builder()
                                                    .field(Invoice.Minimum.Filter.Field.PRICE_ID)
                                                    .operator(
                                                        Invoice.Minimum.Filter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .addPaymentAttempt(
                                        Invoice.PaymentAttempt.builder()
                                            .id("id")
                                            .amount("amount")
                                            .createdAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .paymentProvider(
                                                Invoice.PaymentAttempt.PaymentProvider.STRIPE
                                            )
                                            .paymentProviderId("payment_provider_id")
                                            .succeeded(true)
                                            .build()
                                    )
                                    .paymentFailedAt(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                                    .paymentStartedAt(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                                    .scheduledIssueAt(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                                    .shippingAddress(
                                        Invoice.ShippingAddress.builder()
                                            .city("city")
                                            .country("country")
                                            .line1("line1")
                                            .line2("line2")
                                            .postalCode("postal_code")
                                            .state("state")
                                            .build()
                                    )
                                    .status(Invoice.Status.ISSUED)
                                    .subscription(
                                        Invoice.Subscription.builder()
                                            .id("VDGsT23osdLb84KD")
                                            .build()
                                    )
                                    .subtotal("8.00")
                                    .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .total("8.00")
                                    .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .willAutoIssue(true)
                                    .build()
                            )
                            .addVoidedCreditNote(
                                CreditNote.builder()
                                    .id("id")
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .creditNoteNumber("credit_note_number")
                                    .creditNotePdf("credit_note_pdf")
                                    .customer(
                                        CreditNote.Customer.builder()
                                            .id("id")
                                            .externalCustomerId("external_customer_id")
                                            .build()
                                    )
                                    .invoiceId("invoice_id")
                                    .addLineItem(
                                        CreditNote.LineItem.builder()
                                            .id("id")
                                            .amount("amount")
                                            .itemId("item_id")
                                            .name("name")
                                            .quantity(0.0)
                                            .subtotal("subtotal")
                                            .addTaxAmount(
                                                CreditNote.LineItem.TaxAmount.builder()
                                                    .amount("amount")
                                                    .taxRateDescription("tax_rate_description")
                                                    .taxRatePercentage("tax_rate_percentage")
                                                    .build()
                                            )
                                            .addDiscount(
                                                CreditNote.LineItem.Discount.builder()
                                                    .id("id")
                                                    .amountApplied("amount_applied")
                                                    .addAppliesToPriceId("string")
                                                    .discountType(
                                                        CreditNote.LineItem.Discount.DiscountType
                                                            .PERCENTAGE
                                                    )
                                                    .percentageDiscount(0.0)
                                                    .amountDiscount("amount_discount")
                                                    .reason("reason")
                                                    .build()
                                            )
                                            .build()
                                    )
                                    .maximumAmountAdjustment(
                                        CreditNote.MaximumAmountAdjustment.builder()
                                            .amountApplied("amount_applied")
                                            .discountType(
                                                CreditNote.MaximumAmountAdjustment.DiscountType
                                                    .PERCENTAGE
                                            )
                                            .percentageDiscount(0.0)
                                            .addAppliesToPrice(
                                                CreditNote.MaximumAmountAdjustment.AppliesToPrice
                                                    .builder()
                                                    .id("id")
                                                    .name("name")
                                                    .build()
                                            )
                                            .reason("reason")
                                            .build()
                                    )
                                    .memo("memo")
                                    .minimumAmountRefunded("minimum_amount_refunded")
                                    .reason(CreditNote.Reason.DUPLICATE)
                                    .subtotal("subtotal")
                                    .total("total")
                                    .type(CreditNote.Type.REFUND)
                                    .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .addDiscount(
                                        CreditNote.Discount.builder()
                                            .amountApplied("amount_applied")
                                            .discountType(
                                                CreditNote.Discount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.0)
                                            .addAppliesToPrice(
                                                CreditNote.Discount.AppliesToPrice.builder()
                                                    .id("id")
                                                    .name("name")
                                                    .build()
                                            )
                                            .reason("reason")
                                            .build()
                                    )
                                    .build()
                            )
                            .addVoidedInvoice(
                                Invoice.builder()
                                    .id("id")
                                    .amountDue("8.00")
                                    .autoCollection(
                                        Invoice.AutoCollection.builder()
                                            .enabled(true)
                                            .nextAttemptAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .numAttempts(0L)
                                            .previouslyAttemptedAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .build()
                                    )
                                    .billingAddress(
                                        Invoice.BillingAddress.builder()
                                            .city("city")
                                            .country("country")
                                            .line1("line1")
                                            .line2("line2")
                                            .postalCode("postal_code")
                                            .state("state")
                                            .build()
                                    )
                                    .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                    .addCreditNote(
                                        Invoice.CreditNote.builder()
                                            .id("id")
                                            .creditNoteNumber("credit_note_number")
                                            .memo("memo")
                                            .reason("reason")
                                            .total("total")
                                            .type("type")
                                            .voidedAt(
                                                OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                            )
                                            .build()
                                    )
                                    .currency("USD")
                                    .customer(
                                        Invoice.Customer.builder()
                                            .id("id")
                                            .externalCustomerId("external_customer_id")
                                            .build()
                                    )
                                    .addCustomerBalanceTransaction(
                                        Invoice.CustomerBalanceTransaction.builder()
                                            .id("cgZa3SXcsPTVyC4Y")
                                            .action(
                                                Invoice.CustomerBalanceTransaction.Action
                                                    .APPLIED_TO_INVOICE
                                            )
                                            .amount("11.00")
                                            .createdAt(
                                                OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                            )
                                            .creditNote(
                                                Invoice.CustomerBalanceTransaction.CreditNote
                                                    .builder()
                                                    .id("id")
                                                    .build()
                                            )
                                            .description("An optional description")
                                            .endingBalance("22.00")
                                            .invoice(
                                                Invoice.CustomerBalanceTransaction.InnerInvoice
                                                    .builder()
                                                    .id("gXcsPTVyC4YZa3Sc")
                                                    .build()
                                            )
                                            .startingBalance("33.00")
                                            .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                            .build()
                                    )
                                    .customerTaxId(
                                        Invoice.CustomerTaxId.builder()
                                            .country(Invoice.CustomerTaxId.Country.AD)
                                            .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                            .value("value")
                                            .build()
                                    )
                                    .discount(JsonValue.from(mapOf<String, Any>()))
                                    .addDiscount(
                                        PercentageDiscount.builder()
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                            .reason("reason")
                                            .build()
                                    )
                                    .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                                    .eligibleToIssueAt(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                                    .hostedInvoiceUrl("hosted_invoice_url")
                                    .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                                    .invoiceNumber("JYEFHK-00001")
                                    .invoicePdf(
                                        "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                                    )
                                    .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                                    .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .addLineItem(
                                        Invoice.LineItem.builder()
                                            .id("id")
                                            .adjustedSubtotal("5.00")
                                            .addAdjustment(
                                                Invoice.LineItem.Adjustment.UsageDiscount.builder()
                                                    .id("id")
                                                    .amount("amount")
                                                    .addAppliesToPriceId("string")
                                                    .addFilter(
                                                        Invoice.LineItem.Adjustment.UsageDiscount
                                                            .Filter
                                                            .builder()
                                                            .field(
                                                                Invoice.LineItem.Adjustment
                                                                    .UsageDiscount
                                                                    .Filter
                                                                    .Field
                                                                    .PRICE_ID
                                                            )
                                                            .operator(
                                                                Invoice.LineItem.Adjustment
                                                                    .UsageDiscount
                                                                    .Filter
                                                                    .Operator
                                                                    .INCLUDES
                                                            )
                                                            .addValue("string")
                                                            .build()
                                                    )
                                                    .isInvoiceLevel(true)
                                                    .reason("reason")
                                                    .usageDiscount(0.0)
                                                    .build()
                                            )
                                            .amount("7.00")
                                            .creditsApplied("6.00")
                                            .discount(
                                                PercentageDiscount.builder()
                                                    .discountType(
                                                        PercentageDiscount.DiscountType.PERCENTAGE
                                                    )
                                                    .percentageDiscount(0.15)
                                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                    .reason("reason")
                                                    .build()
                                            )
                                            .endDate(
                                                OffsetDateTime.parse("2022-02-01T08:00:00+00:00")
                                            )
                                            .filter("filter")
                                            .grouping("grouping")
                                            .maximum(
                                                Invoice.LineItem.Maximum.builder()
                                                    .addAppliesToPriceId("string")
                                                    .addFilter(
                                                        Invoice.LineItem.Maximum.Filter.builder()
                                                            .field(
                                                                Invoice.LineItem.Maximum.Filter
                                                                    .Field
                                                                    .PRICE_ID
                                                            )
                                                            .operator(
                                                                Invoice.LineItem.Maximum.Filter
                                                                    .Operator
                                                                    .INCLUDES
                                                            )
                                                            .addValue("string")
                                                            .build()
                                                    )
                                                    .maximumAmount("maximum_amount")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .minimum(
                                                Invoice.LineItem.Minimum.builder()
                                                    .addAppliesToPriceId("string")
                                                    .addFilter(
                                                        Invoice.LineItem.Minimum.Filter.builder()
                                                            .field(
                                                                Invoice.LineItem.Minimum.Filter
                                                                    .Field
                                                                    .PRICE_ID
                                                            )
                                                            .operator(
                                                                Invoice.LineItem.Minimum.Filter
                                                                    .Operator
                                                                    .INCLUDES
                                                            )
                                                            .addValue("string")
                                                            .build()
                                                    )
                                                    .minimumAmount("minimum_amount")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .name("Fixed Fee")
                                            .partiallyInvoicedAmount("4.00")
                                            .price(
                                                Price.Unit.builder()
                                                    .id("id")
                                                    .billableMetric(
                                                        Price.Unit.BillableMetric.builder()
                                                            .id("id")
                                                            .build()
                                                    )
                                                    .billingCycleConfiguration(
                                                        Price.Unit.BillingCycleConfiguration
                                                            .builder()
                                                            .duration(0L)
                                                            .durationUnit(
                                                                Price.Unit.BillingCycleConfiguration
                                                                    .DurationUnit
                                                                    .DAY
                                                            )
                                                            .build()
                                                    )
                                                    .cadence(Price.Unit.Cadence.ONE_TIME)
                                                    .conversionRate(0.0)
                                                    .createdAt(
                                                        OffsetDateTime.parse(
                                                            "2019-12-27T18:11:19.117Z"
                                                        )
                                                    )
                                                    .creditAllocation(
                                                        Price.Unit.CreditAllocation.builder()
                                                            .allowsRollover(true)
                                                            .currency("currency")
                                                            .customExpiration(
                                                                Price.Unit.CreditAllocation
                                                                    .CustomExpiration
                                                                    .builder()
                                                                    .duration(0L)
                                                                    .durationUnit(
                                                                        Price.Unit.CreditAllocation
                                                                            .CustomExpiration
                                                                            .DurationUnit
                                                                            .DAY
                                                                    )
                                                                    .build()
                                                            )
                                                            .build()
                                                    )
                                                    .currency("currency")
                                                    .discount(
                                                        PercentageDiscount.builder()
                                                            .discountType(
                                                                PercentageDiscount.DiscountType
                                                                    .PERCENTAGE
                                                            )
                                                            .percentageDiscount(0.15)
                                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                            .reason("reason")
                                                            .build()
                                                    )
                                                    .externalPriceId("external_price_id")
                                                    .fixedPriceQuantity(0.0)
                                                    .invoicingCycleConfiguration(
                                                        Price.Unit.InvoicingCycleConfiguration
                                                            .builder()
                                                            .duration(0L)
                                                            .durationUnit(
                                                                Price.Unit
                                                                    .InvoicingCycleConfiguration
                                                                    .DurationUnit
                                                                    .DAY
                                                            )
                                                            .build()
                                                    )
                                                    .item(
                                                        Price.Unit.Item.builder()
                                                            .id("id")
                                                            .name("name")
                                                            .build()
                                                    )
                                                    .maximum(
                                                        Price.Unit.Maximum.builder()
                                                            .addAppliesToPriceId("string")
                                                            .addFilter(
                                                                Price.Unit.Maximum.Filter.builder()
                                                                    .field(
                                                                        Price.Unit.Maximum.Filter
                                                                            .Field
                                                                            .PRICE_ID
                                                                    )
                                                                    .operator(
                                                                        Price.Unit.Maximum.Filter
                                                                            .Operator
                                                                            .INCLUDES
                                                                    )
                                                                    .addValue("string")
                                                                    .build()
                                                            )
                                                            .maximumAmount("maximum_amount")
                                                            .build()
                                                    )
                                                    .maximumAmount("maximum_amount")
                                                    .metadata(
                                                        Price.Unit.Metadata.builder()
                                                            .putAdditionalProperty(
                                                                "foo",
                                                                JsonValue.from("string"),
                                                            )
                                                            .build()
                                                    )
                                                    .minimum(
                                                        Price.Unit.Minimum.builder()
                                                            .addAppliesToPriceId("string")
                                                            .addFilter(
                                                                Price.Unit.Minimum.Filter.builder()
                                                                    .field(
                                                                        Price.Unit.Minimum.Filter
                                                                            .Field
                                                                            .PRICE_ID
                                                                    )
                                                                    .operator(
                                                                        Price.Unit.Minimum.Filter
                                                                            .Operator
                                                                            .INCLUDES
                                                                    )
                                                                    .addValue("string")
                                                                    .build()
                                                            )
                                                            .minimumAmount("minimum_amount")
                                                            .build()
                                                    )
                                                    .minimumAmount("minimum_amount")
                                                    .name("name")
                                                    .planPhaseOrder(0L)
                                                    .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                                    .unitConfig(
                                                        Price.Unit.UnitConfig.builder()
                                                            .unitAmount("unit_amount")
                                                            .build()
                                                    )
                                                    .dimensionalPriceConfiguration(
                                                        Price.Unit.DimensionalPriceConfiguration
                                                            .builder()
                                                            .addDimensionValue("string")
                                                            .dimensionalPriceGroupId(
                                                                "dimensional_price_group_id"
                                                            )
                                                            .build()
                                                    )
                                                    .build()
                                            )
                                            .quantity(1.0)
                                            .startDate(
                                                OffsetDateTime.parse("2022-02-01T08:00:00+00:00")
                                            )
                                            .addSubLineItem(
                                                Invoice.LineItem.SubLineItem.Matrix.builder()
                                                    .amount("9.00")
                                                    .grouping(
                                                        Invoice.LineItem.SubLineItem.Matrix.Grouping
                                                            .builder()
                                                            .key("region")
                                                            .value("west")
                                                            .build()
                                                    )
                                                    .matrixConfig(
                                                        Invoice.LineItem.SubLineItem.Matrix
                                                            .MatrixConfig
                                                            .builder()
                                                            .addDimensionValue("string")
                                                            .build()
                                                    )
                                                    .name("Tier One")
                                                    .quantity(5.0)
                                                    .build()
                                            )
                                            .subtotal("9.00")
                                            .addTaxAmount(
                                                Invoice.LineItem.TaxAmount.builder()
                                                    .amount("amount")
                                                    .taxRateDescription("tax_rate_description")
                                                    .taxRatePercentage("tax_rate_percentage")
                                                    .build()
                                            )
                                            .addUsageCustomerId("string")
                                            .build()
                                    )
                                    .maximum(
                                        Invoice.Maximum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                Invoice.Maximum.Filter.builder()
                                                    .field(Invoice.Maximum.Filter.Field.PRICE_ID)
                                                    .operator(
                                                        Invoice.Maximum.Filter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .memo("memo")
                                    .metadata(
                                        Invoice.Metadata.builder()
                                            .putAdditionalProperty("foo", JsonValue.from("string"))
                                            .build()
                                    )
                                    .minimum(
                                        Invoice.Minimum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                Invoice.Minimum.Filter.builder()
                                                    .field(Invoice.Minimum.Filter.Field.PRICE_ID)
                                                    .operator(
                                                        Invoice.Minimum.Filter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .addPaymentAttempt(
                                        Invoice.PaymentAttempt.builder()
                                            .id("id")
                                            .amount("amount")
                                            .createdAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .paymentProvider(
                                                Invoice.PaymentAttempt.PaymentProvider.STRIPE
                                            )
                                            .paymentProviderId("payment_provider_id")
                                            .succeeded(true)
                                            .build()
                                    )
                                    .paymentFailedAt(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                                    .paymentStartedAt(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                                    .scheduledIssueAt(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                                    .shippingAddress(
                                        Invoice.ShippingAddress.builder()
                                            .city("city")
                                            .country("country")
                                            .line1("line1")
                                            .line2("line2")
                                            .postalCode("postal_code")
                                            .state("state")
                                            .build()
                                    )
                                    .status(Invoice.Status.ISSUED)
                                    .subscription(
                                        Invoice.Subscription.builder()
                                            .id("VDGsT23osdLb84KD")
                                            .build()
                                    )
                                    .subtotal("8.00")
                                    .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .total("8.00")
                                    .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .willAutoIssue(true)
                                    .build()
                            )
                            .build()
                    )
                    .build()
            )
        assertThat(subscriptionChangeApplyResponse.appliedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionChangeApplyResponse.cancelledAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val subscriptionChangeApplyResponse =
            SubscriptionChangeApplyResponse.builder()
                .id("id")
                .expirationTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .status(SubscriptionChangeApplyResponse.Status.PENDING)
                .subscription(
                    SubscriptionChangeApplyResponse.Subscription.builder()
                        .id("id")
                        .activePlanPhaseOrder(0L)
                        .addAdjustmentInterval(
                            SubscriptionChangeApplyResponse.Subscription.AdjustmentInterval
                                .builder()
                                .id("id")
                                .adjustment(
                                    SubscriptionChangeApplyResponse.Subscription.AdjustmentInterval
                                        .Adjustment
                                        .UsageDiscount
                                        .builder()
                                        .id("id")
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .AdjustmentInterval
                                                .Adjustment
                                                .UsageDiscount
                                                .Filter
                                                .builder()
                                                .field(
                                                    SubscriptionChangeApplyResponse.Subscription
                                                        .AdjustmentInterval
                                                        .Adjustment
                                                        .UsageDiscount
                                                        .Filter
                                                        .Field
                                                        .PRICE_ID
                                                )
                                                .operator(
                                                    SubscriptionChangeApplyResponse.Subscription
                                                        .AdjustmentInterval
                                                        .Adjustment
                                                        .UsageDiscount
                                                        .Filter
                                                        .Operator
                                                        .INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .isInvoiceLevel(true)
                                        .planPhaseOrder(0L)
                                        .reason("reason")
                                        .usageDiscount(0.0)
                                        .build()
                                )
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .autoCollection(true)
                        .billingCycleAnchorConfiguration(
                            SubscriptionChangeApplyResponse.Subscription
                                .BillingCycleAnchorConfiguration
                                .builder()
                                .day(1L)
                                .month(1L)
                                .year(0L)
                                .build()
                        )
                        .billingCycleDay(1L)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currentBillingPeriodEndDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .currentBillingPeriodStartDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .customer(
                            Customer.builder()
                                .id("id")
                                .addAdditionalEmail("string")
                                .autoCollection(true)
                                .balance("balance")
                                .billingAddress(
                                    Customer.BillingAddress.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .currency("currency")
                                .email("email")
                                .emailDelivery(true)
                                .exemptFromAutomatedTax(true)
                                .externalCustomerId("external_customer_id")
                                .hierarchy(
                                    Customer.Hierarchy.builder()
                                        .addChild(
                                            Customer.Hierarchy.Child.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .parent(
                                            Customer.Hierarchy.Parent.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .build()
                                )
                                .metadata(
                                    Customer.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .name("name")
                                .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                                .paymentProviderId("payment_provider_id")
                                .portalUrl("portal_url")
                                .shippingAddress(
                                    Customer.ShippingAddress.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .taxId(
                                    Customer.TaxId.builder()
                                        .country(Customer.TaxId.Country.AD)
                                        .type(Customer.TaxId.Type.AD_NRT)
                                        .value("value")
                                        .build()
                                )
                                .timezone("timezone")
                                .accountingSyncConfiguration(
                                    Customer.AccountingSyncConfiguration.builder()
                                        .addAccountingProvider(
                                            Customer.AccountingSyncConfiguration.AccountingProvider
                                                .builder()
                                                .externalProviderId("external_provider_id")
                                                .providerType(
                                                    Customer.AccountingSyncConfiguration
                                                        .AccountingProvider
                                                        .ProviderType
                                                        .QUICKBOOKS
                                                )
                                                .build()
                                        )
                                        .excluded(true)
                                        .build()
                                )
                                .reportingConfiguration(
                                    Customer.ReportingConfiguration.builder().exempt(true).build()
                                )
                                .build()
                        )
                        .defaultInvoiceMemo("default_invoice_memo")
                        .addDiscountInterval(
                            SubscriptionChangeApplyResponse.Subscription.DiscountInterval.Amount
                                .builder()
                                .amountDiscount("amount_discount")
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addFilter(
                                    SubscriptionChangeApplyResponse.Subscription.DiscountInterval
                                        .Amount
                                        .Filter
                                        .builder()
                                        .field(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .DiscountInterval
                                                .Amount
                                                .Filter
                                                .Field
                                                .PRICE_ID
                                        )
                                        .operator(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .DiscountInterval
                                                .Amount
                                                .Filter
                                                .Operator
                                                .INCLUDES
                                        )
                                        .addValue("string")
                                        .build()
                                )
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addFixedFeeQuantitySchedule(
                            SubscriptionChangeApplyResponse.Subscription.FixedFeeQuantitySchedule
                                .builder()
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .priceId("price_id")
                                .quantity(0.0)
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .invoicingThreshold("invoicing_threshold")
                        .addMaximumInterval(
                            SubscriptionChangeApplyResponse.Subscription.MaximumInterval.builder()
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addFilter(
                                    SubscriptionChangeApplyResponse.Subscription.MaximumInterval
                                        .Filter
                                        .builder()
                                        .field(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .MaximumInterval
                                                .Filter
                                                .Field
                                                .PRICE_ID
                                        )
                                        .operator(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .MaximumInterval
                                                .Filter
                                                .Operator
                                                .INCLUDES
                                        )
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .metadata(
                            SubscriptionChangeApplyResponse.Subscription.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .addMinimumInterval(
                            SubscriptionChangeApplyResponse.Subscription.MinimumInterval.builder()
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addFilter(
                                    SubscriptionChangeApplyResponse.Subscription.MinimumInterval
                                        .Filter
                                        .builder()
                                        .field(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .MinimumInterval
                                                .Filter
                                                .Field
                                                .PRICE_ID
                                        )
                                        .operator(
                                            SubscriptionChangeApplyResponse.Subscription
                                                .MinimumInterval
                                                .Filter
                                                .Operator
                                                .INCLUDES
                                        )
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .name("name")
                        .netTerms(0L)
                        .pendingSubscriptionChange(
                            SubscriptionChangeApplyResponse.Subscription.PendingSubscriptionChange
                                .builder()
                                .id("id")
                                .build()
                        )
                        .plan(
                            Plan.builder()
                                .id("id")
                                .addAdjustment(
                                    Plan.Adjustment.UsageDiscount.builder()
                                        .id("id")
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Plan.Adjustment.UsageDiscount.Filter.builder()
                                                .field(
                                                    Plan.Adjustment.UsageDiscount.Filter.Field
                                                        .PRICE_ID
                                                )
                                                .operator(
                                                    Plan.Adjustment.UsageDiscount.Filter.Operator
                                                        .INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .isInvoiceLevel(true)
                                        .planPhaseOrder(0L)
                                        .reason("reason")
                                        .usageDiscount(0.0)
                                        .build()
                                )
                                .basePlan(
                                    Plan.BasePlan.builder()
                                        .id("m2t5akQeh2obwxeU")
                                        .externalPlanId("m2t5akQeh2obwxeU")
                                        .name("Example plan")
                                        .build()
                                )
                                .basePlanId("base_plan_id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .currency("currency")
                                .defaultInvoiceMemo("default_invoice_memo")
                                .description("description")
                                .discount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .reason("reason")
                                        .build()
                                )
                                .externalPlanId("external_plan_id")
                                .invoicingCurrency("invoicing_currency")
                                .maximum(
                                    Plan.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Plan.Maximum.Filter.builder()
                                                .field(Plan.Maximum.Filter.Field.PRICE_ID)
                                                .operator(Plan.Maximum.Filter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    Plan.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Plan.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Plan.Minimum.Filter.builder()
                                                .field(Plan.Minimum.Filter.Field.PRICE_ID)
                                                .operator(Plan.Minimum.Filter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .netTerms(0L)
                                .addPlanPhase(
                                    Plan.PlanPhase.builder()
                                        .id("id")
                                        .description("description")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .reason("reason")
                                                .build()
                                        )
                                        .duration(0L)
                                        .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                        .maximum(
                                            Plan.PlanPhase.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Plan.PlanPhase.Maximum.Filter.builder()
                                                        .field(
                                                            Plan.PlanPhase.Maximum.Filter.Field
                                                                .PRICE_ID
                                                        )
                                                        .operator(
                                                            Plan.PlanPhase.Maximum.Filter.Operator
                                                                .INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .minimum(
                                            Plan.PlanPhase.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Plan.PlanPhase.Minimum.Filter.builder()
                                                        .field(
                                                            Plan.PlanPhase.Minimum.Filter.Field
                                                                .PRICE_ID
                                                        )
                                                        .operator(
                                                            Plan.PlanPhase.Minimum.Filter.Operator
                                                                .INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("name")
                                        .order(0L)
                                        .build()
                                )
                                .addPrice(
                                    Price.Unit.builder()
                                        .id("id")
                                        .billableMetric(
                                            Price.Unit.BillableMetric.builder().id("id").build()
                                        )
                                        .billingCycleConfiguration(
                                            Price.Unit.BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.Unit.BillingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.Unit.Cadence.ONE_TIME)
                                        .conversionRate(0.0)
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Price.Unit.CreditAllocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .customExpiration(
                                                    Price.Unit.CreditAllocation.CustomExpiration
                                                        .builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            Price.Unit.CreditAllocation
                                                                .CustomExpiration
                                                                .DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .reason("reason")
                                                .build()
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(0.0)
                                        .invoicingCycleConfiguration(
                                            Price.Unit.InvoicingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.Unit.InvoicingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .item(
                                            Price.Unit.Item.builder().id("id").name("name").build()
                                        )
                                        .maximum(
                                            Price.Unit.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Price.Unit.Maximum.Filter.builder()
                                                        .field(
                                                            Price.Unit.Maximum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Price.Unit.Maximum.Filter.Operator
                                                                .INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(
                                            Price.Unit.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Price.Unit.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Price.Unit.Minimum.Filter.builder()
                                                        .field(
                                                            Price.Unit.Minimum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Price.Unit.Minimum.Filter.Operator
                                                                .INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("name")
                                        .planPhaseOrder(0L)
                                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            Price.Unit.UnitConfig.builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .dimensionalPriceConfiguration(
                                            Price.Unit.DimensionalPriceConfiguration.builder()
                                                .addDimensionValue("string")
                                                .dimensionalPriceGroupId(
                                                    "dimensional_price_group_id"
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .product(
                                    Plan.Product.builder()
                                        .id("id")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .name("name")
                                        .build()
                                )
                                .status(Plan.Status.ACTIVE)
                                .trialConfig(
                                    Plan.TrialConfig.builder()
                                        .trialPeriod(0L)
                                        .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                                        .build()
                                )
                                .version(0L)
                                .build()
                        )
                        .addPriceInterval(
                            SubscriptionChangeApplyResponse.Subscription.PriceInterval.builder()
                                .id("id")
                                .billingCycleDay(0L)
                                .currentBillingPeriodEndDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .currentBillingPeriodStartDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .filter("filter")
                                .addFixedFeeQuantityTransition(
                                    SubscriptionChangeApplyResponse.Subscription.PriceInterval
                                        .FixedFeeQuantityTransition
                                        .builder()
                                        .effectiveDate(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .priceId("price_id")
                                        .quantity(0L)
                                        .build()
                                )
                                .price(
                                    Price.Unit.builder()
                                        .id("id")
                                        .billableMetric(
                                            Price.Unit.BillableMetric.builder().id("id").build()
                                        )
                                        .billingCycleConfiguration(
                                            Price.Unit.BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.Unit.BillingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.Unit.Cadence.ONE_TIME)
                                        .conversionRate(0.0)
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Price.Unit.CreditAllocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .customExpiration(
                                                    Price.Unit.CreditAllocation.CustomExpiration
                                                        .builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            Price.Unit.CreditAllocation
                                                                .CustomExpiration
                                                                .DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .reason("reason")
                                                .build()
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(0.0)
                                        .invoicingCycleConfiguration(
                                            Price.Unit.InvoicingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.Unit.InvoicingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .item(
                                            Price.Unit.Item.builder().id("id").name("name").build()
                                        )
                                        .maximum(
                                            Price.Unit.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Price.Unit.Maximum.Filter.builder()
                                                        .field(
                                                            Price.Unit.Maximum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Price.Unit.Maximum.Filter.Operator
                                                                .INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(
                                            Price.Unit.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Price.Unit.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Price.Unit.Minimum.Filter.builder()
                                                        .field(
                                                            Price.Unit.Minimum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Price.Unit.Minimum.Filter.Operator
                                                                .INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("name")
                                        .planPhaseOrder(0L)
                                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            Price.Unit.UnitConfig.builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .dimensionalPriceConfiguration(
                                            Price.Unit.DimensionalPriceConfiguration.builder()
                                                .addDimensionValue("string")
                                                .dimensionalPriceGroupId(
                                                    "dimensional_price_group_id"
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addUsageCustomerId("string")
                                .build()
                        )
                        .redeemedCoupon(
                            SubscriptionChangeApplyResponse.Subscription.RedeemedCoupon.builder()
                                .couponId("coupon_id")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .status(SubscriptionChangeApplyResponse.Subscription.Status.ACTIVE)
                        .trialInfo(
                            SubscriptionChangeApplyResponse.Subscription.TrialInfo.builder()
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .changedResources(
                            SubscriptionChangeApplyResponse.Subscription.ChangedResources.builder()
                                .addCreatedCreditNote(
                                    CreditNote.builder()
                                        .id("id")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditNoteNumber("credit_note_number")
                                        .creditNotePdf("credit_note_pdf")
                                        .customer(
                                            CreditNote.Customer.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .invoiceId("invoice_id")
                                        .addLineItem(
                                            CreditNote.LineItem.builder()
                                                .id("id")
                                                .amount("amount")
                                                .itemId("item_id")
                                                .name("name")
                                                .quantity(0.0)
                                                .subtotal("subtotal")
                                                .addTaxAmount(
                                                    CreditNote.LineItem.TaxAmount.builder()
                                                        .amount("amount")
                                                        .taxRateDescription("tax_rate_description")
                                                        .taxRatePercentage("tax_rate_percentage")
                                                        .build()
                                                )
                                                .addDiscount(
                                                    CreditNote.LineItem.Discount.builder()
                                                        .id("id")
                                                        .amountApplied("amount_applied")
                                                        .addAppliesToPriceId("string")
                                                        .discountType(
                                                            CreditNote.LineItem.Discount
                                                                .DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.0)
                                                        .amountDiscount("amount_discount")
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .maximumAmountAdjustment(
                                            CreditNote.MaximumAmountAdjustment.builder()
                                                .amountApplied("amount_applied")
                                                .discountType(
                                                    CreditNote.MaximumAmountAdjustment.DiscountType
                                                        .PERCENTAGE
                                                )
                                                .percentageDiscount(0.0)
                                                .addAppliesToPrice(
                                                    CreditNote.MaximumAmountAdjustment
                                                        .AppliesToPrice
                                                        .builder()
                                                        .id("id")
                                                        .name("name")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .memo("memo")
                                        .minimumAmountRefunded("minimum_amount_refunded")
                                        .reason(CreditNote.Reason.DUPLICATE)
                                        .subtotal("subtotal")
                                        .total("total")
                                        .type(CreditNote.Type.REFUND)
                                        .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .addDiscount(
                                            CreditNote.Discount.builder()
                                                .amountApplied("amount_applied")
                                                .discountType(
                                                    CreditNote.Discount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.0)
                                                .addAppliesToPrice(
                                                    CreditNote.Discount.AppliesToPrice.builder()
                                                        .id("id")
                                                        .name("name")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .build()
                                )
                                .addCreatedInvoice(
                                    Invoice.builder()
                                        .id("id")
                                        .amountDue("8.00")
                                        .autoCollection(
                                            Invoice.AutoCollection.builder()
                                                .enabled(true)
                                                .nextAttemptAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .numAttempts(0L)
                                                .previouslyAttemptedAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .build()
                                        )
                                        .billingAddress(
                                            Invoice.BillingAddress.builder()
                                                .city("city")
                                                .country("country")
                                                .line1("line1")
                                                .line2("line2")
                                                .postalCode("postal_code")
                                                .state("state")
                                                .build()
                                        )
                                        .createdAt(
                                            OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                        )
                                        .addCreditNote(
                                            Invoice.CreditNote.builder()
                                                .id("id")
                                                .creditNoteNumber("credit_note_number")
                                                .memo("memo")
                                                .reason("reason")
                                                .total("total")
                                                .type("type")
                                                .voidedAt(
                                                    OffsetDateTime.parse(
                                                        "2022-05-01T07:01:31+00:00"
                                                    )
                                                )
                                                .build()
                                        )
                                        .currency("USD")
                                        .customer(
                                            Invoice.Customer.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .addCustomerBalanceTransaction(
                                            Invoice.CustomerBalanceTransaction.builder()
                                                .id("cgZa3SXcsPTVyC4Y")
                                                .action(
                                                    Invoice.CustomerBalanceTransaction.Action
                                                        .APPLIED_TO_INVOICE
                                                )
                                                .amount("11.00")
                                                .createdAt(
                                                    OffsetDateTime.parse(
                                                        "2022-05-01T07:01:31+00:00"
                                                    )
                                                )
                                                .creditNote(
                                                    Invoice.CustomerBalanceTransaction.CreditNote
                                                        .builder()
                                                        .id("id")
                                                        .build()
                                                )
                                                .description("An optional description")
                                                .endingBalance("22.00")
                                                .invoice(
                                                    Invoice.CustomerBalanceTransaction.InnerInvoice
                                                        .builder()
                                                        .id("gXcsPTVyC4YZa3Sc")
                                                        .build()
                                                )
                                                .startingBalance("33.00")
                                                .type(
                                                    Invoice.CustomerBalanceTransaction.Type
                                                        .INCREMENT
                                                )
                                                .build()
                                        )
                                        .customerTaxId(
                                            Invoice.CustomerTaxId.builder()
                                                .country(Invoice.CustomerTaxId.Country.AD)
                                                .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                                .value("value")
                                                .build()
                                        )
                                        .discount(JsonValue.from(mapOf<String, Any>()))
                                        .addDiscount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .reason("reason")
                                                .build()
                                        )
                                        .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                                        .eligibleToIssueAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .hostedInvoiceUrl("hosted_invoice_url")
                                        .invoiceDate(
                                            OffsetDateTime.parse("2022-05-01T07:00:00+00:00")
                                        )
                                        .invoiceNumber("JYEFHK-00001")
                                        .invoicePdf(
                                            "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                                        )
                                        .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                                        .issueFailedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .addLineItem(
                                            Invoice.LineItem.builder()
                                                .id("id")
                                                .adjustedSubtotal("5.00")
                                                .addAdjustment(
                                                    Invoice.LineItem.Adjustment.UsageDiscount
                                                        .builder()
                                                        .id("id")
                                                        .amount("amount")
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            Invoice.LineItem.Adjustment
                                                                .UsageDiscount
                                                                .Filter
                                                                .builder()
                                                                .field(
                                                                    Invoice.LineItem.Adjustment
                                                                        .UsageDiscount
                                                                        .Filter
                                                                        .Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    Invoice.LineItem.Adjustment
                                                                        .UsageDiscount
                                                                        .Filter
                                                                        .Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .isInvoiceLevel(true)
                                                        .reason("reason")
                                                        .usageDiscount(0.0)
                                                        .build()
                                                )
                                                .amount("7.00")
                                                .creditsApplied("6.00")
                                                .discount(
                                                    PercentageDiscount.builder()
                                                        .discountType(
                                                            PercentageDiscount.DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.15)
                                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .endDate(
                                                    OffsetDateTime.parse(
                                                        "2022-02-01T08:00:00+00:00"
                                                    )
                                                )
                                                .filter("filter")
                                                .grouping("grouping")
                                                .maximum(
                                                    Invoice.LineItem.Maximum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            Invoice.LineItem.Maximum.Filter
                                                                .builder()
                                                                .field(
                                                                    Invoice.LineItem.Maximum.Filter
                                                                        .Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    Invoice.LineItem.Maximum.Filter
                                                                        .Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .maximumAmount("maximum_amount")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .minimum(
                                                    Invoice.LineItem.Minimum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            Invoice.LineItem.Minimum.Filter
                                                                .builder()
                                                                .field(
                                                                    Invoice.LineItem.Minimum.Filter
                                                                        .Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    Invoice.LineItem.Minimum.Filter
                                                                        .Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .minimumAmount("minimum_amount")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .name("Fixed Fee")
                                                .partiallyInvoicedAmount("4.00")
                                                .price(
                                                    Price.Unit.builder()
                                                        .id("id")
                                                        .billableMetric(
                                                            Price.Unit.BillableMetric.builder()
                                                                .id("id")
                                                                .build()
                                                        )
                                                        .billingCycleConfiguration(
                                                            Price.Unit.BillingCycleConfiguration
                                                                .builder()
                                                                .duration(0L)
                                                                .durationUnit(
                                                                    Price.Unit
                                                                        .BillingCycleConfiguration
                                                                        .DurationUnit
                                                                        .DAY
                                                                )
                                                                .build()
                                                        )
                                                        .cadence(Price.Unit.Cadence.ONE_TIME)
                                                        .conversionRate(0.0)
                                                        .createdAt(
                                                            OffsetDateTime.parse(
                                                                "2019-12-27T18:11:19.117Z"
                                                            )
                                                        )
                                                        .creditAllocation(
                                                            Price.Unit.CreditAllocation.builder()
                                                                .allowsRollover(true)
                                                                .currency("currency")
                                                                .customExpiration(
                                                                    Price.Unit.CreditAllocation
                                                                        .CustomExpiration
                                                                        .builder()
                                                                        .duration(0L)
                                                                        .durationUnit(
                                                                            Price.Unit
                                                                                .CreditAllocation
                                                                                .CustomExpiration
                                                                                .DurationUnit
                                                                                .DAY
                                                                        )
                                                                        .build()
                                                                )
                                                                .build()
                                                        )
                                                        .currency("currency")
                                                        .discount(
                                                            PercentageDiscount.builder()
                                                                .discountType(
                                                                    PercentageDiscount.DiscountType
                                                                        .PERCENTAGE
                                                                )
                                                                .percentageDiscount(0.15)
                                                                .addAppliesToPriceId(
                                                                    "h74gfhdjvn7ujokd"
                                                                )
                                                                .addAppliesToPriceId(
                                                                    "7hfgtgjnbvc3ujkl"
                                                                )
                                                                .reason("reason")
                                                                .build()
                                                        )
                                                        .externalPriceId("external_price_id")
                                                        .fixedPriceQuantity(0.0)
                                                        .invoicingCycleConfiguration(
                                                            Price.Unit.InvoicingCycleConfiguration
                                                                .builder()
                                                                .duration(0L)
                                                                .durationUnit(
                                                                    Price.Unit
                                                                        .InvoicingCycleConfiguration
                                                                        .DurationUnit
                                                                        .DAY
                                                                )
                                                                .build()
                                                        )
                                                        .item(
                                                            Price.Unit.Item.builder()
                                                                .id("id")
                                                                .name("name")
                                                                .build()
                                                        )
                                                        .maximum(
                                                            Price.Unit.Maximum.builder()
                                                                .addAppliesToPriceId("string")
                                                                .addFilter(
                                                                    Price.Unit.Maximum.Filter
                                                                        .builder()
                                                                        .field(
                                                                            Price.Unit.Maximum
                                                                                .Filter
                                                                                .Field
                                                                                .PRICE_ID
                                                                        )
                                                                        .operator(
                                                                            Price.Unit.Maximum
                                                                                .Filter
                                                                                .Operator
                                                                                .INCLUDES
                                                                        )
                                                                        .addValue("string")
                                                                        .build()
                                                                )
                                                                .maximumAmount("maximum_amount")
                                                                .build()
                                                        )
                                                        .maximumAmount("maximum_amount")
                                                        .metadata(
                                                            Price.Unit.Metadata.builder()
                                                                .putAdditionalProperty(
                                                                    "foo",
                                                                    JsonValue.from("string"),
                                                                )
                                                                .build()
                                                        )
                                                        .minimum(
                                                            Price.Unit.Minimum.builder()
                                                                .addAppliesToPriceId("string")
                                                                .addFilter(
                                                                    Price.Unit.Minimum.Filter
                                                                        .builder()
                                                                        .field(
                                                                            Price.Unit.Minimum
                                                                                .Filter
                                                                                .Field
                                                                                .PRICE_ID
                                                                        )
                                                                        .operator(
                                                                            Price.Unit.Minimum
                                                                                .Filter
                                                                                .Operator
                                                                                .INCLUDES
                                                                        )
                                                                        .addValue("string")
                                                                        .build()
                                                                )
                                                                .minimumAmount("minimum_amount")
                                                                .build()
                                                        )
                                                        .minimumAmount("minimum_amount")
                                                        .name("name")
                                                        .planPhaseOrder(0L)
                                                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                                        .unitConfig(
                                                            Price.Unit.UnitConfig.builder()
                                                                .unitAmount("unit_amount")
                                                                .build()
                                                        )
                                                        .dimensionalPriceConfiguration(
                                                            Price.Unit.DimensionalPriceConfiguration
                                                                .builder()
                                                                .addDimensionValue("string")
                                                                .dimensionalPriceGroupId(
                                                                    "dimensional_price_group_id"
                                                                )
                                                                .build()
                                                        )
                                                        .build()
                                                )
                                                .quantity(1.0)
                                                .startDate(
                                                    OffsetDateTime.parse(
                                                        "2022-02-01T08:00:00+00:00"
                                                    )
                                                )
                                                .addSubLineItem(
                                                    Invoice.LineItem.SubLineItem.Matrix.builder()
                                                        .amount("9.00")
                                                        .grouping(
                                                            Invoice.LineItem.SubLineItem.Matrix
                                                                .Grouping
                                                                .builder()
                                                                .key("region")
                                                                .value("west")
                                                                .build()
                                                        )
                                                        .matrixConfig(
                                                            Invoice.LineItem.SubLineItem.Matrix
                                                                .MatrixConfig
                                                                .builder()
                                                                .addDimensionValue("string")
                                                                .build()
                                                        )
                                                        .name("Tier One")
                                                        .quantity(5.0)
                                                        .build()
                                                )
                                                .subtotal("9.00")
                                                .addTaxAmount(
                                                    Invoice.LineItem.TaxAmount.builder()
                                                        .amount("amount")
                                                        .taxRateDescription("tax_rate_description")
                                                        .taxRatePercentage("tax_rate_percentage")
                                                        .build()
                                                )
                                                .addUsageCustomerId("string")
                                                .build()
                                        )
                                        .maximum(
                                            Invoice.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Invoice.Maximum.Filter.builder()
                                                        .field(
                                                            Invoice.Maximum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Invoice.Maximum.Filter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .memo("memo")
                                        .metadata(
                                            Invoice.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Invoice.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Invoice.Minimum.Filter.builder()
                                                        .field(
                                                            Invoice.Minimum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Invoice.Minimum.Filter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .addPaymentAttempt(
                                            Invoice.PaymentAttempt.builder()
                                                .id("id")
                                                .amount("amount")
                                                .createdAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .paymentProvider(
                                                    Invoice.PaymentAttempt.PaymentProvider.STRIPE
                                                )
                                                .paymentProviderId("payment_provider_id")
                                                .succeeded(true)
                                                .build()
                                        )
                                        .paymentFailedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .paymentStartedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .scheduledIssueAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .shippingAddress(
                                            Invoice.ShippingAddress.builder()
                                                .city("city")
                                                .country("country")
                                                .line1("line1")
                                                .line2("line2")
                                                .postalCode("postal_code")
                                                .state("state")
                                                .build()
                                        )
                                        .status(Invoice.Status.ISSUED)
                                        .subscription(
                                            Invoice.Subscription.builder()
                                                .id("VDGsT23osdLb84KD")
                                                .build()
                                        )
                                        .subtotal("8.00")
                                        .syncFailedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .total("8.00")
                                        .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .willAutoIssue(true)
                                        .build()
                                )
                                .addVoidedCreditNote(
                                    CreditNote.builder()
                                        .id("id")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditNoteNumber("credit_note_number")
                                        .creditNotePdf("credit_note_pdf")
                                        .customer(
                                            CreditNote.Customer.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .invoiceId("invoice_id")
                                        .addLineItem(
                                            CreditNote.LineItem.builder()
                                                .id("id")
                                                .amount("amount")
                                                .itemId("item_id")
                                                .name("name")
                                                .quantity(0.0)
                                                .subtotal("subtotal")
                                                .addTaxAmount(
                                                    CreditNote.LineItem.TaxAmount.builder()
                                                        .amount("amount")
                                                        .taxRateDescription("tax_rate_description")
                                                        .taxRatePercentage("tax_rate_percentage")
                                                        .build()
                                                )
                                                .addDiscount(
                                                    CreditNote.LineItem.Discount.builder()
                                                        .id("id")
                                                        .amountApplied("amount_applied")
                                                        .addAppliesToPriceId("string")
                                                        .discountType(
                                                            CreditNote.LineItem.Discount
                                                                .DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.0)
                                                        .amountDiscount("amount_discount")
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .maximumAmountAdjustment(
                                            CreditNote.MaximumAmountAdjustment.builder()
                                                .amountApplied("amount_applied")
                                                .discountType(
                                                    CreditNote.MaximumAmountAdjustment.DiscountType
                                                        .PERCENTAGE
                                                )
                                                .percentageDiscount(0.0)
                                                .addAppliesToPrice(
                                                    CreditNote.MaximumAmountAdjustment
                                                        .AppliesToPrice
                                                        .builder()
                                                        .id("id")
                                                        .name("name")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .memo("memo")
                                        .minimumAmountRefunded("minimum_amount_refunded")
                                        .reason(CreditNote.Reason.DUPLICATE)
                                        .subtotal("subtotal")
                                        .total("total")
                                        .type(CreditNote.Type.REFUND)
                                        .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .addDiscount(
                                            CreditNote.Discount.builder()
                                                .amountApplied("amount_applied")
                                                .discountType(
                                                    CreditNote.Discount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.0)
                                                .addAppliesToPrice(
                                                    CreditNote.Discount.AppliesToPrice.builder()
                                                        .id("id")
                                                        .name("name")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .build()
                                )
                                .addVoidedInvoice(
                                    Invoice.builder()
                                        .id("id")
                                        .amountDue("8.00")
                                        .autoCollection(
                                            Invoice.AutoCollection.builder()
                                                .enabled(true)
                                                .nextAttemptAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .numAttempts(0L)
                                                .previouslyAttemptedAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .build()
                                        )
                                        .billingAddress(
                                            Invoice.BillingAddress.builder()
                                                .city("city")
                                                .country("country")
                                                .line1("line1")
                                                .line2("line2")
                                                .postalCode("postal_code")
                                                .state("state")
                                                .build()
                                        )
                                        .createdAt(
                                            OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                        )
                                        .addCreditNote(
                                            Invoice.CreditNote.builder()
                                                .id("id")
                                                .creditNoteNumber("credit_note_number")
                                                .memo("memo")
                                                .reason("reason")
                                                .total("total")
                                                .type("type")
                                                .voidedAt(
                                                    OffsetDateTime.parse(
                                                        "2022-05-01T07:01:31+00:00"
                                                    )
                                                )
                                                .build()
                                        )
                                        .currency("USD")
                                        .customer(
                                            Invoice.Customer.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .addCustomerBalanceTransaction(
                                            Invoice.CustomerBalanceTransaction.builder()
                                                .id("cgZa3SXcsPTVyC4Y")
                                                .action(
                                                    Invoice.CustomerBalanceTransaction.Action
                                                        .APPLIED_TO_INVOICE
                                                )
                                                .amount("11.00")
                                                .createdAt(
                                                    OffsetDateTime.parse(
                                                        "2022-05-01T07:01:31+00:00"
                                                    )
                                                )
                                                .creditNote(
                                                    Invoice.CustomerBalanceTransaction.CreditNote
                                                        .builder()
                                                        .id("id")
                                                        .build()
                                                )
                                                .description("An optional description")
                                                .endingBalance("22.00")
                                                .invoice(
                                                    Invoice.CustomerBalanceTransaction.InnerInvoice
                                                        .builder()
                                                        .id("gXcsPTVyC4YZa3Sc")
                                                        .build()
                                                )
                                                .startingBalance("33.00")
                                                .type(
                                                    Invoice.CustomerBalanceTransaction.Type
                                                        .INCREMENT
                                                )
                                                .build()
                                        )
                                        .customerTaxId(
                                            Invoice.CustomerTaxId.builder()
                                                .country(Invoice.CustomerTaxId.Country.AD)
                                                .type(Invoice.CustomerTaxId.Type.AD_NRT)
                                                .value("value")
                                                .build()
                                        )
                                        .discount(JsonValue.from(mapOf<String, Any>()))
                                        .addDiscount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .reason("reason")
                                                .build()
                                        )
                                        .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                                        .eligibleToIssueAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .hostedInvoiceUrl("hosted_invoice_url")
                                        .invoiceDate(
                                            OffsetDateTime.parse("2022-05-01T07:00:00+00:00")
                                        )
                                        .invoiceNumber("JYEFHK-00001")
                                        .invoicePdf(
                                            "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                                        )
                                        .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                                        .issueFailedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .addLineItem(
                                            Invoice.LineItem.builder()
                                                .id("id")
                                                .adjustedSubtotal("5.00")
                                                .addAdjustment(
                                                    Invoice.LineItem.Adjustment.UsageDiscount
                                                        .builder()
                                                        .id("id")
                                                        .amount("amount")
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            Invoice.LineItem.Adjustment
                                                                .UsageDiscount
                                                                .Filter
                                                                .builder()
                                                                .field(
                                                                    Invoice.LineItem.Adjustment
                                                                        .UsageDiscount
                                                                        .Filter
                                                                        .Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    Invoice.LineItem.Adjustment
                                                                        .UsageDiscount
                                                                        .Filter
                                                                        .Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .isInvoiceLevel(true)
                                                        .reason("reason")
                                                        .usageDiscount(0.0)
                                                        .build()
                                                )
                                                .amount("7.00")
                                                .creditsApplied("6.00")
                                                .discount(
                                                    PercentageDiscount.builder()
                                                        .discountType(
                                                            PercentageDiscount.DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.15)
                                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .endDate(
                                                    OffsetDateTime.parse(
                                                        "2022-02-01T08:00:00+00:00"
                                                    )
                                                )
                                                .filter("filter")
                                                .grouping("grouping")
                                                .maximum(
                                                    Invoice.LineItem.Maximum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            Invoice.LineItem.Maximum.Filter
                                                                .builder()
                                                                .field(
                                                                    Invoice.LineItem.Maximum.Filter
                                                                        .Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    Invoice.LineItem.Maximum.Filter
                                                                        .Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .maximumAmount("maximum_amount")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .minimum(
                                                    Invoice.LineItem.Minimum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            Invoice.LineItem.Minimum.Filter
                                                                .builder()
                                                                .field(
                                                                    Invoice.LineItem.Minimum.Filter
                                                                        .Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    Invoice.LineItem.Minimum.Filter
                                                                        .Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .minimumAmount("minimum_amount")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .name("Fixed Fee")
                                                .partiallyInvoicedAmount("4.00")
                                                .price(
                                                    Price.Unit.builder()
                                                        .id("id")
                                                        .billableMetric(
                                                            Price.Unit.BillableMetric.builder()
                                                                .id("id")
                                                                .build()
                                                        )
                                                        .billingCycleConfiguration(
                                                            Price.Unit.BillingCycleConfiguration
                                                                .builder()
                                                                .duration(0L)
                                                                .durationUnit(
                                                                    Price.Unit
                                                                        .BillingCycleConfiguration
                                                                        .DurationUnit
                                                                        .DAY
                                                                )
                                                                .build()
                                                        )
                                                        .cadence(Price.Unit.Cadence.ONE_TIME)
                                                        .conversionRate(0.0)
                                                        .createdAt(
                                                            OffsetDateTime.parse(
                                                                "2019-12-27T18:11:19.117Z"
                                                            )
                                                        )
                                                        .creditAllocation(
                                                            Price.Unit.CreditAllocation.builder()
                                                                .allowsRollover(true)
                                                                .currency("currency")
                                                                .customExpiration(
                                                                    Price.Unit.CreditAllocation
                                                                        .CustomExpiration
                                                                        .builder()
                                                                        .duration(0L)
                                                                        .durationUnit(
                                                                            Price.Unit
                                                                                .CreditAllocation
                                                                                .CustomExpiration
                                                                                .DurationUnit
                                                                                .DAY
                                                                        )
                                                                        .build()
                                                                )
                                                                .build()
                                                        )
                                                        .currency("currency")
                                                        .discount(
                                                            PercentageDiscount.builder()
                                                                .discountType(
                                                                    PercentageDiscount.DiscountType
                                                                        .PERCENTAGE
                                                                )
                                                                .percentageDiscount(0.15)
                                                                .addAppliesToPriceId(
                                                                    "h74gfhdjvn7ujokd"
                                                                )
                                                                .addAppliesToPriceId(
                                                                    "7hfgtgjnbvc3ujkl"
                                                                )
                                                                .reason("reason")
                                                                .build()
                                                        )
                                                        .externalPriceId("external_price_id")
                                                        .fixedPriceQuantity(0.0)
                                                        .invoicingCycleConfiguration(
                                                            Price.Unit.InvoicingCycleConfiguration
                                                                .builder()
                                                                .duration(0L)
                                                                .durationUnit(
                                                                    Price.Unit
                                                                        .InvoicingCycleConfiguration
                                                                        .DurationUnit
                                                                        .DAY
                                                                )
                                                                .build()
                                                        )
                                                        .item(
                                                            Price.Unit.Item.builder()
                                                                .id("id")
                                                                .name("name")
                                                                .build()
                                                        )
                                                        .maximum(
                                                            Price.Unit.Maximum.builder()
                                                                .addAppliesToPriceId("string")
                                                                .addFilter(
                                                                    Price.Unit.Maximum.Filter
                                                                        .builder()
                                                                        .field(
                                                                            Price.Unit.Maximum
                                                                                .Filter
                                                                                .Field
                                                                                .PRICE_ID
                                                                        )
                                                                        .operator(
                                                                            Price.Unit.Maximum
                                                                                .Filter
                                                                                .Operator
                                                                                .INCLUDES
                                                                        )
                                                                        .addValue("string")
                                                                        .build()
                                                                )
                                                                .maximumAmount("maximum_amount")
                                                                .build()
                                                        )
                                                        .maximumAmount("maximum_amount")
                                                        .metadata(
                                                            Price.Unit.Metadata.builder()
                                                                .putAdditionalProperty(
                                                                    "foo",
                                                                    JsonValue.from("string"),
                                                                )
                                                                .build()
                                                        )
                                                        .minimum(
                                                            Price.Unit.Minimum.builder()
                                                                .addAppliesToPriceId("string")
                                                                .addFilter(
                                                                    Price.Unit.Minimum.Filter
                                                                        .builder()
                                                                        .field(
                                                                            Price.Unit.Minimum
                                                                                .Filter
                                                                                .Field
                                                                                .PRICE_ID
                                                                        )
                                                                        .operator(
                                                                            Price.Unit.Minimum
                                                                                .Filter
                                                                                .Operator
                                                                                .INCLUDES
                                                                        )
                                                                        .addValue("string")
                                                                        .build()
                                                                )
                                                                .minimumAmount("minimum_amount")
                                                                .build()
                                                        )
                                                        .minimumAmount("minimum_amount")
                                                        .name("name")
                                                        .planPhaseOrder(0L)
                                                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                                        .unitConfig(
                                                            Price.Unit.UnitConfig.builder()
                                                                .unitAmount("unit_amount")
                                                                .build()
                                                        )
                                                        .dimensionalPriceConfiguration(
                                                            Price.Unit.DimensionalPriceConfiguration
                                                                .builder()
                                                                .addDimensionValue("string")
                                                                .dimensionalPriceGroupId(
                                                                    "dimensional_price_group_id"
                                                                )
                                                                .build()
                                                        )
                                                        .build()
                                                )
                                                .quantity(1.0)
                                                .startDate(
                                                    OffsetDateTime.parse(
                                                        "2022-02-01T08:00:00+00:00"
                                                    )
                                                )
                                                .addSubLineItem(
                                                    Invoice.LineItem.SubLineItem.Matrix.builder()
                                                        .amount("9.00")
                                                        .grouping(
                                                            Invoice.LineItem.SubLineItem.Matrix
                                                                .Grouping
                                                                .builder()
                                                                .key("region")
                                                                .value("west")
                                                                .build()
                                                        )
                                                        .matrixConfig(
                                                            Invoice.LineItem.SubLineItem.Matrix
                                                                .MatrixConfig
                                                                .builder()
                                                                .addDimensionValue("string")
                                                                .build()
                                                        )
                                                        .name("Tier One")
                                                        .quantity(5.0)
                                                        .build()
                                                )
                                                .subtotal("9.00")
                                                .addTaxAmount(
                                                    Invoice.LineItem.TaxAmount.builder()
                                                        .amount("amount")
                                                        .taxRateDescription("tax_rate_description")
                                                        .taxRatePercentage("tax_rate_percentage")
                                                        .build()
                                                )
                                                .addUsageCustomerId("string")
                                                .build()
                                        )
                                        .maximum(
                                            Invoice.Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Invoice.Maximum.Filter.builder()
                                                        .field(
                                                            Invoice.Maximum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Invoice.Maximum.Filter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .memo("memo")
                                        .metadata(
                                            Invoice.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Invoice.Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    Invoice.Minimum.Filter.builder()
                                                        .field(
                                                            Invoice.Minimum.Filter.Field.PRICE_ID
                                                        )
                                                        .operator(
                                                            Invoice.Minimum.Filter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .addPaymentAttempt(
                                            Invoice.PaymentAttempt.builder()
                                                .id("id")
                                                .amount("amount")
                                                .createdAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .paymentProvider(
                                                    Invoice.PaymentAttempt.PaymentProvider.STRIPE
                                                )
                                                .paymentProviderId("payment_provider_id")
                                                .succeeded(true)
                                                .build()
                                        )
                                        .paymentFailedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .paymentStartedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .scheduledIssueAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .shippingAddress(
                                            Invoice.ShippingAddress.builder()
                                                .city("city")
                                                .country("country")
                                                .line1("line1")
                                                .line2("line2")
                                                .postalCode("postal_code")
                                                .state("state")
                                                .build()
                                        )
                                        .status(Invoice.Status.ISSUED)
                                        .subscription(
                                            Invoice.Subscription.builder()
                                                .id("VDGsT23osdLb84KD")
                                                .build()
                                        )
                                        .subtotal("8.00")
                                        .syncFailedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .total("8.00")
                                        .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .willAutoIssue(true)
                                        .build()
                                )
                                .build()
                        )
                        .build()
                )
                .appliedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .cancelledAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .build()

        val roundtrippedSubscriptionChangeApplyResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(subscriptionChangeApplyResponse),
                jacksonTypeRef<SubscriptionChangeApplyResponse>(),
            )

        assertThat(roundtrippedSubscriptionChangeApplyResponse)
            .isEqualTo(subscriptionChangeApplyResponse)
    }
}
