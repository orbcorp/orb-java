// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.withorb.api.core.JsonValue
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class SubscriptionModelTest {

    @Test
    fun createSubscriptionModel() {
        val subscriptionModel =
            SubscriptionModel.builder()
                .id("id")
                .activePlanPhaseOrder(0L)
                .addAdjustmentInterval(
                    AdjustmentIntervalModel.builder()
                        .id("id")
                        .adjustment(
                            AdjustmentModel.PlanPhaseUsageDiscountAdjustment.builder()
                                .id("id")
                                .adjustmentType(
                                    AdjustmentModel.PlanPhaseUsageDiscountAdjustment.AdjustmentType
                                        .USAGE_DISCOUNT
                                )
                                .addAppliesToPriceId("string")
                                .isInvoiceLevel(true)
                                .planPhaseOrder(0L)
                                .reason("reason")
                                .usageDiscount(0.0)
                                .build()
                        )
                        .addAppliesToPriceIntervalId("string")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .autoCollection(true)
                .billingCycleAnchorConfiguration(
                    BillingCycleAnchorConfigurationModel.builder()
                        .day(1L)
                        .month(1L)
                        .year(0L)
                        .build()
                )
                .billingCycleDay(1L)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .customer(
                    CustomerModel.builder()
                        .id("id")
                        .addAdditionalEmail("string")
                        .autoCollection(true)
                        .balance("balance")
                        .billingAddress(
                            AddressModel.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currency("currency")
                        .email("email")
                        .emailDelivery(true)
                        .exemptFromAutomatedTax(true)
                        .externalCustomerId("external_customer_id")
                        .hierarchy(
                            CustomerModel.Hierarchy.builder()
                                .addChild(
                                    CustomerMinifiedModel.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .parent(
                                    CustomerMinifiedModel.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .build()
                        )
                        .metadata(
                            CustomerModel.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .name("name")
                        .paymentProvider(CustomerModel.PaymentProvider.QUICKBOOKS)
                        .paymentProviderId("payment_provider_id")
                        .portalUrl("portal_url")
                        .shippingAddress(
                            AddressModel.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .taxId(
                            CustomerTaxIdModel.builder()
                                .country(CustomerTaxIdModel.Country.AD)
                                .type(CustomerTaxIdModel.Type.AD_NRT)
                                .value("value")
                                .build()
                        )
                        .timezone("timezone")
                        .accountingSyncConfiguration(
                            CustomerModel.AccountingSyncConfiguration.builder()
                                .addAccountingProvider(
                                    CustomerModel.AccountingSyncConfiguration.AccountingProvider
                                        .builder()
                                        .externalProviderId("external_provider_id")
                                        .providerType(
                                            CustomerModel.AccountingSyncConfiguration
                                                .AccountingProvider
                                                .ProviderType
                                                .QUICKBOOKS
                                        )
                                        .build()
                                )
                                .excluded(true)
                                .build()
                        )
                        .reportingConfiguration(
                            CustomerModel.ReportingConfiguration.builder().exempt(true).build()
                        )
                        .build()
                )
                .defaultInvoiceMemo("default_invoice_memo")
                .addDiscountInterval(
                    AmountDiscountIntervalModel.builder()
                        .amountDiscount("amount_discount")
                        .addAppliesToPriceId("string")
                        .addAppliesToPriceIntervalId("string")
                        .discountType(AmountDiscountIntervalModel.DiscountType.AMOUNT)
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .addFixedFeeQuantitySchedule(
                    FixedFeeQuantityScheduleEntryModel.builder()
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .priceId("price_id")
                        .quantity(0.0)
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .invoicingThreshold("invoicing_threshold")
                .addMaximumInterval(
                    MaximumIntervalModel.builder()
                        .addAppliesToPriceId("string")
                        .addAppliesToPriceIntervalId("string")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .maximumAmount("maximum_amount")
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .metadata(
                    SubscriptionModel.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .addMinimumInterval(
                    MinimumIntervalModel.builder()
                        .addAppliesToPriceId("string")
                        .addAppliesToPriceIntervalId("string")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .minimumAmount("minimum_amount")
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .netTerms(0L)
                .plan(
                    PlanModel.builder()
                        .id("id")
                        .addAdjustment(
                            AdjustmentModel.PlanPhaseUsageDiscountAdjustment.builder()
                                .id("id")
                                .adjustmentType(
                                    AdjustmentModel.PlanPhaseUsageDiscountAdjustment.AdjustmentType
                                        .USAGE_DISCOUNT
                                )
                                .addAppliesToPriceId("string")
                                .isInvoiceLevel(true)
                                .planPhaseOrder(0L)
                                .reason("reason")
                                .usageDiscount(0.0)
                                .build()
                        )
                        .basePlan(
                            PlanMinifiedModel.builder()
                                .id("m2t5akQeh2obwxeU")
                                .externalPlanId("m2t5akQeh2obwxeU")
                                .name("Example plan")
                                .build()
                        )
                        .basePlanId("base_plan_id")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currency("currency")
                        .defaultInvoiceMemo("default_invoice_memo")
                        .description("description")
                        .discount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .externalPlanId("external_plan_id")
                        .invoicingCurrency("invoicing_currency")
                        .maximum(
                            MaximumModel.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            PlanModel.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            MinimumModel.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .netTerms(0L)
                        .addPlanPhase(
                            PlanModel.PlanPhase.builder()
                                .id("id")
                                .description("description")
                                .discount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .duration(0L)
                                .durationUnit(PlanModel.PlanPhase.DurationUnit.DAILY)
                                .maximum(
                                    MaximumModel.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .minimum(
                                    MinimumModel.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .order(0L)
                                .build()
                        )
                        .addPrice(
                            PriceModel.UnitPrice.builder()
                                .id("id")
                                .billableMetric(BillableMetricTinyModel.builder().id("id").build())
                                .billingCycleConfiguration(
                                    BillingCycleConfigurationModel.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            BillingCycleConfigurationModel.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .cadence(PriceModel.UnitPrice.Cadence.ONE_TIME)
                                .conversionRate(0.0)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    AllocationModel.builder()
                                        .allowsRollover(true)
                                        .currency("currency")
                                        .build()
                                )
                                .currency("currency")
                                .discount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoicingCycleConfiguration(
                                    BillingCycleConfigurationModel.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            BillingCycleConfigurationModel.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .item(ItemSlimModel.builder().id("id").name("name").build())
                                .maximum(
                                    MaximumModel.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    PriceModel.UnitPrice.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    MinimumModel.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .modelType(PriceModel.UnitPrice.ModelType.UNIT)
                                .name("name")
                                .planPhaseOrder(0L)
                                .priceType(PriceModel.UnitPrice.PriceType.USAGE_PRICE)
                                .unitConfig(
                                    UnitConfigModel.builder().unitAmount("unit_amount").build()
                                )
                                .dimensionalPriceConfiguration(
                                    DimensionalPriceConfigurationModel.builder()
                                        .addDimensionValue("string")
                                        .dimensionalPriceGroupId("dimensional_price_group_id")
                                        .build()
                                )
                                .build()
                        )
                        .product(
                            PlanModel.Product.builder()
                                .id("id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .name("name")
                                .build()
                        )
                        .status(PlanModel.Status.ACTIVE)
                        .trialConfig(
                            PlanModel.TrialConfig.builder()
                                .trialPeriod(0L)
                                .trialPeriodUnit(PlanModel.TrialConfig.TrialPeriodUnit.DAYS)
                                .build()
                        )
                        .version(0L)
                        .build()
                )
                .addPriceInterval(
                    PriceIntervalModel.builder()
                        .id("id")
                        .billingCycleDay(0L)
                        .currentBillingPeriodEndDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .currentBillingPeriodStartDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .filter("filter")
                        .addFixedFeeQuantityTransition(
                            PriceIntervalModel.FixedFeeQuantityTransition.builder()
                                .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .priceId("price_id")
                                .quantity(0L)
                                .build()
                        )
                        .price(
                            PriceModel.UnitPrice.builder()
                                .id("id")
                                .billableMetric(BillableMetricTinyModel.builder().id("id").build())
                                .billingCycleConfiguration(
                                    BillingCycleConfigurationModel.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            BillingCycleConfigurationModel.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .cadence(PriceModel.UnitPrice.Cadence.ONE_TIME)
                                .conversionRate(0.0)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    AllocationModel.builder()
                                        .allowsRollover(true)
                                        .currency("currency")
                                        .build()
                                )
                                .currency("currency")
                                .discount(
                                    PercentageDiscount.builder()
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .reason("reason")
                                        .build()
                                )
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoicingCycleConfiguration(
                                    BillingCycleConfigurationModel.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            BillingCycleConfigurationModel.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .item(ItemSlimModel.builder().id("id").name("name").build())
                                .maximum(
                                    MaximumModel.builder()
                                        .addAppliesToPriceId("string")
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    PriceModel.UnitPrice.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    MinimumModel.builder()
                                        .addAppliesToPriceId("string")
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .modelType(PriceModel.UnitPrice.ModelType.UNIT)
                                .name("name")
                                .planPhaseOrder(0L)
                                .priceType(PriceModel.UnitPrice.PriceType.USAGE_PRICE)
                                .unitConfig(
                                    UnitConfigModel.builder().unitAmount("unit_amount").build()
                                )
                                .dimensionalPriceConfiguration(
                                    DimensionalPriceConfigurationModel.builder()
                                        .addDimensionValue("string")
                                        .dimensionalPriceGroupId("dimensional_price_group_id")
                                        .build()
                                )
                                .build()
                        )
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addUsageCustomerId("string")
                        .build()
                )
                .redeemedCoupon(
                    CouponRedemptionModel.builder()
                        .couponId("coupon_id")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .status(SubscriptionModel.Status.ACTIVE)
                .trialInfo(
                    SubscriptionTrialInfoModel.builder()
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .build()
        assertThat(subscriptionModel).isNotNull
        assertThat(subscriptionModel.id()).isEqualTo("id")
        assertThat(subscriptionModel.activePlanPhaseOrder()).contains(0L)
        assertThat(subscriptionModel.adjustmentIntervals())
            .containsExactly(
                AdjustmentIntervalModel.builder()
                    .id("id")
                    .adjustment(
                        AdjustmentModel.PlanPhaseUsageDiscountAdjustment.builder()
                            .id("id")
                            .adjustmentType(
                                AdjustmentModel.PlanPhaseUsageDiscountAdjustment.AdjustmentType
                                    .USAGE_DISCOUNT
                            )
                            .addAppliesToPriceId("string")
                            .isInvoiceLevel(true)
                            .planPhaseOrder(0L)
                            .reason("reason")
                            .usageDiscount(0.0)
                            .build()
                    )
                    .addAppliesToPriceIntervalId("string")
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionModel.autoCollection()).contains(true)
        assertThat(subscriptionModel.billingCycleAnchorConfiguration())
            .isEqualTo(
                BillingCycleAnchorConfigurationModel.builder().day(1L).month(1L).year(0L).build()
            )
        assertThat(subscriptionModel.billingCycleDay()).isEqualTo(1L)
        assertThat(subscriptionModel.createdAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionModel.currentBillingPeriodEndDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionModel.currentBillingPeriodStartDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionModel.customer())
            .isEqualTo(
                CustomerModel.builder()
                    .id("id")
                    .addAdditionalEmail("string")
                    .autoCollection(true)
                    .balance("balance")
                    .billingAddress(
                        AddressModel.builder()
                            .city("city")
                            .country("country")
                            .line1("line1")
                            .line2("line2")
                            .postalCode("postal_code")
                            .state("state")
                            .build()
                    )
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currency("currency")
                    .email("email")
                    .emailDelivery(true)
                    .exemptFromAutomatedTax(true)
                    .externalCustomerId("external_customer_id")
                    .hierarchy(
                        CustomerModel.Hierarchy.builder()
                            .addChild(
                                CustomerMinifiedModel.builder()
                                    .id("id")
                                    .externalCustomerId("external_customer_id")
                                    .build()
                            )
                            .parent(
                                CustomerMinifiedModel.builder()
                                    .id("id")
                                    .externalCustomerId("external_customer_id")
                                    .build()
                            )
                            .build()
                    )
                    .metadata(
                        CustomerModel.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .name("name")
                    .paymentProvider(CustomerModel.PaymentProvider.QUICKBOOKS)
                    .paymentProviderId("payment_provider_id")
                    .portalUrl("portal_url")
                    .shippingAddress(
                        AddressModel.builder()
                            .city("city")
                            .country("country")
                            .line1("line1")
                            .line2("line2")
                            .postalCode("postal_code")
                            .state("state")
                            .build()
                    )
                    .taxId(
                        CustomerTaxIdModel.builder()
                            .country(CustomerTaxIdModel.Country.AD)
                            .type(CustomerTaxIdModel.Type.AD_NRT)
                            .value("value")
                            .build()
                    )
                    .timezone("timezone")
                    .accountingSyncConfiguration(
                        CustomerModel.AccountingSyncConfiguration.builder()
                            .addAccountingProvider(
                                CustomerModel.AccountingSyncConfiguration.AccountingProvider
                                    .builder()
                                    .externalProviderId("external_provider_id")
                                    .providerType(
                                        CustomerModel.AccountingSyncConfiguration.AccountingProvider
                                            .ProviderType
                                            .QUICKBOOKS
                                    )
                                    .build()
                            )
                            .excluded(true)
                            .build()
                    )
                    .reportingConfiguration(
                        CustomerModel.ReportingConfiguration.builder().exempt(true).build()
                    )
                    .build()
            )
        assertThat(subscriptionModel.defaultInvoiceMemo()).contains("default_invoice_memo")
        assertThat(subscriptionModel.discountIntervals())
            .containsExactly(
                SubscriptionModel.DiscountInterval.ofAmountDiscountIntervalModel(
                    AmountDiscountIntervalModel.builder()
                        .amountDiscount("amount_discount")
                        .addAppliesToPriceId("string")
                        .addAppliesToPriceIntervalId("string")
                        .discountType(AmountDiscountIntervalModel.DiscountType.AMOUNT)
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
            )
        assertThat(subscriptionModel.endDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionModel.fixedFeeQuantitySchedule())
            .containsExactly(
                FixedFeeQuantityScheduleEntryModel.builder()
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .priceId("price_id")
                    .quantity(0.0)
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionModel.invoicingThreshold()).contains("invoicing_threshold")
        assertThat(subscriptionModel.maximumIntervals())
            .containsExactly(
                MaximumIntervalModel.builder()
                    .addAppliesToPriceId("string")
                    .addAppliesToPriceIntervalId("string")
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .maximumAmount("maximum_amount")
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionModel.metadata())
            .isEqualTo(
                SubscriptionModel.Metadata.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
        assertThat(subscriptionModel.minimumIntervals())
            .containsExactly(
                MinimumIntervalModel.builder()
                    .addAppliesToPriceId("string")
                    .addAppliesToPriceIntervalId("string")
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .minimumAmount("minimum_amount")
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionModel.netTerms()).isEqualTo(0L)
        assertThat(subscriptionModel.plan())
            .isEqualTo(
                PlanModel.builder()
                    .id("id")
                    .addAdjustment(
                        AdjustmentModel.PlanPhaseUsageDiscountAdjustment.builder()
                            .id("id")
                            .adjustmentType(
                                AdjustmentModel.PlanPhaseUsageDiscountAdjustment.AdjustmentType
                                    .USAGE_DISCOUNT
                            )
                            .addAppliesToPriceId("string")
                            .isInvoiceLevel(true)
                            .planPhaseOrder(0L)
                            .reason("reason")
                            .usageDiscount(0.0)
                            .build()
                    )
                    .basePlan(
                        PlanMinifiedModel.builder()
                            .id("m2t5akQeh2obwxeU")
                            .externalPlanId("m2t5akQeh2obwxeU")
                            .name("Example plan")
                            .build()
                    )
                    .basePlanId("base_plan_id")
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currency("currency")
                    .defaultInvoiceMemo("default_invoice_memo")
                    .description("description")
                    .discount(
                        PercentageDiscount.builder()
                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                            .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                            .percentageDiscount(0.15)
                            .reason("reason")
                            .build()
                    )
                    .externalPlanId("external_plan_id")
                    .invoicingCurrency("invoicing_currency")
                    .maximum(
                        MaximumModel.builder()
                            .addAppliesToPriceId("string")
                            .maximumAmount("maximum_amount")
                            .build()
                    )
                    .maximumAmount("maximum_amount")
                    .metadata(
                        PlanModel.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .minimum(
                        MinimumModel.builder()
                            .addAppliesToPriceId("string")
                            .minimumAmount("minimum_amount")
                            .build()
                    )
                    .minimumAmount("minimum_amount")
                    .name("name")
                    .netTerms(0L)
                    .addPlanPhase(
                        PlanModel.PlanPhase.builder()
                            .id("id")
                            .description("description")
                            .discount(
                                PercentageDiscount.builder()
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .reason("reason")
                                    .build()
                            )
                            .duration(0L)
                            .durationUnit(PlanModel.PlanPhase.DurationUnit.DAILY)
                            .maximum(
                                MaximumModel.builder()
                                    .addAppliesToPriceId("string")
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .minimum(
                                MinimumModel.builder()
                                    .addAppliesToPriceId("string")
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .name("name")
                            .order(0L)
                            .build()
                    )
                    .addPrice(
                        PriceModel.UnitPrice.builder()
                            .id("id")
                            .billableMetric(BillableMetricTinyModel.builder().id("id").build())
                            .billingCycleConfiguration(
                                BillingCycleConfigurationModel.builder()
                                    .duration(0L)
                                    .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                    .build()
                            )
                            .cadence(PriceModel.UnitPrice.Cadence.ONE_TIME)
                            .conversionRate(0.0)
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .creditAllocation(
                                AllocationModel.builder()
                                    .allowsRollover(true)
                                    .currency("currency")
                                    .build()
                            )
                            .currency("currency")
                            .discount(
                                PercentageDiscount.builder()
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .reason("reason")
                                    .build()
                            )
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoicingCycleConfiguration(
                                BillingCycleConfigurationModel.builder()
                                    .duration(0L)
                                    .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                    .build()
                            )
                            .item(ItemSlimModel.builder().id("id").name("name").build())
                            .maximum(
                                MaximumModel.builder()
                                    .addAppliesToPriceId("string")
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .metadata(
                                PriceModel.UnitPrice.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .minimum(
                                MinimumModel.builder()
                                    .addAppliesToPriceId("string")
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .modelType(PriceModel.UnitPrice.ModelType.UNIT)
                            .name("name")
                            .planPhaseOrder(0L)
                            .priceType(PriceModel.UnitPrice.PriceType.USAGE_PRICE)
                            .unitConfig(UnitConfigModel.builder().unitAmount("unit_amount").build())
                            .dimensionalPriceConfiguration(
                                DimensionalPriceConfigurationModel.builder()
                                    .addDimensionValue("string")
                                    .dimensionalPriceGroupId("dimensional_price_group_id")
                                    .build()
                            )
                            .build()
                    )
                    .product(
                        PlanModel.Product.builder()
                            .id("id")
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .name("name")
                            .build()
                    )
                    .status(PlanModel.Status.ACTIVE)
                    .trialConfig(
                        PlanModel.TrialConfig.builder()
                            .trialPeriod(0L)
                            .trialPeriodUnit(PlanModel.TrialConfig.TrialPeriodUnit.DAYS)
                            .build()
                    )
                    .version(0L)
                    .build()
            )
        assertThat(subscriptionModel.priceIntervals())
            .containsExactly(
                PriceIntervalModel.builder()
                    .id("id")
                    .billingCycleDay(0L)
                    .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .filter("filter")
                    .addFixedFeeQuantityTransition(
                        PriceIntervalModel.FixedFeeQuantityTransition.builder()
                            .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .priceId("price_id")
                            .quantity(0L)
                            .build()
                    )
                    .price(
                        PriceModel.UnitPrice.builder()
                            .id("id")
                            .billableMetric(BillableMetricTinyModel.builder().id("id").build())
                            .billingCycleConfiguration(
                                BillingCycleConfigurationModel.builder()
                                    .duration(0L)
                                    .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                    .build()
                            )
                            .cadence(PriceModel.UnitPrice.Cadence.ONE_TIME)
                            .conversionRate(0.0)
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .creditAllocation(
                                AllocationModel.builder()
                                    .allowsRollover(true)
                                    .currency("currency")
                                    .build()
                            )
                            .currency("currency")
                            .discount(
                                PercentageDiscount.builder()
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .reason("reason")
                                    .build()
                            )
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoicingCycleConfiguration(
                                BillingCycleConfigurationModel.builder()
                                    .duration(0L)
                                    .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                    .build()
                            )
                            .item(ItemSlimModel.builder().id("id").name("name").build())
                            .maximum(
                                MaximumModel.builder()
                                    .addAppliesToPriceId("string")
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .metadata(
                                PriceModel.UnitPrice.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .minimum(
                                MinimumModel.builder()
                                    .addAppliesToPriceId("string")
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .modelType(PriceModel.UnitPrice.ModelType.UNIT)
                            .name("name")
                            .planPhaseOrder(0L)
                            .priceType(PriceModel.UnitPrice.PriceType.USAGE_PRICE)
                            .unitConfig(UnitConfigModel.builder().unitAmount("unit_amount").build())
                            .dimensionalPriceConfiguration(
                                DimensionalPriceConfigurationModel.builder()
                                    .addDimensionValue("string")
                                    .dimensionalPriceGroupId("dimensional_price_group_id")
                                    .build()
                            )
                            .build()
                    )
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .addUsageCustomerId("string")
                    .build()
            )
        assertThat(subscriptionModel.redeemedCoupon())
            .contains(
                CouponRedemptionModel.builder()
                    .couponId("coupon_id")
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionModel.startDate())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionModel.status()).isEqualTo(SubscriptionModel.Status.ACTIVE)
        assertThat(subscriptionModel.trialInfo())
            .isEqualTo(
                SubscriptionTrialInfoModel.builder()
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
    }
}
