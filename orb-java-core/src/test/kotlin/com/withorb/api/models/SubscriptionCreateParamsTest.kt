// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.withorb.api.core.JsonValue
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class SubscriptionCreateParamsTest {

    @Test
    fun create() {
        SubscriptionCreateParams.builder()
            .addAddAdjustment(
                SubscriptionCreateParams.AddAdjustment.builder()
                    .adjustment(
                        SubscriptionCreateParams.AddAdjustment.Adjustment.NewPercentageDiscount
                            .builder()
                            .adjustmentType(
                                SubscriptionCreateParams.AddAdjustment.Adjustment
                                    .NewPercentageDiscount
                                    .AdjustmentType
                                    .PERCENTAGE_DISCOUNT
                            )
                            .addAppliesToPriceId("price_1")
                            .addAppliesToPriceId("price_2")
                            .percentageDiscount(0.0)
                            .isInvoiceLevel(true)
                            .build()
                    )
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .planPhaseOrder(0L)
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
            .addAddPrice(
                SubscriptionCreateParams.AddPrice.builder()
                    .addDiscount(
                        SubscriptionCreateParams.AddPrice.Discount.builder()
                            .discountType(
                                SubscriptionCreateParams.AddPrice.Discount.DiscountType.PERCENTAGE
                            )
                            .amountDiscount("amount_discount")
                            .percentageDiscount(0.15)
                            .usageDiscount(0.0)
                            .build()
                    )
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .externalPriceId("external_price_id")
                    .maximumAmount("1.23")
                    .minimumAmount("1.23")
                    .planPhaseOrder(0L)
                    .price(
                        SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice.builder()
                            .cadence(
                                SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                    .Cadence
                                    .ANNUAL
                            )
                            .itemId("item_id")
                            .modelType(
                                SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                    .ModelType
                                    .UNIT
                            )
                            .name("Annual fee")
                            .unitConfig(
                                SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                    .UnitConfig
                                    .builder()
                                    .unitAmount("unit_amount")
                                    .build()
                            )
                            .billableMetricId("billable_metric_id")
                            .billedInAdvance(true)
                            .billingCycleConfiguration(
                                SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                    .BillingCycleConfiguration
                                    .builder()
                                    .duration(0L)
                                    .durationUnit(
                                        SubscriptionCreateParams.AddPrice.Price
                                            .NewSubscriptionUnitPrice
                                            .BillingCycleConfiguration
                                            .DurationUnit
                                            .DAY
                                    )
                                    .build()
                            )
                            .conversionRate(0.0)
                            .currency("currency")
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoiceGroupingKey("invoice_grouping_key")
                            .invoicingCycleConfiguration(
                                SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                    .InvoicingCycleConfiguration
                                    .builder()
                                    .duration(0L)
                                    .durationUnit(
                                        SubscriptionCreateParams.AddPrice.Price
                                            .NewSubscriptionUnitPrice
                                            .InvoicingCycleConfiguration
                                            .DurationUnit
                                            .DAY
                                    )
                                    .build()
                            )
                            .metadata(
                                SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                    .Metadata
                                    .builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .referenceId("reference_id")
                            .build()
                    )
                    .priceId("h74gfhdjvn7ujokd")
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
            .alignBillingWithSubscriptionStartDate(true)
            .autoCollection(true)
            .awsRegion("aws_region")
            .billingCycleAnchorConfiguration(
                SubscriptionCreateParams.BillingCycleAnchorConfiguration.builder()
                    .day(1L)
                    .month(1L)
                    .year(0L)
                    .build()
            )
            .couponRedemptionCode("coupon_redemption_code")
            .creditsOverageRate(0.0)
            .customerId("customer_id")
            .defaultInvoiceMemo("default_invoice_memo")
            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .externalCustomerId("external_customer_id")
            .externalMarketplace(SubscriptionCreateParams.ExternalMarketplace.GOOGLE)
            .externalMarketplaceReportingId("external_marketplace_reporting_id")
            .externalPlanId("ZMwNQefe7J3ecf7W")
            .filter("my_property > 100 AND my_other_property = 'bar'")
            .initialPhaseOrder(2L)
            .invoicingThreshold("10.00")
            .metadata(
                SubscriptionCreateParams.Metadata.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
            .netTerms(0L)
            .perCreditOverageAmount(0.0)
            .planId("ZMwNQefe7J3ecf7W")
            .planVersionNumber(0L)
            .addPriceOverride(JsonValue.from(mapOf<String, Any>()))
            .addRemoveAdjustment(
                SubscriptionCreateParams.RemoveAdjustment.builder()
                    .adjustmentId("h74gfhdjvn7ujokd")
                    .build()
            )
            .addRemovePrice(
                SubscriptionCreateParams.RemovePrice.builder()
                    .externalPriceId("external_price_id")
                    .priceId("h74gfhdjvn7ujokd")
                    .build()
            )
            .addReplaceAdjustment(
                SubscriptionCreateParams.ReplaceAdjustment.builder()
                    .adjustment(
                        SubscriptionCreateParams.ReplaceAdjustment.Adjustment.NewPercentageDiscount
                            .builder()
                            .adjustmentType(
                                SubscriptionCreateParams.ReplaceAdjustment.Adjustment
                                    .NewPercentageDiscount
                                    .AdjustmentType
                                    .PERCENTAGE_DISCOUNT
                            )
                            .addAppliesToPriceId("price_1")
                            .addAppliesToPriceId("price_2")
                            .percentageDiscount(0.0)
                            .isInvoiceLevel(true)
                            .build()
                    )
                    .replacesAdjustmentId("replaces_adjustment_id")
                    .build()
            )
            .addReplacePrice(
                SubscriptionCreateParams.ReplacePrice.builder()
                    .replacesPriceId("replaces_price_id")
                    .addDiscount(
                        SubscriptionCreateParams.ReplacePrice.Discount.builder()
                            .discountType(
                                SubscriptionCreateParams.ReplacePrice.Discount.DiscountType
                                    .PERCENTAGE
                            )
                            .amountDiscount("amount_discount")
                            .percentageDiscount(0.15)
                            .usageDiscount(0.0)
                            .build()
                    )
                    .externalPriceId("external_price_id")
                    .fixedPriceQuantity(2.0)
                    .maximumAmount("1.23")
                    .minimumAmount("1.23")
                    .price(
                        SubscriptionCreateParams.ReplacePrice.Price.NewSubscriptionUnitPrice
                            .builder()
                            .cadence(
                                SubscriptionCreateParams.ReplacePrice.Price.NewSubscriptionUnitPrice
                                    .Cadence
                                    .ANNUAL
                            )
                            .itemId("item_id")
                            .modelType(
                                SubscriptionCreateParams.ReplacePrice.Price.NewSubscriptionUnitPrice
                                    .ModelType
                                    .UNIT
                            )
                            .name("Annual fee")
                            .unitConfig(
                                SubscriptionCreateParams.ReplacePrice.Price.NewSubscriptionUnitPrice
                                    .UnitConfig
                                    .builder()
                                    .unitAmount("unit_amount")
                                    .build()
                            )
                            .billableMetricId("billable_metric_id")
                            .billedInAdvance(true)
                            .billingCycleConfiguration(
                                SubscriptionCreateParams.ReplacePrice.Price.NewSubscriptionUnitPrice
                                    .BillingCycleConfiguration
                                    .builder()
                                    .duration(0L)
                                    .durationUnit(
                                        SubscriptionCreateParams.ReplacePrice.Price
                                            .NewSubscriptionUnitPrice
                                            .BillingCycleConfiguration
                                            .DurationUnit
                                            .DAY
                                    )
                                    .build()
                            )
                            .conversionRate(0.0)
                            .currency("currency")
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoiceGroupingKey("invoice_grouping_key")
                            .invoicingCycleConfiguration(
                                SubscriptionCreateParams.ReplacePrice.Price.NewSubscriptionUnitPrice
                                    .InvoicingCycleConfiguration
                                    .builder()
                                    .duration(0L)
                                    .durationUnit(
                                        SubscriptionCreateParams.ReplacePrice.Price
                                            .NewSubscriptionUnitPrice
                                            .InvoicingCycleConfiguration
                                            .DurationUnit
                                            .DAY
                                    )
                                    .build()
                            )
                            .metadata(
                                SubscriptionCreateParams.ReplacePrice.Price.NewSubscriptionUnitPrice
                                    .Metadata
                                    .builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .referenceId("reference_id")
                            .build()
                    )
                    .priceId("h74gfhdjvn7ujokd")
                    .build()
            )
            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .trialDurationDays(999999L)
            .build()
    }

    @Test
    fun body() {
        val params =
            SubscriptionCreateParams.builder()
                .addAddAdjustment(
                    SubscriptionCreateParams.AddAdjustment.builder()
                        .adjustment(
                            SubscriptionCreateParams.AddAdjustment.Adjustment.NewPercentageDiscount
                                .builder()
                                .adjustmentType(
                                    SubscriptionCreateParams.AddAdjustment.Adjustment
                                        .NewPercentageDiscount
                                        .AdjustmentType
                                        .PERCENTAGE_DISCOUNT
                                )
                                .addAppliesToPriceId("price_1")
                                .addAppliesToPriceId("price_2")
                                .percentageDiscount(0.0)
                                .isInvoiceLevel(true)
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .planPhaseOrder(0L)
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .addAddPrice(
                    SubscriptionCreateParams.AddPrice.builder()
                        .addDiscount(
                            SubscriptionCreateParams.AddPrice.Discount.builder()
                                .discountType(
                                    SubscriptionCreateParams.AddPrice.Discount.DiscountType
                                        .PERCENTAGE
                                )
                                .amountDiscount("amount_discount")
                                .percentageDiscount(0.15)
                                .usageDiscount(0.0)
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .externalPriceId("external_price_id")
                        .maximumAmount("1.23")
                        .minimumAmount("1.23")
                        .planPhaseOrder(0L)
                        .price(
                            SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                .builder()
                                .cadence(
                                    SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                        .Cadence
                                        .ANNUAL
                                )
                                .itemId("item_id")
                                .modelType(
                                    SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                        .ModelType
                                        .UNIT
                                )
                                .name("Annual fee")
                                .unitConfig(
                                    SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                        .UnitConfig
                                        .builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .billableMetricId("billable_metric_id")
                                .billedInAdvance(true)
                                .billingCycleConfiguration(
                                    SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                        .BillingCycleConfiguration
                                        .builder()
                                        .duration(0L)
                                        .durationUnit(
                                            SubscriptionCreateParams.AddPrice.Price
                                                .NewSubscriptionUnitPrice
                                                .BillingCycleConfiguration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .conversionRate(0.0)
                                .currency("currency")
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoiceGroupingKey("invoice_grouping_key")
                                .invoicingCycleConfiguration(
                                    SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                        .InvoicingCycleConfiguration
                                        .builder()
                                        .duration(0L)
                                        .durationUnit(
                                            SubscriptionCreateParams.AddPrice.Price
                                                .NewSubscriptionUnitPrice
                                                .InvoicingCycleConfiguration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .metadata(
                                    SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                        .Metadata
                                        .builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .referenceId("reference_id")
                                .build()
                        )
                        .priceId("h74gfhdjvn7ujokd")
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .alignBillingWithSubscriptionStartDate(true)
                .autoCollection(true)
                .awsRegion("aws_region")
                .billingCycleAnchorConfiguration(
                    SubscriptionCreateParams.BillingCycleAnchorConfiguration.builder()
                        .day(1L)
                        .month(1L)
                        .year(0L)
                        .build()
                )
                .couponRedemptionCode("coupon_redemption_code")
                .creditsOverageRate(0.0)
                .customerId("customer_id")
                .defaultInvoiceMemo("default_invoice_memo")
                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .externalCustomerId("external_customer_id")
                .externalMarketplace(SubscriptionCreateParams.ExternalMarketplace.GOOGLE)
                .externalMarketplaceReportingId("external_marketplace_reporting_id")
                .externalPlanId("ZMwNQefe7J3ecf7W")
                .filter("my_property > 100 AND my_other_property = 'bar'")
                .initialPhaseOrder(2L)
                .invoicingThreshold("10.00")
                .metadata(
                    SubscriptionCreateParams.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .netTerms(0L)
                .perCreditOverageAmount(0.0)
                .planId("ZMwNQefe7J3ecf7W")
                .planVersionNumber(0L)
                .addPriceOverride(JsonValue.from(mapOf<String, Any>()))
                .addRemoveAdjustment(
                    SubscriptionCreateParams.RemoveAdjustment.builder()
                        .adjustmentId("h74gfhdjvn7ujokd")
                        .build()
                )
                .addRemovePrice(
                    SubscriptionCreateParams.RemovePrice.builder()
                        .externalPriceId("external_price_id")
                        .priceId("h74gfhdjvn7ujokd")
                        .build()
                )
                .addReplaceAdjustment(
                    SubscriptionCreateParams.ReplaceAdjustment.builder()
                        .adjustment(
                            SubscriptionCreateParams.ReplaceAdjustment.Adjustment
                                .NewPercentageDiscount
                                .builder()
                                .adjustmentType(
                                    SubscriptionCreateParams.ReplaceAdjustment.Adjustment
                                        .NewPercentageDiscount
                                        .AdjustmentType
                                        .PERCENTAGE_DISCOUNT
                                )
                                .addAppliesToPriceId("price_1")
                                .addAppliesToPriceId("price_2")
                                .percentageDiscount(0.0)
                                .isInvoiceLevel(true)
                                .build()
                        )
                        .replacesAdjustmentId("replaces_adjustment_id")
                        .build()
                )
                .addReplacePrice(
                    SubscriptionCreateParams.ReplacePrice.builder()
                        .replacesPriceId("replaces_price_id")
                        .addDiscount(
                            SubscriptionCreateParams.ReplacePrice.Discount.builder()
                                .discountType(
                                    SubscriptionCreateParams.ReplacePrice.Discount.DiscountType
                                        .PERCENTAGE
                                )
                                .amountDiscount("amount_discount")
                                .percentageDiscount(0.15)
                                .usageDiscount(0.0)
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(2.0)
                        .maximumAmount("1.23")
                        .minimumAmount("1.23")
                        .price(
                            SubscriptionCreateParams.ReplacePrice.Price.NewSubscriptionUnitPrice
                                .builder()
                                .cadence(
                                    SubscriptionCreateParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .Cadence
                                        .ANNUAL
                                )
                                .itemId("item_id")
                                .modelType(
                                    SubscriptionCreateParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .ModelType
                                        .UNIT
                                )
                                .name("Annual fee")
                                .unitConfig(
                                    SubscriptionCreateParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .UnitConfig
                                        .builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .billableMetricId("billable_metric_id")
                                .billedInAdvance(true)
                                .billingCycleConfiguration(
                                    SubscriptionCreateParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .BillingCycleConfiguration
                                        .builder()
                                        .duration(0L)
                                        .durationUnit(
                                            SubscriptionCreateParams.ReplacePrice.Price
                                                .NewSubscriptionUnitPrice
                                                .BillingCycleConfiguration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .conversionRate(0.0)
                                .currency("currency")
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoiceGroupingKey("invoice_grouping_key")
                                .invoicingCycleConfiguration(
                                    SubscriptionCreateParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .InvoicingCycleConfiguration
                                        .builder()
                                        .duration(0L)
                                        .durationUnit(
                                            SubscriptionCreateParams.ReplacePrice.Price
                                                .NewSubscriptionUnitPrice
                                                .InvoicingCycleConfiguration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .metadata(
                                    SubscriptionCreateParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .Metadata
                                        .builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .referenceId("reference_id")
                                .build()
                        )
                        .priceId("h74gfhdjvn7ujokd")
                        .build()
                )
                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .trialDurationDays(999999L)
                .build()
        val body = params._body()
        assertThat(body).isNotNull
        assertThat(body.addAdjustments())
            .contains(
                listOf(
                    SubscriptionCreateParams.AddAdjustment.builder()
                        .adjustment(
                            SubscriptionCreateParams.AddAdjustment.Adjustment.NewPercentageDiscount
                                .builder()
                                .adjustmentType(
                                    SubscriptionCreateParams.AddAdjustment.Adjustment
                                        .NewPercentageDiscount
                                        .AdjustmentType
                                        .PERCENTAGE_DISCOUNT
                                )
                                .addAppliesToPriceId("price_1")
                                .addAppliesToPriceId("price_2")
                                .percentageDiscount(0.0)
                                .isInvoiceLevel(true)
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .planPhaseOrder(0L)
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
            )
        assertThat(body.addPrices())
            .contains(
                listOf(
                    SubscriptionCreateParams.AddPrice.builder()
                        .addDiscount(
                            SubscriptionCreateParams.AddPrice.Discount.builder()
                                .discountType(
                                    SubscriptionCreateParams.AddPrice.Discount.DiscountType
                                        .PERCENTAGE
                                )
                                .amountDiscount("amount_discount")
                                .percentageDiscount(0.15)
                                .usageDiscount(0.0)
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .externalPriceId("external_price_id")
                        .maximumAmount("1.23")
                        .minimumAmount("1.23")
                        .planPhaseOrder(0L)
                        .price(
                            SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                .builder()
                                .cadence(
                                    SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                        .Cadence
                                        .ANNUAL
                                )
                                .itemId("item_id")
                                .modelType(
                                    SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                        .ModelType
                                        .UNIT
                                )
                                .name("Annual fee")
                                .unitConfig(
                                    SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                        .UnitConfig
                                        .builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .billableMetricId("billable_metric_id")
                                .billedInAdvance(true)
                                .billingCycleConfiguration(
                                    SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                        .BillingCycleConfiguration
                                        .builder()
                                        .duration(0L)
                                        .durationUnit(
                                            SubscriptionCreateParams.AddPrice.Price
                                                .NewSubscriptionUnitPrice
                                                .BillingCycleConfiguration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .conversionRate(0.0)
                                .currency("currency")
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoiceGroupingKey("invoice_grouping_key")
                                .invoicingCycleConfiguration(
                                    SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                        .InvoicingCycleConfiguration
                                        .builder()
                                        .duration(0L)
                                        .durationUnit(
                                            SubscriptionCreateParams.AddPrice.Price
                                                .NewSubscriptionUnitPrice
                                                .InvoicingCycleConfiguration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .metadata(
                                    SubscriptionCreateParams.AddPrice.Price.NewSubscriptionUnitPrice
                                        .Metadata
                                        .builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .referenceId("reference_id")
                                .build()
                        )
                        .priceId("h74gfhdjvn7ujokd")
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
            )
        assertThat(body.alignBillingWithSubscriptionStartDate()).contains(true)
        assertThat(body.autoCollection()).contains(true)
        assertThat(body.awsRegion()).contains("aws_region")
        assertThat(body.billingCycleAnchorConfiguration())
            .contains(
                SubscriptionCreateParams.BillingCycleAnchorConfiguration.builder()
                    .day(1L)
                    .month(1L)
                    .year(0L)
                    .build()
            )
        assertThat(body.couponRedemptionCode()).contains("coupon_redemption_code")
        assertThat(body.creditsOverageRate()).contains(0.0)
        assertThat(body.customerId()).contains("customer_id")
        assertThat(body.defaultInvoiceMemo()).contains("default_invoice_memo")
        assertThat(body.endDate()).contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(body.externalCustomerId()).contains("external_customer_id")
        assertThat(body.externalMarketplace())
            .contains(SubscriptionCreateParams.ExternalMarketplace.GOOGLE)
        assertThat(body.externalMarketplaceReportingId())
            .contains("external_marketplace_reporting_id")
        assertThat(body.externalPlanId()).contains("ZMwNQefe7J3ecf7W")
        assertThat(body.filter()).contains("my_property > 100 AND my_other_property = 'bar'")
        assertThat(body.initialPhaseOrder()).contains(2L)
        assertThat(body.invoicingThreshold()).contains("10.00")
        assertThat(body.metadata())
            .contains(
                SubscriptionCreateParams.Metadata.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
        assertThat(body.netTerms()).contains(0L)
        assertThat(body.perCreditOverageAmount()).contains(0.0)
        assertThat(body.planId()).contains("ZMwNQefe7J3ecf7W")
        assertThat(body.planVersionNumber()).contains(0L)
        assertThat(body.priceOverrides()).contains(listOf(JsonValue.from(mapOf<String, Any>())))
        assertThat(body.removeAdjustments())
            .contains(
                listOf(
                    SubscriptionCreateParams.RemoveAdjustment.builder()
                        .adjustmentId("h74gfhdjvn7ujokd")
                        .build()
                )
            )
        assertThat(body.removePrices())
            .contains(
                listOf(
                    SubscriptionCreateParams.RemovePrice.builder()
                        .externalPriceId("external_price_id")
                        .priceId("h74gfhdjvn7ujokd")
                        .build()
                )
            )
        assertThat(body.replaceAdjustments())
            .contains(
                listOf(
                    SubscriptionCreateParams.ReplaceAdjustment.builder()
                        .adjustment(
                            SubscriptionCreateParams.ReplaceAdjustment.Adjustment
                                .NewPercentageDiscount
                                .builder()
                                .adjustmentType(
                                    SubscriptionCreateParams.ReplaceAdjustment.Adjustment
                                        .NewPercentageDiscount
                                        .AdjustmentType
                                        .PERCENTAGE_DISCOUNT
                                )
                                .addAppliesToPriceId("price_1")
                                .addAppliesToPriceId("price_2")
                                .percentageDiscount(0.0)
                                .isInvoiceLevel(true)
                                .build()
                        )
                        .replacesAdjustmentId("replaces_adjustment_id")
                        .build()
                )
            )
        assertThat(body.replacePrices())
            .contains(
                listOf(
                    SubscriptionCreateParams.ReplacePrice.builder()
                        .replacesPriceId("replaces_price_id")
                        .addDiscount(
                            SubscriptionCreateParams.ReplacePrice.Discount.builder()
                                .discountType(
                                    SubscriptionCreateParams.ReplacePrice.Discount.DiscountType
                                        .PERCENTAGE
                                )
                                .amountDiscount("amount_discount")
                                .percentageDiscount(0.15)
                                .usageDiscount(0.0)
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(2.0)
                        .maximumAmount("1.23")
                        .minimumAmount("1.23")
                        .price(
                            SubscriptionCreateParams.ReplacePrice.Price.NewSubscriptionUnitPrice
                                .builder()
                                .cadence(
                                    SubscriptionCreateParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .Cadence
                                        .ANNUAL
                                )
                                .itemId("item_id")
                                .modelType(
                                    SubscriptionCreateParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .ModelType
                                        .UNIT
                                )
                                .name("Annual fee")
                                .unitConfig(
                                    SubscriptionCreateParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .UnitConfig
                                        .builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .billableMetricId("billable_metric_id")
                                .billedInAdvance(true)
                                .billingCycleConfiguration(
                                    SubscriptionCreateParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .BillingCycleConfiguration
                                        .builder()
                                        .duration(0L)
                                        .durationUnit(
                                            SubscriptionCreateParams.ReplacePrice.Price
                                                .NewSubscriptionUnitPrice
                                                .BillingCycleConfiguration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .conversionRate(0.0)
                                .currency("currency")
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoiceGroupingKey("invoice_grouping_key")
                                .invoicingCycleConfiguration(
                                    SubscriptionCreateParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .InvoicingCycleConfiguration
                                        .builder()
                                        .duration(0L)
                                        .durationUnit(
                                            SubscriptionCreateParams.ReplacePrice.Price
                                                .NewSubscriptionUnitPrice
                                                .InvoicingCycleConfiguration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .metadata(
                                    SubscriptionCreateParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .Metadata
                                        .builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .referenceId("reference_id")
                                .build()
                        )
                        .priceId("h74gfhdjvn7ujokd")
                        .build()
                )
            )
        assertThat(body.startDate()).contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(body.trialDurationDays()).contains(999999L)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params = SubscriptionCreateParams.builder().build()
        val body = params._body()
        assertThat(body).isNotNull
    }
}
