// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.JsonValue
import com.withorb.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class CustomerCreditLedgerListPageResponseTest {

    @Test
    fun create() {
        val customerCreditLedgerListPageResponse =
            CustomerCreditLedgerListPageResponse.builder()
                .addData(
                    IncrementLedgerEntry.builder()
                        .id("id")
                        .amount(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditBlock(
                            AffectedBlock.builder()
                                .id("id")
                                .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .perUnitCostBasis("per_unit_cost_basis")
                                .build()
                        )
                        .currency("currency")
                        .customer(
                            CustomerMinified.builder()
                                .id("id")
                                .externalCustomerId("external_customer_id")
                                .build()
                        )
                        .description("description")
                        .endingBalance(0.0)
                        .entryStatus(IncrementLedgerEntry.EntryStatus.COMMITTED)
                        .entryType(IncrementLedgerEntry.EntryType.INCREMENT)
                        .ledgerSequenceNumber(0L)
                        .metadata(
                            IncrementLedgerEntry.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .startingBalance(0.0)
                        .addCreatedInvoice(
                            Invoice.builder()
                                .id("id")
                                .amountDue("8.00")
                                .autoCollection(
                                    Invoice.AutoCollection.builder()
                                        .enabled(true)
                                        .nextAttemptAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .numAttempts(0L)
                                        .previouslyAttemptedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .build()
                                )
                                .billingAddress(
                                    Address.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                .addCreditNote(
                                    Invoice.CreditNote.builder()
                                        .id("id")
                                        .creditNoteNumber("credit_note_number")
                                        .memo("memo")
                                        .reason("reason")
                                        .total("total")
                                        .type("type")
                                        .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                        .build()
                                )
                                .currency("USD")
                                .customer(
                                    CustomerMinified.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .addCustomerBalanceTransaction(
                                    Invoice.CustomerBalanceTransaction.builder()
                                        .id("cgZa3SXcsPTVyC4Y")
                                        .action(
                                            Invoice.CustomerBalanceTransaction.Action
                                                .APPLIED_TO_INVOICE
                                        )
                                        .amount("11.00")
                                        .createdAt(
                                            OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                        )
                                        .creditNote(CreditNoteTiny.builder().id("id").build())
                                        .description("An optional description")
                                        .endingBalance("22.00")
                                        .invoice(
                                            InvoiceTiny.builder().id("gXcsPTVyC4YZa3Sc").build()
                                        )
                                        .startingBalance("33.00")
                                        .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                        .build()
                                )
                                .customerTaxId(
                                    CustomerTaxId.builder()
                                        .country(CustomerTaxId.Country.AD)
                                        .type(CustomerTaxId.Type.AD_NRT)
                                        .value("value")
                                        .build()
                                )
                                .discount(JsonValue.from(mapOf<String, Any>()))
                                .addDiscount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                                .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .hostedInvoiceUrl("hosted_invoice_url")
                                .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                                .invoiceNumber("JYEFHK-00001")
                                .invoicePdf(
                                    "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                                )
                                .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                                .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addLineItem(
                                    Invoice.LineItem.builder()
                                        .id("id")
                                        .adjustedSubtotal("5.00")
                                        .addAdjustment(
                                            MonetaryUsageDiscountAdjustment.builder()
                                                .id("id")
                                                .adjustmentType(
                                                    MonetaryUsageDiscountAdjustment.AdjustmentType
                                                        .USAGE_DISCOUNT
                                                )
                                                .amount("amount")
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .isInvoiceLevel(true)
                                                .reason("reason")
                                                .usageDiscount(0.0)
                                                .build()
                                        )
                                        .amount("7.00")
                                        .creditsApplied("6.00")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                        .filter("filter")
                                        .grouping("grouping")
                                        .maximum(
                                            Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .minimum(
                                            Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("Fixed Fee")
                                        .partiallyInvoicedAmount("4.00")
                                        .price(
                                            Price.Unit.builder()
                                                .id("id")
                                                .billableMetric(
                                                    BillableMetricTiny.builder().id("id").build()
                                                )
                                                .billingCycleConfiguration(
                                                    BillingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            BillingCycleConfiguration.DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                                .conversionRate(0.0)
                                                .unitConversionRateConfig(
                                                    ConversionRateUnitConfig.builder()
                                                        .unitAmount("unit_amount")
                                                        .build()
                                                )
                                                .createdAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .creditAllocation(
                                                    Allocation.builder()
                                                        .allowsRollover(true)
                                                        .currency("currency")
                                                        .customExpiration(
                                                            CustomExpiration.builder()
                                                                .duration(0L)
                                                                .durationUnit(
                                                                    CustomExpiration.DurationUnit
                                                                        .DAY
                                                                )
                                                                .build()
                                                        )
                                                        .build()
                                                )
                                                .currency("currency")
                                                .discount(
                                                    PercentageDiscount.builder()
                                                        .discountType(
                                                            PercentageDiscount.DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.15)
                                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                        .addFilter(
                                                            TransformPriceFilter.builder()
                                                                .field(
                                                                    TransformPriceFilter.Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    TransformPriceFilter.Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .externalPriceId("external_price_id")
                                                .fixedPriceQuantity(0.0)
                                                .invoicingCycleConfiguration(
                                                    BillingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            BillingCycleConfiguration.DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .item(
                                                    ItemSlim.builder().id("id").name("name").build()
                                                )
                                                .maximum(
                                                    Maximum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            TransformPriceFilter.builder()
                                                                .field(
                                                                    TransformPriceFilter.Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    TransformPriceFilter.Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .maximumAmount("maximum_amount")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .metadata(
                                                    Price.Unit.Metadata.builder()
                                                        .putAdditionalProperty(
                                                            "foo",
                                                            JsonValue.from("string"),
                                                        )
                                                        .build()
                                                )
                                                .minimum(
                                                    Minimum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            TransformPriceFilter.builder()
                                                                .field(
                                                                    TransformPriceFilter.Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    TransformPriceFilter.Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .minimumAmount("minimum_amount")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .name("name")
                                                .planPhaseOrder(0L)
                                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                                .unitConfig(
                                                    UnitConfig.builder()
                                                        .unitAmount("unit_amount")
                                                        .build()
                                                )
                                                .dimensionalPriceConfiguration(
                                                    DimensionalPriceConfiguration.builder()
                                                        .addDimensionValue("string")
                                                        .dimensionalPriceGroupId(
                                                            "dimensional_price_group_id"
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .quantity(1.0)
                                        .startDate(
                                            OffsetDateTime.parse("2022-02-01T08:00:00+00:00")
                                        )
                                        .addSubLineItem(
                                            MatrixSubLineItem.builder()
                                                .amount("9.00")
                                                .grouping(
                                                    SubLineItemGrouping.builder()
                                                        .key("region")
                                                        .value("west")
                                                        .build()
                                                )
                                                .matrixConfig(
                                                    SubLineItemMatrixConfig.builder()
                                                        .addDimensionValue("string")
                                                        .build()
                                                )
                                                .name("Tier One")
                                                .quantity(5.0)
                                                .type(MatrixSubLineItem.Type.MATRIX)
                                                .build()
                                        )
                                        .subtotal("9.00")
                                        .addTaxAmount(
                                            TaxAmount.builder()
                                                .amount("amount")
                                                .taxRateDescription("tax_rate_description")
                                                .taxRatePercentage("tax_rate_percentage")
                                                .build()
                                        )
                                        .addUsageCustomerId("string")
                                        .build()
                                )
                                .maximum(
                                    Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .memo("memo")
                                .metadata(
                                    Invoice.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addPaymentAttempt(
                                    Invoice.PaymentAttempt.builder()
                                        .id("id")
                                        .amount("amount")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .paymentProvider(
                                            Invoice.PaymentAttempt.PaymentProvider.STRIPE
                                        )
                                        .paymentProviderId("payment_provider_id")
                                        .succeeded(true)
                                        .build()
                                )
                                .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .shippingAddress(
                                    Address.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .status(Invoice.Status.ISSUED)
                                .subscription(
                                    SubscriptionMinified.builder().id("VDGsT23osdLb84KD").build()
                                )
                                .subtotal("8.00")
                                .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .total("8.00")
                                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .willAutoIssue(true)
                                .build()
                        )
                        .build()
                )
                .paginationMetadata(
                    PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build()
                )
                .build()

        assertThat(customerCreditLedgerListPageResponse.data())
            .containsExactly(
                CustomerCreditLedgerListResponse.ofIncrement(
                    IncrementLedgerEntry.builder()
                        .id("id")
                        .amount(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditBlock(
                            AffectedBlock.builder()
                                .id("id")
                                .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .perUnitCostBasis("per_unit_cost_basis")
                                .build()
                        )
                        .currency("currency")
                        .customer(
                            CustomerMinified.builder()
                                .id("id")
                                .externalCustomerId("external_customer_id")
                                .build()
                        )
                        .description("description")
                        .endingBalance(0.0)
                        .entryStatus(IncrementLedgerEntry.EntryStatus.COMMITTED)
                        .entryType(IncrementLedgerEntry.EntryType.INCREMENT)
                        .ledgerSequenceNumber(0L)
                        .metadata(
                            IncrementLedgerEntry.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .startingBalance(0.0)
                        .addCreatedInvoice(
                            Invoice.builder()
                                .id("id")
                                .amountDue("8.00")
                                .autoCollection(
                                    Invoice.AutoCollection.builder()
                                        .enabled(true)
                                        .nextAttemptAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .numAttempts(0L)
                                        .previouslyAttemptedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .build()
                                )
                                .billingAddress(
                                    Address.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                .addCreditNote(
                                    Invoice.CreditNote.builder()
                                        .id("id")
                                        .creditNoteNumber("credit_note_number")
                                        .memo("memo")
                                        .reason("reason")
                                        .total("total")
                                        .type("type")
                                        .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                        .build()
                                )
                                .currency("USD")
                                .customer(
                                    CustomerMinified.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .addCustomerBalanceTransaction(
                                    Invoice.CustomerBalanceTransaction.builder()
                                        .id("cgZa3SXcsPTVyC4Y")
                                        .action(
                                            Invoice.CustomerBalanceTransaction.Action
                                                .APPLIED_TO_INVOICE
                                        )
                                        .amount("11.00")
                                        .createdAt(
                                            OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                        )
                                        .creditNote(CreditNoteTiny.builder().id("id").build())
                                        .description("An optional description")
                                        .endingBalance("22.00")
                                        .invoice(
                                            InvoiceTiny.builder().id("gXcsPTVyC4YZa3Sc").build()
                                        )
                                        .startingBalance("33.00")
                                        .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                        .build()
                                )
                                .customerTaxId(
                                    CustomerTaxId.builder()
                                        .country(CustomerTaxId.Country.AD)
                                        .type(CustomerTaxId.Type.AD_NRT)
                                        .value("value")
                                        .build()
                                )
                                .discount(JsonValue.from(mapOf<String, Any>()))
                                .addDiscount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                                .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .hostedInvoiceUrl("hosted_invoice_url")
                                .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                                .invoiceNumber("JYEFHK-00001")
                                .invoicePdf(
                                    "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                                )
                                .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                                .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addLineItem(
                                    Invoice.LineItem.builder()
                                        .id("id")
                                        .adjustedSubtotal("5.00")
                                        .addAdjustment(
                                            MonetaryUsageDiscountAdjustment.builder()
                                                .id("id")
                                                .adjustmentType(
                                                    MonetaryUsageDiscountAdjustment.AdjustmentType
                                                        .USAGE_DISCOUNT
                                                )
                                                .amount("amount")
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .isInvoiceLevel(true)
                                                .reason("reason")
                                                .usageDiscount(0.0)
                                                .build()
                                        )
                                        .amount("7.00")
                                        .creditsApplied("6.00")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                        .filter("filter")
                                        .grouping("grouping")
                                        .maximum(
                                            Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .minimum(
                                            Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("Fixed Fee")
                                        .partiallyInvoicedAmount("4.00")
                                        .price(
                                            Price.Unit.builder()
                                                .id("id")
                                                .billableMetric(
                                                    BillableMetricTiny.builder().id("id").build()
                                                )
                                                .billingCycleConfiguration(
                                                    BillingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            BillingCycleConfiguration.DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                                .conversionRate(0.0)
                                                .unitConversionRateConfig(
                                                    ConversionRateUnitConfig.builder()
                                                        .unitAmount("unit_amount")
                                                        .build()
                                                )
                                                .createdAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .creditAllocation(
                                                    Allocation.builder()
                                                        .allowsRollover(true)
                                                        .currency("currency")
                                                        .customExpiration(
                                                            CustomExpiration.builder()
                                                                .duration(0L)
                                                                .durationUnit(
                                                                    CustomExpiration.DurationUnit
                                                                        .DAY
                                                                )
                                                                .build()
                                                        )
                                                        .build()
                                                )
                                                .currency("currency")
                                                .discount(
                                                    PercentageDiscount.builder()
                                                        .discountType(
                                                            PercentageDiscount.DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.15)
                                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                        .addFilter(
                                                            TransformPriceFilter.builder()
                                                                .field(
                                                                    TransformPriceFilter.Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    TransformPriceFilter.Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .externalPriceId("external_price_id")
                                                .fixedPriceQuantity(0.0)
                                                .invoicingCycleConfiguration(
                                                    BillingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            BillingCycleConfiguration.DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .item(
                                                    ItemSlim.builder().id("id").name("name").build()
                                                )
                                                .maximum(
                                                    Maximum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            TransformPriceFilter.builder()
                                                                .field(
                                                                    TransformPriceFilter.Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    TransformPriceFilter.Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .maximumAmount("maximum_amount")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .metadata(
                                                    Price.Unit.Metadata.builder()
                                                        .putAdditionalProperty(
                                                            "foo",
                                                            JsonValue.from("string"),
                                                        )
                                                        .build()
                                                )
                                                .minimum(
                                                    Minimum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            TransformPriceFilter.builder()
                                                                .field(
                                                                    TransformPriceFilter.Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    TransformPriceFilter.Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .minimumAmount("minimum_amount")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .name("name")
                                                .planPhaseOrder(0L)
                                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                                .unitConfig(
                                                    UnitConfig.builder()
                                                        .unitAmount("unit_amount")
                                                        .build()
                                                )
                                                .dimensionalPriceConfiguration(
                                                    DimensionalPriceConfiguration.builder()
                                                        .addDimensionValue("string")
                                                        .dimensionalPriceGroupId(
                                                            "dimensional_price_group_id"
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .quantity(1.0)
                                        .startDate(
                                            OffsetDateTime.parse("2022-02-01T08:00:00+00:00")
                                        )
                                        .addSubLineItem(
                                            MatrixSubLineItem.builder()
                                                .amount("9.00")
                                                .grouping(
                                                    SubLineItemGrouping.builder()
                                                        .key("region")
                                                        .value("west")
                                                        .build()
                                                )
                                                .matrixConfig(
                                                    SubLineItemMatrixConfig.builder()
                                                        .addDimensionValue("string")
                                                        .build()
                                                )
                                                .name("Tier One")
                                                .quantity(5.0)
                                                .type(MatrixSubLineItem.Type.MATRIX)
                                                .build()
                                        )
                                        .subtotal("9.00")
                                        .addTaxAmount(
                                            TaxAmount.builder()
                                                .amount("amount")
                                                .taxRateDescription("tax_rate_description")
                                                .taxRatePercentage("tax_rate_percentage")
                                                .build()
                                        )
                                        .addUsageCustomerId("string")
                                        .build()
                                )
                                .maximum(
                                    Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .memo("memo")
                                .metadata(
                                    Invoice.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addPaymentAttempt(
                                    Invoice.PaymentAttempt.builder()
                                        .id("id")
                                        .amount("amount")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .paymentProvider(
                                            Invoice.PaymentAttempt.PaymentProvider.STRIPE
                                        )
                                        .paymentProviderId("payment_provider_id")
                                        .succeeded(true)
                                        .build()
                                )
                                .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .shippingAddress(
                                    Address.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .status(Invoice.Status.ISSUED)
                                .subscription(
                                    SubscriptionMinified.builder().id("VDGsT23osdLb84KD").build()
                                )
                                .subtotal("8.00")
                                .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .total("8.00")
                                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .willAutoIssue(true)
                                .build()
                        )
                        .build()
                )
            )
        assertThat(customerCreditLedgerListPageResponse.paginationMetadata())
            .isEqualTo(PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build())
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val customerCreditLedgerListPageResponse =
            CustomerCreditLedgerListPageResponse.builder()
                .addData(
                    IncrementLedgerEntry.builder()
                        .id("id")
                        .amount(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditBlock(
                            AffectedBlock.builder()
                                .id("id")
                                .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .perUnitCostBasis("per_unit_cost_basis")
                                .build()
                        )
                        .currency("currency")
                        .customer(
                            CustomerMinified.builder()
                                .id("id")
                                .externalCustomerId("external_customer_id")
                                .build()
                        )
                        .description("description")
                        .endingBalance(0.0)
                        .entryStatus(IncrementLedgerEntry.EntryStatus.COMMITTED)
                        .entryType(IncrementLedgerEntry.EntryType.INCREMENT)
                        .ledgerSequenceNumber(0L)
                        .metadata(
                            IncrementLedgerEntry.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .startingBalance(0.0)
                        .addCreatedInvoice(
                            Invoice.builder()
                                .id("id")
                                .amountDue("8.00")
                                .autoCollection(
                                    Invoice.AutoCollection.builder()
                                        .enabled(true)
                                        .nextAttemptAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .numAttempts(0L)
                                        .previouslyAttemptedAt(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .build()
                                )
                                .billingAddress(
                                    Address.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                .addCreditNote(
                                    Invoice.CreditNote.builder()
                                        .id("id")
                                        .creditNoteNumber("credit_note_number")
                                        .memo("memo")
                                        .reason("reason")
                                        .total("total")
                                        .type("type")
                                        .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                        .build()
                                )
                                .currency("USD")
                                .customer(
                                    CustomerMinified.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .addCustomerBalanceTransaction(
                                    Invoice.CustomerBalanceTransaction.builder()
                                        .id("cgZa3SXcsPTVyC4Y")
                                        .action(
                                            Invoice.CustomerBalanceTransaction.Action
                                                .APPLIED_TO_INVOICE
                                        )
                                        .amount("11.00")
                                        .createdAt(
                                            OffsetDateTime.parse("2022-05-01T07:01:31+00:00")
                                        )
                                        .creditNote(CreditNoteTiny.builder().id("id").build())
                                        .description("An optional description")
                                        .endingBalance("22.00")
                                        .invoice(
                                            InvoiceTiny.builder().id("gXcsPTVyC4YZa3Sc").build()
                                        )
                                        .startingBalance("33.00")
                                        .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                        .build()
                                )
                                .customerTaxId(
                                    CustomerTaxId.builder()
                                        .country(CustomerTaxId.Country.AD)
                                        .type(CustomerTaxId.Type.AD_NRT)
                                        .value("value")
                                        .build()
                                )
                                .discount(JsonValue.from(mapOf<String, Any>()))
                                .addDiscount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                                .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .hostedInvoiceUrl("hosted_invoice_url")
                                .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                                .invoiceNumber("JYEFHK-00001")
                                .invoicePdf(
                                    "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                                )
                                .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                                .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addLineItem(
                                    Invoice.LineItem.builder()
                                        .id("id")
                                        .adjustedSubtotal("5.00")
                                        .addAdjustment(
                                            MonetaryUsageDiscountAdjustment.builder()
                                                .id("id")
                                                .adjustmentType(
                                                    MonetaryUsageDiscountAdjustment.AdjustmentType
                                                        .USAGE_DISCOUNT
                                                )
                                                .amount("amount")
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .isInvoiceLevel(true)
                                                .reason("reason")
                                                .usageDiscount(0.0)
                                                .build()
                                        )
                                        .amount("7.00")
                                        .creditsApplied("6.00")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                        .filter("filter")
                                        .grouping("grouping")
                                        .maximum(
                                            Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .minimum(
                                            Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("Fixed Fee")
                                        .partiallyInvoicedAmount("4.00")
                                        .price(
                                            Price.Unit.builder()
                                                .id("id")
                                                .billableMetric(
                                                    BillableMetricTiny.builder().id("id").build()
                                                )
                                                .billingCycleConfiguration(
                                                    BillingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            BillingCycleConfiguration.DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                                .conversionRate(0.0)
                                                .unitConversionRateConfig(
                                                    ConversionRateUnitConfig.builder()
                                                        .unitAmount("unit_amount")
                                                        .build()
                                                )
                                                .createdAt(
                                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                                )
                                                .creditAllocation(
                                                    Allocation.builder()
                                                        .allowsRollover(true)
                                                        .currency("currency")
                                                        .customExpiration(
                                                            CustomExpiration.builder()
                                                                .duration(0L)
                                                                .durationUnit(
                                                                    CustomExpiration.DurationUnit
                                                                        .DAY
                                                                )
                                                                .build()
                                                        )
                                                        .build()
                                                )
                                                .currency("currency")
                                                .discount(
                                                    PercentageDiscount.builder()
                                                        .discountType(
                                                            PercentageDiscount.DiscountType
                                                                .PERCENTAGE
                                                        )
                                                        .percentageDiscount(0.15)
                                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                        .addFilter(
                                                            TransformPriceFilter.builder()
                                                                .field(
                                                                    TransformPriceFilter.Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    TransformPriceFilter.Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .reason("reason")
                                                        .build()
                                                )
                                                .externalPriceId("external_price_id")
                                                .fixedPriceQuantity(0.0)
                                                .invoicingCycleConfiguration(
                                                    BillingCycleConfiguration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            BillingCycleConfiguration.DurationUnit
                                                                .DAY
                                                        )
                                                        .build()
                                                )
                                                .item(
                                                    ItemSlim.builder().id("id").name("name").build()
                                                )
                                                .maximum(
                                                    Maximum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            TransformPriceFilter.builder()
                                                                .field(
                                                                    TransformPriceFilter.Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    TransformPriceFilter.Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .maximumAmount("maximum_amount")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .metadata(
                                                    Price.Unit.Metadata.builder()
                                                        .putAdditionalProperty(
                                                            "foo",
                                                            JsonValue.from("string"),
                                                        )
                                                        .build()
                                                )
                                                .minimum(
                                                    Minimum.builder()
                                                        .addAppliesToPriceId("string")
                                                        .addFilter(
                                                            TransformPriceFilter.builder()
                                                                .field(
                                                                    TransformPriceFilter.Field
                                                                        .PRICE_ID
                                                                )
                                                                .operator(
                                                                    TransformPriceFilter.Operator
                                                                        .INCLUDES
                                                                )
                                                                .addValue("string")
                                                                .build()
                                                        )
                                                        .minimumAmount("minimum_amount")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .name("name")
                                                .planPhaseOrder(0L)
                                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                                .unitConfig(
                                                    UnitConfig.builder()
                                                        .unitAmount("unit_amount")
                                                        .build()
                                                )
                                                .dimensionalPriceConfiguration(
                                                    DimensionalPriceConfiguration.builder()
                                                        .addDimensionValue("string")
                                                        .dimensionalPriceGroupId(
                                                            "dimensional_price_group_id"
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .quantity(1.0)
                                        .startDate(
                                            OffsetDateTime.parse("2022-02-01T08:00:00+00:00")
                                        )
                                        .addSubLineItem(
                                            MatrixSubLineItem.builder()
                                                .amount("9.00")
                                                .grouping(
                                                    SubLineItemGrouping.builder()
                                                        .key("region")
                                                        .value("west")
                                                        .build()
                                                )
                                                .matrixConfig(
                                                    SubLineItemMatrixConfig.builder()
                                                        .addDimensionValue("string")
                                                        .build()
                                                )
                                                .name("Tier One")
                                                .quantity(5.0)
                                                .type(MatrixSubLineItem.Type.MATRIX)
                                                .build()
                                        )
                                        .subtotal("9.00")
                                        .addTaxAmount(
                                            TaxAmount.builder()
                                                .amount("amount")
                                                .taxRateDescription("tax_rate_description")
                                                .taxRatePercentage("tax_rate_percentage")
                                                .build()
                                        )
                                        .addUsageCustomerId("string")
                                        .build()
                                )
                                .maximum(
                                    Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .memo("memo")
                                .metadata(
                                    Invoice.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addPaymentAttempt(
                                    Invoice.PaymentAttempt.builder()
                                        .id("id")
                                        .amount("amount")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .paymentProvider(
                                            Invoice.PaymentAttempt.PaymentProvider.STRIPE
                                        )
                                        .paymentProviderId("payment_provider_id")
                                        .succeeded(true)
                                        .build()
                                )
                                .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .shippingAddress(
                                    Address.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .status(Invoice.Status.ISSUED)
                                .subscription(
                                    SubscriptionMinified.builder().id("VDGsT23osdLb84KD").build()
                                )
                                .subtotal("8.00")
                                .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .total("8.00")
                                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .willAutoIssue(true)
                                .build()
                        )
                        .build()
                )
                .paginationMetadata(
                    PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build()
                )
                .build()

        val roundtrippedCustomerCreditLedgerListPageResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(customerCreditLedgerListPageResponse),
                jacksonTypeRef<CustomerCreditLedgerListPageResponse>(),
            )

        assertThat(roundtrippedCustomerCreditLedgerListPageResponse)
            .isEqualTo(customerCreditLedgerListPageResponse)
    }
}
