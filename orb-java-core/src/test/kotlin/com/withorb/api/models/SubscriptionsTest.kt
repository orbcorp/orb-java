// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.JsonValue
import com.withorb.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SubscriptionsTest {

    @Test
    fun create() {
        val subscriptions =
            Subscriptions.builder()
                .addData(
                    Subscription.builder()
                        .id("id")
                        .activePlanPhaseOrder(0L)
                        .addAdjustmentInterval(
                            AdjustmentInterval.builder()
                                .id("id")
                                .adjustment(
                                    PlanPhaseUsageDiscountAdjustment.builder()
                                        .id("id")
                                        .adjustmentType(
                                            PlanPhaseUsageDiscountAdjustment.AdjustmentType
                                                .USAGE_DISCOUNT
                                        )
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .isInvoiceLevel(true)
                                        .planPhaseOrder(0L)
                                        .reason("reason")
                                        .usageDiscount(0.0)
                                        .build()
                                )
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .autoCollection(true)
                        .billingCycleAnchorConfiguration(
                            BillingCycleAnchorConfiguration.builder()
                                .day(1L)
                                .month(1L)
                                .year(0L)
                                .build()
                        )
                        .billingCycleDay(1L)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currentBillingPeriodEndDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .currentBillingPeriodStartDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .customer(
                            Customer.builder()
                                .id("id")
                                .addAdditionalEmail("string")
                                .autoCollection(true)
                                .balance("balance")
                                .billingAddress(
                                    Address.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .currency("currency")
                                .email("email")
                                .emailDelivery(true)
                                .exemptFromAutomatedTax(true)
                                .externalCustomerId("external_customer_id")
                                .hierarchy(
                                    Customer.Hierarchy.builder()
                                        .addChild(
                                            CustomerMinified.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .parent(
                                            CustomerMinified.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .build()
                                )
                                .metadata(
                                    Customer.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .name("name")
                                .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                                .paymentProviderId("payment_provider_id")
                                .portalUrl("portal_url")
                                .shippingAddress(
                                    Address.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .taxId(
                                    CustomerTaxId.builder()
                                        .country(CustomerTaxId.Country.AD)
                                        .type(CustomerTaxId.Type.AD_NRT)
                                        .value("value")
                                        .build()
                                )
                                .timezone("timezone")
                                .accountingSyncConfiguration(
                                    Customer.AccountingSyncConfiguration.builder()
                                        .addAccountingProvider(
                                            Customer.AccountingSyncConfiguration.AccountingProvider
                                                .builder()
                                                .externalProviderId("external_provider_id")
                                                .providerType(
                                                    Customer.AccountingSyncConfiguration
                                                        .AccountingProvider
                                                        .ProviderType
                                                        .QUICKBOOKS
                                                )
                                                .build()
                                        )
                                        .excluded(true)
                                        .build()
                                )
                                .reportingConfiguration(
                                    Customer.ReportingConfiguration.builder().exempt(true).build()
                                )
                                .build()
                        )
                        .defaultInvoiceMemo("default_invoice_memo")
                        .addDiscountInterval(
                            AmountDiscountInterval.builder()
                                .amountDiscount("amount_discount")
                                .addAppliesToPriceIntervalId("string")
                                .discountType(AmountDiscountInterval.DiscountType.AMOUNT)
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addFixedFeeQuantitySchedule(
                            FixedFeeQuantityScheduleEntry.builder()
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .priceId("price_id")
                                .quantity(0.0)
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .invoicingThreshold("invoicing_threshold")
                        .addMaximumInterval(
                            MaximumInterval.builder()
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .metadata(
                            Subscription.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .addMinimumInterval(
                            MinimumInterval.builder()
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .name("name")
                        .netTerms(0L)
                        .pendingSubscriptionChange(
                            SubscriptionChangeMinified.builder().id("id").build()
                        )
                        .plan(
                            Plan.builder()
                                .id("id")
                                .addAdjustment(
                                    PlanPhaseUsageDiscountAdjustment.builder()
                                        .id("id")
                                        .adjustmentType(
                                            PlanPhaseUsageDiscountAdjustment.AdjustmentType
                                                .USAGE_DISCOUNT
                                        )
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .isInvoiceLevel(true)
                                        .planPhaseOrder(0L)
                                        .reason("reason")
                                        .usageDiscount(0.0)
                                        .build()
                                )
                                .basePlan(
                                    Plan.BasePlan.builder()
                                        .id("m2t5akQeh2obwxeU")
                                        .externalPlanId("m2t5akQeh2obwxeU")
                                        .name("Example plan")
                                        .build()
                                )
                                .basePlanId("base_plan_id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .currency("currency")
                                .defaultInvoiceMemo("default_invoice_memo")
                                .description("description")
                                .discount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .externalPlanId("external_plan_id")
                                .invoicingCurrency("invoicing_currency")
                                .maximum(
                                    Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    Plan.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .netTerms(0L)
                                .addPlanPhase(
                                    Plan.PlanPhase.builder()
                                        .id("id")
                                        .description("description")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .duration(0L)
                                        .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                        .maximum(
                                            Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .minimum(
                                            Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("name")
                                        .order(0L)
                                        .build()
                                )
                                .addPrice(
                                    Price.Unit.builder()
                                        .id("id")
                                        .billableMetric(
                                            BillableMetricTiny.builder().id("id").build()
                                        )
                                        .billingCycleConfiguration(
                                            BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    BillingCycleConfiguration.DurationUnit.DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.Unit.Cadence.ONE_TIME)
                                        .conversionRate(0.0)
                                        .unitConversionRateConfig(
                                            Price.Unit.ConversionRateConfig.InnerUnit.UnitConfig
                                                .builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Allocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .customExpiration(
                                                    CustomExpiration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            CustomExpiration.DurationUnit.DAY
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(0.0)
                                        .invoicingCycleConfiguration(
                                            BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    BillingCycleConfiguration.DurationUnit.DAY
                                                )
                                                .build()
                                        )
                                        .item(ItemSlim.builder().id("id").name("name").build())
                                        .maximum(
                                            Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(
                                            Price.Unit.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("name")
                                        .planPhaseOrder(0L)
                                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            UnitConfig.builder().unitAmount("unit_amount").build()
                                        )
                                        .dimensionalPriceConfiguration(
                                            DimensionalPriceConfiguration.builder()
                                                .addDimensionValue("string")
                                                .dimensionalPriceGroupId(
                                                    "dimensional_price_group_id"
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .product(
                                    Plan.Product.builder()
                                        .id("id")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .name("name")
                                        .build()
                                )
                                .status(Plan.Status.ACTIVE)
                                .trialConfig(
                                    Plan.TrialConfig.builder()
                                        .trialPeriod(0L)
                                        .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                                        .build()
                                )
                                .version(0L)
                                .build()
                        )
                        .addPriceInterval(
                            PriceInterval.builder()
                                .id("id")
                                .billingCycleDay(0L)
                                .currentBillingPeriodEndDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .currentBillingPeriodStartDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .filter("filter")
                                .addFixedFeeQuantityTransition(
                                    FixedFeeQuantityTransition.builder()
                                        .effectiveDate(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .priceId("price_id")
                                        .quantity(0L)
                                        .build()
                                )
                                .price(
                                    Price.Unit.builder()
                                        .id("id")
                                        .billableMetric(
                                            BillableMetricTiny.builder().id("id").build()
                                        )
                                        .billingCycleConfiguration(
                                            BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    BillingCycleConfiguration.DurationUnit.DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.Unit.Cadence.ONE_TIME)
                                        .conversionRate(0.0)
                                        .unitConversionRateConfig(
                                            Price.Unit.ConversionRateConfig.InnerUnit.UnitConfig
                                                .builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Allocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .customExpiration(
                                                    CustomExpiration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            CustomExpiration.DurationUnit.DAY
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(0.0)
                                        .invoicingCycleConfiguration(
                                            BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    BillingCycleConfiguration.DurationUnit.DAY
                                                )
                                                .build()
                                        )
                                        .item(ItemSlim.builder().id("id").name("name").build())
                                        .maximum(
                                            Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(
                                            Price.Unit.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("name")
                                        .planPhaseOrder(0L)
                                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            UnitConfig.builder().unitAmount("unit_amount").build()
                                        )
                                        .dimensionalPriceConfiguration(
                                            DimensionalPriceConfiguration.builder()
                                                .addDimensionValue("string")
                                                .dimensionalPriceGroupId(
                                                    "dimensional_price_group_id"
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addUsageCustomerId("string")
                                .build()
                        )
                        .redeemedCoupon(
                            CouponRedemption.builder()
                                .couponId("coupon_id")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .status(Subscription.Status.ACTIVE)
                        .trialInfo(
                            SubscriptionTrialInfo.builder()
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .build()
                )
                .paginationMetadata(
                    PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build()
                )
                .build()

        assertThat(subscriptions.data())
            .containsExactly(
                Subscription.builder()
                    .id("id")
                    .activePlanPhaseOrder(0L)
                    .addAdjustmentInterval(
                        AdjustmentInterval.builder()
                            .id("id")
                            .adjustment(
                                PlanPhaseUsageDiscountAdjustment.builder()
                                    .id("id")
                                    .adjustmentType(
                                        PlanPhaseUsageDiscountAdjustment.AdjustmentType
                                            .USAGE_DISCOUNT
                                    )
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        TransformPriceFilter.builder()
                                            .field(TransformPriceFilter.Field.PRICE_ID)
                                            .operator(TransformPriceFilter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .isInvoiceLevel(true)
                                    .planPhaseOrder(0L)
                                    .reason("reason")
                                    .usageDiscount(0.0)
                                    .build()
                            )
                            .addAppliesToPriceIntervalId("string")
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .autoCollection(true)
                    .billingCycleAnchorConfiguration(
                        BillingCycleAnchorConfiguration.builder().day(1L).month(1L).year(0L).build()
                    )
                    .billingCycleDay(1L)
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .customer(
                        Customer.builder()
                            .id("id")
                            .addAdditionalEmail("string")
                            .autoCollection(true)
                            .balance("balance")
                            .billingAddress(
                                Address.builder()
                                    .city("city")
                                    .country("country")
                                    .line1("line1")
                                    .line2("line2")
                                    .postalCode("postal_code")
                                    .state("state")
                                    .build()
                            )
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .currency("currency")
                            .email("email")
                            .emailDelivery(true)
                            .exemptFromAutomatedTax(true)
                            .externalCustomerId("external_customer_id")
                            .hierarchy(
                                Customer.Hierarchy.builder()
                                    .addChild(
                                        CustomerMinified.builder()
                                            .id("id")
                                            .externalCustomerId("external_customer_id")
                                            .build()
                                    )
                                    .parent(
                                        CustomerMinified.builder()
                                            .id("id")
                                            .externalCustomerId("external_customer_id")
                                            .build()
                                    )
                                    .build()
                            )
                            .metadata(
                                Customer.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .name("name")
                            .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                            .paymentProviderId("payment_provider_id")
                            .portalUrl("portal_url")
                            .shippingAddress(
                                Address.builder()
                                    .city("city")
                                    .country("country")
                                    .line1("line1")
                                    .line2("line2")
                                    .postalCode("postal_code")
                                    .state("state")
                                    .build()
                            )
                            .taxId(
                                CustomerTaxId.builder()
                                    .country(CustomerTaxId.Country.AD)
                                    .type(CustomerTaxId.Type.AD_NRT)
                                    .value("value")
                                    .build()
                            )
                            .timezone("timezone")
                            .accountingSyncConfiguration(
                                Customer.AccountingSyncConfiguration.builder()
                                    .addAccountingProvider(
                                        Customer.AccountingSyncConfiguration.AccountingProvider
                                            .builder()
                                            .externalProviderId("external_provider_id")
                                            .providerType(
                                                Customer.AccountingSyncConfiguration
                                                    .AccountingProvider
                                                    .ProviderType
                                                    .QUICKBOOKS
                                            )
                                            .build()
                                    )
                                    .excluded(true)
                                    .build()
                            )
                            .reportingConfiguration(
                                Customer.ReportingConfiguration.builder().exempt(true).build()
                            )
                            .build()
                    )
                    .defaultInvoiceMemo("default_invoice_memo")
                    .addDiscountInterval(
                        AmountDiscountInterval.builder()
                            .amountDiscount("amount_discount")
                            .addAppliesToPriceIntervalId("string")
                            .discountType(AmountDiscountInterval.DiscountType.AMOUNT)
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addFilter(
                                TransformPriceFilter.builder()
                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                    .operator(TransformPriceFilter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .addFixedFeeQuantitySchedule(
                        FixedFeeQuantityScheduleEntry.builder()
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .priceId("price_id")
                            .quantity(0.0)
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .invoicingThreshold("invoicing_threshold")
                    .addMaximumInterval(
                        MaximumInterval.builder()
                            .addAppliesToPriceIntervalId("string")
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addFilter(
                                TransformPriceFilter.builder()
                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                    .operator(TransformPriceFilter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .metadata(
                        Subscription.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .addMinimumInterval(
                        MinimumInterval.builder()
                            .addAppliesToPriceIntervalId("string")
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addFilter(
                                TransformPriceFilter.builder()
                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                    .operator(TransformPriceFilter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .name("name")
                    .netTerms(0L)
                    .pendingSubscriptionChange(
                        SubscriptionChangeMinified.builder().id("id").build()
                    )
                    .plan(
                        Plan.builder()
                            .id("id")
                            .addAdjustment(
                                PlanPhaseUsageDiscountAdjustment.builder()
                                    .id("id")
                                    .adjustmentType(
                                        PlanPhaseUsageDiscountAdjustment.AdjustmentType
                                            .USAGE_DISCOUNT
                                    )
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        TransformPriceFilter.builder()
                                            .field(TransformPriceFilter.Field.PRICE_ID)
                                            .operator(TransformPriceFilter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .isInvoiceLevel(true)
                                    .planPhaseOrder(0L)
                                    .reason("reason")
                                    .usageDiscount(0.0)
                                    .build()
                            )
                            .basePlan(
                                Plan.BasePlan.builder()
                                    .id("m2t5akQeh2obwxeU")
                                    .externalPlanId("m2t5akQeh2obwxeU")
                                    .name("Example plan")
                                    .build()
                            )
                            .basePlanId("base_plan_id")
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .currency("currency")
                            .defaultInvoiceMemo("default_invoice_memo")
                            .description("description")
                            .discount(
                                PercentageDiscount.builder()
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .addFilter(
                                        TransformPriceFilter.builder()
                                            .field(TransformPriceFilter.Field.PRICE_ID)
                                            .operator(TransformPriceFilter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .reason("reason")
                                    .build()
                            )
                            .externalPlanId("external_plan_id")
                            .invoicingCurrency("invoicing_currency")
                            .maximum(
                                Maximum.builder()
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        TransformPriceFilter.builder()
                                            .field(TransformPriceFilter.Field.PRICE_ID)
                                            .operator(TransformPriceFilter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .metadata(
                                Plan.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .minimum(
                                Minimum.builder()
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        TransformPriceFilter.builder()
                                            .field(TransformPriceFilter.Field.PRICE_ID)
                                            .operator(TransformPriceFilter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .name("name")
                            .netTerms(0L)
                            .addPlanPhase(
                                Plan.PlanPhase.builder()
                                    .id("id")
                                    .description("description")
                                    .discount(
                                        PercentageDiscount.builder()
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                            .addFilter(
                                                TransformPriceFilter.builder()
                                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                                    .operator(
                                                        TransformPriceFilter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .reason("reason")
                                            .build()
                                    )
                                    .duration(0L)
                                    .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                    .maximum(
                                        Maximum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                TransformPriceFilter.builder()
                                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                                    .operator(
                                                        TransformPriceFilter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .minimum(
                                        Minimum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                TransformPriceFilter.builder()
                                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                                    .operator(
                                                        TransformPriceFilter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .name("name")
                                    .order(0L)
                                    .build()
                            )
                            .addPrice(
                                Price.Unit.builder()
                                    .id("id")
                                    .billableMetric(BillableMetricTiny.builder().id("id").build())
                                    .billingCycleConfiguration(
                                        BillingCycleConfiguration.builder()
                                            .duration(0L)
                                            .durationUnit(
                                                BillingCycleConfiguration.DurationUnit.DAY
                                            )
                                            .build()
                                    )
                                    .cadence(Price.Unit.Cadence.ONE_TIME)
                                    .conversionRate(0.0)
                                    .unitConversionRateConfig(
                                        Price.Unit.ConversionRateConfig.InnerUnit.UnitConfig
                                            .builder()
                                            .unitAmount("unit_amount")
                                            .build()
                                    )
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .creditAllocation(
                                        Allocation.builder()
                                            .allowsRollover(true)
                                            .currency("currency")
                                            .customExpiration(
                                                CustomExpiration.builder()
                                                    .duration(0L)
                                                    .durationUnit(CustomExpiration.DurationUnit.DAY)
                                                    .build()
                                            )
                                            .build()
                                    )
                                    .currency("currency")
                                    .discount(
                                        PercentageDiscount.builder()
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                            .addFilter(
                                                TransformPriceFilter.builder()
                                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                                    .operator(
                                                        TransformPriceFilter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .reason("reason")
                                            .build()
                                    )
                                    .externalPriceId("external_price_id")
                                    .fixedPriceQuantity(0.0)
                                    .invoicingCycleConfiguration(
                                        BillingCycleConfiguration.builder()
                                            .duration(0L)
                                            .durationUnit(
                                                BillingCycleConfiguration.DurationUnit.DAY
                                            )
                                            .build()
                                    )
                                    .item(ItemSlim.builder().id("id").name("name").build())
                                    .maximum(
                                        Maximum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                TransformPriceFilter.builder()
                                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                                    .operator(
                                                        TransformPriceFilter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .metadata(
                                        Price.Unit.Metadata.builder()
                                            .putAdditionalProperty("foo", JsonValue.from("string"))
                                            .build()
                                    )
                                    .minimum(
                                        Minimum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                TransformPriceFilter.builder()
                                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                                    .operator(
                                                        TransformPriceFilter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .name("name")
                                    .planPhaseOrder(0L)
                                    .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                    .unitConfig(
                                        UnitConfig.builder().unitAmount("unit_amount").build()
                                    )
                                    .dimensionalPriceConfiguration(
                                        DimensionalPriceConfiguration.builder()
                                            .addDimensionValue("string")
                                            .dimensionalPriceGroupId("dimensional_price_group_id")
                                            .build()
                                    )
                                    .build()
                            )
                            .product(
                                Plan.Product.builder()
                                    .id("id")
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .name("name")
                                    .build()
                            )
                            .status(Plan.Status.ACTIVE)
                            .trialConfig(
                                Plan.TrialConfig.builder()
                                    .trialPeriod(0L)
                                    .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                                    .build()
                            )
                            .version(0L)
                            .build()
                    )
                    .addPriceInterval(
                        PriceInterval.builder()
                            .id("id")
                            .billingCycleDay(0L)
                            .currentBillingPeriodEndDate(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                            .currentBillingPeriodStartDate(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .filter("filter")
                            .addFixedFeeQuantityTransition(
                                FixedFeeQuantityTransition.builder()
                                    .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .priceId("price_id")
                                    .quantity(0L)
                                    .build()
                            )
                            .price(
                                Price.Unit.builder()
                                    .id("id")
                                    .billableMetric(BillableMetricTiny.builder().id("id").build())
                                    .billingCycleConfiguration(
                                        BillingCycleConfiguration.builder()
                                            .duration(0L)
                                            .durationUnit(
                                                BillingCycleConfiguration.DurationUnit.DAY
                                            )
                                            .build()
                                    )
                                    .cadence(Price.Unit.Cadence.ONE_TIME)
                                    .conversionRate(0.0)
                                    .unitConversionRateConfig(
                                        Price.Unit.ConversionRateConfig.InnerUnit.UnitConfig
                                            .builder()
                                            .unitAmount("unit_amount")
                                            .build()
                                    )
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .creditAllocation(
                                        Allocation.builder()
                                            .allowsRollover(true)
                                            .currency("currency")
                                            .customExpiration(
                                                CustomExpiration.builder()
                                                    .duration(0L)
                                                    .durationUnit(CustomExpiration.DurationUnit.DAY)
                                                    .build()
                                            )
                                            .build()
                                    )
                                    .currency("currency")
                                    .discount(
                                        PercentageDiscount.builder()
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                            .addFilter(
                                                TransformPriceFilter.builder()
                                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                                    .operator(
                                                        TransformPriceFilter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .reason("reason")
                                            .build()
                                    )
                                    .externalPriceId("external_price_id")
                                    .fixedPriceQuantity(0.0)
                                    .invoicingCycleConfiguration(
                                        BillingCycleConfiguration.builder()
                                            .duration(0L)
                                            .durationUnit(
                                                BillingCycleConfiguration.DurationUnit.DAY
                                            )
                                            .build()
                                    )
                                    .item(ItemSlim.builder().id("id").name("name").build())
                                    .maximum(
                                        Maximum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                TransformPriceFilter.builder()
                                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                                    .operator(
                                                        TransformPriceFilter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .metadata(
                                        Price.Unit.Metadata.builder()
                                            .putAdditionalProperty("foo", JsonValue.from("string"))
                                            .build()
                                    )
                                    .minimum(
                                        Minimum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                TransformPriceFilter.builder()
                                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                                    .operator(
                                                        TransformPriceFilter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .name("name")
                                    .planPhaseOrder(0L)
                                    .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                    .unitConfig(
                                        UnitConfig.builder().unitAmount("unit_amount").build()
                                    )
                                    .dimensionalPriceConfiguration(
                                        DimensionalPriceConfiguration.builder()
                                            .addDimensionValue("string")
                                            .dimensionalPriceGroupId("dimensional_price_group_id")
                                            .build()
                                    )
                                    .build()
                            )
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addUsageCustomerId("string")
                            .build()
                    )
                    .redeemedCoupon(
                        CouponRedemption.builder()
                            .couponId("coupon_id")
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .status(Subscription.Status.ACTIVE)
                    .trialInfo(
                        SubscriptionTrialInfo.builder()
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .build()
            )
        assertThat(subscriptions.paginationMetadata())
            .isEqualTo(PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build())
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val subscriptions =
            Subscriptions.builder()
                .addData(
                    Subscription.builder()
                        .id("id")
                        .activePlanPhaseOrder(0L)
                        .addAdjustmentInterval(
                            AdjustmentInterval.builder()
                                .id("id")
                                .adjustment(
                                    PlanPhaseUsageDiscountAdjustment.builder()
                                        .id("id")
                                        .adjustmentType(
                                            PlanPhaseUsageDiscountAdjustment.AdjustmentType
                                                .USAGE_DISCOUNT
                                        )
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .isInvoiceLevel(true)
                                        .planPhaseOrder(0L)
                                        .reason("reason")
                                        .usageDiscount(0.0)
                                        .build()
                                )
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .autoCollection(true)
                        .billingCycleAnchorConfiguration(
                            BillingCycleAnchorConfiguration.builder()
                                .day(1L)
                                .month(1L)
                                .year(0L)
                                .build()
                        )
                        .billingCycleDay(1L)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currentBillingPeriodEndDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .currentBillingPeriodStartDate(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .customer(
                            Customer.builder()
                                .id("id")
                                .addAdditionalEmail("string")
                                .autoCollection(true)
                                .balance("balance")
                                .billingAddress(
                                    Address.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .currency("currency")
                                .email("email")
                                .emailDelivery(true)
                                .exemptFromAutomatedTax(true)
                                .externalCustomerId("external_customer_id")
                                .hierarchy(
                                    Customer.Hierarchy.builder()
                                        .addChild(
                                            CustomerMinified.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .parent(
                                            CustomerMinified.builder()
                                                .id("id")
                                                .externalCustomerId("external_customer_id")
                                                .build()
                                        )
                                        .build()
                                )
                                .metadata(
                                    Customer.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .name("name")
                                .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                                .paymentProviderId("payment_provider_id")
                                .portalUrl("portal_url")
                                .shippingAddress(
                                    Address.builder()
                                        .city("city")
                                        .country("country")
                                        .line1("line1")
                                        .line2("line2")
                                        .postalCode("postal_code")
                                        .state("state")
                                        .build()
                                )
                                .taxId(
                                    CustomerTaxId.builder()
                                        .country(CustomerTaxId.Country.AD)
                                        .type(CustomerTaxId.Type.AD_NRT)
                                        .value("value")
                                        .build()
                                )
                                .timezone("timezone")
                                .accountingSyncConfiguration(
                                    Customer.AccountingSyncConfiguration.builder()
                                        .addAccountingProvider(
                                            Customer.AccountingSyncConfiguration.AccountingProvider
                                                .builder()
                                                .externalProviderId("external_provider_id")
                                                .providerType(
                                                    Customer.AccountingSyncConfiguration
                                                        .AccountingProvider
                                                        .ProviderType
                                                        .QUICKBOOKS
                                                )
                                                .build()
                                        )
                                        .excluded(true)
                                        .build()
                                )
                                .reportingConfiguration(
                                    Customer.ReportingConfiguration.builder().exempt(true).build()
                                )
                                .build()
                        )
                        .defaultInvoiceMemo("default_invoice_memo")
                        .addDiscountInterval(
                            AmountDiscountInterval.builder()
                                .amountDiscount("amount_discount")
                                .addAppliesToPriceIntervalId("string")
                                .discountType(AmountDiscountInterval.DiscountType.AMOUNT)
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addFixedFeeQuantitySchedule(
                            FixedFeeQuantityScheduleEntry.builder()
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .priceId("price_id")
                                .quantity(0.0)
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .invoicingThreshold("invoicing_threshold")
                        .addMaximumInterval(
                            MaximumInterval.builder()
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .metadata(
                            Subscription.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .addMinimumInterval(
                            MinimumInterval.builder()
                                .addAppliesToPriceIntervalId("string")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .name("name")
                        .netTerms(0L)
                        .pendingSubscriptionChange(
                            SubscriptionChangeMinified.builder().id("id").build()
                        )
                        .plan(
                            Plan.builder()
                                .id("id")
                                .addAdjustment(
                                    PlanPhaseUsageDiscountAdjustment.builder()
                                        .id("id")
                                        .adjustmentType(
                                            PlanPhaseUsageDiscountAdjustment.AdjustmentType
                                                .USAGE_DISCOUNT
                                        )
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .isInvoiceLevel(true)
                                        .planPhaseOrder(0L)
                                        .reason("reason")
                                        .usageDiscount(0.0)
                                        .build()
                                )
                                .basePlan(
                                    Plan.BasePlan.builder()
                                        .id("m2t5akQeh2obwxeU")
                                        .externalPlanId("m2t5akQeh2obwxeU")
                                        .name("Example plan")
                                        .build()
                                )
                                .basePlanId("base_plan_id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .currency("currency")
                                .defaultInvoiceMemo("default_invoice_memo")
                                .description("description")
                                .discount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .externalPlanId("external_plan_id")
                                .invoicingCurrency("invoicing_currency")
                                .maximum(
                                    Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    Plan.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .netTerms(0L)
                                .addPlanPhase(
                                    Plan.PlanPhase.builder()
                                        .id("id")
                                        .description("description")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .duration(0L)
                                        .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                        .maximum(
                                            Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .minimum(
                                            Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("name")
                                        .order(0L)
                                        .build()
                                )
                                .addPrice(
                                    Price.Unit.builder()
                                        .id("id")
                                        .billableMetric(
                                            BillableMetricTiny.builder().id("id").build()
                                        )
                                        .billingCycleConfiguration(
                                            BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    BillingCycleConfiguration.DurationUnit.DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.Unit.Cadence.ONE_TIME)
                                        .conversionRate(0.0)
                                        .unitConversionRateConfig(
                                            Price.Unit.ConversionRateConfig.InnerUnit.UnitConfig
                                                .builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Allocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .customExpiration(
                                                    CustomExpiration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            CustomExpiration.DurationUnit.DAY
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(0.0)
                                        .invoicingCycleConfiguration(
                                            BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    BillingCycleConfiguration.DurationUnit.DAY
                                                )
                                                .build()
                                        )
                                        .item(ItemSlim.builder().id("id").name("name").build())
                                        .maximum(
                                            Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(
                                            Price.Unit.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("name")
                                        .planPhaseOrder(0L)
                                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            UnitConfig.builder().unitAmount("unit_amount").build()
                                        )
                                        .dimensionalPriceConfiguration(
                                            DimensionalPriceConfiguration.builder()
                                                .addDimensionValue("string")
                                                .dimensionalPriceGroupId(
                                                    "dimensional_price_group_id"
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .product(
                                    Plan.Product.builder()
                                        .id("id")
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .name("name")
                                        .build()
                                )
                                .status(Plan.Status.ACTIVE)
                                .trialConfig(
                                    Plan.TrialConfig.builder()
                                        .trialPeriod(0L)
                                        .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                                        .build()
                                )
                                .version(0L)
                                .build()
                        )
                        .addPriceInterval(
                            PriceInterval.builder()
                                .id("id")
                                .billingCycleDay(0L)
                                .currentBillingPeriodEndDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .currentBillingPeriodStartDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .filter("filter")
                                .addFixedFeeQuantityTransition(
                                    FixedFeeQuantityTransition.builder()
                                        .effectiveDate(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .priceId("price_id")
                                        .quantity(0L)
                                        .build()
                                )
                                .price(
                                    Price.Unit.builder()
                                        .id("id")
                                        .billableMetric(
                                            BillableMetricTiny.builder().id("id").build()
                                        )
                                        .billingCycleConfiguration(
                                            BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    BillingCycleConfiguration.DurationUnit.DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.Unit.Cadence.ONE_TIME)
                                        .conversionRate(0.0)
                                        .unitConversionRateConfig(
                                            Price.Unit.ConversionRateConfig.InnerUnit.UnitConfig
                                                .builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Allocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .customExpiration(
                                                    CustomExpiration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            CustomExpiration.DurationUnit.DAY
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(0.0)
                                        .invoicingCycleConfiguration(
                                            BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    BillingCycleConfiguration.DurationUnit.DAY
                                                )
                                                .build()
                                        )
                                        .item(ItemSlim.builder().id("id").name("name").build())
                                        .maximum(
                                            Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(
                                            Price.Unit.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("name")
                                        .planPhaseOrder(0L)
                                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            UnitConfig.builder().unitAmount("unit_amount").build()
                                        )
                                        .dimensionalPriceConfiguration(
                                            DimensionalPriceConfiguration.builder()
                                                .addDimensionValue("string")
                                                .dimensionalPriceGroupId(
                                                    "dimensional_price_group_id"
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .addUsageCustomerId("string")
                                .build()
                        )
                        .redeemedCoupon(
                            CouponRedemption.builder()
                                .couponId("coupon_id")
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .status(Subscription.Status.ACTIVE)
                        .trialInfo(
                            SubscriptionTrialInfo.builder()
                                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .build()
                )
                .paginationMetadata(
                    PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build()
                )
                .build()

        val roundtrippedSubscriptions =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(subscriptions),
                jacksonTypeRef<Subscriptions>(),
            )

        assertThat(roundtrippedSubscriptions).isEqualTo(subscriptions)
    }
}
