// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import java.time.LocalDate
import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter
import java.util.UUID
import org.junit.jupiter.api.Test
import org.assertj.core.api.Assertions.assertThat
import com.withorb.api.core.JsonNull
import com.withorb.api.core.JsonString
import com.withorb.api.core.JsonValue
import com.withorb.api.models.Subscriptions

class SubscriptionsTest {

    @Test
    fun createSubscriptions() {
      val subscriptions = Subscriptions.builder()
          .data(listOf(Subscription.builder()
              .id("id")
              .activePlanPhaseOrder(123L)
              .adjustmentIntervals(listOf(Subscription.AdjustmentInterval.builder()
                  .id("id")
                  .adjustment(Subscription.AdjustmentInterval.Adjustment.ofAmountDiscountAdjustment(Subscription.AdjustmentInterval.Adjustment.AmountDiscountAdjustment.builder()
                      .adjustmentType(Subscription.AdjustmentInterval.Adjustment.AmountDiscountAdjustment.AdjustmentType.AMOUNT_DISCOUNT)
                      .amountDiscount("amount_discount")
                      .appliesToPriceIds(listOf("string"))
                      .reason("reason")
                      .build()))
                  .appliesToPriceIntervalIds(listOf("string"))
                  .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .build()))
              .autoCollection(true)
              .billingCycleDay(31L)
              .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .customer(Customer.builder()
                  .id("id")
                  .additionalEmails(listOf("string"))
                  .autoCollection(true)
                  .balance("balance")
                  .billingAddress(Customer.BillingAddress.builder()
                      .city("city")
                      .country("country")
                      .line1("line1")
                      .line2("line2")
                      .postalCode("postal_code")
                      .state("state")
                      .build())
                  .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .currency("currency")
                  .email("email")
                  .emailDelivery(true)
                  .externalCustomerId("external_customer_id")
                  .metadata(Customer.Metadata.builder().build())
                  .name("name")
                  .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                  .paymentProviderId("payment_provider_id")
                  .portalUrl("portal_url")
                  .shippingAddress(Customer.ShippingAddress.builder()
                      .city("city")
                      .country("country")
                      .line1("line1")
                      .line2("line2")
                      .postalCode("postal_code")
                      .state("state")
                      .build())
                  .taxId(Customer.TaxId.builder()
                      .country(Customer.TaxId.Country.AD)
                      .type(Customer.TaxId.Type.AD_NRT)
                      .value("value")
                      .build())
                  .timezone("timezone")
                  .accountingSyncConfiguration(Customer.AccountingSyncConfiguration.builder()
                      .accountingProviders(listOf(Customer.AccountingSyncConfiguration.AccountingProvider.builder()
                          .externalProviderId("external_provider_id")
                          .providerType(Customer.AccountingSyncConfiguration.AccountingProvider.ProviderType.QUICKBOOKS)
                          .build()))
                      .excluded(true)
                      .build())
                  .reportingConfiguration(Customer.ReportingConfiguration.builder()
                      .exempt(true)
                      .build())
                  .build())
              .defaultInvoiceMemo("default_invoice_memo")
              .discountIntervals(listOf(Subscription.DiscountInterval.ofAmountDiscountInterval(Subscription.DiscountInterval.AmountDiscountInterval.builder()
                  .amountDiscount("amount_discount")
                  .appliesToPriceIds(listOf("string"))
                  .appliesToPriceIntervalIds(listOf("string"))
                  .discountType(Subscription.DiscountInterval.AmountDiscountInterval.DiscountType.AMOUNT)
                  .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .build())))
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .fixedFeeQuantitySchedule(listOf(Subscription.FixedFeeQuantitySchedule.builder()
                  .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .priceId("price_id")
                  .quantity(42.23)
                  .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .build()))
              .invoicingThreshold("invoicing_threshold")
              .maximumIntervals(listOf(Subscription.MaximumInterval.builder()
                  .appliesToPriceIds(listOf("string"))
                  .appliesToPriceIntervalIds(listOf("string"))
                  .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .maximumAmount("maximum_amount")
                  .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .build()))
              .metadata(Subscription.Metadata.builder().build())
              .minimumIntervals(listOf(Subscription.MinimumInterval.builder()
                  .appliesToPriceIds(listOf("string"))
                  .appliesToPriceIntervalIds(listOf("string"))
                  .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .minimumAmount("minimum_amount")
                  .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .build()))
              .netTerms(123L)
              .plan(Plan.builder()
                  .id("id")
                  .basePlan(Plan.BasePlan.builder()
                      .id("m2t5akQeh2obwxeU")
                      .externalPlanId("m2t5akQeh2obwxeU")
                      .name("Example plan")
                      .build())
                  .basePlanId("base_plan_id")
                  .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .currency("currency")
                  .defaultInvoiceMemo("default_invoice_memo")
                  .description("description")
                  .discount(Discount.ofPercentageDiscount(Discount.PercentageDiscount.builder()
                      .appliesToPriceIds(listOf("string"))
                      .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                      .percentageDiscount(1.0)
                      .reason("reason")
                      .build()))
                  .externalPlanId("external_plan_id")
                  .invoicingCurrency("invoicing_currency")
                  .maximum(Plan.Maximum.builder()
                      .appliesToPriceIds(listOf("string"))
                      .maximumAmount("maximum_amount")
                      .build())
                  .maximumAmount("maximum_amount")
                  .metadata(Plan.Metadata.builder().build())
                  .minimum(Plan.Minimum.builder()
                      .appliesToPriceIds(listOf("string"))
                      .minimumAmount("minimum_amount")
                      .build())
                  .minimumAmount("minimum_amount")
                  .name("name")
                  .netTerms(123L)
                  .planPhases(listOf(Plan.PlanPhase.builder()
                      .id("id")
                      .description("description")
                      .discount(Discount.ofPercentageDiscount(Discount.PercentageDiscount.builder()
                          .appliesToPriceIds(listOf("string"))
                          .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                          .percentageDiscount(1.0)
                          .reason("reason")
                          .build()))
                      .duration(123L)
                      .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                      .maximum(Plan.PlanPhase.Maximum.builder()
                          .appliesToPriceIds(listOf("string"))
                          .maximumAmount("maximum_amount")
                          .build())
                      .maximumAmount("maximum_amount")
                      .minimum(Plan.PlanPhase.Minimum.builder()
                          .appliesToPriceIds(listOf("string"))
                          .minimumAmount("minimum_amount")
                          .build())
                      .minimumAmount("minimum_amount")
                      .name("name")
                      .order(123L)
                      .build()))
                  .prices(listOf(Price.ofUnitPrice(Price.UnitPrice.builder()
                      .id("id")
                      .billableMetric(Price.UnitPrice.BillableMetric.builder()
                          .id("id")
                          .build())
                      .billingCycleConfiguration(Price.UnitPrice.BillingCycleConfiguration.builder()
                          .duration(123L)
                          .durationUnit(Price.UnitPrice.BillingCycleConfiguration.DurationUnit.DAY)
                          .build())
                      .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                      .conversionRate(42.23)
                      .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                      .creditAllocation(Price.UnitPrice.CreditAllocation.builder()
                          .allowsRollover(true)
                          .currency("currency")
                          .build())
                      .currency("currency")
                      .discount(Discount.ofPercentageDiscount(Discount.PercentageDiscount.builder()
                          .appliesToPriceIds(listOf("string"))
                          .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                          .percentageDiscount(1.0)
                          .reason("reason")
                          .build()))
                      .externalPriceId("external_price_id")
                      .fixedPriceQuantity(42.23)
                      .item(Price.UnitPrice.Item.builder()
                          .id("id")
                          .name("name")
                          .build())
                      .maximum(Price.UnitPrice.Maximum.builder()
                          .appliesToPriceIds(listOf("string"))
                          .maximumAmount("maximum_amount")
                          .build())
                      .maximumAmount("maximum_amount")
                      .metadata(Price.UnitPrice.Metadata.builder().build())
                      .minimum(Price.UnitPrice.Minimum.builder()
                          .appliesToPriceIds(listOf("string"))
                          .minimumAmount("minimum_amount")
                          .build())
                      .minimumAmount("minimum_amount")
                      .modelType(Price.UnitPrice.ModelType.UNIT)
                      .name("name")
                      .planPhaseOrder(123L)
                      .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                      .unitConfig(Price.UnitPrice.UnitConfig.builder()
                          .unitAmount("unit_amount")
                          .build())
                      .build())))
                  .product(Plan.Product.builder()
                      .id("id")
                      .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                      .name("name")
                      .build())
                  .status(Plan.Status.ACTIVE)
                  .trialConfig(Plan.TrialConfig.builder()
                      .trialPeriod(123L)
                      .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                      .build())
                  .version(123L)
                  .build())
              .priceIntervals(listOf(Subscription.PriceInterval.builder()
                  .id("id")
                  .billingCycleDay(123L)
                  .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .fixedFeeQuantityTransitions(listOf(Subscription.PriceInterval.FixedFeeQuantityTransition.builder()
                      .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                      .priceId("price_id")
                      .quantity(123L)
                      .build()))
                  .price(Price.ofUnitPrice(Price.UnitPrice.builder()
                      .id("id")
                      .billableMetric(Price.UnitPrice.BillableMetric.builder()
                          .id("id")
                          .build())
                      .billingCycleConfiguration(Price.UnitPrice.BillingCycleConfiguration.builder()
                          .duration(123L)
                          .durationUnit(Price.UnitPrice.BillingCycleConfiguration.DurationUnit.DAY)
                          .build())
                      .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                      .conversionRate(42.23)
                      .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                      .creditAllocation(Price.UnitPrice.CreditAllocation.builder()
                          .allowsRollover(true)
                          .currency("currency")
                          .build())
                      .currency("currency")
                      .discount(Discount.ofPercentageDiscount(Discount.PercentageDiscount.builder()
                          .appliesToPriceIds(listOf("string"))
                          .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                          .percentageDiscount(1.0)
                          .reason("reason")
                          .build()))
                      .externalPriceId("external_price_id")
                      .fixedPriceQuantity(42.23)
                      .item(Price.UnitPrice.Item.builder()
                          .id("id")
                          .name("name")
                          .build())
                      .maximum(Price.UnitPrice.Maximum.builder()
                          .appliesToPriceIds(listOf("string"))
                          .maximumAmount("maximum_amount")
                          .build())
                      .maximumAmount("maximum_amount")
                      .metadata(Price.UnitPrice.Metadata.builder().build())
                      .minimum(Price.UnitPrice.Minimum.builder()
                          .appliesToPriceIds(listOf("string"))
                          .minimumAmount("minimum_amount")
                          .build())
                      .minimumAmount("minimum_amount")
                      .modelType(Price.UnitPrice.ModelType.UNIT)
                      .name("name")
                      .planPhaseOrder(123L)
                      .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                      .unitConfig(Price.UnitPrice.UnitConfig.builder()
                          .unitAmount("unit_amount")
                          .build())
                      .build()))
                  .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .build()))
              .redeemedCoupon(Subscription.RedeemedCoupon.builder()
                  .couponId("coupon_id")
                  .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .build())
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .status(Subscription.Status.ACTIVE)
              .trialInfo(Subscription.TrialInfo.builder()
                  .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .build())
              .build()))
          .paginationMetadata(PaginationMetadata.builder()
              .hasMore(true)
              .nextCursor("next_cursor")
              .build())
          .build()
      assertThat(subscriptions).isNotNull
      assertThat(subscriptions.data()).containsExactly(Subscription.builder()
          .id("id")
          .activePlanPhaseOrder(123L)
          .adjustmentIntervals(listOf(Subscription.AdjustmentInterval.builder()
              .id("id")
              .adjustment(Subscription.AdjustmentInterval.Adjustment.ofAmountDiscountAdjustment(Subscription.AdjustmentInterval.Adjustment.AmountDiscountAdjustment.builder()
                  .adjustmentType(Subscription.AdjustmentInterval.Adjustment.AmountDiscountAdjustment.AdjustmentType.AMOUNT_DISCOUNT)
                  .amountDiscount("amount_discount")
                  .appliesToPriceIds(listOf("string"))
                  .reason("reason")
                  .build()))
              .appliesToPriceIntervalIds(listOf("string"))
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build()))
          .autoCollection(true)
          .billingCycleDay(31L)
          .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .customer(Customer.builder()
              .id("id")
              .additionalEmails(listOf("string"))
              .autoCollection(true)
              .balance("balance")
              .billingAddress(Customer.BillingAddress.builder()
                  .city("city")
                  .country("country")
                  .line1("line1")
                  .line2("line2")
                  .postalCode("postal_code")
                  .state("state")
                  .build())
              .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .currency("currency")
              .email("email")
              .emailDelivery(true)
              .externalCustomerId("external_customer_id")
              .metadata(Customer.Metadata.builder().build())
              .name("name")
              .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
              .paymentProviderId("payment_provider_id")
              .portalUrl("portal_url")
              .shippingAddress(Customer.ShippingAddress.builder()
                  .city("city")
                  .country("country")
                  .line1("line1")
                  .line2("line2")
                  .postalCode("postal_code")
                  .state("state")
                  .build())
              .taxId(Customer.TaxId.builder()
                  .country(Customer.TaxId.Country.AD)
                  .type(Customer.TaxId.Type.AD_NRT)
                  .value("value")
                  .build())
              .timezone("timezone")
              .accountingSyncConfiguration(Customer.AccountingSyncConfiguration.builder()
                  .accountingProviders(listOf(Customer.AccountingSyncConfiguration.AccountingProvider.builder()
                      .externalProviderId("external_provider_id")
                      .providerType(Customer.AccountingSyncConfiguration.AccountingProvider.ProviderType.QUICKBOOKS)
                      .build()))
                  .excluded(true)
                  .build())
              .reportingConfiguration(Customer.ReportingConfiguration.builder()
                  .exempt(true)
                  .build())
              .build())
          .defaultInvoiceMemo("default_invoice_memo")
          .discountIntervals(listOf(Subscription.DiscountInterval.ofAmountDiscountInterval(Subscription.DiscountInterval.AmountDiscountInterval.builder()
              .amountDiscount("amount_discount")
              .appliesToPriceIds(listOf("string"))
              .appliesToPriceIntervalIds(listOf("string"))
              .discountType(Subscription.DiscountInterval.AmountDiscountInterval.DiscountType.AMOUNT)
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build())))
          .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .fixedFeeQuantitySchedule(listOf(Subscription.FixedFeeQuantitySchedule.builder()
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .priceId("price_id")
              .quantity(42.23)
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build()))
          .invoicingThreshold("invoicing_threshold")
          .maximumIntervals(listOf(Subscription.MaximumInterval.builder()
              .appliesToPriceIds(listOf("string"))
              .appliesToPriceIntervalIds(listOf("string"))
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .maximumAmount("maximum_amount")
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build()))
          .metadata(Subscription.Metadata.builder().build())
          .minimumIntervals(listOf(Subscription.MinimumInterval.builder()
              .appliesToPriceIds(listOf("string"))
              .appliesToPriceIntervalIds(listOf("string"))
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .minimumAmount("minimum_amount")
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build()))
          .netTerms(123L)
          .plan(Plan.builder()
              .id("id")
              .basePlan(Plan.BasePlan.builder()
                  .id("m2t5akQeh2obwxeU")
                  .externalPlanId("m2t5akQeh2obwxeU")
                  .name("Example plan")
                  .build())
              .basePlanId("base_plan_id")
              .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .currency("currency")
              .defaultInvoiceMemo("default_invoice_memo")
              .description("description")
              .discount(Discount.ofPercentageDiscount(Discount.PercentageDiscount.builder()
                  .appliesToPriceIds(listOf("string"))
                  .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                  .percentageDiscount(1.0)
                  .reason("reason")
                  .build()))
              .externalPlanId("external_plan_id")
              .invoicingCurrency("invoicing_currency")
              .maximum(Plan.Maximum.builder()
                  .appliesToPriceIds(listOf("string"))
                  .maximumAmount("maximum_amount")
                  .build())
              .maximumAmount("maximum_amount")
              .metadata(Plan.Metadata.builder().build())
              .minimum(Plan.Minimum.builder()
                  .appliesToPriceIds(listOf("string"))
                  .minimumAmount("minimum_amount")
                  .build())
              .minimumAmount("minimum_amount")
              .name("name")
              .netTerms(123L)
              .planPhases(listOf(Plan.PlanPhase.builder()
                  .id("id")
                  .description("description")
                  .discount(Discount.ofPercentageDiscount(Discount.PercentageDiscount.builder()
                      .appliesToPriceIds(listOf("string"))
                      .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                      .percentageDiscount(1.0)
                      .reason("reason")
                      .build()))
                  .duration(123L)
                  .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                  .maximum(Plan.PlanPhase.Maximum.builder()
                      .appliesToPriceIds(listOf("string"))
                      .maximumAmount("maximum_amount")
                      .build())
                  .maximumAmount("maximum_amount")
                  .minimum(Plan.PlanPhase.Minimum.builder()
                      .appliesToPriceIds(listOf("string"))
                      .minimumAmount("minimum_amount")
                      .build())
                  .minimumAmount("minimum_amount")
                  .name("name")
                  .order(123L)
                  .build()))
              .prices(listOf(Price.ofUnitPrice(Price.UnitPrice.builder()
                  .id("id")
                  .billableMetric(Price.UnitPrice.BillableMetric.builder()
                      .id("id")
                      .build())
                  .billingCycleConfiguration(Price.UnitPrice.BillingCycleConfiguration.builder()
                      .duration(123L)
                      .durationUnit(Price.UnitPrice.BillingCycleConfiguration.DurationUnit.DAY)
                      .build())
                  .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                  .conversionRate(42.23)
                  .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .creditAllocation(Price.UnitPrice.CreditAllocation.builder()
                      .allowsRollover(true)
                      .currency("currency")
                      .build())
                  .currency("currency")
                  .discount(Discount.ofPercentageDiscount(Discount.PercentageDiscount.builder()
                      .appliesToPriceIds(listOf("string"))
                      .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                      .percentageDiscount(1.0)
                      .reason("reason")
                      .build()))
                  .externalPriceId("external_price_id")
                  .fixedPriceQuantity(42.23)
                  .item(Price.UnitPrice.Item.builder()
                      .id("id")
                      .name("name")
                      .build())
                  .maximum(Price.UnitPrice.Maximum.builder()
                      .appliesToPriceIds(listOf("string"))
                      .maximumAmount("maximum_amount")
                      .build())
                  .maximumAmount("maximum_amount")
                  .metadata(Price.UnitPrice.Metadata.builder().build())
                  .minimum(Price.UnitPrice.Minimum.builder()
                      .appliesToPriceIds(listOf("string"))
                      .minimumAmount("minimum_amount")
                      .build())
                  .minimumAmount("minimum_amount")
                  .modelType(Price.UnitPrice.ModelType.UNIT)
                  .name("name")
                  .planPhaseOrder(123L)
                  .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                  .unitConfig(Price.UnitPrice.UnitConfig.builder()
                      .unitAmount("unit_amount")
                      .build())
                  .build())))
              .product(Plan.Product.builder()
                  .id("id")
                  .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .name("name")
                  .build())
              .status(Plan.Status.ACTIVE)
              .trialConfig(Plan.TrialConfig.builder()
                  .trialPeriod(123L)
                  .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                  .build())
              .version(123L)
              .build())
          .priceIntervals(listOf(Subscription.PriceInterval.builder()
              .id("id")
              .billingCycleDay(123L)
              .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .fixedFeeQuantityTransitions(listOf(Subscription.PriceInterval.FixedFeeQuantityTransition.builder()
                  .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .priceId("price_id")
                  .quantity(123L)
                  .build()))
              .price(Price.ofUnitPrice(Price.UnitPrice.builder()
                  .id("id")
                  .billableMetric(Price.UnitPrice.BillableMetric.builder()
                      .id("id")
                      .build())
                  .billingCycleConfiguration(Price.UnitPrice.BillingCycleConfiguration.builder()
                      .duration(123L)
                      .durationUnit(Price.UnitPrice.BillingCycleConfiguration.DurationUnit.DAY)
                      .build())
                  .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                  .conversionRate(42.23)
                  .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                  .creditAllocation(Price.UnitPrice.CreditAllocation.builder()
                      .allowsRollover(true)
                      .currency("currency")
                      .build())
                  .currency("currency")
                  .discount(Discount.ofPercentageDiscount(Discount.PercentageDiscount.builder()
                      .appliesToPriceIds(listOf("string"))
                      .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                      .percentageDiscount(1.0)
                      .reason("reason")
                      .build()))
                  .externalPriceId("external_price_id")
                  .fixedPriceQuantity(42.23)
                  .item(Price.UnitPrice.Item.builder()
                      .id("id")
                      .name("name")
                      .build())
                  .maximum(Price.UnitPrice.Maximum.builder()
                      .appliesToPriceIds(listOf("string"))
                      .maximumAmount("maximum_amount")
                      .build())
                  .maximumAmount("maximum_amount")
                  .metadata(Price.UnitPrice.Metadata.builder().build())
                  .minimum(Price.UnitPrice.Minimum.builder()
                      .appliesToPriceIds(listOf("string"))
                      .minimumAmount("minimum_amount")
                      .build())
                  .minimumAmount("minimum_amount")
                  .modelType(Price.UnitPrice.ModelType.UNIT)
                  .name("name")
                  .planPhaseOrder(123L)
                  .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                  .unitConfig(Price.UnitPrice.UnitConfig.builder()
                      .unitAmount("unit_amount")
                      .build())
                  .build()))
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build()))
          .redeemedCoupon(Subscription.RedeemedCoupon.builder()
              .couponId("coupon_id")
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build())
          .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
          .status(Subscription.Status.ACTIVE)
          .trialInfo(Subscription.TrialInfo.builder()
              .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
              .build())
          .build())
      assertThat(subscriptions.paginationMetadata()).isEqualTo(PaginationMetadata.builder()
          .hasMore(true)
          .nextCursor("next_cursor")
          .build())
    }
}
