// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.JsonValue
import com.withorb.api.core.jsonMapper
import com.withorb.api.errors.OrbInvalidDataException
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.EnumSource

internal class CustomerCreditLedgerListByExternalIdResponseTest {

    @Test
    fun ofIncrement() {
        val increment =
            IncrementLedgerEntry.builder()
                .id("id")
                .amount(0.0)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .creditBlock(
                    AffectedBlock.builder()
                        .id("id")
                        .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .perUnitCostBasis("per_unit_cost_basis")
                        .build()
                )
                .currency("currency")
                .customer(
                    CustomerMinified.builder()
                        .id("id")
                        .externalCustomerId("external_customer_id")
                        .build()
                )
                .description("description")
                .endingBalance(0.0)
                .entryStatus(IncrementLedgerEntry.EntryStatus.COMMITTED)
                .entryType(IncrementLedgerEntry.EntryType.INCREMENT)
                .ledgerSequenceNumber(0L)
                .metadata(
                    IncrementLedgerEntry.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .startingBalance(0.0)
                .addCreatedInvoice(
                    Invoice.builder()
                        .id("id")
                        .amountDue("8.00")
                        .autoCollection(
                            Invoice.AutoCollection.builder()
                                .enabled(true)
                                .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .numAttempts(0L)
                                .previouslyAttemptedAt(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .build()
                        )
                        .billingAddress(
                            Address.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                        .addCreditNote(
                            Invoice.CreditNote.builder()
                                .id("id")
                                .creditNoteNumber("credit_note_number")
                                .memo("memo")
                                .reason("reason")
                                .total("total")
                                .type("type")
                                .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                .build()
                        )
                        .currency("USD")
                        .customer(
                            CustomerMinified.builder()
                                .id("id")
                                .externalCustomerId("external_customer_id")
                                .build()
                        )
                        .addCustomerBalanceTransaction(
                            Invoice.CustomerBalanceTransaction.builder()
                                .id("cgZa3SXcsPTVyC4Y")
                                .action(
                                    Invoice.CustomerBalanceTransaction.Action.APPLIED_TO_INVOICE
                                )
                                .amount("11.00")
                                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                .creditNote(CreditNoteTiny.builder().id("id").build())
                                .description("An optional description")
                                .endingBalance("22.00")
                                .invoice(InvoiceTiny.builder().id("gXcsPTVyC4YZa3Sc").build())
                                .startingBalance("33.00")
                                .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                .build()
                        )
                        .customerTaxId(
                            CustomerTaxId.builder()
                                .country(CustomerTaxId.Country.AD)
                                .type(CustomerTaxId.Type.AD_NRT)
                                .value("value")
                                .build()
                        )
                        .discount(JsonValue.from(mapOf<String, Any>()))
                        .addDiscount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .reason("reason")
                                .build()
                        )
                        .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                        .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .hostedInvoiceUrl("hosted_invoice_url")
                        .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                        .invoiceNumber("JYEFHK-00001")
                        .invoicePdf(
                            "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                        )
                        .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                        .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addLineItem(
                            Invoice.LineItem.builder()
                                .id("id")
                                .adjustedSubtotal("5.00")
                                .addAdjustment(
                                    MonetaryUsageDiscountAdjustment.builder()
                                        .id("id")
                                        .adjustmentType(
                                            MonetaryUsageDiscountAdjustment.AdjustmentType
                                                .USAGE_DISCOUNT
                                        )
                                        .amount("amount")
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .isInvoiceLevel(true)
                                        .reason("reason")
                                        .replacesAdjustmentId("replaces_adjustment_id")
                                        .usageDiscount(0.0)
                                        .build()
                                )
                                .amount("7.00")
                                .creditsApplied("6.00")
                                .discount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                .filter("filter")
                                .grouping("grouping")
                                .maximum(
                                    Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .minimum(
                                    Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            TransformPriceFilter.builder()
                                                .field(TransformPriceFilter.Field.PRICE_ID)
                                                .operator(TransformPriceFilter.Operator.INCLUDES)
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("Fixed Fee")
                                .partiallyInvoicedAmount("4.00")
                                .price(
                                    Price.Unit.builder()
                                        .id("id")
                                        .billableMetric(
                                            BillableMetricTiny.builder().id("id").build()
                                        )
                                        .billingCycleConfiguration(
                                            BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    BillingCycleConfiguration.DurationUnit.DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.Unit.Cadence.ONE_TIME)
                                        .conversionRate(0.0)
                                        .unitConversionRateConfig(
                                            ConversionRateUnitConfig.builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Allocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .customExpiration(
                                                    CustomExpiration.builder()
                                                        .duration(0L)
                                                        .durationUnit(
                                                            CustomExpiration.DurationUnit.DAY
                                                        )
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            PercentageDiscount.builder()
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .reason("reason")
                                                .build()
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(0.0)
                                        .invoicingCycleConfiguration(
                                            BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    BillingCycleConfiguration.DurationUnit.DAY
                                                )
                                                .build()
                                        )
                                        .item(ItemSlim.builder().id("id").name("name").build())
                                        .maximum(
                                            Maximum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(
                                            Price.Unit.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string"),
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Minimum.builder()
                                                .addAppliesToPriceId("string")
                                                .addFilter(
                                                    TransformPriceFilter.builder()
                                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                                        .operator(
                                                            TransformPriceFilter.Operator.INCLUDES
                                                        )
                                                        .addValue("string")
                                                        .build()
                                                )
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .name("name")
                                        .planPhaseOrder(0L)
                                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                        .replacesPriceId("replaces_price_id")
                                        .unitConfig(
                                            UnitConfig.builder().unitAmount("unit_amount").build()
                                        )
                                        .dimensionalPriceConfiguration(
                                            DimensionalPriceConfiguration.builder()
                                                .addDimensionValue("string")
                                                .dimensionalPriceGroupId(
                                                    "dimensional_price_group_id"
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .quantity(1.0)
                                .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                .addSubLineItem(
                                    MatrixSubLineItem.builder()
                                        .amount("9.00")
                                        .grouping(
                                            SubLineItemGrouping.builder()
                                                .key("region")
                                                .value("west")
                                                .build()
                                        )
                                        .matrixConfig(
                                            SubLineItemMatrixConfig.builder()
                                                .addDimensionValue("string")
                                                .build()
                                        )
                                        .name("Tier One")
                                        .quantity(5.0)
                                        .type(MatrixSubLineItem.Type.MATRIX)
                                        .build()
                                )
                                .subtotal("9.00")
                                .addTaxAmount(
                                    TaxAmount.builder()
                                        .amount("amount")
                                        .taxRateDescription("tax_rate_description")
                                        .taxRatePercentage("tax_rate_percentage")
                                        .build()
                                )
                                .addUsageCustomerId("string")
                                .build()
                        )
                        .maximum(
                            Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .memo("memo")
                        .metadata(
                            Invoice.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addPaymentAttempt(
                            Invoice.PaymentAttempt.builder()
                                .id("id")
                                .amount("amount")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .paymentProvider(Invoice.PaymentAttempt.PaymentProvider.STRIPE)
                                .paymentProviderId("payment_provider_id")
                                .succeeded(true)
                                .build()
                        )
                        .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .shippingAddress(
                            Address.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .status(Invoice.Status.ISSUED)
                        .subscription(SubscriptionMinified.builder().id("VDGsT23osdLb84KD").build())
                        .subtotal("8.00")
                        .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .total("8.00")
                        .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .willAutoIssue(true)
                        .build()
                )
                .build()

        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofIncrement(increment)

        assertThat(customerCreditLedgerListByExternalIdResponse.increment()).contains(increment)
        assertThat(customerCreditLedgerListByExternalIdResponse.decrement()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.expirationChange()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.creditBlockExpiry()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.void_()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.voidInitiated()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.amendment()).isEmpty
    }

    @Test
    fun ofIncrementRoundtrip() {
        val jsonMapper = jsonMapper()
        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofIncrement(
                IncrementLedgerEntry.builder()
                    .id("id")
                    .amount(0.0)
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .creditBlock(
                        AffectedBlock.builder()
                            .id("id")
                            .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .perUnitCostBasis("per_unit_cost_basis")
                            .build()
                    )
                    .currency("currency")
                    .customer(
                        CustomerMinified.builder()
                            .id("id")
                            .externalCustomerId("external_customer_id")
                            .build()
                    )
                    .description("description")
                    .endingBalance(0.0)
                    .entryStatus(IncrementLedgerEntry.EntryStatus.COMMITTED)
                    .entryType(IncrementLedgerEntry.EntryType.INCREMENT)
                    .ledgerSequenceNumber(0L)
                    .metadata(
                        IncrementLedgerEntry.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .startingBalance(0.0)
                    .addCreatedInvoice(
                        Invoice.builder()
                            .id("id")
                            .amountDue("8.00")
                            .autoCollection(
                                Invoice.AutoCollection.builder()
                                    .enabled(true)
                                    .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .numAttempts(0L)
                                    .previouslyAttemptedAt(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                                    .build()
                            )
                            .billingAddress(
                                Address.builder()
                                    .city("city")
                                    .country("country")
                                    .line1("line1")
                                    .line2("line2")
                                    .postalCode("postal_code")
                                    .state("state")
                                    .build()
                            )
                            .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                            .addCreditNote(
                                Invoice.CreditNote.builder()
                                    .id("id")
                                    .creditNoteNumber("credit_note_number")
                                    .memo("memo")
                                    .reason("reason")
                                    .total("total")
                                    .type("type")
                                    .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                    .build()
                            )
                            .currency("USD")
                            .customer(
                                CustomerMinified.builder()
                                    .id("id")
                                    .externalCustomerId("external_customer_id")
                                    .build()
                            )
                            .addCustomerBalanceTransaction(
                                Invoice.CustomerBalanceTransaction.builder()
                                    .id("cgZa3SXcsPTVyC4Y")
                                    .action(
                                        Invoice.CustomerBalanceTransaction.Action.APPLIED_TO_INVOICE
                                    )
                                    .amount("11.00")
                                    .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                                    .creditNote(CreditNoteTiny.builder().id("id").build())
                                    .description("An optional description")
                                    .endingBalance("22.00")
                                    .invoice(InvoiceTiny.builder().id("gXcsPTVyC4YZa3Sc").build())
                                    .startingBalance("33.00")
                                    .type(Invoice.CustomerBalanceTransaction.Type.INCREMENT)
                                    .build()
                            )
                            .customerTaxId(
                                CustomerTaxId.builder()
                                    .country(CustomerTaxId.Country.AD)
                                    .type(CustomerTaxId.Type.AD_NRT)
                                    .value("value")
                                    .build()
                            )
                            .discount(JsonValue.from(mapOf<String, Any>()))
                            .addDiscount(
                                PercentageDiscount.builder()
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .addFilter(
                                        TransformPriceFilter.builder()
                                            .field(TransformPriceFilter.Field.PRICE_ID)
                                            .operator(TransformPriceFilter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .reason("reason")
                                    .build()
                            )
                            .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                            .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .hostedInvoiceUrl("hosted_invoice_url")
                            .invoiceDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                            .invoiceNumber("JYEFHK-00001")
                            .invoicePdf(
                                "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                            )
                            .invoiceSource(Invoice.InvoiceSource.SUBSCRIPTION)
                            .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addLineItem(
                                Invoice.LineItem.builder()
                                    .id("id")
                                    .adjustedSubtotal("5.00")
                                    .addAdjustment(
                                        MonetaryUsageDiscountAdjustment.builder()
                                            .id("id")
                                            .adjustmentType(
                                                MonetaryUsageDiscountAdjustment.AdjustmentType
                                                    .USAGE_DISCOUNT
                                            )
                                            .amount("amount")
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                TransformPriceFilter.builder()
                                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                                    .operator(
                                                        TransformPriceFilter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .isInvoiceLevel(true)
                                            .reason("reason")
                                            .replacesAdjustmentId("replaces_adjustment_id")
                                            .usageDiscount(0.0)
                                            .build()
                                    )
                                    .amount("7.00")
                                    .creditsApplied("6.00")
                                    .discount(
                                        PercentageDiscount.builder()
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                            .addFilter(
                                                TransformPriceFilter.builder()
                                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                                    .operator(
                                                        TransformPriceFilter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .reason("reason")
                                            .build()
                                    )
                                    .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                    .filter("filter")
                                    .grouping("grouping")
                                    .maximum(
                                        Maximum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                TransformPriceFilter.builder()
                                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                                    .operator(
                                                        TransformPriceFilter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .minimum(
                                        Minimum.builder()
                                            .addAppliesToPriceId("string")
                                            .addFilter(
                                                TransformPriceFilter.builder()
                                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                                    .operator(
                                                        TransformPriceFilter.Operator.INCLUDES
                                                    )
                                                    .addValue("string")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .name("Fixed Fee")
                                    .partiallyInvoicedAmount("4.00")
                                    .price(
                                        Price.Unit.builder()
                                            .id("id")
                                            .billableMetric(
                                                BillableMetricTiny.builder().id("id").build()
                                            )
                                            .billingCycleConfiguration(
                                                BillingCycleConfiguration.builder()
                                                    .duration(0L)
                                                    .durationUnit(
                                                        BillingCycleConfiguration.DurationUnit.DAY
                                                    )
                                                    .build()
                                            )
                                            .cadence(Price.Unit.Cadence.ONE_TIME)
                                            .conversionRate(0.0)
                                            .unitConversionRateConfig(
                                                ConversionRateUnitConfig.builder()
                                                    .unitAmount("unit_amount")
                                                    .build()
                                            )
                                            .createdAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .creditAllocation(
                                                Allocation.builder()
                                                    .allowsRollover(true)
                                                    .currency("currency")
                                                    .customExpiration(
                                                        CustomExpiration.builder()
                                                            .duration(0L)
                                                            .durationUnit(
                                                                CustomExpiration.DurationUnit.DAY
                                                            )
                                                            .build()
                                                    )
                                                    .build()
                                            )
                                            .currency("currency")
                                            .discount(
                                                PercentageDiscount.builder()
                                                    .discountType(
                                                        PercentageDiscount.DiscountType.PERCENTAGE
                                                    )
                                                    .percentageDiscount(0.15)
                                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                                    .addFilter(
                                                        TransformPriceFilter.builder()
                                                            .field(
                                                                TransformPriceFilter.Field.PRICE_ID
                                                            )
                                                            .operator(
                                                                TransformPriceFilter.Operator
                                                                    .INCLUDES
                                                            )
                                                            .addValue("string")
                                                            .build()
                                                    )
                                                    .reason("reason")
                                                    .build()
                                            )
                                            .externalPriceId("external_price_id")
                                            .fixedPriceQuantity(0.0)
                                            .invoicingCycleConfiguration(
                                                BillingCycleConfiguration.builder()
                                                    .duration(0L)
                                                    .durationUnit(
                                                        BillingCycleConfiguration.DurationUnit.DAY
                                                    )
                                                    .build()
                                            )
                                            .item(ItemSlim.builder().id("id").name("name").build())
                                            .maximum(
                                                Maximum.builder()
                                                    .addAppliesToPriceId("string")
                                                    .addFilter(
                                                        TransformPriceFilter.builder()
                                                            .field(
                                                                TransformPriceFilter.Field.PRICE_ID
                                                            )
                                                            .operator(
                                                                TransformPriceFilter.Operator
                                                                    .INCLUDES
                                                            )
                                                            .addValue("string")
                                                            .build()
                                                    )
                                                    .maximumAmount("maximum_amount")
                                                    .build()
                                            )
                                            .maximumAmount("maximum_amount")
                                            .metadata(
                                                Price.Unit.Metadata.builder()
                                                    .putAdditionalProperty(
                                                        "foo",
                                                        JsonValue.from("string"),
                                                    )
                                                    .build()
                                            )
                                            .minimum(
                                                Minimum.builder()
                                                    .addAppliesToPriceId("string")
                                                    .addFilter(
                                                        TransformPriceFilter.builder()
                                                            .field(
                                                                TransformPriceFilter.Field.PRICE_ID
                                                            )
                                                            .operator(
                                                                TransformPriceFilter.Operator
                                                                    .INCLUDES
                                                            )
                                                            .addValue("string")
                                                            .build()
                                                    )
                                                    .minimumAmount("minimum_amount")
                                                    .build()
                                            )
                                            .minimumAmount("minimum_amount")
                                            .name("name")
                                            .planPhaseOrder(0L)
                                            .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                            .replacesPriceId("replaces_price_id")
                                            .unitConfig(
                                                UnitConfig.builder()
                                                    .unitAmount("unit_amount")
                                                    .build()
                                            )
                                            .dimensionalPriceConfiguration(
                                                DimensionalPriceConfiguration.builder()
                                                    .addDimensionValue("string")
                                                    .dimensionalPriceGroupId(
                                                        "dimensional_price_group_id"
                                                    )
                                                    .build()
                                            )
                                            .build()
                                    )
                                    .quantity(1.0)
                                    .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                                    .addSubLineItem(
                                        MatrixSubLineItem.builder()
                                            .amount("9.00")
                                            .grouping(
                                                SubLineItemGrouping.builder()
                                                    .key("region")
                                                    .value("west")
                                                    .build()
                                            )
                                            .matrixConfig(
                                                SubLineItemMatrixConfig.builder()
                                                    .addDimensionValue("string")
                                                    .build()
                                            )
                                            .name("Tier One")
                                            .quantity(5.0)
                                            .type(MatrixSubLineItem.Type.MATRIX)
                                            .build()
                                    )
                                    .subtotal("9.00")
                                    .addTaxAmount(
                                        TaxAmount.builder()
                                            .amount("amount")
                                            .taxRateDescription("tax_rate_description")
                                            .taxRatePercentage("tax_rate_percentage")
                                            .build()
                                    )
                                    .addUsageCustomerId("string")
                                    .build()
                            )
                            .maximum(
                                Maximum.builder()
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        TransformPriceFilter.builder()
                                            .field(TransformPriceFilter.Field.PRICE_ID)
                                            .operator(TransformPriceFilter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .memo("memo")
                            .metadata(
                                Invoice.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .minimum(
                                Minimum.builder()
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        TransformPriceFilter.builder()
                                            .field(TransformPriceFilter.Field.PRICE_ID)
                                            .operator(TransformPriceFilter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addPaymentAttempt(
                                Invoice.PaymentAttempt.builder()
                                    .id("id")
                                    .amount("amount")
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .paymentProvider(Invoice.PaymentAttempt.PaymentProvider.STRIPE)
                                    .paymentProviderId("payment_provider_id")
                                    .succeeded(true)
                                    .build()
                            )
                            .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .shippingAddress(
                                Address.builder()
                                    .city("city")
                                    .country("country")
                                    .line1("line1")
                                    .line2("line2")
                                    .postalCode("postal_code")
                                    .state("state")
                                    .build()
                            )
                            .status(Invoice.Status.ISSUED)
                            .subscription(
                                SubscriptionMinified.builder().id("VDGsT23osdLb84KD").build()
                            )
                            .subtotal("8.00")
                            .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .total("8.00")
                            .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .willAutoIssue(true)
                            .build()
                    )
                    .build()
            )

        val roundtrippedCustomerCreditLedgerListByExternalIdResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(customerCreditLedgerListByExternalIdResponse),
                jacksonTypeRef<CustomerCreditLedgerListByExternalIdResponse>(),
            )

        assertThat(roundtrippedCustomerCreditLedgerListByExternalIdResponse)
            .isEqualTo(customerCreditLedgerListByExternalIdResponse)
    }

    @Test
    fun ofDecrement() {
        val decrement =
            DecrementLedgerEntry.builder()
                .id("id")
                .amount(0.0)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .creditBlock(
                    AffectedBlock.builder()
                        .id("id")
                        .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .perUnitCostBasis("per_unit_cost_basis")
                        .build()
                )
                .currency("currency")
                .customer(
                    CustomerMinified.builder()
                        .id("id")
                        .externalCustomerId("external_customer_id")
                        .build()
                )
                .description("description")
                .endingBalance(0.0)
                .entryStatus(DecrementLedgerEntry.EntryStatus.COMMITTED)
                .entryType(DecrementLedgerEntry.EntryType.DECREMENT)
                .ledgerSequenceNumber(0L)
                .metadata(
                    DecrementLedgerEntry.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .startingBalance(0.0)
                .eventId("event_id")
                .invoiceId("invoice_id")
                .priceId("price_id")
                .build()

        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofDecrement(decrement)

        assertThat(customerCreditLedgerListByExternalIdResponse.increment()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.decrement()).contains(decrement)
        assertThat(customerCreditLedgerListByExternalIdResponse.expirationChange()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.creditBlockExpiry()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.void_()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.voidInitiated()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.amendment()).isEmpty
    }

    @Test
    fun ofDecrementRoundtrip() {
        val jsonMapper = jsonMapper()
        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofDecrement(
                DecrementLedgerEntry.builder()
                    .id("id")
                    .amount(0.0)
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .creditBlock(
                        AffectedBlock.builder()
                            .id("id")
                            .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .perUnitCostBasis("per_unit_cost_basis")
                            .build()
                    )
                    .currency("currency")
                    .customer(
                        CustomerMinified.builder()
                            .id("id")
                            .externalCustomerId("external_customer_id")
                            .build()
                    )
                    .description("description")
                    .endingBalance(0.0)
                    .entryStatus(DecrementLedgerEntry.EntryStatus.COMMITTED)
                    .entryType(DecrementLedgerEntry.EntryType.DECREMENT)
                    .ledgerSequenceNumber(0L)
                    .metadata(
                        DecrementLedgerEntry.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .startingBalance(0.0)
                    .eventId("event_id")
                    .invoiceId("invoice_id")
                    .priceId("price_id")
                    .build()
            )

        val roundtrippedCustomerCreditLedgerListByExternalIdResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(customerCreditLedgerListByExternalIdResponse),
                jacksonTypeRef<CustomerCreditLedgerListByExternalIdResponse>(),
            )

        assertThat(roundtrippedCustomerCreditLedgerListByExternalIdResponse)
            .isEqualTo(customerCreditLedgerListByExternalIdResponse)
    }

    @Test
    fun ofExpirationChange() {
        val expirationChange =
            ExpirationChangeLedgerEntry.builder()
                .id("id")
                .amount(0.0)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .creditBlock(
                    AffectedBlock.builder()
                        .id("id")
                        .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .perUnitCostBasis("per_unit_cost_basis")
                        .build()
                )
                .currency("currency")
                .customer(
                    CustomerMinified.builder()
                        .id("id")
                        .externalCustomerId("external_customer_id")
                        .build()
                )
                .description("description")
                .endingBalance(0.0)
                .entryStatus(ExpirationChangeLedgerEntry.EntryStatus.COMMITTED)
                .entryType(ExpirationChangeLedgerEntry.EntryType.EXPIRATION_CHANGE)
                .ledgerSequenceNumber(0L)
                .metadata(
                    ExpirationChangeLedgerEntry.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .newBlockExpiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .startingBalance(0.0)
                .build()

        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofExpirationChange(expirationChange)

        assertThat(customerCreditLedgerListByExternalIdResponse.increment()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.decrement()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.expirationChange())
            .contains(expirationChange)
        assertThat(customerCreditLedgerListByExternalIdResponse.creditBlockExpiry()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.void_()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.voidInitiated()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.amendment()).isEmpty
    }

    @Test
    fun ofExpirationChangeRoundtrip() {
        val jsonMapper = jsonMapper()
        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofExpirationChange(
                ExpirationChangeLedgerEntry.builder()
                    .id("id")
                    .amount(0.0)
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .creditBlock(
                        AffectedBlock.builder()
                            .id("id")
                            .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .perUnitCostBasis("per_unit_cost_basis")
                            .build()
                    )
                    .currency("currency")
                    .customer(
                        CustomerMinified.builder()
                            .id("id")
                            .externalCustomerId("external_customer_id")
                            .build()
                    )
                    .description("description")
                    .endingBalance(0.0)
                    .entryStatus(ExpirationChangeLedgerEntry.EntryStatus.COMMITTED)
                    .entryType(ExpirationChangeLedgerEntry.EntryType.EXPIRATION_CHANGE)
                    .ledgerSequenceNumber(0L)
                    .metadata(
                        ExpirationChangeLedgerEntry.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .newBlockExpiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .startingBalance(0.0)
                    .build()
            )

        val roundtrippedCustomerCreditLedgerListByExternalIdResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(customerCreditLedgerListByExternalIdResponse),
                jacksonTypeRef<CustomerCreditLedgerListByExternalIdResponse>(),
            )

        assertThat(roundtrippedCustomerCreditLedgerListByExternalIdResponse)
            .isEqualTo(customerCreditLedgerListByExternalIdResponse)
    }

    @Test
    fun ofCreditBlockExpiry() {
        val creditBlockExpiry =
            CreditBlockExpiryLedgerEntry.builder()
                .id("id")
                .amount(0.0)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .creditBlock(
                    AffectedBlock.builder()
                        .id("id")
                        .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .perUnitCostBasis("per_unit_cost_basis")
                        .build()
                )
                .currency("currency")
                .customer(
                    CustomerMinified.builder()
                        .id("id")
                        .externalCustomerId("external_customer_id")
                        .build()
                )
                .description("description")
                .endingBalance(0.0)
                .entryStatus(CreditBlockExpiryLedgerEntry.EntryStatus.COMMITTED)
                .entryType(CreditBlockExpiryLedgerEntry.EntryType.CREDIT_BLOCK_EXPIRY)
                .ledgerSequenceNumber(0L)
                .metadata(
                    CreditBlockExpiryLedgerEntry.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .startingBalance(0.0)
                .build()

        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofCreditBlockExpiry(creditBlockExpiry)

        assertThat(customerCreditLedgerListByExternalIdResponse.increment()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.decrement()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.expirationChange()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.creditBlockExpiry())
            .contains(creditBlockExpiry)
        assertThat(customerCreditLedgerListByExternalIdResponse.void_()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.voidInitiated()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.amendment()).isEmpty
    }

    @Test
    fun ofCreditBlockExpiryRoundtrip() {
        val jsonMapper = jsonMapper()
        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofCreditBlockExpiry(
                CreditBlockExpiryLedgerEntry.builder()
                    .id("id")
                    .amount(0.0)
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .creditBlock(
                        AffectedBlock.builder()
                            .id("id")
                            .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .perUnitCostBasis("per_unit_cost_basis")
                            .build()
                    )
                    .currency("currency")
                    .customer(
                        CustomerMinified.builder()
                            .id("id")
                            .externalCustomerId("external_customer_id")
                            .build()
                    )
                    .description("description")
                    .endingBalance(0.0)
                    .entryStatus(CreditBlockExpiryLedgerEntry.EntryStatus.COMMITTED)
                    .entryType(CreditBlockExpiryLedgerEntry.EntryType.CREDIT_BLOCK_EXPIRY)
                    .ledgerSequenceNumber(0L)
                    .metadata(
                        CreditBlockExpiryLedgerEntry.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .startingBalance(0.0)
                    .build()
            )

        val roundtrippedCustomerCreditLedgerListByExternalIdResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(customerCreditLedgerListByExternalIdResponse),
                jacksonTypeRef<CustomerCreditLedgerListByExternalIdResponse>(),
            )

        assertThat(roundtrippedCustomerCreditLedgerListByExternalIdResponse)
            .isEqualTo(customerCreditLedgerListByExternalIdResponse)
    }

    @Test
    fun ofVoid() {
        val void_ =
            VoidLedgerEntry.builder()
                .id("id")
                .amount(0.0)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .creditBlock(
                    AffectedBlock.builder()
                        .id("id")
                        .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .perUnitCostBasis("per_unit_cost_basis")
                        .build()
                )
                .currency("currency")
                .customer(
                    CustomerMinified.builder()
                        .id("id")
                        .externalCustomerId("external_customer_id")
                        .build()
                )
                .description("description")
                .endingBalance(0.0)
                .entryStatus(VoidLedgerEntry.EntryStatus.COMMITTED)
                .entryType(VoidLedgerEntry.EntryType.VOID)
                .ledgerSequenceNumber(0L)
                .metadata(
                    VoidLedgerEntry.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .startingBalance(0.0)
                .voidAmount(0.0)
                .voidReason("void_reason")
                .build()

        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofVoid(void_)

        assertThat(customerCreditLedgerListByExternalIdResponse.increment()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.decrement()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.expirationChange()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.creditBlockExpiry()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.void_()).contains(void_)
        assertThat(customerCreditLedgerListByExternalIdResponse.voidInitiated()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.amendment()).isEmpty
    }

    @Test
    fun ofVoidRoundtrip() {
        val jsonMapper = jsonMapper()
        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofVoid(
                VoidLedgerEntry.builder()
                    .id("id")
                    .amount(0.0)
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .creditBlock(
                        AffectedBlock.builder()
                            .id("id")
                            .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .perUnitCostBasis("per_unit_cost_basis")
                            .build()
                    )
                    .currency("currency")
                    .customer(
                        CustomerMinified.builder()
                            .id("id")
                            .externalCustomerId("external_customer_id")
                            .build()
                    )
                    .description("description")
                    .endingBalance(0.0)
                    .entryStatus(VoidLedgerEntry.EntryStatus.COMMITTED)
                    .entryType(VoidLedgerEntry.EntryType.VOID)
                    .ledgerSequenceNumber(0L)
                    .metadata(
                        VoidLedgerEntry.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .startingBalance(0.0)
                    .voidAmount(0.0)
                    .voidReason("void_reason")
                    .build()
            )

        val roundtrippedCustomerCreditLedgerListByExternalIdResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(customerCreditLedgerListByExternalIdResponse),
                jacksonTypeRef<CustomerCreditLedgerListByExternalIdResponse>(),
            )

        assertThat(roundtrippedCustomerCreditLedgerListByExternalIdResponse)
            .isEqualTo(customerCreditLedgerListByExternalIdResponse)
    }

    @Test
    fun ofVoidInitiated() {
        val voidInitiated =
            VoidInitiatedLedgerEntry.builder()
                .id("id")
                .amount(0.0)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .creditBlock(
                    AffectedBlock.builder()
                        .id("id")
                        .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .perUnitCostBasis("per_unit_cost_basis")
                        .build()
                )
                .currency("currency")
                .customer(
                    CustomerMinified.builder()
                        .id("id")
                        .externalCustomerId("external_customer_id")
                        .build()
                )
                .description("description")
                .endingBalance(0.0)
                .entryStatus(VoidInitiatedLedgerEntry.EntryStatus.COMMITTED)
                .entryType(VoidInitiatedLedgerEntry.EntryType.VOID_INITIATED)
                .ledgerSequenceNumber(0L)
                .metadata(
                    VoidInitiatedLedgerEntry.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .newBlockExpiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .startingBalance(0.0)
                .voidAmount(0.0)
                .voidReason("void_reason")
                .build()

        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofVoidInitiated(voidInitiated)

        assertThat(customerCreditLedgerListByExternalIdResponse.increment()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.decrement()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.expirationChange()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.creditBlockExpiry()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.void_()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.voidInitiated())
            .contains(voidInitiated)
        assertThat(customerCreditLedgerListByExternalIdResponse.amendment()).isEmpty
    }

    @Test
    fun ofVoidInitiatedRoundtrip() {
        val jsonMapper = jsonMapper()
        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofVoidInitiated(
                VoidInitiatedLedgerEntry.builder()
                    .id("id")
                    .amount(0.0)
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .creditBlock(
                        AffectedBlock.builder()
                            .id("id")
                            .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .perUnitCostBasis("per_unit_cost_basis")
                            .build()
                    )
                    .currency("currency")
                    .customer(
                        CustomerMinified.builder()
                            .id("id")
                            .externalCustomerId("external_customer_id")
                            .build()
                    )
                    .description("description")
                    .endingBalance(0.0)
                    .entryStatus(VoidInitiatedLedgerEntry.EntryStatus.COMMITTED)
                    .entryType(VoidInitiatedLedgerEntry.EntryType.VOID_INITIATED)
                    .ledgerSequenceNumber(0L)
                    .metadata(
                        VoidInitiatedLedgerEntry.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .newBlockExpiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .startingBalance(0.0)
                    .voidAmount(0.0)
                    .voidReason("void_reason")
                    .build()
            )

        val roundtrippedCustomerCreditLedgerListByExternalIdResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(customerCreditLedgerListByExternalIdResponse),
                jacksonTypeRef<CustomerCreditLedgerListByExternalIdResponse>(),
            )

        assertThat(roundtrippedCustomerCreditLedgerListByExternalIdResponse)
            .isEqualTo(customerCreditLedgerListByExternalIdResponse)
    }

    @Test
    fun ofAmendment() {
        val amendment =
            AmendmentLedgerEntry.builder()
                .id("id")
                .amount(0.0)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .creditBlock(
                    AffectedBlock.builder()
                        .id("id")
                        .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .perUnitCostBasis("per_unit_cost_basis")
                        .build()
                )
                .currency("currency")
                .customer(
                    CustomerMinified.builder()
                        .id("id")
                        .externalCustomerId("external_customer_id")
                        .build()
                )
                .description("description")
                .endingBalance(0.0)
                .entryStatus(AmendmentLedgerEntry.EntryStatus.COMMITTED)
                .entryType(AmendmentLedgerEntry.EntryType.AMENDMENT)
                .ledgerSequenceNumber(0L)
                .metadata(
                    AmendmentLedgerEntry.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .startingBalance(0.0)
                .build()

        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofAmendment(amendment)

        assertThat(customerCreditLedgerListByExternalIdResponse.increment()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.decrement()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.expirationChange()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.creditBlockExpiry()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.void_()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.voidInitiated()).isEmpty
        assertThat(customerCreditLedgerListByExternalIdResponse.amendment()).contains(amendment)
    }

    @Test
    fun ofAmendmentRoundtrip() {
        val jsonMapper = jsonMapper()
        val customerCreditLedgerListByExternalIdResponse =
            CustomerCreditLedgerListByExternalIdResponse.ofAmendment(
                AmendmentLedgerEntry.builder()
                    .id("id")
                    .amount(0.0)
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .creditBlock(
                        AffectedBlock.builder()
                            .id("id")
                            .expiryDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .perUnitCostBasis("per_unit_cost_basis")
                            .build()
                    )
                    .currency("currency")
                    .customer(
                        CustomerMinified.builder()
                            .id("id")
                            .externalCustomerId("external_customer_id")
                            .build()
                    )
                    .description("description")
                    .endingBalance(0.0)
                    .entryStatus(AmendmentLedgerEntry.EntryStatus.COMMITTED)
                    .entryType(AmendmentLedgerEntry.EntryType.AMENDMENT)
                    .ledgerSequenceNumber(0L)
                    .metadata(
                        AmendmentLedgerEntry.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .startingBalance(0.0)
                    .build()
            )

        val roundtrippedCustomerCreditLedgerListByExternalIdResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(customerCreditLedgerListByExternalIdResponse),
                jacksonTypeRef<CustomerCreditLedgerListByExternalIdResponse>(),
            )

        assertThat(roundtrippedCustomerCreditLedgerListByExternalIdResponse)
            .isEqualTo(customerCreditLedgerListByExternalIdResponse)
    }

    enum class IncompatibleJsonShapeTestCase(val value: JsonValue) {
        BOOLEAN(JsonValue.from(false)),
        STRING(JsonValue.from("invalid")),
        INTEGER(JsonValue.from(-1)),
        FLOAT(JsonValue.from(3.14)),
        ARRAY(JsonValue.from(listOf("invalid", "array"))),
    }

    @ParameterizedTest
    @EnumSource
    fun incompatibleJsonShapeDeserializesToUnknown(testCase: IncompatibleJsonShapeTestCase) {
        val customerCreditLedgerListByExternalIdResponse =
            jsonMapper()
                .convertValue(
                    testCase.value,
                    jacksonTypeRef<CustomerCreditLedgerListByExternalIdResponse>(),
                )

        val e =
            assertThrows<OrbInvalidDataException> {
                customerCreditLedgerListByExternalIdResponse.validate()
            }
        assertThat(e).hasMessageStartingWith("Unknown ")
    }
}
