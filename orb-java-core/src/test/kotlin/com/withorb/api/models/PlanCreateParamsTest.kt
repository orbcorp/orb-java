// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.withorb.api.core.JsonValue
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class PlanCreateParamsTest {

    @Test
    fun create() {
        PlanCreateParams.builder()
            .currency("currency")
            .name("name")
            .addPrice(
                PlanCreateParams.Price.builder()
                    .allocationPrice(
                        NewAllocationPrice.builder()
                            .amount("10.00")
                            .cadence(NewAllocationPrice.Cadence.MONTHLY)
                            .currency("USD")
                            .customExpiration(
                                CustomExpiration.builder()
                                    .duration(0L)
                                    .durationUnit(CustomExpiration.DurationUnit.DAY)
                                    .build()
                            )
                            .expiresAtEndOfCadence(true)
                            .build()
                    )
                    .planPhaseOrder(0L)
                    .price(
                        NewPlanUnitPrice.builder()
                            .cadence(NewPlanUnitPrice.Cadence.ANNUAL)
                            .itemId("item_id")
                            .modelType(NewPlanUnitPrice.ModelType.UNIT)
                            .name("Annual fee")
                            .unitConfig(UnitConfig.builder().unitAmount("unit_amount").build())
                            .billableMetricId("billable_metric_id")
                            .billedInAdvance(true)
                            .billingCycleConfiguration(
                                NewBillingCycleConfiguration.builder()
                                    .duration(0L)
                                    .durationUnit(NewBillingCycleConfiguration.DurationUnit.DAY)
                                    .build()
                            )
                            .conversionRate(0.0)
                            .unitConversionRateConfig(
                                ConversionRateUnitConfig.builder().unitAmount("unit_amount").build()
                            )
                            .currency("currency")
                            .dimensionalPriceConfiguration(
                                NewDimensionalPriceConfiguration.builder()
                                    .addDimensionValue("string")
                                    .dimensionalPriceGroupId("dimensional_price_group_id")
                                    .externalDimensionalPriceGroupId(
                                        "external_dimensional_price_group_id"
                                    )
                                    .build()
                            )
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoiceGroupingKey("x")
                            .invoicingCycleConfiguration(
                                NewBillingCycleConfiguration.builder()
                                    .duration(0L)
                                    .durationUnit(NewBillingCycleConfiguration.DurationUnit.DAY)
                                    .build()
                            )
                            .metadata(
                                NewPlanUnitPrice.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .referenceId("reference_id")
                            .build()
                    )
                    .build()
            )
            .addAdjustment(
                PlanCreateParams.Adjustment.builder()
                    .adjustment(
                        NewPercentageDiscount.builder()
                            .adjustmentType(
                                NewPercentageDiscount.AdjustmentType.PERCENTAGE_DISCOUNT
                            )
                            .percentageDiscount(0.0)
                            .appliesToAll(NewPercentageDiscount.AppliesToAll.TRUE)
                            .addAppliesToItemId("item_1")
                            .addAppliesToItemId("item_2")
                            .addAppliesToPriceId("price_1")
                            .addAppliesToPriceId("price_2")
                            .currency("currency")
                            .addFilter(
                                TransformPriceFilter.builder()
                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                    .operator(TransformPriceFilter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .isInvoiceLevel(true)
                            .priceType(NewPercentageDiscount.PriceType.USAGE)
                            .build()
                    )
                    .planPhaseOrder(0L)
                    .build()
            )
            .defaultInvoiceMemo("default_invoice_memo")
            .externalPlanId("external_plan_id")
            .metadata(
                PlanCreateParams.Metadata.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
            .netTerms(0L)
            .addPlanPhase(
                PlanCreateParams.PlanPhase.builder()
                    .order(0L)
                    .alignBillingWithPhaseStartDate(true)
                    .duration(1L)
                    .durationUnit(PlanCreateParams.PlanPhase.DurationUnit.DAILY)
                    .build()
            )
            .status(PlanCreateParams.Status.ACTIVE)
            .build()
    }

    @Test
    fun body() {
        val params =
            PlanCreateParams.builder()
                .currency("currency")
                .name("name")
                .addPrice(
                    PlanCreateParams.Price.builder()
                        .allocationPrice(
                            NewAllocationPrice.builder()
                                .amount("10.00")
                                .cadence(NewAllocationPrice.Cadence.MONTHLY)
                                .currency("USD")
                                .customExpiration(
                                    CustomExpiration.builder()
                                        .duration(0L)
                                        .durationUnit(CustomExpiration.DurationUnit.DAY)
                                        .build()
                                )
                                .expiresAtEndOfCadence(true)
                                .build()
                        )
                        .planPhaseOrder(0L)
                        .price(
                            NewPlanUnitPrice.builder()
                                .cadence(NewPlanUnitPrice.Cadence.ANNUAL)
                                .itemId("item_id")
                                .modelType(NewPlanUnitPrice.ModelType.UNIT)
                                .name("Annual fee")
                                .unitConfig(UnitConfig.builder().unitAmount("unit_amount").build())
                                .billableMetricId("billable_metric_id")
                                .billedInAdvance(true)
                                .billingCycleConfiguration(
                                    NewBillingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(NewBillingCycleConfiguration.DurationUnit.DAY)
                                        .build()
                                )
                                .conversionRate(0.0)
                                .unitConversionRateConfig(
                                    ConversionRateUnitConfig.builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .currency("currency")
                                .dimensionalPriceConfiguration(
                                    NewDimensionalPriceConfiguration.builder()
                                        .addDimensionValue("string")
                                        .dimensionalPriceGroupId("dimensional_price_group_id")
                                        .externalDimensionalPriceGroupId(
                                            "external_dimensional_price_group_id"
                                        )
                                        .build()
                                )
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoiceGroupingKey("x")
                                .invoicingCycleConfiguration(
                                    NewBillingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(NewBillingCycleConfiguration.DurationUnit.DAY)
                                        .build()
                                )
                                .metadata(
                                    NewPlanUnitPrice.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .referenceId("reference_id")
                                .build()
                        )
                        .build()
                )
                .addAdjustment(
                    PlanCreateParams.Adjustment.builder()
                        .adjustment(
                            NewPercentageDiscount.builder()
                                .adjustmentType(
                                    NewPercentageDiscount.AdjustmentType.PERCENTAGE_DISCOUNT
                                )
                                .percentageDiscount(0.0)
                                .appliesToAll(NewPercentageDiscount.AppliesToAll.TRUE)
                                .addAppliesToItemId("item_1")
                                .addAppliesToItemId("item_2")
                                .addAppliesToPriceId("price_1")
                                .addAppliesToPriceId("price_2")
                                .currency("currency")
                                .addFilter(
                                    TransformPriceFilter.builder()
                                        .field(TransformPriceFilter.Field.PRICE_ID)
                                        .operator(TransformPriceFilter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .isInvoiceLevel(true)
                                .priceType(NewPercentageDiscount.PriceType.USAGE)
                                .build()
                        )
                        .planPhaseOrder(0L)
                        .build()
                )
                .defaultInvoiceMemo("default_invoice_memo")
                .externalPlanId("external_plan_id")
                .metadata(
                    PlanCreateParams.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .netTerms(0L)
                .addPlanPhase(
                    PlanCreateParams.PlanPhase.builder()
                        .order(0L)
                        .alignBillingWithPhaseStartDate(true)
                        .duration(1L)
                        .durationUnit(PlanCreateParams.PlanPhase.DurationUnit.DAILY)
                        .build()
                )
                .status(PlanCreateParams.Status.ACTIVE)
                .build()

        val body = params._body()

        assertThat(body.currency()).isEqualTo("currency")
        assertThat(body.name()).isEqualTo("name")
        assertThat(body.prices())
            .containsExactly(
                PlanCreateParams.Price.builder()
                    .allocationPrice(
                        NewAllocationPrice.builder()
                            .amount("10.00")
                            .cadence(NewAllocationPrice.Cadence.MONTHLY)
                            .currency("USD")
                            .customExpiration(
                                CustomExpiration.builder()
                                    .duration(0L)
                                    .durationUnit(CustomExpiration.DurationUnit.DAY)
                                    .build()
                            )
                            .expiresAtEndOfCadence(true)
                            .build()
                    )
                    .planPhaseOrder(0L)
                    .price(
                        NewPlanUnitPrice.builder()
                            .cadence(NewPlanUnitPrice.Cadence.ANNUAL)
                            .itemId("item_id")
                            .modelType(NewPlanUnitPrice.ModelType.UNIT)
                            .name("Annual fee")
                            .unitConfig(UnitConfig.builder().unitAmount("unit_amount").build())
                            .billableMetricId("billable_metric_id")
                            .billedInAdvance(true)
                            .billingCycleConfiguration(
                                NewBillingCycleConfiguration.builder()
                                    .duration(0L)
                                    .durationUnit(NewBillingCycleConfiguration.DurationUnit.DAY)
                                    .build()
                            )
                            .conversionRate(0.0)
                            .unitConversionRateConfig(
                                ConversionRateUnitConfig.builder().unitAmount("unit_amount").build()
                            )
                            .currency("currency")
                            .dimensionalPriceConfiguration(
                                NewDimensionalPriceConfiguration.builder()
                                    .addDimensionValue("string")
                                    .dimensionalPriceGroupId("dimensional_price_group_id")
                                    .externalDimensionalPriceGroupId(
                                        "external_dimensional_price_group_id"
                                    )
                                    .build()
                            )
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoiceGroupingKey("x")
                            .invoicingCycleConfiguration(
                                NewBillingCycleConfiguration.builder()
                                    .duration(0L)
                                    .durationUnit(NewBillingCycleConfiguration.DurationUnit.DAY)
                                    .build()
                            )
                            .metadata(
                                NewPlanUnitPrice.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .referenceId("reference_id")
                            .build()
                    )
                    .build()
            )
        assertThat(body.adjustments().getOrNull())
            .containsExactly(
                PlanCreateParams.Adjustment.builder()
                    .adjustment(
                        NewPercentageDiscount.builder()
                            .adjustmentType(
                                NewPercentageDiscount.AdjustmentType.PERCENTAGE_DISCOUNT
                            )
                            .percentageDiscount(0.0)
                            .appliesToAll(NewPercentageDiscount.AppliesToAll.TRUE)
                            .addAppliesToItemId("item_1")
                            .addAppliesToItemId("item_2")
                            .addAppliesToPriceId("price_1")
                            .addAppliesToPriceId("price_2")
                            .currency("currency")
                            .addFilter(
                                TransformPriceFilter.builder()
                                    .field(TransformPriceFilter.Field.PRICE_ID)
                                    .operator(TransformPriceFilter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .isInvoiceLevel(true)
                            .priceType(NewPercentageDiscount.PriceType.USAGE)
                            .build()
                    )
                    .planPhaseOrder(0L)
                    .build()
            )
        assertThat(body.defaultInvoiceMemo()).contains("default_invoice_memo")
        assertThat(body.externalPlanId()).contains("external_plan_id")
        assertThat(body.metadata())
            .contains(
                PlanCreateParams.Metadata.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
        assertThat(body.netTerms()).contains(0L)
        assertThat(body.planPhases().getOrNull())
            .containsExactly(
                PlanCreateParams.PlanPhase.builder()
                    .order(0L)
                    .alignBillingWithPhaseStartDate(true)
                    .duration(1L)
                    .durationUnit(PlanCreateParams.PlanPhase.DurationUnit.DAILY)
                    .build()
            )
        assertThat(body.status()).contains(PlanCreateParams.Status.ACTIVE)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            PlanCreateParams.builder()
                .currency("currency")
                .name("name")
                .addPrice(PlanCreateParams.Price.builder().build())
                .build()

        val body = params._body()

        assertThat(body.currency()).isEqualTo("currency")
        assertThat(body.name()).isEqualTo("name")
        assertThat(body.prices()).containsExactly(PlanCreateParams.Price.builder().build())
    }
}
