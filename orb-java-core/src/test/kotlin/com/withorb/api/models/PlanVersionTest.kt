// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.JsonValue
import com.withorb.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class PlanVersionTest {

    @Test
    fun create() {
        val planVersion =
            PlanVersion.builder()
                .addAdjustment(
                    PlanVersion.Adjustment.UsageDiscount.builder()
                        .id("id")
                        .addAppliesToPriceId("string")
                        .addFilter(
                            PlanVersion.Adjustment.UsageDiscount.Filter.builder()
                                .field(PlanVersion.Adjustment.UsageDiscount.Filter.Field.PRICE_ID)
                                .operator(
                                    PlanVersion.Adjustment.UsageDiscount.Filter.Operator.INCLUDES
                                )
                                .addValue("string")
                                .build()
                        )
                        .isInvoiceLevel(true)
                        .planPhaseOrder(0L)
                        .reason("reason")
                        .usageDiscount(0.0)
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .addPlanPhase(
                    PlanVersionPhase.builder()
                        .id("id")
                        .description("description")
                        .duration(0L)
                        .durationUnit(PlanVersionPhase.DurationUnit.DAILY)
                        .name("name")
                        .order(0L)
                        .build()
                )
                .addPrice(
                    Price.Unit.builder()
                        .id("id")
                        .billableMetric(Price.Unit.BillableMetric.builder().id("id").build())
                        .billingCycleConfiguration(
                            Price.Unit.BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(Price.Unit.BillingCycleConfiguration.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(Price.Unit.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            Price.Unit.CreditAllocation.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .customExpiration(
                                    Price.Unit.CreditAllocation.CustomExpiration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.CreditAllocation.CustomExpiration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            Price.Unit.InvoicingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(
                                    Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                )
                                .build()
                        )
                        .item(Price.Unit.Item.builder().id("id").name("name").build())
                        .maximum(
                            Price.Unit.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Price.Unit.Maximum.Filter.builder()
                                        .field(Price.Unit.Maximum.Filter.Field.PRICE_ID)
                                        .operator(Price.Unit.Maximum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Price.Unit.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Price.Unit.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Price.Unit.Minimum.Filter.builder()
                                        .field(Price.Unit.Minimum.Filter.Field.PRICE_ID)
                                        .operator(Price.Unit.Minimum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                        .unitConfig(
                            Price.Unit.UnitConfig.builder().unitAmount("unit_amount").build()
                        )
                        .dimensionalPriceConfiguration(
                            Price.Unit.DimensionalPriceConfiguration.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
                .version(0L)
                .build()

        assertThat(planVersion.adjustments())
            .containsExactly(
                PlanVersion.Adjustment.ofUsageDiscount(
                    PlanVersion.Adjustment.UsageDiscount.builder()
                        .id("id")
                        .addAppliesToPriceId("string")
                        .addFilter(
                            PlanVersion.Adjustment.UsageDiscount.Filter.builder()
                                .field(PlanVersion.Adjustment.UsageDiscount.Filter.Field.PRICE_ID)
                                .operator(
                                    PlanVersion.Adjustment.UsageDiscount.Filter.Operator.INCLUDES
                                )
                                .addValue("string")
                                .build()
                        )
                        .isInvoiceLevel(true)
                        .planPhaseOrder(0L)
                        .reason("reason")
                        .usageDiscount(0.0)
                        .build()
                )
            )
        assertThat(planVersion.createdAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(planVersion.planPhases().getOrNull())
            .containsExactly(
                PlanVersionPhase.builder()
                    .id("id")
                    .description("description")
                    .duration(0L)
                    .durationUnit(PlanVersionPhase.DurationUnit.DAILY)
                    .name("name")
                    .order(0L)
                    .build()
            )
        assertThat(planVersion.prices())
            .containsExactly(
                Price.ofUnit(
                    Price.Unit.builder()
                        .id("id")
                        .billableMetric(Price.Unit.BillableMetric.builder().id("id").build())
                        .billingCycleConfiguration(
                            Price.Unit.BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(Price.Unit.BillingCycleConfiguration.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(Price.Unit.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            Price.Unit.CreditAllocation.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .customExpiration(
                                    Price.Unit.CreditAllocation.CustomExpiration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.CreditAllocation.CustomExpiration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            Price.Unit.InvoicingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(
                                    Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                )
                                .build()
                        )
                        .item(Price.Unit.Item.builder().id("id").name("name").build())
                        .maximum(
                            Price.Unit.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Price.Unit.Maximum.Filter.builder()
                                        .field(Price.Unit.Maximum.Filter.Field.PRICE_ID)
                                        .operator(Price.Unit.Maximum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Price.Unit.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Price.Unit.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Price.Unit.Minimum.Filter.builder()
                                        .field(Price.Unit.Minimum.Filter.Field.PRICE_ID)
                                        .operator(Price.Unit.Minimum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                        .unitConfig(
                            Price.Unit.UnitConfig.builder().unitAmount("unit_amount").build()
                        )
                        .dimensionalPriceConfiguration(
                            Price.Unit.DimensionalPriceConfiguration.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
            )
        assertThat(planVersion.version()).isEqualTo(0L)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val planVersion =
            PlanVersion.builder()
                .addAdjustment(
                    PlanVersion.Adjustment.UsageDiscount.builder()
                        .id("id")
                        .addAppliesToPriceId("string")
                        .addFilter(
                            PlanVersion.Adjustment.UsageDiscount.Filter.builder()
                                .field(PlanVersion.Adjustment.UsageDiscount.Filter.Field.PRICE_ID)
                                .operator(
                                    PlanVersion.Adjustment.UsageDiscount.Filter.Operator.INCLUDES
                                )
                                .addValue("string")
                                .build()
                        )
                        .isInvoiceLevel(true)
                        .planPhaseOrder(0L)
                        .reason("reason")
                        .usageDiscount(0.0)
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .addPlanPhase(
                    PlanVersionPhase.builder()
                        .id("id")
                        .description("description")
                        .duration(0L)
                        .durationUnit(PlanVersionPhase.DurationUnit.DAILY)
                        .name("name")
                        .order(0L)
                        .build()
                )
                .addPrice(
                    Price.Unit.builder()
                        .id("id")
                        .billableMetric(Price.Unit.BillableMetric.builder().id("id").build())
                        .billingCycleConfiguration(
                            Price.Unit.BillingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(Price.Unit.BillingCycleConfiguration.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(Price.Unit.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            Price.Unit.CreditAllocation.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .customExpiration(
                                    Price.Unit.CreditAllocation.CustomExpiration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.CreditAllocation.CustomExpiration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            Price.Unit.InvoicingCycleConfiguration.builder()
                                .duration(0L)
                                .durationUnit(
                                    Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                )
                                .build()
                        )
                        .item(Price.Unit.Item.builder().id("id").name("name").build())
                        .maximum(
                            Price.Unit.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Price.Unit.Maximum.Filter.builder()
                                        .field(Price.Unit.Maximum.Filter.Field.PRICE_ID)
                                        .operator(Price.Unit.Maximum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Price.Unit.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Price.Unit.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Price.Unit.Minimum.Filter.builder()
                                        .field(Price.Unit.Minimum.Filter.Field.PRICE_ID)
                                        .operator(Price.Unit.Minimum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(Price.Unit.PriceType.USAGE_PRICE)
                        .unitConfig(
                            Price.Unit.UnitConfig.builder().unitAmount("unit_amount").build()
                        )
                        .dimensionalPriceConfiguration(
                            Price.Unit.DimensionalPriceConfiguration.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
                .version(0L)
                .build()

        val roundtrippedPlanVersion =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(planVersion),
                jacksonTypeRef<PlanVersion>(),
            )

        assertThat(roundtrippedPlanVersion).isEqualTo(planVersion)
    }
}
