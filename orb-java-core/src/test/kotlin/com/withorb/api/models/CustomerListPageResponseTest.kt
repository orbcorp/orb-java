// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.JsonValue
import com.withorb.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class CustomerListPageResponseTest {

    @Test
    fun create() {
        val customerListPageResponse =
            CustomerListPageResponse.builder()
                .addData(
                    Customer.builder()
                        .id("id")
                        .addAdditionalEmail("string")
                        .autoCollection(true)
                        .balance("balance")
                        .billingAddress(
                            Address.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currency("currency")
                        .email("email")
                        .emailDelivery(true)
                        .exemptFromAutomatedTax(true)
                        .externalCustomerId("external_customer_id")
                        .hierarchy(
                            Customer.Hierarchy.builder()
                                .addChild(
                                    CustomerMinified.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .parent(
                                    CustomerMinified.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .build()
                        )
                        .metadata(
                            Customer.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .name("name")
                        .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                        .paymentProviderId("payment_provider_id")
                        .portalUrl("portal_url")
                        .shippingAddress(
                            Address.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .taxId(
                            CustomerTaxId.builder()
                                .country(CustomerTaxId.Country.AD)
                                .type(CustomerTaxId.Type.AD_NRT)
                                .value("value")
                                .build()
                        )
                        .timezone("timezone")
                        .accountingSyncConfiguration(
                            Customer.AccountingSyncConfiguration.builder()
                                .addAccountingProvider(
                                    Customer.AccountingSyncConfiguration.AccountingProvider
                                        .builder()
                                        .externalProviderId("external_provider_id")
                                        .providerType(
                                            Customer.AccountingSyncConfiguration.AccountingProvider
                                                .ProviderType
                                                .QUICKBOOKS
                                        )
                                        .build()
                                )
                                .excluded(true)
                                .build()
                        )
                        .reportingConfiguration(
                            Customer.ReportingConfiguration.builder().exempt(true).build()
                        )
                        .build()
                )
                .paginationMetadata(
                    PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build()
                )
                .build()

        assertThat(customerListPageResponse.data())
            .containsExactly(
                Customer.builder()
                    .id("id")
                    .addAdditionalEmail("string")
                    .autoCollection(true)
                    .balance("balance")
                    .billingAddress(
                        Address.builder()
                            .city("city")
                            .country("country")
                            .line1("line1")
                            .line2("line2")
                            .postalCode("postal_code")
                            .state("state")
                            .build()
                    )
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currency("currency")
                    .email("email")
                    .emailDelivery(true)
                    .exemptFromAutomatedTax(true)
                    .externalCustomerId("external_customer_id")
                    .hierarchy(
                        Customer.Hierarchy.builder()
                            .addChild(
                                CustomerMinified.builder()
                                    .id("id")
                                    .externalCustomerId("external_customer_id")
                                    .build()
                            )
                            .parent(
                                CustomerMinified.builder()
                                    .id("id")
                                    .externalCustomerId("external_customer_id")
                                    .build()
                            )
                            .build()
                    )
                    .metadata(
                        Customer.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .name("name")
                    .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                    .paymentProviderId("payment_provider_id")
                    .portalUrl("portal_url")
                    .shippingAddress(
                        Address.builder()
                            .city("city")
                            .country("country")
                            .line1("line1")
                            .line2("line2")
                            .postalCode("postal_code")
                            .state("state")
                            .build()
                    )
                    .taxId(
                        CustomerTaxId.builder()
                            .country(CustomerTaxId.Country.AD)
                            .type(CustomerTaxId.Type.AD_NRT)
                            .value("value")
                            .build()
                    )
                    .timezone("timezone")
                    .accountingSyncConfiguration(
                        Customer.AccountingSyncConfiguration.builder()
                            .addAccountingProvider(
                                Customer.AccountingSyncConfiguration.AccountingProvider.builder()
                                    .externalProviderId("external_provider_id")
                                    .providerType(
                                        Customer.AccountingSyncConfiguration.AccountingProvider
                                            .ProviderType
                                            .QUICKBOOKS
                                    )
                                    .build()
                            )
                            .excluded(true)
                            .build()
                    )
                    .reportingConfiguration(
                        Customer.ReportingConfiguration.builder().exempt(true).build()
                    )
                    .build()
            )
        assertThat(customerListPageResponse.paginationMetadata())
            .isEqualTo(PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build())
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val customerListPageResponse =
            CustomerListPageResponse.builder()
                .addData(
                    Customer.builder()
                        .id("id")
                        .addAdditionalEmail("string")
                        .autoCollection(true)
                        .balance("balance")
                        .billingAddress(
                            Address.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currency("currency")
                        .email("email")
                        .emailDelivery(true)
                        .exemptFromAutomatedTax(true)
                        .externalCustomerId("external_customer_id")
                        .hierarchy(
                            Customer.Hierarchy.builder()
                                .addChild(
                                    CustomerMinified.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .parent(
                                    CustomerMinified.builder()
                                        .id("id")
                                        .externalCustomerId("external_customer_id")
                                        .build()
                                )
                                .build()
                        )
                        .metadata(
                            Customer.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .name("name")
                        .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                        .paymentProviderId("payment_provider_id")
                        .portalUrl("portal_url")
                        .shippingAddress(
                            Address.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .taxId(
                            CustomerTaxId.builder()
                                .country(CustomerTaxId.Country.AD)
                                .type(CustomerTaxId.Type.AD_NRT)
                                .value("value")
                                .build()
                        )
                        .timezone("timezone")
                        .accountingSyncConfiguration(
                            Customer.AccountingSyncConfiguration.builder()
                                .addAccountingProvider(
                                    Customer.AccountingSyncConfiguration.AccountingProvider
                                        .builder()
                                        .externalProviderId("external_provider_id")
                                        .providerType(
                                            Customer.AccountingSyncConfiguration.AccountingProvider
                                                .ProviderType
                                                .QUICKBOOKS
                                        )
                                        .build()
                                )
                                .excluded(true)
                                .build()
                        )
                        .reportingConfiguration(
                            Customer.ReportingConfiguration.builder().exempt(true).build()
                        )
                        .build()
                )
                .paginationMetadata(
                    PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build()
                )
                .build()

        val roundtrippedCustomerListPageResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(customerListPageResponse),
                jacksonTypeRef<CustomerListPageResponse>(),
            )

        assertThat(roundtrippedCustomerListPageResponse).isEqualTo(customerListPageResponse)
    }
}
