// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.withorb.api.models.*
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class SubscriptionPriceIntervalsParamsTest {

    @Test
    fun createSubscriptionPriceIntervalsParams() {
        SubscriptionPriceIntervalsParams.builder()
            .subscriptionId("string")
            .add(
                listOf(
                    SubscriptionPriceIntervalsParams.Add.builder()
                        .startDate(
                            SubscriptionPriceIntervalsParams.Add.StartDate.ofOffsetDateTime(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                        )
                        .allocationPrice(
                            SubscriptionPriceIntervalsParams.Add.AllocationPrice.builder()
                                .amount(42.23)
                                .cadence(
                                    SubscriptionPriceIntervalsParams.Add.AllocationPrice.Cadence
                                        .ONE_TIME
                                )
                                .currency("USD")
                                .expiresAtEndOfCadence(true)
                                .build()
                        )
                        .discounts(
                            listOf(
                                SubscriptionPriceIntervalsParams.Add.Discount
                                    .ofAmountDiscountCreationParams(
                                        SubscriptionPriceIntervalsParams.Add.Discount
                                            .AmountDiscountCreationParams
                                            .builder()
                                            .amountDiscount(42.23)
                                            .discountType(
                                                SubscriptionPriceIntervalsParams.Add.Discount
                                                    .AmountDiscountCreationParams
                                                    .DiscountType
                                                    .AMOUNT
                                            )
                                            .build()
                                    )
                            )
                        )
                        .endDate(
                            SubscriptionPriceIntervalsParams.Add.EndDate.ofOffsetDateTime(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                        )
                        .externalPriceId("external_price_id")
                        .fixedFeeQuantityTransitions(
                            listOf(
                                SubscriptionPriceIntervalsParams.Add.FixedFeeQuantityTransition
                                    .builder()
                                    .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .quantity(123L)
                                    .build()
                            )
                        )
                        .maximumAmount(42.23)
                        .minimumAmount(42.23)
                        .price(
                            SubscriptionPriceIntervalsParams.Add.Price.ofNewFloatingUnitPrice(
                                SubscriptionPriceIntervalsParams.Add.Price.NewFloatingUnitPrice
                                    .builder()
                                    .cadence(
                                        SubscriptionPriceIntervalsParams.Add.Price
                                            .NewFloatingUnitPrice
                                            .Cadence
                                            .ANNUAL
                                    )
                                    .currency("string")
                                    .itemId("string")
                                    .modelType(
                                        SubscriptionPriceIntervalsParams.Add.Price
                                            .NewFloatingUnitPrice
                                            .ModelType
                                            .UNIT
                                    )
                                    .name("Annual fee")
                                    .unitConfig(
                                        SubscriptionPriceIntervalsParams.Add.Price
                                            .NewFloatingUnitPrice
                                            .UnitConfig
                                            .builder()
                                            .unitAmount("string")
                                            .build()
                                    )
                                    .billableMetricId("string")
                                    .billedInAdvance(true)
                                    .conversionRate(42.23)
                                    .externalPriceId("string")
                                    .fixedPriceQuantity(42.23)
                                    .invoiceGroupingKey("string")
                                    .build()
                            )
                        )
                        .priceId("h74gfhdjvn7ujokd")
                        .build()
                )
            )
            .addAdjustments(
                listOf(
                    SubscriptionPriceIntervalsParams.AddAdjustment.builder()
                        .adjustment(
                            SubscriptionPriceIntervalsParams.AddAdjustment.Adjustment
                                .ofNewPercentageDiscount(
                                    SubscriptionPriceIntervalsParams.AddAdjustment.Adjustment
                                        .NewPercentageDiscount
                                        .builder()
                                        .adjustmentType(
                                            SubscriptionPriceIntervalsParams.AddAdjustment
                                                .Adjustment
                                                .NewPercentageDiscount
                                                .AdjustmentType
                                                .PERCENTAGE_DISCOUNT
                                        )
                                        .appliesToPriceIds(listOf("string"))
                                        .percentageDiscount(42.23)
                                        .build()
                                )
                        )
                        .startDate(
                            SubscriptionPriceIntervalsParams.AddAdjustment.StartDate
                                .ofOffsetDateTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        )
                        .endDate(
                            SubscriptionPriceIntervalsParams.AddAdjustment.EndDate.ofOffsetDateTime(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                        )
                        .build()
                )
            )
            .edit(
                listOf(
                    SubscriptionPriceIntervalsParams.Edit.builder()
                        .priceIntervalId("sdfs6wdjvn7ujokd")
                        .billingCycleDay(123L)
                        .endDate(
                            SubscriptionPriceIntervalsParams.Edit.EndDate.ofOffsetDateTime(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                        )
                        .fixedFeeQuantityTransitions(
                            listOf(
                                SubscriptionPriceIntervalsParams.Edit.FixedFeeQuantityTransition
                                    .builder()
                                    .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .quantity(123L)
                                    .build()
                            )
                        )
                        .startDate(
                            SubscriptionPriceIntervalsParams.Edit.StartDate.ofOffsetDateTime(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                        )
                        .build()
                )
            )
            .editAdjustments(
                listOf(
                    SubscriptionPriceIntervalsParams.EditAdjustment.builder()
                        .adjustmentIntervalId("sdfs6wdjvn7ujokd")
                        .endDate(
                            SubscriptionPriceIntervalsParams.EditAdjustment.EndDate
                                .ofOffsetDateTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        )
                        .startDate(
                            SubscriptionPriceIntervalsParams.EditAdjustment.StartDate
                                .ofOffsetDateTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        )
                        .build()
                )
            )
            .build()
    }

    @Test
    fun getBody() {
        val params =
            SubscriptionPriceIntervalsParams.builder()
                .subscriptionId("string")
                .add(
                    listOf(
                        SubscriptionPriceIntervalsParams.Add.builder()
                            .startDate(
                                SubscriptionPriceIntervalsParams.Add.StartDate.ofOffsetDateTime(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                            )
                            .allocationPrice(
                                SubscriptionPriceIntervalsParams.Add.AllocationPrice.builder()
                                    .amount(42.23)
                                    .cadence(
                                        SubscriptionPriceIntervalsParams.Add.AllocationPrice.Cadence
                                            .ONE_TIME
                                    )
                                    .currency("USD")
                                    .expiresAtEndOfCadence(true)
                                    .build()
                            )
                            .discounts(
                                listOf(
                                    SubscriptionPriceIntervalsParams.Add.Discount
                                        .ofAmountDiscountCreationParams(
                                            SubscriptionPriceIntervalsParams.Add.Discount
                                                .AmountDiscountCreationParams
                                                .builder()
                                                .amountDiscount(42.23)
                                                .discountType(
                                                    SubscriptionPriceIntervalsParams.Add.Discount
                                                        .AmountDiscountCreationParams
                                                        .DiscountType
                                                        .AMOUNT
                                                )
                                                .build()
                                        )
                                )
                            )
                            .endDate(
                                SubscriptionPriceIntervalsParams.Add.EndDate.ofOffsetDateTime(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                            )
                            .externalPriceId("external_price_id")
                            .fixedFeeQuantityTransitions(
                                listOf(
                                    SubscriptionPriceIntervalsParams.Add.FixedFeeQuantityTransition
                                        .builder()
                                        .effectiveDate(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .quantity(123L)
                                        .build()
                                )
                            )
                            .maximumAmount(42.23)
                            .minimumAmount(42.23)
                            .price(
                                SubscriptionPriceIntervalsParams.Add.Price.ofNewFloatingUnitPrice(
                                    SubscriptionPriceIntervalsParams.Add.Price.NewFloatingUnitPrice
                                        .builder()
                                        .cadence(
                                            SubscriptionPriceIntervalsParams.Add.Price
                                                .NewFloatingUnitPrice
                                                .Cadence
                                                .ANNUAL
                                        )
                                        .currency("string")
                                        .itemId("string")
                                        .modelType(
                                            SubscriptionPriceIntervalsParams.Add.Price
                                                .NewFloatingUnitPrice
                                                .ModelType
                                                .UNIT
                                        )
                                        .name("Annual fee")
                                        .unitConfig(
                                            SubscriptionPriceIntervalsParams.Add.Price
                                                .NewFloatingUnitPrice
                                                .UnitConfig
                                                .builder()
                                                .unitAmount("string")
                                                .build()
                                        )
                                        .billableMetricId("string")
                                        .billedInAdvance(true)
                                        .conversionRate(42.23)
                                        .externalPriceId("string")
                                        .fixedPriceQuantity(42.23)
                                        .invoiceGroupingKey("string")
                                        .build()
                                )
                            )
                            .priceId("h74gfhdjvn7ujokd")
                            .build()
                    )
                )
                .addAdjustments(
                    listOf(
                        SubscriptionPriceIntervalsParams.AddAdjustment.builder()
                            .adjustment(
                                SubscriptionPriceIntervalsParams.AddAdjustment.Adjustment
                                    .ofNewPercentageDiscount(
                                        SubscriptionPriceIntervalsParams.AddAdjustment.Adjustment
                                            .NewPercentageDiscount
                                            .builder()
                                            .adjustmentType(
                                                SubscriptionPriceIntervalsParams.AddAdjustment
                                                    .Adjustment
                                                    .NewPercentageDiscount
                                                    .AdjustmentType
                                                    .PERCENTAGE_DISCOUNT
                                            )
                                            .appliesToPriceIds(listOf("string"))
                                            .percentageDiscount(42.23)
                                            .build()
                                    )
                            )
                            .startDate(
                                SubscriptionPriceIntervalsParams.AddAdjustment.StartDate
                                    .ofOffsetDateTime(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                            )
                            .endDate(
                                SubscriptionPriceIntervalsParams.AddAdjustment.EndDate
                                    .ofOffsetDateTime(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                            )
                            .build()
                    )
                )
                .edit(
                    listOf(
                        SubscriptionPriceIntervalsParams.Edit.builder()
                            .priceIntervalId("sdfs6wdjvn7ujokd")
                            .billingCycleDay(123L)
                            .endDate(
                                SubscriptionPriceIntervalsParams.Edit.EndDate.ofOffsetDateTime(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                            )
                            .fixedFeeQuantityTransitions(
                                listOf(
                                    SubscriptionPriceIntervalsParams.Edit.FixedFeeQuantityTransition
                                        .builder()
                                        .effectiveDate(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .quantity(123L)
                                        .build()
                                )
                            )
                            .startDate(
                                SubscriptionPriceIntervalsParams.Edit.StartDate.ofOffsetDateTime(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                            )
                            .build()
                    )
                )
                .editAdjustments(
                    listOf(
                        SubscriptionPriceIntervalsParams.EditAdjustment.builder()
                            .adjustmentIntervalId("sdfs6wdjvn7ujokd")
                            .endDate(
                                SubscriptionPriceIntervalsParams.EditAdjustment.EndDate
                                    .ofOffsetDateTime(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                            )
                            .startDate(
                                SubscriptionPriceIntervalsParams.EditAdjustment.StartDate
                                    .ofOffsetDateTime(
                                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                    )
                            )
                            .build()
                    )
                )
                .build()
        val body = params.getBody()
        assertThat(body).isNotNull
        assertThat(body.add())
            .isEqualTo(
                listOf(
                    SubscriptionPriceIntervalsParams.Add.builder()
                        .startDate(
                            SubscriptionPriceIntervalsParams.Add.StartDate.ofOffsetDateTime(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                        )
                        .allocationPrice(
                            SubscriptionPriceIntervalsParams.Add.AllocationPrice.builder()
                                .amount(42.23)
                                .cadence(
                                    SubscriptionPriceIntervalsParams.Add.AllocationPrice.Cadence
                                        .ONE_TIME
                                )
                                .currency("USD")
                                .expiresAtEndOfCadence(true)
                                .build()
                        )
                        .discounts(
                            listOf(
                                SubscriptionPriceIntervalsParams.Add.Discount
                                    .ofAmountDiscountCreationParams(
                                        SubscriptionPriceIntervalsParams.Add.Discount
                                            .AmountDiscountCreationParams
                                            .builder()
                                            .amountDiscount(42.23)
                                            .discountType(
                                                SubscriptionPriceIntervalsParams.Add.Discount
                                                    .AmountDiscountCreationParams
                                                    .DiscountType
                                                    .AMOUNT
                                            )
                                            .build()
                                    )
                            )
                        )
                        .endDate(
                            SubscriptionPriceIntervalsParams.Add.EndDate.ofOffsetDateTime(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                        )
                        .externalPriceId("external_price_id")
                        .fixedFeeQuantityTransitions(
                            listOf(
                                SubscriptionPriceIntervalsParams.Add.FixedFeeQuantityTransition
                                    .builder()
                                    .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .quantity(123L)
                                    .build()
                            )
                        )
                        .maximumAmount(42.23)
                        .minimumAmount(42.23)
                        .price(
                            SubscriptionPriceIntervalsParams.Add.Price.ofNewFloatingUnitPrice(
                                SubscriptionPriceIntervalsParams.Add.Price.NewFloatingUnitPrice
                                    .builder()
                                    .cadence(
                                        SubscriptionPriceIntervalsParams.Add.Price
                                            .NewFloatingUnitPrice
                                            .Cadence
                                            .ANNUAL
                                    )
                                    .currency("string")
                                    .itemId("string")
                                    .modelType(
                                        SubscriptionPriceIntervalsParams.Add.Price
                                            .NewFloatingUnitPrice
                                            .ModelType
                                            .UNIT
                                    )
                                    .name("Annual fee")
                                    .unitConfig(
                                        SubscriptionPriceIntervalsParams.Add.Price
                                            .NewFloatingUnitPrice
                                            .UnitConfig
                                            .builder()
                                            .unitAmount("string")
                                            .build()
                                    )
                                    .billableMetricId("string")
                                    .billedInAdvance(true)
                                    .conversionRate(42.23)
                                    .externalPriceId("string")
                                    .fixedPriceQuantity(42.23)
                                    .invoiceGroupingKey("string")
                                    .build()
                            )
                        )
                        .priceId("h74gfhdjvn7ujokd")
                        .build()
                )
            )
        assertThat(body.addAdjustments())
            .isEqualTo(
                listOf(
                    SubscriptionPriceIntervalsParams.AddAdjustment.builder()
                        .adjustment(
                            SubscriptionPriceIntervalsParams.AddAdjustment.Adjustment
                                .ofNewPercentageDiscount(
                                    SubscriptionPriceIntervalsParams.AddAdjustment.Adjustment
                                        .NewPercentageDiscount
                                        .builder()
                                        .adjustmentType(
                                            SubscriptionPriceIntervalsParams.AddAdjustment
                                                .Adjustment
                                                .NewPercentageDiscount
                                                .AdjustmentType
                                                .PERCENTAGE_DISCOUNT
                                        )
                                        .appliesToPriceIds(listOf("string"))
                                        .percentageDiscount(42.23)
                                        .build()
                                )
                        )
                        .startDate(
                            SubscriptionPriceIntervalsParams.AddAdjustment.StartDate
                                .ofOffsetDateTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        )
                        .endDate(
                            SubscriptionPriceIntervalsParams.AddAdjustment.EndDate.ofOffsetDateTime(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                        )
                        .build()
                )
            )
        assertThat(body.edit())
            .isEqualTo(
                listOf(
                    SubscriptionPriceIntervalsParams.Edit.builder()
                        .priceIntervalId("sdfs6wdjvn7ujokd")
                        .billingCycleDay(123L)
                        .endDate(
                            SubscriptionPriceIntervalsParams.Edit.EndDate.ofOffsetDateTime(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                        )
                        .fixedFeeQuantityTransitions(
                            listOf(
                                SubscriptionPriceIntervalsParams.Edit.FixedFeeQuantityTransition
                                    .builder()
                                    .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .quantity(123L)
                                    .build()
                            )
                        )
                        .startDate(
                            SubscriptionPriceIntervalsParams.Edit.StartDate.ofOffsetDateTime(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                        )
                        .build()
                )
            )
        assertThat(body.editAdjustments())
            .isEqualTo(
                listOf(
                    SubscriptionPriceIntervalsParams.EditAdjustment.builder()
                        .adjustmentIntervalId("sdfs6wdjvn7ujokd")
                        .endDate(
                            SubscriptionPriceIntervalsParams.EditAdjustment.EndDate
                                .ofOffsetDateTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        )
                        .startDate(
                            SubscriptionPriceIntervalsParams.EditAdjustment.StartDate
                                .ofOffsetDateTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        )
                        .build()
                )
            )
    }

    @Test
    fun getBodyWithoutOptionalFields() {
        val params = SubscriptionPriceIntervalsParams.builder().subscriptionId("string").build()
        val body = params.getBody()
        assertThat(body).isNotNull
    }

    @Test
    fun getPathParam() {
        val params = SubscriptionPriceIntervalsParams.builder().subscriptionId("string").build()
        assertThat(params).isNotNull
        // path param "subscriptionId"
        assertThat(params.getPathParam(0)).isEqualTo("string")
        // out-of-bound path param
        assertThat(params.getPathParam(1)).isEqualTo("")
    }
}
