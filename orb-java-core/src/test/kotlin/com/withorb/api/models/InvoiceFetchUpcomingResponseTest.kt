// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class InvoiceFetchUpcomingResponseTest {

    @Test
    fun createInvoiceFetchUpcomingResponse() {
        val invoiceFetchUpcomingResponse =
            InvoiceFetchUpcomingResponse.builder()
                .id("string")
                .amountDue("8.00")
                .autoCollection(
                    InvoiceFetchUpcomingResponse.AutoCollection.builder()
                        .enabled(true)
                        .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .numAttempts(123L)
                        .previouslyAttemptedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .billingAddress(
                    InvoiceFetchUpcomingResponse.BillingAddress.builder()
                        .city("string")
                        .country("string")
                        .line1("string")
                        .line2("string")
                        .postalCode("string")
                        .state("string")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                .creditNotes(
                    listOf(
                        InvoiceFetchUpcomingResponse.CreditNote.builder()
                            .id("string")
                            .creditNoteNumber("string")
                            .memo("string")
                            .reason("string")
                            .total("string")
                            .type("string")
                            .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                            .build()
                    )
                )
                .currency("USD")
                .customer(
                    InvoiceFetchUpcomingResponse.Customer.builder()
                        .id("string")
                        .externalCustomerId("string")
                        .build()
                )
                .customerBalanceTransactions(
                    listOf(
                        InvoiceFetchUpcomingResponse.CustomerBalanceTransaction.builder()
                            .id("cgZa3SXcsPTVyC4Y")
                            .action(
                                InvoiceFetchUpcomingResponse.CustomerBalanceTransaction.Action
                                    .APPLIED_TO_INVOICE
                            )
                            .amount("11.00")
                            .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                            .creditNote(
                                InvoiceFetchUpcomingResponse.CustomerBalanceTransaction.CreditNote
                                    .builder()
                                    .id("string")
                                    .build()
                            )
                            .description("An optional description")
                            .endingBalance("22.00")
                            .invoice(
                                InvoiceFetchUpcomingResponse.CustomerBalanceTransaction.Invoice
                                    .builder()
                                    .id("gXcsPTVyC4YZa3Sc")
                                    .build()
                            )
                            .startingBalance("33.00")
                            .type(
                                InvoiceFetchUpcomingResponse.CustomerBalanceTransaction.Type
                                    .INCREMENT
                            )
                            .build()
                    )
                )
                .customerTaxId(
                    InvoiceFetchUpcomingResponse.CustomerTaxId.builder()
                        .country(InvoiceFetchUpcomingResponse.CustomerTaxId.Country.AD)
                        .type(InvoiceFetchUpcomingResponse.CustomerTaxId.Type.AD_NRT)
                        .value("string")
                        .build()
                )
                .discount(
                    Discount.ofPercentageDiscount(
                        Discount.PercentageDiscount.builder()
                            .appliesToPriceIds(listOf("string"))
                            .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                            .percentageDiscount(1.0)
                            .reason("string")
                            .build()
                    )
                )
                .discounts(
                    listOf(
                        Discount.ofPercentageDiscount(
                            Discount.PercentageDiscount.builder()
                                .appliesToPriceIds(listOf("string"))
                                .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(1.0)
                                .reason("string")
                                .build()
                        )
                    )
                )
                .dueDate(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
                .eligibleToIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .hostedInvoiceUrl("string")
                .invoiceNumber("JYEFHK-00001")
                .invoicePdf("https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb")
                .invoiceSource(InvoiceFetchUpcomingResponse.InvoiceSource.SUBSCRIPTION)
                .issueFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .issuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .lineItems(
                    listOf(
                        InvoiceFetchUpcomingResponse.LineItem.builder()
                            .id("string")
                            .amount("7.00")
                            .discount(
                                Discount.ofPercentageDiscount(
                                    Discount.PercentageDiscount.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .discountType(
                                            Discount.PercentageDiscount.DiscountType.PERCENTAGE
                                        )
                                        .percentageDiscount(1.0)
                                        .reason("string")
                                        .build()
                                )
                            )
                            .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                            .grouping("string")
                            .maximum(
                                InvoiceFetchUpcomingResponse.LineItem.Maximum.builder()
                                    .appliesToPriceIds(listOf("string"))
                                    .maximumAmount("string")
                                    .build()
                            )
                            .maximumAmount("string")
                            .minimum(
                                InvoiceFetchUpcomingResponse.LineItem.Minimum.builder()
                                    .appliesToPriceIds(listOf("string"))
                                    .minimumAmount("string")
                                    .build()
                            )
                            .minimumAmount("string")
                            .name("Fixed Fee")
                            .price(
                                Price.ofUnitPrice(
                                    Price.UnitPrice.builder()
                                        .id("string")
                                        .billableMetric(
                                            Price.UnitPrice.BillableMetric.builder()
                                                .id("string")
                                                .build()
                                        )
                                        .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                        .conversionRate(42.23)
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Price.UnitPrice.CreditAllocation.builder()
                                                .allowsRollover(true)
                                                .currency("string")
                                                .build()
                                        )
                                        .currency("string")
                                        .discount(
                                            Discount.ofPercentageDiscount(
                                                Discount.PercentageDiscount.builder()
                                                    .appliesToPriceIds(listOf("string"))
                                                    .discountType(
                                                        Discount.PercentageDiscount.DiscountType
                                                            .PERCENTAGE
                                                    )
                                                    .percentageDiscount(1.0)
                                                    .reason("string")
                                                    .build()
                                            )
                                        )
                                        .externalPriceId("string")
                                        .fixedPriceQuantity(42.23)
                                        .item(
                                            Price.UnitPrice.Item.builder()
                                                .id("string")
                                                .name("string")
                                                .build()
                                        )
                                        .maximum(
                                            Price.UnitPrice.Maximum.builder()
                                                .appliesToPriceIds(listOf("string"))
                                                .maximumAmount("string")
                                                .build()
                                        )
                                        .maximumAmount("string")
                                        .minimum(
                                            Price.UnitPrice.Minimum.builder()
                                                .appliesToPriceIds(listOf("string"))
                                                .minimumAmount("string")
                                                .build()
                                        )
                                        .minimumAmount("string")
                                        .modelType(Price.UnitPrice.ModelType.UNIT)
                                        .name("string")
                                        .planPhaseOrder(123L)
                                        .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            Price.UnitPrice.UnitConfig.builder()
                                                .unitAmount("string")
                                                .build()
                                        )
                                        .build()
                                )
                            )
                            .quantity(42.23)
                            .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                            .subLineItems(
                                listOf(
                                    InvoiceFetchUpcomingResponse.LineItem.SubLineItem
                                        .ofMatrixSubLineItem(
                                            InvoiceFetchUpcomingResponse.LineItem.SubLineItem
                                                .MatrixSubLineItem
                                                .builder()
                                                .amount("9.00")
                                                .grouping(
                                                    InvoiceFetchUpcomingResponse.LineItem
                                                        .SubLineItem
                                                        .MatrixSubLineItem
                                                        .Grouping
                                                        .builder()
                                                        .key("region")
                                                        .value("west")
                                                        .build()
                                                )
                                                .matrixConfig(
                                                    InvoiceFetchUpcomingResponse.LineItem
                                                        .SubLineItem
                                                        .MatrixSubLineItem
                                                        .MatrixConfig
                                                        .builder()
                                                        .dimensionValues(listOf("string"))
                                                        .build()
                                                )
                                                .name("Tier One")
                                                .quantity(42.23)
                                                .type(
                                                    InvoiceFetchUpcomingResponse.LineItem
                                                        .SubLineItem
                                                        .MatrixSubLineItem
                                                        .Type
                                                        .MATRIX
                                                )
                                                .build()
                                        )
                                )
                            )
                            .subtotal("9.00")
                            .taxAmounts(
                                listOf(
                                    InvoiceFetchUpcomingResponse.LineItem.TaxAmount.builder()
                                        .amount("string")
                                        .taxRateDescription("string")
                                        .taxRatePercentage("string")
                                        .build()
                                )
                            )
                            .build()
                    )
                )
                .maximum(
                    InvoiceFetchUpcomingResponse.Maximum.builder()
                        .appliesToPriceIds(listOf("string"))
                        .maximumAmount("string")
                        .build()
                )
                .maximumAmount("string")
                .memo("string")
                .metadata(InvoiceFetchUpcomingResponse.Metadata.builder().build())
                .minimum(
                    InvoiceFetchUpcomingResponse.Minimum.builder()
                        .appliesToPriceIds(listOf("string"))
                        .minimumAmount("string")
                        .build()
                )
                .minimumAmount("string")
                .paidAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .paymentFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .paymentStartedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .scheduledIssueAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .shippingAddress(
                    InvoiceFetchUpcomingResponse.ShippingAddress.builder()
                        .city("string")
                        .country("string")
                        .line1("string")
                        .line2("string")
                        .postalCode("string")
                        .state("string")
                        .build()
                )
                .status(InvoiceFetchUpcomingResponse.Status.ISSUED)
                .subscription(
                    InvoiceFetchUpcomingResponse.Subscription.builder()
                        .id("VDGsT23osdLb84KD")
                        .build()
                )
                .subtotal("8.00")
                .syncFailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .targetDate(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
                .total("8.00")
                .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .willAutoIssue(true)
                .build()
        assertThat(invoiceFetchUpcomingResponse).isNotNull
        assertThat(invoiceFetchUpcomingResponse.id()).isEqualTo("string")
        assertThat(invoiceFetchUpcomingResponse.amountDue()).isEqualTo("8.00")
        assertThat(invoiceFetchUpcomingResponse.autoCollection())
            .isEqualTo(
                InvoiceFetchUpcomingResponse.AutoCollection.builder()
                    .enabled(true)
                    .nextAttemptAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .numAttempts(123L)
                    .previouslyAttemptedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(invoiceFetchUpcomingResponse.billingAddress())
            .contains(
                InvoiceFetchUpcomingResponse.BillingAddress.builder()
                    .city("string")
                    .country("string")
                    .line1("string")
                    .line2("string")
                    .postalCode("string")
                    .state("string")
                    .build()
            )
        assertThat(invoiceFetchUpcomingResponse.createdAt())
            .isEqualTo(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
        assertThat(invoiceFetchUpcomingResponse.creditNotes())
            .containsExactly(
                InvoiceFetchUpcomingResponse.CreditNote.builder()
                    .id("string")
                    .creditNoteNumber("string")
                    .memo("string")
                    .reason("string")
                    .total("string")
                    .type("string")
                    .voidedAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                    .build()
            )
        assertThat(invoiceFetchUpcomingResponse.currency()).isEqualTo("USD")
        assertThat(invoiceFetchUpcomingResponse.customer())
            .isEqualTo(
                InvoiceFetchUpcomingResponse.Customer.builder()
                    .id("string")
                    .externalCustomerId("string")
                    .build()
            )
        assertThat(invoiceFetchUpcomingResponse.customerBalanceTransactions())
            .containsExactly(
                InvoiceFetchUpcomingResponse.CustomerBalanceTransaction.builder()
                    .id("cgZa3SXcsPTVyC4Y")
                    .action(
                        InvoiceFetchUpcomingResponse.CustomerBalanceTransaction.Action
                            .APPLIED_TO_INVOICE
                    )
                    .amount("11.00")
                    .createdAt(OffsetDateTime.parse("2022-05-01T07:01:31+00:00"))
                    .creditNote(
                        InvoiceFetchUpcomingResponse.CustomerBalanceTransaction.CreditNote.builder()
                            .id("string")
                            .build()
                    )
                    .description("An optional description")
                    .endingBalance("22.00")
                    .invoice(
                        InvoiceFetchUpcomingResponse.CustomerBalanceTransaction.Invoice.builder()
                            .id("gXcsPTVyC4YZa3Sc")
                            .build()
                    )
                    .startingBalance("33.00")
                    .type(InvoiceFetchUpcomingResponse.CustomerBalanceTransaction.Type.INCREMENT)
                    .build()
            )
        assertThat(invoiceFetchUpcomingResponse.customerTaxId())
            .contains(
                InvoiceFetchUpcomingResponse.CustomerTaxId.builder()
                    .country(InvoiceFetchUpcomingResponse.CustomerTaxId.Country.AD)
                    .type(InvoiceFetchUpcomingResponse.CustomerTaxId.Type.AD_NRT)
                    .value("string")
                    .build()
            )
        assertThat(invoiceFetchUpcomingResponse.discount())
            .contains(
                Discount.ofPercentageDiscount(
                    Discount.PercentageDiscount.builder()
                        .appliesToPriceIds(listOf("string"))
                        .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(1.0)
                        .reason("string")
                        .build()
                )
            )
        assertThat(invoiceFetchUpcomingResponse.discounts())
            .containsExactly(
                Discount.ofPercentageDiscount(
                    Discount.PercentageDiscount.builder()
                        .appliesToPriceIds(listOf("string"))
                        .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(1.0)
                        .reason("string")
                        .build()
                )
            )
        assertThat(invoiceFetchUpcomingResponse.dueDate())
            .isEqualTo(OffsetDateTime.parse("2022-05-30T07:00:00+00:00"))
        assertThat(invoiceFetchUpcomingResponse.eligibleToIssueAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoiceFetchUpcomingResponse.hostedInvoiceUrl()).contains("string")
        assertThat(invoiceFetchUpcomingResponse.invoiceNumber()).isEqualTo("JYEFHK-00001")
        assertThat(invoiceFetchUpcomingResponse.invoicePdf())
            .contains("https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb")
        assertThat(invoiceFetchUpcomingResponse.invoiceSource())
            .isEqualTo(InvoiceFetchUpcomingResponse.InvoiceSource.SUBSCRIPTION)
        assertThat(invoiceFetchUpcomingResponse.issueFailedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoiceFetchUpcomingResponse.issuedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoiceFetchUpcomingResponse.lineItems())
            .containsExactly(
                InvoiceFetchUpcomingResponse.LineItem.builder()
                    .id("string")
                    .amount("7.00")
                    .discount(
                        Discount.ofPercentageDiscount(
                            Discount.PercentageDiscount.builder()
                                .appliesToPriceIds(listOf("string"))
                                .discountType(Discount.PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(1.0)
                                .reason("string")
                                .build()
                        )
                    )
                    .endDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                    .grouping("string")
                    .maximum(
                        InvoiceFetchUpcomingResponse.LineItem.Maximum.builder()
                            .appliesToPriceIds(listOf("string"))
                            .maximumAmount("string")
                            .build()
                    )
                    .maximumAmount("string")
                    .minimum(
                        InvoiceFetchUpcomingResponse.LineItem.Minimum.builder()
                            .appliesToPriceIds(listOf("string"))
                            .minimumAmount("string")
                            .build()
                    )
                    .minimumAmount("string")
                    .name("Fixed Fee")
                    .price(
                        Price.ofUnitPrice(
                            Price.UnitPrice.builder()
                                .id("string")
                                .billableMetric(
                                    Price.UnitPrice.BillableMetric.builder().id("string").build()
                                )
                                .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                .conversionRate(42.23)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    Price.UnitPrice.CreditAllocation.builder()
                                        .allowsRollover(true)
                                        .currency("string")
                                        .build()
                                )
                                .currency("string")
                                .discount(
                                    Discount.ofPercentageDiscount(
                                        Discount.PercentageDiscount.builder()
                                            .appliesToPriceIds(listOf("string"))
                                            .discountType(
                                                Discount.PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(1.0)
                                            .reason("string")
                                            .build()
                                    )
                                )
                                .externalPriceId("string")
                                .fixedPriceQuantity(42.23)
                                .item(
                                    Price.UnitPrice.Item.builder()
                                        .id("string")
                                        .name("string")
                                        .build()
                                )
                                .maximum(
                                    Price.UnitPrice.Maximum.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .maximumAmount("string")
                                        .build()
                                )
                                .maximumAmount("string")
                                .minimum(
                                    Price.UnitPrice.Minimum.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .minimumAmount("string")
                                        .build()
                                )
                                .minimumAmount("string")
                                .modelType(Price.UnitPrice.ModelType.UNIT)
                                .name("string")
                                .planPhaseOrder(123L)
                                .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                .unitConfig(
                                    Price.UnitPrice.UnitConfig.builder()
                                        .unitAmount("string")
                                        .build()
                                )
                                .build()
                        )
                    )
                    .quantity(42.23)
                    .startDate(OffsetDateTime.parse("2022-02-01T08:00:00+00:00"))
                    .subLineItems(
                        listOf(
                            InvoiceFetchUpcomingResponse.LineItem.SubLineItem.ofMatrixSubLineItem(
                                InvoiceFetchUpcomingResponse.LineItem.SubLineItem.MatrixSubLineItem
                                    .builder()
                                    .amount("9.00")
                                    .grouping(
                                        InvoiceFetchUpcomingResponse.LineItem.SubLineItem
                                            .MatrixSubLineItem
                                            .Grouping
                                            .builder()
                                            .key("region")
                                            .value("west")
                                            .build()
                                    )
                                    .matrixConfig(
                                        InvoiceFetchUpcomingResponse.LineItem.SubLineItem
                                            .MatrixSubLineItem
                                            .MatrixConfig
                                            .builder()
                                            .dimensionValues(listOf("string"))
                                            .build()
                                    )
                                    .name("Tier One")
                                    .quantity(42.23)
                                    .type(
                                        InvoiceFetchUpcomingResponse.LineItem.SubLineItem
                                            .MatrixSubLineItem
                                            .Type
                                            .MATRIX
                                    )
                                    .build()
                            )
                        )
                    )
                    .subtotal("9.00")
                    .taxAmounts(
                        listOf(
                            InvoiceFetchUpcomingResponse.LineItem.TaxAmount.builder()
                                .amount("string")
                                .taxRateDescription("string")
                                .taxRatePercentage("string")
                                .build()
                        )
                    )
                    .build()
            )
        assertThat(invoiceFetchUpcomingResponse.maximum())
            .contains(
                InvoiceFetchUpcomingResponse.Maximum.builder()
                    .appliesToPriceIds(listOf("string"))
                    .maximumAmount("string")
                    .build()
            )
        assertThat(invoiceFetchUpcomingResponse.maximumAmount()).contains("string")
        assertThat(invoiceFetchUpcomingResponse.memo()).contains("string")
        assertThat(invoiceFetchUpcomingResponse.metadata())
            .isEqualTo(InvoiceFetchUpcomingResponse.Metadata.builder().build())
        assertThat(invoiceFetchUpcomingResponse.minimum())
            .contains(
                InvoiceFetchUpcomingResponse.Minimum.builder()
                    .appliesToPriceIds(listOf("string"))
                    .minimumAmount("string")
                    .build()
            )
        assertThat(invoiceFetchUpcomingResponse.minimumAmount()).contains("string")
        assertThat(invoiceFetchUpcomingResponse.paidAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoiceFetchUpcomingResponse.paymentFailedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoiceFetchUpcomingResponse.paymentStartedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoiceFetchUpcomingResponse.scheduledIssueAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoiceFetchUpcomingResponse.shippingAddress())
            .contains(
                InvoiceFetchUpcomingResponse.ShippingAddress.builder()
                    .city("string")
                    .country("string")
                    .line1("string")
                    .line2("string")
                    .postalCode("string")
                    .state("string")
                    .build()
            )
        assertThat(invoiceFetchUpcomingResponse.status())
            .isEqualTo(InvoiceFetchUpcomingResponse.Status.ISSUED)
        assertThat(invoiceFetchUpcomingResponse.subscription())
            .contains(
                InvoiceFetchUpcomingResponse.Subscription.builder().id("VDGsT23osdLb84KD").build()
            )
        assertThat(invoiceFetchUpcomingResponse.subtotal()).isEqualTo("8.00")
        assertThat(invoiceFetchUpcomingResponse.syncFailedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoiceFetchUpcomingResponse.targetDate())
            .isEqualTo(OffsetDateTime.parse("2022-05-01T07:00:00+00:00"))
        assertThat(invoiceFetchUpcomingResponse.total()).isEqualTo("8.00")
        assertThat(invoiceFetchUpcomingResponse.voidedAt())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(invoiceFetchUpcomingResponse.willAutoIssue()).isEqualTo(true)
    }
}
