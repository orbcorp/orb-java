// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.JsonValue
import com.withorb.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class PlanListPageResponseTest {

    @Test
    fun create() {
        val planListPageResponse =
            PlanListPageResponse.builder()
                .addData(
                    Plan.builder()
                        .id("id")
                        .addAdjustment(
                            Plan.Adjustment.UsageDiscount.builder()
                                .id("id")
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Plan.Adjustment.UsageDiscount.Filter.builder()
                                        .field(Plan.Adjustment.UsageDiscount.Filter.Field.PRICE_ID)
                                        .operator(
                                            Plan.Adjustment.UsageDiscount.Filter.Operator.INCLUDES
                                        )
                                        .addValue("string")
                                        .build()
                                )
                                .isInvoiceLevel(true)
                                .planPhaseOrder(0L)
                                .reason("reason")
                                .usageDiscount(0.0)
                                .build()
                        )
                        .basePlan(
                            Plan.BasePlan.builder()
                                .id("m2t5akQeh2obwxeU")
                                .externalPlanId("m2t5akQeh2obwxeU")
                                .name("Example plan")
                                .build()
                        )
                        .basePlanId("base_plan_id")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currency("currency")
                        .defaultInvoiceMemo("default_invoice_memo")
                        .description("description")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .addFilter(
                                    PercentageDiscount.Filter.builder()
                                        .field(PercentageDiscount.Filter.Field.PRICE_ID)
                                        .operator(PercentageDiscount.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .reason("reason")
                                .build()
                        )
                        .externalPlanId("external_plan_id")
                        .invoicingCurrency("invoicing_currency")
                        .maximum(
                            Plan.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Plan.Maximum.Filter.builder()
                                        .field(Plan.Maximum.Filter.Field.PRICE_ID)
                                        .operator(Plan.Maximum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Plan.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Plan.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Plan.Minimum.Filter.builder()
                                        .field(Plan.Minimum.Filter.Field.PRICE_ID)
                                        .operator(Plan.Minimum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .netTerms(0L)
                        .addPlanPhase(
                            Plan.PlanPhase.builder()
                                .id("id")
                                .description("description")
                                .discount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .addFilter(
                                            PercentageDiscount.Filter.builder()
                                                .field(PercentageDiscount.Filter.Field.PRICE_ID)
                                                .operator(
                                                    PercentageDiscount.Filter.Operator.INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .duration(0L)
                                .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                .maximum(
                                    Plan.PlanPhase.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Plan.PlanPhase.Maximum.Filter.builder()
                                                .field(Plan.PlanPhase.Maximum.Filter.Field.PRICE_ID)
                                                .operator(
                                                    Plan.PlanPhase.Maximum.Filter.Operator.INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .minimum(
                                    Plan.PlanPhase.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Plan.PlanPhase.Minimum.Filter.builder()
                                                .field(Plan.PlanPhase.Minimum.Filter.Field.PRICE_ID)
                                                .operator(
                                                    Plan.PlanPhase.Minimum.Filter.Operator.INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .order(0L)
                                .build()
                        )
                        .addPrice(
                            Price.Unit.builder()
                                .id("id")
                                .billableMetric(
                                    Price.Unit.BillableMetric.builder().id("id").build()
                                )
                                .billingCycleConfiguration(
                                    Price.Unit.BillingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.BillingCycleConfiguration.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                .conversionRate(0.0)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    Price.Unit.CreditAllocation.builder()
                                        .allowsRollover(true)
                                        .currency("currency")
                                        .customExpiration(
                                            Price.Unit.CreditAllocation.CustomExpiration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.Unit.CreditAllocation.CustomExpiration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .currency("currency")
                                .discount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .addFilter(
                                            PercentageDiscount.Filter.builder()
                                                .field(PercentageDiscount.Filter.Field.PRICE_ID)
                                                .operator(
                                                    PercentageDiscount.Filter.Operator.INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoicingCycleConfiguration(
                                    Price.Unit.InvoicingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .item(Price.Unit.Item.builder().id("id").name("name").build())
                                .maximum(
                                    Price.Unit.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Price.Unit.Maximum.Filter.builder()
                                                .field(Price.Unit.Maximum.Filter.Field.PRICE_ID)
                                                .operator(
                                                    Price.Unit.Maximum.Filter.Operator.INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    Price.Unit.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Price.Unit.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Price.Unit.Minimum.Filter.builder()
                                                .field(Price.Unit.Minimum.Filter.Field.PRICE_ID)
                                                .operator(
                                                    Price.Unit.Minimum.Filter.Operator.INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .planPhaseOrder(0L)
                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                .unitConfig(
                                    Price.Unit.UnitConfig.builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .dimensionalPriceConfiguration(
                                    Price.Unit.DimensionalPriceConfiguration.builder()
                                        .addDimensionValue("string")
                                        .dimensionalPriceGroupId("dimensional_price_group_id")
                                        .build()
                                )
                                .build()
                        )
                        .product(
                            Plan.Product.builder()
                                .id("id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .name("name")
                                .build()
                        )
                        .status(Plan.Status.ACTIVE)
                        .trialConfig(
                            Plan.TrialConfig.builder()
                                .trialPeriod(0L)
                                .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                                .build()
                        )
                        .version(0L)
                        .build()
                )
                .paginationMetadata(
                    PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build()
                )
                .build()

        assertThat(planListPageResponse.data())
            .containsExactly(
                Plan.builder()
                    .id("id")
                    .addAdjustment(
                        Plan.Adjustment.UsageDiscount.builder()
                            .id("id")
                            .addAppliesToPriceId("string")
                            .addFilter(
                                Plan.Adjustment.UsageDiscount.Filter.builder()
                                    .field(Plan.Adjustment.UsageDiscount.Filter.Field.PRICE_ID)
                                    .operator(
                                        Plan.Adjustment.UsageDiscount.Filter.Operator.INCLUDES
                                    )
                                    .addValue("string")
                                    .build()
                            )
                            .isInvoiceLevel(true)
                            .planPhaseOrder(0L)
                            .reason("reason")
                            .usageDiscount(0.0)
                            .build()
                    )
                    .basePlan(
                        Plan.BasePlan.builder()
                            .id("m2t5akQeh2obwxeU")
                            .externalPlanId("m2t5akQeh2obwxeU")
                            .name("Example plan")
                            .build()
                    )
                    .basePlanId("base_plan_id")
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currency("currency")
                    .defaultInvoiceMemo("default_invoice_memo")
                    .description("description")
                    .discount(
                        PercentageDiscount.builder()
                            .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                            .percentageDiscount(0.15)
                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                            .addFilter(
                                PercentageDiscount.Filter.builder()
                                    .field(PercentageDiscount.Filter.Field.PRICE_ID)
                                    .operator(PercentageDiscount.Filter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .reason("reason")
                            .build()
                    )
                    .externalPlanId("external_plan_id")
                    .invoicingCurrency("invoicing_currency")
                    .maximum(
                        Plan.Maximum.builder()
                            .addAppliesToPriceId("string")
                            .addFilter(
                                Plan.Maximum.Filter.builder()
                                    .field(Plan.Maximum.Filter.Field.PRICE_ID)
                                    .operator(Plan.Maximum.Filter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .build()
                    )
                    .maximumAmount("maximum_amount")
                    .metadata(
                        Plan.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .minimum(
                        Plan.Minimum.builder()
                            .addAppliesToPriceId("string")
                            .addFilter(
                                Plan.Minimum.Filter.builder()
                                    .field(Plan.Minimum.Filter.Field.PRICE_ID)
                                    .operator(Plan.Minimum.Filter.Operator.INCLUDES)
                                    .addValue("string")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .build()
                    )
                    .minimumAmount("minimum_amount")
                    .name("name")
                    .netTerms(0L)
                    .addPlanPhase(
                        Plan.PlanPhase.builder()
                            .id("id")
                            .description("description")
                            .discount(
                                PercentageDiscount.builder()
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .addFilter(
                                        PercentageDiscount.Filter.builder()
                                            .field(PercentageDiscount.Filter.Field.PRICE_ID)
                                            .operator(PercentageDiscount.Filter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .reason("reason")
                                    .build()
                            )
                            .duration(0L)
                            .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                            .maximum(
                                Plan.PlanPhase.Maximum.builder()
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        Plan.PlanPhase.Maximum.Filter.builder()
                                            .field(Plan.PlanPhase.Maximum.Filter.Field.PRICE_ID)
                                            .operator(
                                                Plan.PlanPhase.Maximum.Filter.Operator.INCLUDES
                                            )
                                            .addValue("string")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .minimum(
                                Plan.PlanPhase.Minimum.builder()
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        Plan.PlanPhase.Minimum.Filter.builder()
                                            .field(Plan.PlanPhase.Minimum.Filter.Field.PRICE_ID)
                                            .operator(
                                                Plan.PlanPhase.Minimum.Filter.Operator.INCLUDES
                                            )
                                            .addValue("string")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .name("name")
                            .order(0L)
                            .build()
                    )
                    .addPrice(
                        Price.Unit.builder()
                            .id("id")
                            .billableMetric(Price.Unit.BillableMetric.builder().id("id").build())
                            .billingCycleConfiguration(
                                Price.Unit.BillingCycleConfiguration.builder()
                                    .duration(0L)
                                    .durationUnit(
                                        Price.Unit.BillingCycleConfiguration.DurationUnit.DAY
                                    )
                                    .build()
                            )
                            .cadence(Price.Unit.Cadence.ONE_TIME)
                            .conversionRate(0.0)
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .creditAllocation(
                                Price.Unit.CreditAllocation.builder()
                                    .allowsRollover(true)
                                    .currency("currency")
                                    .customExpiration(
                                        Price.Unit.CreditAllocation.CustomExpiration.builder()
                                            .duration(0L)
                                            .durationUnit(
                                                Price.Unit.CreditAllocation.CustomExpiration
                                                    .DurationUnit
                                                    .DAY
                                            )
                                            .build()
                                    )
                                    .build()
                            )
                            .currency("currency")
                            .discount(
                                PercentageDiscount.builder()
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                    .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                    .addFilter(
                                        PercentageDiscount.Filter.builder()
                                            .field(PercentageDiscount.Filter.Field.PRICE_ID)
                                            .operator(PercentageDiscount.Filter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .reason("reason")
                                    .build()
                            )
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoicingCycleConfiguration(
                                Price.Unit.InvoicingCycleConfiguration.builder()
                                    .duration(0L)
                                    .durationUnit(
                                        Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                    )
                                    .build()
                            )
                            .item(Price.Unit.Item.builder().id("id").name("name").build())
                            .maximum(
                                Price.Unit.Maximum.builder()
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        Price.Unit.Maximum.Filter.builder()
                                            .field(Price.Unit.Maximum.Filter.Field.PRICE_ID)
                                            .operator(Price.Unit.Maximum.Filter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .build()
                            )
                            .maximumAmount("maximum_amount")
                            .metadata(
                                Price.Unit.Metadata.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .minimum(
                                Price.Unit.Minimum.builder()
                                    .addAppliesToPriceId("string")
                                    .addFilter(
                                        Price.Unit.Minimum.Filter.builder()
                                            .field(Price.Unit.Minimum.Filter.Field.PRICE_ID)
                                            .operator(Price.Unit.Minimum.Filter.Operator.INCLUDES)
                                            .addValue("string")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .build()
                            )
                            .minimumAmount("minimum_amount")
                            .name("name")
                            .planPhaseOrder(0L)
                            .priceType(Price.Unit.PriceType.USAGE_PRICE)
                            .unitConfig(
                                Price.Unit.UnitConfig.builder().unitAmount("unit_amount").build()
                            )
                            .dimensionalPriceConfiguration(
                                Price.Unit.DimensionalPriceConfiguration.builder()
                                    .addDimensionValue("string")
                                    .dimensionalPriceGroupId("dimensional_price_group_id")
                                    .build()
                            )
                            .build()
                    )
                    .product(
                        Plan.Product.builder()
                            .id("id")
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .name("name")
                            .build()
                    )
                    .status(Plan.Status.ACTIVE)
                    .trialConfig(
                        Plan.TrialConfig.builder()
                            .trialPeriod(0L)
                            .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                            .build()
                    )
                    .version(0L)
                    .build()
            )
        assertThat(planListPageResponse.paginationMetadata())
            .isEqualTo(PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build())
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val planListPageResponse =
            PlanListPageResponse.builder()
                .addData(
                    Plan.builder()
                        .id("id")
                        .addAdjustment(
                            Plan.Adjustment.UsageDiscount.builder()
                                .id("id")
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Plan.Adjustment.UsageDiscount.Filter.builder()
                                        .field(Plan.Adjustment.UsageDiscount.Filter.Field.PRICE_ID)
                                        .operator(
                                            Plan.Adjustment.UsageDiscount.Filter.Operator.INCLUDES
                                        )
                                        .addValue("string")
                                        .build()
                                )
                                .isInvoiceLevel(true)
                                .planPhaseOrder(0L)
                                .reason("reason")
                                .usageDiscount(0.0)
                                .build()
                        )
                        .basePlan(
                            Plan.BasePlan.builder()
                                .id("m2t5akQeh2obwxeU")
                                .externalPlanId("m2t5akQeh2obwxeU")
                                .name("Example plan")
                                .build()
                        )
                        .basePlanId("base_plan_id")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currency("currency")
                        .defaultInvoiceMemo("default_invoice_memo")
                        .description("description")
                        .discount(
                            PercentageDiscount.builder()
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .addFilter(
                                    PercentageDiscount.Filter.builder()
                                        .field(PercentageDiscount.Filter.Field.PRICE_ID)
                                        .operator(PercentageDiscount.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .reason("reason")
                                .build()
                        )
                        .externalPlanId("external_plan_id")
                        .invoicingCurrency("invoicing_currency")
                        .maximum(
                            Plan.Maximum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Plan.Maximum.Filter.builder()
                                        .field(Plan.Maximum.Filter.Field.PRICE_ID)
                                        .operator(Plan.Maximum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Plan.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Plan.Minimum.builder()
                                .addAppliesToPriceId("string")
                                .addFilter(
                                    Plan.Minimum.Filter.builder()
                                        .field(Plan.Minimum.Filter.Field.PRICE_ID)
                                        .operator(Plan.Minimum.Filter.Operator.INCLUDES)
                                        .addValue("string")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .netTerms(0L)
                        .addPlanPhase(
                            Plan.PlanPhase.builder()
                                .id("id")
                                .description("description")
                                .discount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .addFilter(
                                            PercentageDiscount.Filter.builder()
                                                .field(PercentageDiscount.Filter.Field.PRICE_ID)
                                                .operator(
                                                    PercentageDiscount.Filter.Operator.INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .duration(0L)
                                .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                .maximum(
                                    Plan.PlanPhase.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Plan.PlanPhase.Maximum.Filter.builder()
                                                .field(Plan.PlanPhase.Maximum.Filter.Field.PRICE_ID)
                                                .operator(
                                                    Plan.PlanPhase.Maximum.Filter.Operator.INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .minimum(
                                    Plan.PlanPhase.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Plan.PlanPhase.Minimum.Filter.builder()
                                                .field(Plan.PlanPhase.Minimum.Filter.Field.PRICE_ID)
                                                .operator(
                                                    Plan.PlanPhase.Minimum.Filter.Operator.INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .order(0L)
                                .build()
                        )
                        .addPrice(
                            Price.Unit.builder()
                                .id("id")
                                .billableMetric(
                                    Price.Unit.BillableMetric.builder().id("id").build()
                                )
                                .billingCycleConfiguration(
                                    Price.Unit.BillingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.BillingCycleConfiguration.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .cadence(Price.Unit.Cadence.ONE_TIME)
                                .conversionRate(0.0)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    Price.Unit.CreditAllocation.builder()
                                        .allowsRollover(true)
                                        .currency("currency")
                                        .customExpiration(
                                            Price.Unit.CreditAllocation.CustomExpiration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.Unit.CreditAllocation.CustomExpiration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .currency("currency")
                                .discount(
                                    PercentageDiscount.builder()
                                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                        .percentageDiscount(0.15)
                                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                        .addFilter(
                                            PercentageDiscount.Filter.builder()
                                                .field(PercentageDiscount.Filter.Field.PRICE_ID)
                                                .operator(
                                                    PercentageDiscount.Filter.Operator.INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .reason("reason")
                                        .build()
                                )
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoicingCycleConfiguration(
                                    Price.Unit.InvoicingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.Unit.InvoicingCycleConfiguration.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .item(Price.Unit.Item.builder().id("id").name("name").build())
                                .maximum(
                                    Price.Unit.Maximum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Price.Unit.Maximum.Filter.builder()
                                                .field(Price.Unit.Maximum.Filter.Field.PRICE_ID)
                                                .operator(
                                                    Price.Unit.Maximum.Filter.Operator.INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    Price.Unit.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Price.Unit.Minimum.builder()
                                        .addAppliesToPriceId("string")
                                        .addFilter(
                                            Price.Unit.Minimum.Filter.builder()
                                                .field(Price.Unit.Minimum.Filter.Field.PRICE_ID)
                                                .operator(
                                                    Price.Unit.Minimum.Filter.Operator.INCLUDES
                                                )
                                                .addValue("string")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .planPhaseOrder(0L)
                                .priceType(Price.Unit.PriceType.USAGE_PRICE)
                                .unitConfig(
                                    Price.Unit.UnitConfig.builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .dimensionalPriceConfiguration(
                                    Price.Unit.DimensionalPriceConfiguration.builder()
                                        .addDimensionValue("string")
                                        .dimensionalPriceGroupId("dimensional_price_group_id")
                                        .build()
                                )
                                .build()
                        )
                        .product(
                            Plan.Product.builder()
                                .id("id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .name("name")
                                .build()
                        )
                        .status(Plan.Status.ACTIVE)
                        .trialConfig(
                            Plan.TrialConfig.builder()
                                .trialPeriod(0L)
                                .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                                .build()
                        )
                        .version(0L)
                        .build()
                )
                .paginationMetadata(
                    PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build()
                )
                .build()

        val roundtrippedPlanListPageResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(planListPageResponse),
                jacksonTypeRef<PlanListPageResponse>(),
            )

        assertThat(roundtrippedPlanListPageResponse).isEqualTo(planListPageResponse)
    }
}
