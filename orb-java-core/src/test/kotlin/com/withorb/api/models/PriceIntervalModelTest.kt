// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.withorb.api.core.JsonValue
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class PriceIntervalModelTest {

    @Test
    fun createPriceIntervalModel() {
        val priceIntervalModel =
            PriceIntervalModel.builder()
                .id("id")
                .billingCycleDay(0L)
                .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .filter("filter")
                .addFixedFeeQuantityTransition(
                    PriceIntervalModel.FixedFeeQuantityTransition.builder()
                        .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .priceId("price_id")
                        .quantity(0L)
                        .build()
                )
                .price(
                    PriceModel.UnitPrice.builder()
                        .id("id")
                        .billableMetric(BillableMetricTinyModel.builder().id("id").build())
                        .billingCycleConfiguration(
                            BillingCycleConfigurationModel.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(PriceModel.UnitPrice.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            AllocationModel.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            BillingCycleConfigurationModel.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                .build()
                        )
                        .item(ItemSlimModel.builder().id("id").name("name").build())
                        .maximum(
                            MaximumModel.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            PriceModel.UnitPrice.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            MinimumModel.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .modelType(PriceModel.UnitPrice.ModelType.UNIT)
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(PriceModel.UnitPrice.PriceType.USAGE_PRICE)
                        .unitConfig(UnitConfigModel.builder().unitAmount("unit_amount").build())
                        .dimensionalPriceConfiguration(
                            DimensionalPriceConfigurationModel.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .addUsageCustomerId("string")
                .build()
        assertThat(priceIntervalModel).isNotNull
        assertThat(priceIntervalModel.id()).isEqualTo("id")
        assertThat(priceIntervalModel.billingCycleDay()).isEqualTo(0L)
        assertThat(priceIntervalModel.currentBillingPeriodEndDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(priceIntervalModel.currentBillingPeriodStartDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(priceIntervalModel.endDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(priceIntervalModel.filter()).contains("filter")
        assertThat(priceIntervalModel.fixedFeeQuantityTransitions().get())
            .containsExactly(
                PriceIntervalModel.FixedFeeQuantityTransition.builder()
                    .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .priceId("price_id")
                    .quantity(0L)
                    .build()
            )
        assertThat(priceIntervalModel.price())
            .isEqualTo(
                PriceModel.ofUnitPrice(
                    PriceModel.UnitPrice.builder()
                        .id("id")
                        .billableMetric(BillableMetricTinyModel.builder().id("id").build())
                        .billingCycleConfiguration(
                            BillingCycleConfigurationModel.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(PriceModel.UnitPrice.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            AllocationModel.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            BillingCycleConfigurationModel.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                .build()
                        )
                        .item(ItemSlimModel.builder().id("id").name("name").build())
                        .maximum(
                            MaximumModel.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            PriceModel.UnitPrice.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            MinimumModel.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .modelType(PriceModel.UnitPrice.ModelType.UNIT)
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(PriceModel.UnitPrice.PriceType.USAGE_PRICE)
                        .unitConfig(UnitConfigModel.builder().unitAmount("unit_amount").build())
                        .dimensionalPriceConfiguration(
                            DimensionalPriceConfigurationModel.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
            )
        assertThat(priceIntervalModel.startDate())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(priceIntervalModel.usageCustomerIds().get()).containsExactly("string")
    }
}
