// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class CreditNoteListPageResponseTest {

    @Test
    fun create() {
        val creditNoteListPageResponse =
            CreditNoteListPageResponse.builder()
                .addData(
                    CreditNote.builder()
                        .id("id")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditNoteNumber("credit_note_number")
                        .creditNotePdf("credit_note_pdf")
                        .customer(
                            CreditNote.Customer.builder()
                                .id("id")
                                .externalCustomerId("external_customer_id")
                                .build()
                        )
                        .invoiceId("invoice_id")
                        .addLineItem(
                            CreditNote.LineItem.builder()
                                .id("id")
                                .amount("amount")
                                .itemId("item_id")
                                .name("name")
                                .quantity(0.0)
                                .subtotal("subtotal")
                                .addTaxAmount(
                                    CreditNote.LineItem.TaxAmount.builder()
                                        .amount("amount")
                                        .taxRateDescription("tax_rate_description")
                                        .taxRatePercentage("tax_rate_percentage")
                                        .build()
                                )
                                .addDiscount(
                                    CreditNote.LineItem.Discount.builder()
                                        .id("id")
                                        .amountApplied("amount_applied")
                                        .addAppliesToPriceId("string")
                                        .discountType(
                                            CreditNote.LineItem.Discount.DiscountType.PERCENTAGE
                                        )
                                        .percentageDiscount(0.0)
                                        .amountDiscount("amount_discount")
                                        .reason("reason")
                                        .build()
                                )
                                .build()
                        )
                        .maximumAmountAdjustment(
                            CreditNote.MaximumAmountAdjustment.builder()
                                .amountApplied("amount_applied")
                                .discountType(
                                    CreditNote.MaximumAmountAdjustment.DiscountType.PERCENTAGE
                                )
                                .percentageDiscount(0.0)
                                .addAppliesToPrice(
                                    CreditNote.MaximumAmountAdjustment.AppliesToPrice.builder()
                                        .id("id")
                                        .name("name")
                                        .build()
                                )
                                .reason("reason")
                                .build()
                        )
                        .memo("memo")
                        .minimumAmountRefunded("minimum_amount_refunded")
                        .reason(CreditNote.Reason.DUPLICATE)
                        .subtotal("subtotal")
                        .total("total")
                        .type(CreditNote.Type.REFUND)
                        .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addDiscount(
                            CreditNote.Discount.builder()
                                .amountApplied("amount_applied")
                                .discountType(CreditNote.Discount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.0)
                                .addAppliesToPrice(
                                    CreditNote.Discount.AppliesToPrice.builder()
                                        .id("id")
                                        .name("name")
                                        .build()
                                )
                                .reason("reason")
                                .build()
                        )
                        .build()
                )
                .paginationMetadata(
                    PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build()
                )
                .build()

        assertThat(creditNoteListPageResponse.data())
            .containsExactly(
                CreditNote.builder()
                    .id("id")
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .creditNoteNumber("credit_note_number")
                    .creditNotePdf("credit_note_pdf")
                    .customer(
                        CreditNote.Customer.builder()
                            .id("id")
                            .externalCustomerId("external_customer_id")
                            .build()
                    )
                    .invoiceId("invoice_id")
                    .addLineItem(
                        CreditNote.LineItem.builder()
                            .id("id")
                            .amount("amount")
                            .itemId("item_id")
                            .name("name")
                            .quantity(0.0)
                            .subtotal("subtotal")
                            .addTaxAmount(
                                CreditNote.LineItem.TaxAmount.builder()
                                    .amount("amount")
                                    .taxRateDescription("tax_rate_description")
                                    .taxRatePercentage("tax_rate_percentage")
                                    .build()
                            )
                            .addDiscount(
                                CreditNote.LineItem.Discount.builder()
                                    .id("id")
                                    .amountApplied("amount_applied")
                                    .addAppliesToPriceId("string")
                                    .discountType(
                                        CreditNote.LineItem.Discount.DiscountType.PERCENTAGE
                                    )
                                    .percentageDiscount(0.0)
                                    .amountDiscount("amount_discount")
                                    .reason("reason")
                                    .build()
                            )
                            .build()
                    )
                    .maximumAmountAdjustment(
                        CreditNote.MaximumAmountAdjustment.builder()
                            .amountApplied("amount_applied")
                            .discountType(
                                CreditNote.MaximumAmountAdjustment.DiscountType.PERCENTAGE
                            )
                            .percentageDiscount(0.0)
                            .addAppliesToPrice(
                                CreditNote.MaximumAmountAdjustment.AppliesToPrice.builder()
                                    .id("id")
                                    .name("name")
                                    .build()
                            )
                            .reason("reason")
                            .build()
                    )
                    .memo("memo")
                    .minimumAmountRefunded("minimum_amount_refunded")
                    .reason(CreditNote.Reason.DUPLICATE)
                    .subtotal("subtotal")
                    .total("total")
                    .type(CreditNote.Type.REFUND)
                    .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .addDiscount(
                        CreditNote.Discount.builder()
                            .amountApplied("amount_applied")
                            .discountType(CreditNote.Discount.DiscountType.PERCENTAGE)
                            .percentageDiscount(0.0)
                            .addAppliesToPrice(
                                CreditNote.Discount.AppliesToPrice.builder()
                                    .id("id")
                                    .name("name")
                                    .build()
                            )
                            .reason("reason")
                            .build()
                    )
                    .build()
            )
        assertThat(creditNoteListPageResponse.paginationMetadata())
            .isEqualTo(PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build())
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val creditNoteListPageResponse =
            CreditNoteListPageResponse.builder()
                .addData(
                    CreditNote.builder()
                        .id("id")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditNoteNumber("credit_note_number")
                        .creditNotePdf("credit_note_pdf")
                        .customer(
                            CreditNote.Customer.builder()
                                .id("id")
                                .externalCustomerId("external_customer_id")
                                .build()
                        )
                        .invoiceId("invoice_id")
                        .addLineItem(
                            CreditNote.LineItem.builder()
                                .id("id")
                                .amount("amount")
                                .itemId("item_id")
                                .name("name")
                                .quantity(0.0)
                                .subtotal("subtotal")
                                .addTaxAmount(
                                    CreditNote.LineItem.TaxAmount.builder()
                                        .amount("amount")
                                        .taxRateDescription("tax_rate_description")
                                        .taxRatePercentage("tax_rate_percentage")
                                        .build()
                                )
                                .addDiscount(
                                    CreditNote.LineItem.Discount.builder()
                                        .id("id")
                                        .amountApplied("amount_applied")
                                        .addAppliesToPriceId("string")
                                        .discountType(
                                            CreditNote.LineItem.Discount.DiscountType.PERCENTAGE
                                        )
                                        .percentageDiscount(0.0)
                                        .amountDiscount("amount_discount")
                                        .reason("reason")
                                        .build()
                                )
                                .build()
                        )
                        .maximumAmountAdjustment(
                            CreditNote.MaximumAmountAdjustment.builder()
                                .amountApplied("amount_applied")
                                .discountType(
                                    CreditNote.MaximumAmountAdjustment.DiscountType.PERCENTAGE
                                )
                                .percentageDiscount(0.0)
                                .addAppliesToPrice(
                                    CreditNote.MaximumAmountAdjustment.AppliesToPrice.builder()
                                        .id("id")
                                        .name("name")
                                        .build()
                                )
                                .reason("reason")
                                .build()
                        )
                        .memo("memo")
                        .minimumAmountRefunded("minimum_amount_refunded")
                        .reason(CreditNote.Reason.DUPLICATE)
                        .subtotal("subtotal")
                        .total("total")
                        .type(CreditNote.Type.REFUND)
                        .voidedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addDiscount(
                            CreditNote.Discount.builder()
                                .amountApplied("amount_applied")
                                .discountType(CreditNote.Discount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.0)
                                .addAppliesToPrice(
                                    CreditNote.Discount.AppliesToPrice.builder()
                                        .id("id")
                                        .name("name")
                                        .build()
                                )
                                .reason("reason")
                                .build()
                        )
                        .build()
                )
                .paginationMetadata(
                    PaginationMetadata.builder().hasMore(true).nextCursor("next_cursor").build()
                )
                .build()

        val roundtrippedCreditNoteListPageResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(creditNoteListPageResponse),
                jacksonTypeRef<CreditNoteListPageResponse>(),
            )

        assertThat(roundtrippedCreditNoteListPageResponse).isEqualTo(creditNoteListPageResponse)
    }
}
