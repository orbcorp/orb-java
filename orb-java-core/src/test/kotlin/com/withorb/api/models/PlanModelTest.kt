// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.withorb.api.core.JsonValue
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class PlanModelTest {

    @Test
    fun createPlanModel() {
        val planModel =
            PlanModel.builder()
                .id("id")
                .addAdjustment(
                    AdjustmentModel.PlanPhaseUsageDiscountAdjustment.builder()
                        .id("id")
                        .adjustmentType(
                            AdjustmentModel.PlanPhaseUsageDiscountAdjustment.AdjustmentType
                                .USAGE_DISCOUNT
                        )
                        .addAppliesToPriceId("string")
                        .isInvoiceLevel(true)
                        .planPhaseOrder(0L)
                        .reason("reason")
                        .usageDiscount(0.0)
                        .build()
                )
                .basePlan(
                    PlanMinifiedModel.builder()
                        .id("m2t5akQeh2obwxeU")
                        .externalPlanId("m2t5akQeh2obwxeU")
                        .name("Example plan")
                        .build()
                )
                .basePlanId("base_plan_id")
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency("currency")
                .defaultInvoiceMemo("default_invoice_memo")
                .description("description")
                .discount(
                    PercentageDiscount.builder()
                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(0.15)
                        .reason("reason")
                        .build()
                )
                .externalPlanId("external_plan_id")
                .invoicingCurrency("invoicing_currency")
                .maximum(
                    MaximumModel.builder()
                        .addAppliesToPriceId("string")
                        .maximumAmount("maximum_amount")
                        .build()
                )
                .maximumAmount("maximum_amount")
                .metadata(
                    PlanModel.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .minimum(
                    MinimumModel.builder()
                        .addAppliesToPriceId("string")
                        .minimumAmount("minimum_amount")
                        .build()
                )
                .minimumAmount("minimum_amount")
                .name("name")
                .netTerms(0L)
                .addPlanPhase(
                    PlanModel.PlanPhase.builder()
                        .id("id")
                        .description("description")
                        .discount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .duration(0L)
                        .durationUnit(PlanModel.PlanPhase.DurationUnit.DAILY)
                        .maximum(
                            MaximumModel.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .minimum(
                            MinimumModel.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .order(0L)
                        .build()
                )
                .addPrice(
                    PriceModel.UnitPrice.builder()
                        .id("id")
                        .billableMetric(BillableMetricTinyModel.builder().id("id").build())
                        .billingCycleConfiguration(
                            BillingCycleConfigurationModel.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(PriceModel.UnitPrice.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            AllocationModel.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            BillingCycleConfigurationModel.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                .build()
                        )
                        .item(ItemSlimModel.builder().id("id").name("name").build())
                        .maximum(
                            MaximumModel.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            PriceModel.UnitPrice.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            MinimumModel.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .modelType(PriceModel.UnitPrice.ModelType.UNIT)
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(PriceModel.UnitPrice.PriceType.USAGE_PRICE)
                        .unitConfig(UnitConfigModel.builder().unitAmount("unit_amount").build())
                        .dimensionalPriceConfiguration(
                            DimensionalPriceConfigurationModel.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
                .product(
                    PlanModel.Product.builder()
                        .id("id")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .name("name")
                        .build()
                )
                .status(PlanModel.Status.ACTIVE)
                .trialConfig(
                    PlanModel.TrialConfig.builder()
                        .trialPeriod(0L)
                        .trialPeriodUnit(PlanModel.TrialConfig.TrialPeriodUnit.DAYS)
                        .build()
                )
                .version(0L)
                .build()
        assertThat(planModel).isNotNull
        assertThat(planModel.id()).isEqualTo("id")
        assertThat(planModel.adjustments())
            .containsExactly(
                AdjustmentModel.ofPlanPhaseUsageDiscountAdjustment(
                    AdjustmentModel.PlanPhaseUsageDiscountAdjustment.builder()
                        .id("id")
                        .adjustmentType(
                            AdjustmentModel.PlanPhaseUsageDiscountAdjustment.AdjustmentType
                                .USAGE_DISCOUNT
                        )
                        .addAppliesToPriceId("string")
                        .isInvoiceLevel(true)
                        .planPhaseOrder(0L)
                        .reason("reason")
                        .usageDiscount(0.0)
                        .build()
                )
            )
        assertThat(planModel.basePlan())
            .contains(
                PlanMinifiedModel.builder()
                    .id("m2t5akQeh2obwxeU")
                    .externalPlanId("m2t5akQeh2obwxeU")
                    .name("Example plan")
                    .build()
            )
        assertThat(planModel.basePlanId()).contains("base_plan_id")
        assertThat(planModel.createdAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(planModel.currency()).isEqualTo("currency")
        assertThat(planModel.defaultInvoiceMemo()).contains("default_invoice_memo")
        assertThat(planModel.description()).isEqualTo("description")
        assertThat(planModel.discount())
            .contains(
                Discount.ofPercentage(
                    PercentageDiscount.builder()
                        .addAppliesToPriceId("h74gfhdjvn7ujokd")
                        .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                        .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                        .percentageDiscount(0.15)
                        .reason("reason")
                        .build()
                )
            )
        assertThat(planModel.externalPlanId()).contains("external_plan_id")
        assertThat(planModel.invoicingCurrency()).isEqualTo("invoicing_currency")
        assertThat(planModel.maximum())
            .contains(
                MaximumModel.builder()
                    .addAppliesToPriceId("string")
                    .maximumAmount("maximum_amount")
                    .build()
            )
        assertThat(planModel.maximumAmount()).contains("maximum_amount")
        assertThat(planModel.metadata())
            .isEqualTo(
                PlanModel.Metadata.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
        assertThat(planModel.minimum())
            .contains(
                MinimumModel.builder()
                    .addAppliesToPriceId("string")
                    .minimumAmount("minimum_amount")
                    .build()
            )
        assertThat(planModel.minimumAmount()).contains("minimum_amount")
        assertThat(planModel.name()).isEqualTo("name")
        assertThat(planModel.netTerms()).contains(0L)
        assertThat(planModel.planPhases().get())
            .containsExactly(
                PlanModel.PlanPhase.builder()
                    .id("id")
                    .description("description")
                    .discount(
                        PercentageDiscount.builder()
                            .addAppliesToPriceId("h74gfhdjvn7ujokd")
                            .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                            .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                            .percentageDiscount(0.15)
                            .reason("reason")
                            .build()
                    )
                    .duration(0L)
                    .durationUnit(PlanModel.PlanPhase.DurationUnit.DAILY)
                    .maximum(
                        MaximumModel.builder()
                            .addAppliesToPriceId("string")
                            .maximumAmount("maximum_amount")
                            .build()
                    )
                    .maximumAmount("maximum_amount")
                    .minimum(
                        MinimumModel.builder()
                            .addAppliesToPriceId("string")
                            .minimumAmount("minimum_amount")
                            .build()
                    )
                    .minimumAmount("minimum_amount")
                    .name("name")
                    .order(0L)
                    .build()
            )
        assertThat(planModel.prices())
            .containsExactly(
                PriceModel.ofUnitPrice(
                    PriceModel.UnitPrice.builder()
                        .id("id")
                        .billableMetric(BillableMetricTinyModel.builder().id("id").build())
                        .billingCycleConfiguration(
                            BillingCycleConfigurationModel.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                .build()
                        )
                        .cadence(PriceModel.UnitPrice.Cadence.ONE_TIME)
                        .conversionRate(0.0)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .creditAllocation(
                            AllocationModel.builder()
                                .allowsRollover(true)
                                .currency("currency")
                                .build()
                        )
                        .currency("currency")
                        .discount(
                            PercentageDiscount.builder()
                                .addAppliesToPriceId("h74gfhdjvn7ujokd")
                                .addAppliesToPriceId("7hfgtgjnbvc3ujkl")
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(0.0)
                        .invoicingCycleConfiguration(
                            BillingCycleConfigurationModel.builder()
                                .duration(0L)
                                .durationUnit(BillingCycleConfigurationModel.DurationUnit.DAY)
                                .build()
                        )
                        .item(ItemSlimModel.builder().id("id").name("name").build())
                        .maximum(
                            MaximumModel.builder()
                                .addAppliesToPriceId("string")
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            PriceModel.UnitPrice.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            MinimumModel.builder()
                                .addAppliesToPriceId("string")
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .modelType(PriceModel.UnitPrice.ModelType.UNIT)
                        .name("name")
                        .planPhaseOrder(0L)
                        .priceType(PriceModel.UnitPrice.PriceType.USAGE_PRICE)
                        .unitConfig(UnitConfigModel.builder().unitAmount("unit_amount").build())
                        .dimensionalPriceConfiguration(
                            DimensionalPriceConfigurationModel.builder()
                                .addDimensionValue("string")
                                .dimensionalPriceGroupId("dimensional_price_group_id")
                                .build()
                        )
                        .build()
                )
            )
        assertThat(planModel.product())
            .isEqualTo(
                PlanModel.Product.builder()
                    .id("id")
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .name("name")
                    .build()
            )
        assertThat(planModel.status()).isEqualTo(PlanModel.Status.ACTIVE)
        assertThat(planModel.trialConfig())
            .isEqualTo(
                PlanModel.TrialConfig.builder()
                    .trialPeriod(0L)
                    .trialPeriodUnit(PlanModel.TrialConfig.TrialPeriodUnit.DAYS)
                    .build()
            )
        assertThat(planModel.version()).isEqualTo(0L)
    }
}
