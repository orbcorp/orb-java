// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.withorb.api.core.JsonValue
import java.time.OffsetDateTime
import kotlin.test.assertNotNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class SubscriptionSchedulePlanChangeParamsTest {

    @Test
    fun create() {
        SubscriptionSchedulePlanChangeParams.builder()
            .subscriptionId("subscription_id")
            .changeOption(SubscriptionSchedulePlanChangeParams.ChangeOption.REQUESTED_DATE)
            .addAddAdjustment(
                AddSubscriptionAdjustmentParams.builder()
                    .adjustment(
                        NewAdjustmentModel.NewPercentageDiscount.builder()
                            .adjustmentType(
                                NewAdjustmentModel.NewPercentageDiscount.AdjustmentType
                                    .PERCENTAGE_DISCOUNT
                            )
                            .addAppliesToPriceId("price_1")
                            .addAppliesToPriceId("price_2")
                            .percentageDiscount(0.0)
                            .isInvoiceLevel(true)
                            .build()
                    )
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .planPhaseOrder(0L)
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
            .addAddPrice(
                AddSubscriptionPriceParams.builder()
                    .allocationPrice(
                        NewAllocationPriceModel.builder()
                            .amount("10.00")
                            .cadence(NewAllocationPriceModel.Cadence.ONE_TIME)
                            .currency("USD")
                            .expiresAtEndOfCadence(true)
                            .build()
                    )
                    .addDiscount(
                        DiscountOverrideModel.builder()
                            .discountType(DiscountOverrideModel.DiscountType.PERCENTAGE)
                            .amountDiscount("amount_discount")
                            .percentageDiscount(0.15)
                            .usageDiscount(0.0)
                            .build()
                    )
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .externalPriceId("external_price_id")
                    .maximumAmount("1.23")
                    .minimumAmount("1.23")
                    .planPhaseOrder(0L)
                    .price(
                        NewSubscriptionPriceModel.NewSubscriptionUnitPrice.builder()
                            .cadence(
                                NewSubscriptionPriceModel.NewSubscriptionUnitPrice.Cadence.ANNUAL
                            )
                            .itemId("item_id")
                            .modelType(
                                NewSubscriptionPriceModel.NewSubscriptionUnitPrice.ModelType.UNIT
                            )
                            .name("Annual fee")
                            .unitConfig(UnitConfigModel.builder().unitAmount("unit_amount").build())
                            .billableMetricId("billable_metric_id")
                            .billedInAdvance(true)
                            .billingCycleConfiguration(
                                NewBillingCycleConfigurationModel.builder()
                                    .duration(0L)
                                    .durationUnit(
                                        NewBillingCycleConfigurationModel.DurationUnit.DAY
                                    )
                                    .build()
                            )
                            .conversionRate(0.0)
                            .currency("currency")
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoiceGroupingKey("invoice_grouping_key")
                            .invoicingCycleConfiguration(
                                NewBillingCycleConfigurationModel.builder()
                                    .duration(0L)
                                    .durationUnit(
                                        NewBillingCycleConfigurationModel.DurationUnit.DAY
                                    )
                                    .build()
                            )
                            .metadata(
                                NewSubscriptionPriceModel.NewSubscriptionUnitPrice.Metadata
                                    .builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .referenceId("reference_id")
                            .build()
                    )
                    .priceId("h74gfhdjvn7ujokd")
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
            .alignBillingWithPlanChangeDate(true)
            .autoCollection(true)
            .billingCycleAlignment(
                SubscriptionSchedulePlanChangeParams.BillingCycleAlignment.UNCHANGED
            )
            .billingCycleAnchorConfiguration(
                BillingCycleAnchorConfigurationModel.builder().day(1L).month(1L).year(0L).build()
            )
            .changeDate(OffsetDateTime.parse("2017-07-21T17:32:28Z"))
            .couponRedemptionCode("coupon_redemption_code")
            .creditsOverageRate(0.0)
            .defaultInvoiceMemo("default_invoice_memo")
            .externalPlanId("ZMwNQefe7J3ecf7W")
            .filter("my_property > 100 AND my_other_property = 'bar'")
            .initialPhaseOrder(2L)
            .invoicingThreshold("10.00")
            .netTerms(0L)
            .perCreditOverageAmount(0.0)
            .planId("ZMwNQefe7J3ecf7W")
            .planVersionNumber(0L)
            .addPriceOverride(JsonValue.from(mapOf<String, Any>()))
            .addRemoveAdjustment(
                RemoveSubscriptionAdjustmentParams.builder()
                    .adjustmentId("h74gfhdjvn7ujokd")
                    .build()
            )
            .addRemovePrice(
                RemoveSubscriptionPriceParams.builder()
                    .externalPriceId("external_price_id")
                    .priceId("h74gfhdjvn7ujokd")
                    .build()
            )
            .addReplaceAdjustment(
                ReplaceSubscriptionAdjustmentParams.builder()
                    .adjustment(
                        NewAdjustmentModel.NewPercentageDiscount.builder()
                            .adjustmentType(
                                NewAdjustmentModel.NewPercentageDiscount.AdjustmentType
                                    .PERCENTAGE_DISCOUNT
                            )
                            .addAppliesToPriceId("price_1")
                            .addAppliesToPriceId("price_2")
                            .percentageDiscount(0.0)
                            .isInvoiceLevel(true)
                            .build()
                    )
                    .replacesAdjustmentId("replaces_adjustment_id")
                    .build()
            )
            .addReplacePrice(
                ReplaceSubscriptionPriceParams.builder()
                    .replacesPriceId("replaces_price_id")
                    .allocationPrice(
                        NewAllocationPriceModel.builder()
                            .amount("10.00")
                            .cadence(NewAllocationPriceModel.Cadence.ONE_TIME)
                            .currency("USD")
                            .expiresAtEndOfCadence(true)
                            .build()
                    )
                    .addDiscount(
                        DiscountOverrideModel.builder()
                            .discountType(DiscountOverrideModel.DiscountType.PERCENTAGE)
                            .amountDiscount("amount_discount")
                            .percentageDiscount(0.15)
                            .usageDiscount(0.0)
                            .build()
                    )
                    .externalPriceId("external_price_id")
                    .fixedPriceQuantity(2.0)
                    .maximumAmount("1.23")
                    .minimumAmount("1.23")
                    .price(
                        NewSubscriptionPriceModel.NewSubscriptionUnitPrice.builder()
                            .cadence(
                                NewSubscriptionPriceModel.NewSubscriptionUnitPrice.Cadence.ANNUAL
                            )
                            .itemId("item_id")
                            .modelType(
                                NewSubscriptionPriceModel.NewSubscriptionUnitPrice.ModelType.UNIT
                            )
                            .name("Annual fee")
                            .unitConfig(UnitConfigModel.builder().unitAmount("unit_amount").build())
                            .billableMetricId("billable_metric_id")
                            .billedInAdvance(true)
                            .billingCycleConfiguration(
                                NewBillingCycleConfigurationModel.builder()
                                    .duration(0L)
                                    .durationUnit(
                                        NewBillingCycleConfigurationModel.DurationUnit.DAY
                                    )
                                    .build()
                            )
                            .conversionRate(0.0)
                            .currency("currency")
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoiceGroupingKey("invoice_grouping_key")
                            .invoicingCycleConfiguration(
                                NewBillingCycleConfigurationModel.builder()
                                    .duration(0L)
                                    .durationUnit(
                                        NewBillingCycleConfigurationModel.DurationUnit.DAY
                                    )
                                    .build()
                            )
                            .metadata(
                                NewSubscriptionPriceModel.NewSubscriptionUnitPrice.Metadata
                                    .builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .referenceId("reference_id")
                            .build()
                    )
                    .priceId("h74gfhdjvn7ujokd")
                    .build()
            )
            .trialDurationDays(999999L)
            .addUsageCustomerId("string")
            .build()
    }

    @Test
    fun body() {
        val params =
            SubscriptionSchedulePlanChangeParams.builder()
                .subscriptionId("subscription_id")
                .changeOption(SubscriptionSchedulePlanChangeParams.ChangeOption.REQUESTED_DATE)
                .addAddAdjustment(
                    AddSubscriptionAdjustmentParams.builder()
                        .adjustment(
                            NewAdjustmentModel.NewPercentageDiscount.builder()
                                .adjustmentType(
                                    NewAdjustmentModel.NewPercentageDiscount.AdjustmentType
                                        .PERCENTAGE_DISCOUNT
                                )
                                .addAppliesToPriceId("price_1")
                                .addAppliesToPriceId("price_2")
                                .percentageDiscount(0.0)
                                .isInvoiceLevel(true)
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .planPhaseOrder(0L)
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .addAddPrice(
                    AddSubscriptionPriceParams.builder()
                        .allocationPrice(
                            NewAllocationPriceModel.builder()
                                .amount("10.00")
                                .cadence(NewAllocationPriceModel.Cadence.ONE_TIME)
                                .currency("USD")
                                .expiresAtEndOfCadence(true)
                                .build()
                        )
                        .addDiscount(
                            DiscountOverrideModel.builder()
                                .discountType(DiscountOverrideModel.DiscountType.PERCENTAGE)
                                .amountDiscount("amount_discount")
                                .percentageDiscount(0.15)
                                .usageDiscount(0.0)
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .externalPriceId("external_price_id")
                        .maximumAmount("1.23")
                        .minimumAmount("1.23")
                        .planPhaseOrder(0L)
                        .price(
                            NewSubscriptionPriceModel.NewSubscriptionUnitPrice.builder()
                                .cadence(
                                    NewSubscriptionPriceModel.NewSubscriptionUnitPrice.Cadence
                                        .ANNUAL
                                )
                                .itemId("item_id")
                                .modelType(
                                    NewSubscriptionPriceModel.NewSubscriptionUnitPrice.ModelType
                                        .UNIT
                                )
                                .name("Annual fee")
                                .unitConfig(
                                    UnitConfigModel.builder().unitAmount("unit_amount").build()
                                )
                                .billableMetricId("billable_metric_id")
                                .billedInAdvance(true)
                                .billingCycleConfiguration(
                                    NewBillingCycleConfigurationModel.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            NewBillingCycleConfigurationModel.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .conversionRate(0.0)
                                .currency("currency")
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoiceGroupingKey("invoice_grouping_key")
                                .invoicingCycleConfiguration(
                                    NewBillingCycleConfigurationModel.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            NewBillingCycleConfigurationModel.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .metadata(
                                    NewSubscriptionPriceModel.NewSubscriptionUnitPrice.Metadata
                                        .builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .referenceId("reference_id")
                                .build()
                        )
                        .priceId("h74gfhdjvn7ujokd")
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .alignBillingWithPlanChangeDate(true)
                .autoCollection(true)
                .billingCycleAlignment(
                    SubscriptionSchedulePlanChangeParams.BillingCycleAlignment.UNCHANGED
                )
                .billingCycleAnchorConfiguration(
                    BillingCycleAnchorConfigurationModel.builder()
                        .day(1L)
                        .month(1L)
                        .year(0L)
                        .build()
                )
                .changeDate(OffsetDateTime.parse("2017-07-21T17:32:28Z"))
                .couponRedemptionCode("coupon_redemption_code")
                .creditsOverageRate(0.0)
                .defaultInvoiceMemo("default_invoice_memo")
                .externalPlanId("ZMwNQefe7J3ecf7W")
                .filter("my_property > 100 AND my_other_property = 'bar'")
                .initialPhaseOrder(2L)
                .invoicingThreshold("10.00")
                .netTerms(0L)
                .perCreditOverageAmount(0.0)
                .planId("ZMwNQefe7J3ecf7W")
                .planVersionNumber(0L)
                .addPriceOverride(JsonValue.from(mapOf<String, Any>()))
                .addRemoveAdjustment(
                    RemoveSubscriptionAdjustmentParams.builder()
                        .adjustmentId("h74gfhdjvn7ujokd")
                        .build()
                )
                .addRemovePrice(
                    RemoveSubscriptionPriceParams.builder()
                        .externalPriceId("external_price_id")
                        .priceId("h74gfhdjvn7ujokd")
                        .build()
                )
                .addReplaceAdjustment(
                    ReplaceSubscriptionAdjustmentParams.builder()
                        .adjustment(
                            NewAdjustmentModel.NewPercentageDiscount.builder()
                                .adjustmentType(
                                    NewAdjustmentModel.NewPercentageDiscount.AdjustmentType
                                        .PERCENTAGE_DISCOUNT
                                )
                                .addAppliesToPriceId("price_1")
                                .addAppliesToPriceId("price_2")
                                .percentageDiscount(0.0)
                                .isInvoiceLevel(true)
                                .build()
                        )
                        .replacesAdjustmentId("replaces_adjustment_id")
                        .build()
                )
                .addReplacePrice(
                    ReplaceSubscriptionPriceParams.builder()
                        .replacesPriceId("replaces_price_id")
                        .allocationPrice(
                            NewAllocationPriceModel.builder()
                                .amount("10.00")
                                .cadence(NewAllocationPriceModel.Cadence.ONE_TIME)
                                .currency("USD")
                                .expiresAtEndOfCadence(true)
                                .build()
                        )
                        .addDiscount(
                            DiscountOverrideModel.builder()
                                .discountType(DiscountOverrideModel.DiscountType.PERCENTAGE)
                                .amountDiscount("amount_discount")
                                .percentageDiscount(0.15)
                                .usageDiscount(0.0)
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(2.0)
                        .maximumAmount("1.23")
                        .minimumAmount("1.23")
                        .price(
                            NewSubscriptionPriceModel.NewSubscriptionUnitPrice.builder()
                                .cadence(
                                    NewSubscriptionPriceModel.NewSubscriptionUnitPrice.Cadence
                                        .ANNUAL
                                )
                                .itemId("item_id")
                                .modelType(
                                    NewSubscriptionPriceModel.NewSubscriptionUnitPrice.ModelType
                                        .UNIT
                                )
                                .name("Annual fee")
                                .unitConfig(
                                    UnitConfigModel.builder().unitAmount("unit_amount").build()
                                )
                                .billableMetricId("billable_metric_id")
                                .billedInAdvance(true)
                                .billingCycleConfiguration(
                                    NewBillingCycleConfigurationModel.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            NewBillingCycleConfigurationModel.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .conversionRate(0.0)
                                .currency("currency")
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoiceGroupingKey("invoice_grouping_key")
                                .invoicingCycleConfiguration(
                                    NewBillingCycleConfigurationModel.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            NewBillingCycleConfigurationModel.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .metadata(
                                    NewSubscriptionPriceModel.NewSubscriptionUnitPrice.Metadata
                                        .builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .referenceId("reference_id")
                                .build()
                        )
                        .priceId("h74gfhdjvn7ujokd")
                        .build()
                )
                .trialDurationDays(999999L)
                .addUsageCustomerId("string")
                .build()

        val body = params._body()

        assertNotNull(body)
        assertThat(body.changeOption())
            .isEqualTo(SubscriptionSchedulePlanChangeParams.ChangeOption.REQUESTED_DATE)
        assertThat(body.addAdjustments())
            .contains(
                listOf(
                    AddSubscriptionAdjustmentParams.builder()
                        .adjustment(
                            NewAdjustmentModel.NewPercentageDiscount.builder()
                                .adjustmentType(
                                    NewAdjustmentModel.NewPercentageDiscount.AdjustmentType
                                        .PERCENTAGE_DISCOUNT
                                )
                                .addAppliesToPriceId("price_1")
                                .addAppliesToPriceId("price_2")
                                .percentageDiscount(0.0)
                                .isInvoiceLevel(true)
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .planPhaseOrder(0L)
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
            )
        assertThat(body.addPrices())
            .contains(
                listOf(
                    AddSubscriptionPriceParams.builder()
                        .allocationPrice(
                            NewAllocationPriceModel.builder()
                                .amount("10.00")
                                .cadence(NewAllocationPriceModel.Cadence.ONE_TIME)
                                .currency("USD")
                                .expiresAtEndOfCadence(true)
                                .build()
                        )
                        .addDiscount(
                            DiscountOverrideModel.builder()
                                .discountType(DiscountOverrideModel.DiscountType.PERCENTAGE)
                                .amountDiscount("amount_discount")
                                .percentageDiscount(0.15)
                                .usageDiscount(0.0)
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .externalPriceId("external_price_id")
                        .maximumAmount("1.23")
                        .minimumAmount("1.23")
                        .planPhaseOrder(0L)
                        .price(
                            NewSubscriptionPriceModel.NewSubscriptionUnitPrice.builder()
                                .cadence(
                                    NewSubscriptionPriceModel.NewSubscriptionUnitPrice.Cadence
                                        .ANNUAL
                                )
                                .itemId("item_id")
                                .modelType(
                                    NewSubscriptionPriceModel.NewSubscriptionUnitPrice.ModelType
                                        .UNIT
                                )
                                .name("Annual fee")
                                .unitConfig(
                                    UnitConfigModel.builder().unitAmount("unit_amount").build()
                                )
                                .billableMetricId("billable_metric_id")
                                .billedInAdvance(true)
                                .billingCycleConfiguration(
                                    NewBillingCycleConfigurationModel.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            NewBillingCycleConfigurationModel.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .conversionRate(0.0)
                                .currency("currency")
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoiceGroupingKey("invoice_grouping_key")
                                .invoicingCycleConfiguration(
                                    NewBillingCycleConfigurationModel.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            NewBillingCycleConfigurationModel.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .metadata(
                                    NewSubscriptionPriceModel.NewSubscriptionUnitPrice.Metadata
                                        .builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .referenceId("reference_id")
                                .build()
                        )
                        .priceId("h74gfhdjvn7ujokd")
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
            )
        assertThat(body.alignBillingWithPlanChangeDate()).contains(true)
        assertThat(body.autoCollection()).contains(true)
        assertThat(body.billingCycleAlignment())
            .contains(SubscriptionSchedulePlanChangeParams.BillingCycleAlignment.UNCHANGED)
        assertThat(body.billingCycleAnchorConfiguration())
            .contains(
                BillingCycleAnchorConfigurationModel.builder().day(1L).month(1L).year(0L).build()
            )
        assertThat(body.changeDate()).contains(OffsetDateTime.parse("2017-07-21T17:32:28Z"))
        assertThat(body.couponRedemptionCode()).contains("coupon_redemption_code")
        assertThat(body.creditsOverageRate()).contains(0.0)
        assertThat(body.defaultInvoiceMemo()).contains("default_invoice_memo")
        assertThat(body.externalPlanId()).contains("ZMwNQefe7J3ecf7W")
        assertThat(body.filter()).contains("my_property > 100 AND my_other_property = 'bar'")
        assertThat(body.initialPhaseOrder()).contains(2L)
        assertThat(body.invoicingThreshold()).contains("10.00")
        assertThat(body.netTerms()).contains(0L)
        assertThat(body.perCreditOverageAmount()).contains(0.0)
        assertThat(body.planId()).contains("ZMwNQefe7J3ecf7W")
        assertThat(body.planVersionNumber()).contains(0L)
        assertThat(body.priceOverrides()).contains(listOf(JsonValue.from(mapOf<String, Any>())))
        assertThat(body.removeAdjustments())
            .contains(
                listOf(
                    RemoveSubscriptionAdjustmentParams.builder()
                        .adjustmentId("h74gfhdjvn7ujokd")
                        .build()
                )
            )
        assertThat(body.removePrices())
            .contains(
                listOf(
                    RemoveSubscriptionPriceParams.builder()
                        .externalPriceId("external_price_id")
                        .priceId("h74gfhdjvn7ujokd")
                        .build()
                )
            )
        assertThat(body.replaceAdjustments())
            .contains(
                listOf(
                    ReplaceSubscriptionAdjustmentParams.builder()
                        .adjustment(
                            NewAdjustmentModel.NewPercentageDiscount.builder()
                                .adjustmentType(
                                    NewAdjustmentModel.NewPercentageDiscount.AdjustmentType
                                        .PERCENTAGE_DISCOUNT
                                )
                                .addAppliesToPriceId("price_1")
                                .addAppliesToPriceId("price_2")
                                .percentageDiscount(0.0)
                                .isInvoiceLevel(true)
                                .build()
                        )
                        .replacesAdjustmentId("replaces_adjustment_id")
                        .build()
                )
            )
        assertThat(body.replacePrices())
            .contains(
                listOf(
                    ReplaceSubscriptionPriceParams.builder()
                        .replacesPriceId("replaces_price_id")
                        .allocationPrice(
                            NewAllocationPriceModel.builder()
                                .amount("10.00")
                                .cadence(NewAllocationPriceModel.Cadence.ONE_TIME)
                                .currency("USD")
                                .expiresAtEndOfCadence(true)
                                .build()
                        )
                        .addDiscount(
                            DiscountOverrideModel.builder()
                                .discountType(DiscountOverrideModel.DiscountType.PERCENTAGE)
                                .amountDiscount("amount_discount")
                                .percentageDiscount(0.15)
                                .usageDiscount(0.0)
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(2.0)
                        .maximumAmount("1.23")
                        .minimumAmount("1.23")
                        .price(
                            NewSubscriptionPriceModel.NewSubscriptionUnitPrice.builder()
                                .cadence(
                                    NewSubscriptionPriceModel.NewSubscriptionUnitPrice.Cadence
                                        .ANNUAL
                                )
                                .itemId("item_id")
                                .modelType(
                                    NewSubscriptionPriceModel.NewSubscriptionUnitPrice.ModelType
                                        .UNIT
                                )
                                .name("Annual fee")
                                .unitConfig(
                                    UnitConfigModel.builder().unitAmount("unit_amount").build()
                                )
                                .billableMetricId("billable_metric_id")
                                .billedInAdvance(true)
                                .billingCycleConfiguration(
                                    NewBillingCycleConfigurationModel.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            NewBillingCycleConfigurationModel.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .conversionRate(0.0)
                                .currency("currency")
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoiceGroupingKey("invoice_grouping_key")
                                .invoicingCycleConfiguration(
                                    NewBillingCycleConfigurationModel.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            NewBillingCycleConfigurationModel.DurationUnit.DAY
                                        )
                                        .build()
                                )
                                .metadata(
                                    NewSubscriptionPriceModel.NewSubscriptionUnitPrice.Metadata
                                        .builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .referenceId("reference_id")
                                .build()
                        )
                        .priceId("h74gfhdjvn7ujokd")
                        .build()
                )
            )
        assertThat(body.trialDurationDays()).contains(999999L)
        assertThat(body.usageCustomerIds()).contains(listOf("string"))
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            SubscriptionSchedulePlanChangeParams.builder()
                .subscriptionId("subscription_id")
                .changeOption(SubscriptionSchedulePlanChangeParams.ChangeOption.REQUESTED_DATE)
                .build()

        val body = params._body()

        assertNotNull(body)
        assertThat(body.changeOption())
            .isEqualTo(SubscriptionSchedulePlanChangeParams.ChangeOption.REQUESTED_DATE)
    }

    @Test
    fun getPathParam() {
        val params =
            SubscriptionSchedulePlanChangeParams.builder()
                .subscriptionId("subscription_id")
                .changeOption(SubscriptionSchedulePlanChangeParams.ChangeOption.REQUESTED_DATE)
                .build()
        assertThat(params).isNotNull
        // path param "subscriptionId"
        assertThat(params.getPathParam(0)).isEqualTo("subscription_id")
        // out-of-bound path param
        assertThat(params.getPathParam(1)).isEqualTo("")
    }
}
