// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.withorb.api.core.JsonValue
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import kotlin.test.assertNotNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SubscriptionSchedulePlanChangeParamsTest {

    @Test
    fun create() {
        SubscriptionSchedulePlanChangeParams.builder()
            .subscriptionId("subscription_id")
            .changeOption(SubscriptionSchedulePlanChangeParams.ChangeOption.REQUESTED_DATE)
            .addAddAdjustment(
                SubscriptionSchedulePlanChangeParams.AddAdjustment.builder()
                    .adjustment(
                        SubscriptionSchedulePlanChangeParams.AddAdjustment.Adjustment
                            .NewPercentageDiscount
                            .builder()
                            .adjustmentType(
                                SubscriptionSchedulePlanChangeParams.AddAdjustment.Adjustment
                                    .NewPercentageDiscount
                                    .AdjustmentType
                                    .PERCENTAGE_DISCOUNT
                            )
                            .addAppliesToPriceId("price_1")
                            .addAppliesToPriceId("price_2")
                            .percentageDiscount(0.0)
                            .isInvoiceLevel(true)
                            .build()
                    )
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .planPhaseOrder(0L)
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
            .addAddPrice(
                SubscriptionSchedulePlanChangeParams.AddPrice.builder()
                    .allocationPrice(
                        SubscriptionSchedulePlanChangeParams.AddPrice.AllocationPrice.builder()
                            .amount("10.00")
                            .cadence(
                                SubscriptionSchedulePlanChangeParams.AddPrice.AllocationPrice
                                    .Cadence
                                    .ONE_TIME
                            )
                            .currency("USD")
                            .expiresAtEndOfCadence(true)
                            .build()
                    )
                    .addDiscount(
                        SubscriptionSchedulePlanChangeParams.AddPrice.Discount.builder()
                            .discountType(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Discount.DiscountType
                                    .PERCENTAGE
                            )
                            .amountDiscount("amount_discount")
                            .percentageDiscount(0.15)
                            .usageDiscount(0.0)
                            .build()
                    )
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .externalPriceId("external_price_id")
                    .maximumAmount("1.23")
                    .minimumAmount("1.23")
                    .planPhaseOrder(0L)
                    .price(
                        SubscriptionSchedulePlanChangeParams.AddPrice.Price.NewSubscriptionUnitPrice
                            .builder()
                            .cadence(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                    .NewSubscriptionUnitPrice
                                    .Cadence
                                    .ANNUAL
                            )
                            .itemId("item_id")
                            .modelType(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                    .NewSubscriptionUnitPrice
                                    .ModelType
                                    .UNIT
                            )
                            .name("Annual fee")
                            .unitConfig(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                    .NewSubscriptionUnitPrice
                                    .UnitConfig
                                    .builder()
                                    .unitAmount("unit_amount")
                                    .build()
                            )
                            .billableMetricId("billable_metric_id")
                            .billedInAdvance(true)
                            .billingCycleConfiguration(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                    .NewSubscriptionUnitPrice
                                    .BillingCycleConfiguration
                                    .builder()
                                    .duration(0L)
                                    .durationUnit(
                                        SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                            .NewSubscriptionUnitPrice
                                            .BillingCycleConfiguration
                                            .DurationUnit
                                            .DAY
                                    )
                                    .build()
                            )
                            .conversionRate(0.0)
                            .currency("currency")
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoiceGroupingKey("invoice_grouping_key")
                            .invoicingCycleConfiguration(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                    .NewSubscriptionUnitPrice
                                    .InvoicingCycleConfiguration
                                    .builder()
                                    .duration(0L)
                                    .durationUnit(
                                        SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                            .NewSubscriptionUnitPrice
                                            .InvoicingCycleConfiguration
                                            .DurationUnit
                                            .DAY
                                    )
                                    .build()
                            )
                            .metadata(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                    .NewSubscriptionUnitPrice
                                    .Metadata
                                    .builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .referenceId("reference_id")
                            .build()
                    )
                    .priceId("h74gfhdjvn7ujokd")
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
            .alignBillingWithPlanChangeDate(true)
            .autoCollection(true)
            .billingCycleAlignment(
                SubscriptionSchedulePlanChangeParams.BillingCycleAlignment.UNCHANGED
            )
            .billingCycleAnchorConfiguration(
                SubscriptionSchedulePlanChangeParams.BillingCycleAnchorConfiguration.builder()
                    .day(1L)
                    .month(1L)
                    .year(0L)
                    .build()
            )
            .changeDate(OffsetDateTime.parse("2017-07-21T17:32:28Z"))
            .couponRedemptionCode("coupon_redemption_code")
            .creditsOverageRate(0.0)
            .defaultInvoiceMemo("default_invoice_memo")
            .externalPlanId("ZMwNQefe7J3ecf7W")
            .filter("my_property > 100 AND my_other_property = 'bar'")
            .initialPhaseOrder(2L)
            .invoicingThreshold("10.00")
            .netTerms(0L)
            .perCreditOverageAmount(0.0)
            .planId("ZMwNQefe7J3ecf7W")
            .planVersionNumber(0L)
            .addPriceOverride(JsonValue.from(mapOf<String, Any>()))
            .addRemoveAdjustment(
                SubscriptionSchedulePlanChangeParams.RemoveAdjustment.builder()
                    .adjustmentId("h74gfhdjvn7ujokd")
                    .build()
            )
            .addRemovePrice(
                SubscriptionSchedulePlanChangeParams.RemovePrice.builder()
                    .externalPriceId("external_price_id")
                    .priceId("h74gfhdjvn7ujokd")
                    .build()
            )
            .addReplaceAdjustment(
                SubscriptionSchedulePlanChangeParams.ReplaceAdjustment.builder()
                    .adjustment(
                        SubscriptionSchedulePlanChangeParams.ReplaceAdjustment.Adjustment
                            .NewPercentageDiscount
                            .builder()
                            .adjustmentType(
                                SubscriptionSchedulePlanChangeParams.ReplaceAdjustment.Adjustment
                                    .NewPercentageDiscount
                                    .AdjustmentType
                                    .PERCENTAGE_DISCOUNT
                            )
                            .addAppliesToPriceId("price_1")
                            .addAppliesToPriceId("price_2")
                            .percentageDiscount(0.0)
                            .isInvoiceLevel(true)
                            .build()
                    )
                    .replacesAdjustmentId("replaces_adjustment_id")
                    .build()
            )
            .addReplacePrice(
                SubscriptionSchedulePlanChangeParams.ReplacePrice.builder()
                    .replacesPriceId("replaces_price_id")
                    .allocationPrice(
                        SubscriptionSchedulePlanChangeParams.ReplacePrice.AllocationPrice.builder()
                            .amount("10.00")
                            .cadence(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.AllocationPrice
                                    .Cadence
                                    .ONE_TIME
                            )
                            .currency("USD")
                            .expiresAtEndOfCadence(true)
                            .build()
                    )
                    .addDiscount(
                        SubscriptionSchedulePlanChangeParams.ReplacePrice.Discount.builder()
                            .discountType(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Discount
                                    .DiscountType
                                    .PERCENTAGE
                            )
                            .amountDiscount("amount_discount")
                            .percentageDiscount(0.15)
                            .usageDiscount(0.0)
                            .build()
                    )
                    .externalPriceId("external_price_id")
                    .fixedPriceQuantity(2.0)
                    .maximumAmount("1.23")
                    .minimumAmount("1.23")
                    .price(
                        SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                            .NewSubscriptionUnitPrice
                            .builder()
                            .cadence(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                    .NewSubscriptionUnitPrice
                                    .Cadence
                                    .ANNUAL
                            )
                            .itemId("item_id")
                            .modelType(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                    .NewSubscriptionUnitPrice
                                    .ModelType
                                    .UNIT
                            )
                            .name("Annual fee")
                            .unitConfig(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                    .NewSubscriptionUnitPrice
                                    .UnitConfig
                                    .builder()
                                    .unitAmount("unit_amount")
                                    .build()
                            )
                            .billableMetricId("billable_metric_id")
                            .billedInAdvance(true)
                            .billingCycleConfiguration(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                    .NewSubscriptionUnitPrice
                                    .BillingCycleConfiguration
                                    .builder()
                                    .duration(0L)
                                    .durationUnit(
                                        SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                            .NewSubscriptionUnitPrice
                                            .BillingCycleConfiguration
                                            .DurationUnit
                                            .DAY
                                    )
                                    .build()
                            )
                            .conversionRate(0.0)
                            .currency("currency")
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoiceGroupingKey("invoice_grouping_key")
                            .invoicingCycleConfiguration(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                    .NewSubscriptionUnitPrice
                                    .InvoicingCycleConfiguration
                                    .builder()
                                    .duration(0L)
                                    .durationUnit(
                                        SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                            .NewSubscriptionUnitPrice
                                            .InvoicingCycleConfiguration
                                            .DurationUnit
                                            .DAY
                                    )
                                    .build()
                            )
                            .metadata(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                    .NewSubscriptionUnitPrice
                                    .Metadata
                                    .builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .referenceId("reference_id")
                            .build()
                    )
                    .priceId("h74gfhdjvn7ujokd")
                    .build()
            )
            .trialDurationDays(999999L)
            .addUsageCustomerId("string")
            .build()
    }

    @Test
    fun pathParams() {
        val params =
            SubscriptionSchedulePlanChangeParams.builder()
                .subscriptionId("subscription_id")
                .changeOption(SubscriptionSchedulePlanChangeParams.ChangeOption.REQUESTED_DATE)
                .build()

        assertThat(params._pathParam(0)).isEqualTo("subscription_id")
        // out-of-bound path param
        assertThat(params._pathParam(1)).isEqualTo("")
    }

    @Test
    fun body() {
        val params =
            SubscriptionSchedulePlanChangeParams.builder()
                .subscriptionId("subscription_id")
                .changeOption(SubscriptionSchedulePlanChangeParams.ChangeOption.REQUESTED_DATE)
                .addAddAdjustment(
                    SubscriptionSchedulePlanChangeParams.AddAdjustment.builder()
                        .adjustment(
                            SubscriptionSchedulePlanChangeParams.AddAdjustment.Adjustment
                                .NewPercentageDiscount
                                .builder()
                                .adjustmentType(
                                    SubscriptionSchedulePlanChangeParams.AddAdjustment.Adjustment
                                        .NewPercentageDiscount
                                        .AdjustmentType
                                        .PERCENTAGE_DISCOUNT
                                )
                                .addAppliesToPriceId("price_1")
                                .addAppliesToPriceId("price_2")
                                .percentageDiscount(0.0)
                                .isInvoiceLevel(true)
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .planPhaseOrder(0L)
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .addAddPrice(
                    SubscriptionSchedulePlanChangeParams.AddPrice.builder()
                        .allocationPrice(
                            SubscriptionSchedulePlanChangeParams.AddPrice.AllocationPrice.builder()
                                .amount("10.00")
                                .cadence(
                                    SubscriptionSchedulePlanChangeParams.AddPrice.AllocationPrice
                                        .Cadence
                                        .ONE_TIME
                                )
                                .currency("USD")
                                .expiresAtEndOfCadence(true)
                                .build()
                        )
                        .addDiscount(
                            SubscriptionSchedulePlanChangeParams.AddPrice.Discount.builder()
                                .discountType(
                                    SubscriptionSchedulePlanChangeParams.AddPrice.Discount
                                        .DiscountType
                                        .PERCENTAGE
                                )
                                .amountDiscount("amount_discount")
                                .percentageDiscount(0.15)
                                .usageDiscount(0.0)
                                .build()
                        )
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .externalPriceId("external_price_id")
                        .maximumAmount("1.23")
                        .minimumAmount("1.23")
                        .planPhaseOrder(0L)
                        .price(
                            SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                .NewSubscriptionUnitPrice
                                .builder()
                                .cadence(
                                    SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                        .NewSubscriptionUnitPrice
                                        .Cadence
                                        .ANNUAL
                                )
                                .itemId("item_id")
                                .modelType(
                                    SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                        .NewSubscriptionUnitPrice
                                        .ModelType
                                        .UNIT
                                )
                                .name("Annual fee")
                                .unitConfig(
                                    SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                        .NewSubscriptionUnitPrice
                                        .UnitConfig
                                        .builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .billableMetricId("billable_metric_id")
                                .billedInAdvance(true)
                                .billingCycleConfiguration(
                                    SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                        .NewSubscriptionUnitPrice
                                        .BillingCycleConfiguration
                                        .builder()
                                        .duration(0L)
                                        .durationUnit(
                                            SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                                .NewSubscriptionUnitPrice
                                                .BillingCycleConfiguration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .conversionRate(0.0)
                                .currency("currency")
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoiceGroupingKey("invoice_grouping_key")
                                .invoicingCycleConfiguration(
                                    SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                        .NewSubscriptionUnitPrice
                                        .InvoicingCycleConfiguration
                                        .builder()
                                        .duration(0L)
                                        .durationUnit(
                                            SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                                .NewSubscriptionUnitPrice
                                                .InvoicingCycleConfiguration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .metadata(
                                    SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                        .NewSubscriptionUnitPrice
                                        .Metadata
                                        .builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .referenceId("reference_id")
                                .build()
                        )
                        .priceId("h74gfhdjvn7ujokd")
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .alignBillingWithPlanChangeDate(true)
                .autoCollection(true)
                .billingCycleAlignment(
                    SubscriptionSchedulePlanChangeParams.BillingCycleAlignment.UNCHANGED
                )
                .billingCycleAnchorConfiguration(
                    SubscriptionSchedulePlanChangeParams.BillingCycleAnchorConfiguration.builder()
                        .day(1L)
                        .month(1L)
                        .year(0L)
                        .build()
                )
                .changeDate(OffsetDateTime.parse("2017-07-21T17:32:28Z"))
                .couponRedemptionCode("coupon_redemption_code")
                .creditsOverageRate(0.0)
                .defaultInvoiceMemo("default_invoice_memo")
                .externalPlanId("ZMwNQefe7J3ecf7W")
                .filter("my_property > 100 AND my_other_property = 'bar'")
                .initialPhaseOrder(2L)
                .invoicingThreshold("10.00")
                .netTerms(0L)
                .perCreditOverageAmount(0.0)
                .planId("ZMwNQefe7J3ecf7W")
                .planVersionNumber(0L)
                .addPriceOverride(JsonValue.from(mapOf<String, Any>()))
                .addRemoveAdjustment(
                    SubscriptionSchedulePlanChangeParams.RemoveAdjustment.builder()
                        .adjustmentId("h74gfhdjvn7ujokd")
                        .build()
                )
                .addRemovePrice(
                    SubscriptionSchedulePlanChangeParams.RemovePrice.builder()
                        .externalPriceId("external_price_id")
                        .priceId("h74gfhdjvn7ujokd")
                        .build()
                )
                .addReplaceAdjustment(
                    SubscriptionSchedulePlanChangeParams.ReplaceAdjustment.builder()
                        .adjustment(
                            SubscriptionSchedulePlanChangeParams.ReplaceAdjustment.Adjustment
                                .NewPercentageDiscount
                                .builder()
                                .adjustmentType(
                                    SubscriptionSchedulePlanChangeParams.ReplaceAdjustment
                                        .Adjustment
                                        .NewPercentageDiscount
                                        .AdjustmentType
                                        .PERCENTAGE_DISCOUNT
                                )
                                .addAppliesToPriceId("price_1")
                                .addAppliesToPriceId("price_2")
                                .percentageDiscount(0.0)
                                .isInvoiceLevel(true)
                                .build()
                        )
                        .replacesAdjustmentId("replaces_adjustment_id")
                        .build()
                )
                .addReplacePrice(
                    SubscriptionSchedulePlanChangeParams.ReplacePrice.builder()
                        .replacesPriceId("replaces_price_id")
                        .allocationPrice(
                            SubscriptionSchedulePlanChangeParams.ReplacePrice.AllocationPrice
                                .builder()
                                .amount("10.00")
                                .cadence(
                                    SubscriptionSchedulePlanChangeParams.ReplacePrice
                                        .AllocationPrice
                                        .Cadence
                                        .ONE_TIME
                                )
                                .currency("USD")
                                .expiresAtEndOfCadence(true)
                                .build()
                        )
                        .addDiscount(
                            SubscriptionSchedulePlanChangeParams.ReplacePrice.Discount.builder()
                                .discountType(
                                    SubscriptionSchedulePlanChangeParams.ReplacePrice.Discount
                                        .DiscountType
                                        .PERCENTAGE
                                )
                                .amountDiscount("amount_discount")
                                .percentageDiscount(0.15)
                                .usageDiscount(0.0)
                                .build()
                        )
                        .externalPriceId("external_price_id")
                        .fixedPriceQuantity(2.0)
                        .maximumAmount("1.23")
                        .minimumAmount("1.23")
                        .price(
                            SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                .NewSubscriptionUnitPrice
                                .builder()
                                .cadence(
                                    SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .Cadence
                                        .ANNUAL
                                )
                                .itemId("item_id")
                                .modelType(
                                    SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .ModelType
                                        .UNIT
                                )
                                .name("Annual fee")
                                .unitConfig(
                                    SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .UnitConfig
                                        .builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .billableMetricId("billable_metric_id")
                                .billedInAdvance(true)
                                .billingCycleConfiguration(
                                    SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .BillingCycleConfiguration
                                        .builder()
                                        .duration(0L)
                                        .durationUnit(
                                            SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                                .NewSubscriptionUnitPrice
                                                .BillingCycleConfiguration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .conversionRate(0.0)
                                .currency("currency")
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoiceGroupingKey("invoice_grouping_key")
                                .invoicingCycleConfiguration(
                                    SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .InvoicingCycleConfiguration
                                        .builder()
                                        .duration(0L)
                                        .durationUnit(
                                            SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                                .NewSubscriptionUnitPrice
                                                .InvoicingCycleConfiguration
                                                .DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .metadata(
                                    SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                        .NewSubscriptionUnitPrice
                                        .Metadata
                                        .builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .referenceId("reference_id")
                                .build()
                        )
                        .priceId("h74gfhdjvn7ujokd")
                        .build()
                )
                .trialDurationDays(999999L)
                .addUsageCustomerId("string")
                .build()

        val body = params._body()

        assertNotNull(body)
        assertThat(body.changeOption())
            .isEqualTo(SubscriptionSchedulePlanChangeParams.ChangeOption.REQUESTED_DATE)
        assertThat(body.addAdjustments().getOrNull())
            .containsExactly(
                SubscriptionSchedulePlanChangeParams.AddAdjustment.builder()
                    .adjustment(
                        SubscriptionSchedulePlanChangeParams.AddAdjustment.Adjustment
                            .NewPercentageDiscount
                            .builder()
                            .adjustmentType(
                                SubscriptionSchedulePlanChangeParams.AddAdjustment.Adjustment
                                    .NewPercentageDiscount
                                    .AdjustmentType
                                    .PERCENTAGE_DISCOUNT
                            )
                            .addAppliesToPriceId("price_1")
                            .addAppliesToPriceId("price_2")
                            .percentageDiscount(0.0)
                            .isInvoiceLevel(true)
                            .build()
                    )
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .planPhaseOrder(0L)
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(body.addPrices().getOrNull())
            .containsExactly(
                SubscriptionSchedulePlanChangeParams.AddPrice.builder()
                    .allocationPrice(
                        SubscriptionSchedulePlanChangeParams.AddPrice.AllocationPrice.builder()
                            .amount("10.00")
                            .cadence(
                                SubscriptionSchedulePlanChangeParams.AddPrice.AllocationPrice
                                    .Cadence
                                    .ONE_TIME
                            )
                            .currency("USD")
                            .expiresAtEndOfCadence(true)
                            .build()
                    )
                    .addDiscount(
                        SubscriptionSchedulePlanChangeParams.AddPrice.Discount.builder()
                            .discountType(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Discount.DiscountType
                                    .PERCENTAGE
                            )
                            .amountDiscount("amount_discount")
                            .percentageDiscount(0.15)
                            .usageDiscount(0.0)
                            .build()
                    )
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .externalPriceId("external_price_id")
                    .maximumAmount("1.23")
                    .minimumAmount("1.23")
                    .planPhaseOrder(0L)
                    .price(
                        SubscriptionSchedulePlanChangeParams.AddPrice.Price.NewSubscriptionUnitPrice
                            .builder()
                            .cadence(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                    .NewSubscriptionUnitPrice
                                    .Cadence
                                    .ANNUAL
                            )
                            .itemId("item_id")
                            .modelType(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                    .NewSubscriptionUnitPrice
                                    .ModelType
                                    .UNIT
                            )
                            .name("Annual fee")
                            .unitConfig(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                    .NewSubscriptionUnitPrice
                                    .UnitConfig
                                    .builder()
                                    .unitAmount("unit_amount")
                                    .build()
                            )
                            .billableMetricId("billable_metric_id")
                            .billedInAdvance(true)
                            .billingCycleConfiguration(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                    .NewSubscriptionUnitPrice
                                    .BillingCycleConfiguration
                                    .builder()
                                    .duration(0L)
                                    .durationUnit(
                                        SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                            .NewSubscriptionUnitPrice
                                            .BillingCycleConfiguration
                                            .DurationUnit
                                            .DAY
                                    )
                                    .build()
                            )
                            .conversionRate(0.0)
                            .currency("currency")
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoiceGroupingKey("invoice_grouping_key")
                            .invoicingCycleConfiguration(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                    .NewSubscriptionUnitPrice
                                    .InvoicingCycleConfiguration
                                    .builder()
                                    .duration(0L)
                                    .durationUnit(
                                        SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                            .NewSubscriptionUnitPrice
                                            .InvoicingCycleConfiguration
                                            .DurationUnit
                                            .DAY
                                    )
                                    .build()
                            )
                            .metadata(
                                SubscriptionSchedulePlanChangeParams.AddPrice.Price
                                    .NewSubscriptionUnitPrice
                                    .Metadata
                                    .builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .referenceId("reference_id")
                            .build()
                    )
                    .priceId("h74gfhdjvn7ujokd")
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(body.alignBillingWithPlanChangeDate()).contains(true)
        assertThat(body.autoCollection()).contains(true)
        assertThat(body.billingCycleAlignment())
            .contains(SubscriptionSchedulePlanChangeParams.BillingCycleAlignment.UNCHANGED)
        assertThat(body.billingCycleAnchorConfiguration())
            .contains(
                SubscriptionSchedulePlanChangeParams.BillingCycleAnchorConfiguration.builder()
                    .day(1L)
                    .month(1L)
                    .year(0L)
                    .build()
            )
        assertThat(body.changeDate()).contains(OffsetDateTime.parse("2017-07-21T17:32:28Z"))
        assertThat(body.couponRedemptionCode()).contains("coupon_redemption_code")
        assertThat(body.creditsOverageRate()).contains(0.0)
        assertThat(body.defaultInvoiceMemo()).contains("default_invoice_memo")
        assertThat(body.externalPlanId()).contains("ZMwNQefe7J3ecf7W")
        assertThat(body.filter()).contains("my_property > 100 AND my_other_property = 'bar'")
        assertThat(body.initialPhaseOrder()).contains(2L)
        assertThat(body.invoicingThreshold()).contains("10.00")
        assertThat(body.netTerms()).contains(0L)
        assertThat(body.perCreditOverageAmount()).contains(0.0)
        assertThat(body.planId()).contains("ZMwNQefe7J3ecf7W")
        assertThat(body.planVersionNumber()).contains(0L)
        assertThat(body.priceOverrides().getOrNull())
            .containsExactly(JsonValue.from(mapOf<String, Any>()))
        assertThat(body.removeAdjustments().getOrNull())
            .containsExactly(
                SubscriptionSchedulePlanChangeParams.RemoveAdjustment.builder()
                    .adjustmentId("h74gfhdjvn7ujokd")
                    .build()
            )
        assertThat(body.removePrices().getOrNull())
            .containsExactly(
                SubscriptionSchedulePlanChangeParams.RemovePrice.builder()
                    .externalPriceId("external_price_id")
                    .priceId("h74gfhdjvn7ujokd")
                    .build()
            )
        assertThat(body.replaceAdjustments().getOrNull())
            .containsExactly(
                SubscriptionSchedulePlanChangeParams.ReplaceAdjustment.builder()
                    .adjustment(
                        SubscriptionSchedulePlanChangeParams.ReplaceAdjustment.Adjustment
                            .NewPercentageDiscount
                            .builder()
                            .adjustmentType(
                                SubscriptionSchedulePlanChangeParams.ReplaceAdjustment.Adjustment
                                    .NewPercentageDiscount
                                    .AdjustmentType
                                    .PERCENTAGE_DISCOUNT
                            )
                            .addAppliesToPriceId("price_1")
                            .addAppliesToPriceId("price_2")
                            .percentageDiscount(0.0)
                            .isInvoiceLevel(true)
                            .build()
                    )
                    .replacesAdjustmentId("replaces_adjustment_id")
                    .build()
            )
        assertThat(body.replacePrices().getOrNull())
            .containsExactly(
                SubscriptionSchedulePlanChangeParams.ReplacePrice.builder()
                    .replacesPriceId("replaces_price_id")
                    .allocationPrice(
                        SubscriptionSchedulePlanChangeParams.ReplacePrice.AllocationPrice.builder()
                            .amount("10.00")
                            .cadence(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.AllocationPrice
                                    .Cadence
                                    .ONE_TIME
                            )
                            .currency("USD")
                            .expiresAtEndOfCadence(true)
                            .build()
                    )
                    .addDiscount(
                        SubscriptionSchedulePlanChangeParams.ReplacePrice.Discount.builder()
                            .discountType(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Discount
                                    .DiscountType
                                    .PERCENTAGE
                            )
                            .amountDiscount("amount_discount")
                            .percentageDiscount(0.15)
                            .usageDiscount(0.0)
                            .build()
                    )
                    .externalPriceId("external_price_id")
                    .fixedPriceQuantity(2.0)
                    .maximumAmount("1.23")
                    .minimumAmount("1.23")
                    .price(
                        SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                            .NewSubscriptionUnitPrice
                            .builder()
                            .cadence(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                    .NewSubscriptionUnitPrice
                                    .Cadence
                                    .ANNUAL
                            )
                            .itemId("item_id")
                            .modelType(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                    .NewSubscriptionUnitPrice
                                    .ModelType
                                    .UNIT
                            )
                            .name("Annual fee")
                            .unitConfig(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                    .NewSubscriptionUnitPrice
                                    .UnitConfig
                                    .builder()
                                    .unitAmount("unit_amount")
                                    .build()
                            )
                            .billableMetricId("billable_metric_id")
                            .billedInAdvance(true)
                            .billingCycleConfiguration(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                    .NewSubscriptionUnitPrice
                                    .BillingCycleConfiguration
                                    .builder()
                                    .duration(0L)
                                    .durationUnit(
                                        SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                            .NewSubscriptionUnitPrice
                                            .BillingCycleConfiguration
                                            .DurationUnit
                                            .DAY
                                    )
                                    .build()
                            )
                            .conversionRate(0.0)
                            .currency("currency")
                            .externalPriceId("external_price_id")
                            .fixedPriceQuantity(0.0)
                            .invoiceGroupingKey("invoice_grouping_key")
                            .invoicingCycleConfiguration(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                    .NewSubscriptionUnitPrice
                                    .InvoicingCycleConfiguration
                                    .builder()
                                    .duration(0L)
                                    .durationUnit(
                                        SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                            .NewSubscriptionUnitPrice
                                            .InvoicingCycleConfiguration
                                            .DurationUnit
                                            .DAY
                                    )
                                    .build()
                            )
                            .metadata(
                                SubscriptionSchedulePlanChangeParams.ReplacePrice.Price
                                    .NewSubscriptionUnitPrice
                                    .Metadata
                                    .builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .referenceId("reference_id")
                            .build()
                    )
                    .priceId("h74gfhdjvn7ujokd")
                    .build()
            )
        assertThat(body.trialDurationDays()).contains(999999L)
        assertThat(body.usageCustomerIds().getOrNull()).containsExactly("string")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            SubscriptionSchedulePlanChangeParams.builder()
                .subscriptionId("subscription_id")
                .changeOption(SubscriptionSchedulePlanChangeParams.ChangeOption.REQUESTED_DATE)
                .build()

        val body = params._body()

        assertNotNull(body)
        assertThat(body.changeOption())
            .isEqualTo(SubscriptionSchedulePlanChangeParams.ChangeOption.REQUESTED_DATE)
    }
}
