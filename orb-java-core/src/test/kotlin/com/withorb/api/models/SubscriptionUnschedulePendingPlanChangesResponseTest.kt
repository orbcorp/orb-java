// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.withorb.api.core.JsonValue
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class SubscriptionUnschedulePendingPlanChangesResponseTest {

    @Test
    fun createSubscriptionUnschedulePendingPlanChangesResponse() {
        val subscriptionUnschedulePendingPlanChangesResponse =
            SubscriptionUnschedulePendingPlanChangesResponse.builder()
                .id("id")
                .activePlanPhaseOrder(0L)
                .adjustmentIntervals(
                    listOf(
                        SubscriptionUnschedulePendingPlanChangesResponse.AdjustmentInterval
                            .builder()
                            .id("id")
                            .adjustment(
                                SubscriptionUnschedulePendingPlanChangesResponse.AdjustmentInterval
                                    .Adjustment
                                    .ofAmountDiscountAdjustment(
                                        SubscriptionUnschedulePendingPlanChangesResponse
                                            .AdjustmentInterval
                                            .Adjustment
                                            .AmountDiscountAdjustment
                                            .builder()
                                            .id("id")
                                            .adjustmentType(
                                                SubscriptionUnschedulePendingPlanChangesResponse
                                                    .AdjustmentInterval
                                                    .Adjustment
                                                    .AmountDiscountAdjustment
                                                    .AdjustmentType
                                                    .AMOUNT_DISCOUNT
                                            )
                                            .amountDiscount("amount_discount")
                                            .appliesToPriceIds(listOf("string"))
                                            .isInvoiceLevel(true)
                                            .planPhaseOrder(0L)
                                            .reason("reason")
                                            .build()
                                    )
                            )
                            .appliesToPriceIntervalIds(listOf("string"))
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                )
                .autoCollection(true)
                .billingCycleAnchorConfiguration(
                    SubscriptionUnschedulePendingPlanChangesResponse.BillingCycleAnchorConfiguration
                        .builder()
                        .day(1L)
                        .month(1L)
                        .year(0L)
                        .build()
                )
                .billingCycleDay(1L)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .customer(
                    Customer.builder()
                        .id("id")
                        .additionalEmails(listOf("string"))
                        .autoCollection(true)
                        .balance("balance")
                        .billingAddress(
                            Customer.BillingAddress.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currency("currency")
                        .email("email")
                        .emailDelivery(true)
                        .exemptFromAutomatedTax(true)
                        .externalCustomerId("external_customer_id")
                        .metadata(
                            Customer.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .name("name")
                        .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                        .paymentProviderId("payment_provider_id")
                        .portalUrl("portal_url")
                        .shippingAddress(
                            Customer.ShippingAddress.builder()
                                .city("city")
                                .country("country")
                                .line1("line1")
                                .line2("line2")
                                .postalCode("postal_code")
                                .state("state")
                                .build()
                        )
                        .taxId(
                            Customer.TaxId.builder()
                                .country(Customer.TaxId.Country.AD)
                                .type(Customer.TaxId.Type.AD_NRT)
                                .value("value")
                                .build()
                        )
                        .timezone("timezone")
                        .accountingSyncConfiguration(
                            Customer.AccountingSyncConfiguration.builder()
                                .accountingProviders(
                                    listOf(
                                        Customer.AccountingSyncConfiguration.AccountingProvider
                                            .builder()
                                            .externalProviderId("external_provider_id")
                                            .providerType(
                                                Customer.AccountingSyncConfiguration
                                                    .AccountingProvider
                                                    .ProviderType
                                                    .QUICKBOOKS
                                            )
                                            .build()
                                    )
                                )
                                .excluded(true)
                                .build()
                        )
                        .reportingConfiguration(
                            Customer.ReportingConfiguration.builder().exempt(true).build()
                        )
                        .build()
                )
                .defaultInvoiceMemo("default_invoice_memo")
                .discountIntervals(
                    listOf(
                        SubscriptionUnschedulePendingPlanChangesResponse.DiscountInterval
                            .ofAmountDiscountInterval(
                                SubscriptionUnschedulePendingPlanChangesResponse.DiscountInterval
                                    .AmountDiscountInterval
                                    .builder()
                                    .amountDiscount("amount_discount")
                                    .appliesToPriceIds(listOf("string"))
                                    .appliesToPriceIntervalIds(listOf("string"))
                                    .discountType(
                                        SubscriptionUnschedulePendingPlanChangesResponse
                                            .DiscountInterval
                                            .AmountDiscountInterval
                                            .DiscountType
                                            .AMOUNT
                                    )
                                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .build()
                            )
                    )
                )
                .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .fixedFeeQuantitySchedule(
                    listOf(
                        SubscriptionUnschedulePendingPlanChangesResponse.FixedFeeQuantitySchedule
                            .builder()
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .priceId("price_id")
                            .quantity(0.0)
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                )
                .invoicingThreshold("invoicing_threshold")
                .maximumIntervals(
                    listOf(
                        SubscriptionUnschedulePendingPlanChangesResponse.MaximumInterval.builder()
                            .appliesToPriceIds(listOf("string"))
                            .appliesToPriceIntervalIds(listOf("string"))
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .maximumAmount("maximum_amount")
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                )
                .metadata(
                    SubscriptionUnschedulePendingPlanChangesResponse.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .minimumIntervals(
                    listOf(
                        SubscriptionUnschedulePendingPlanChangesResponse.MinimumInterval.builder()
                            .appliesToPriceIds(listOf("string"))
                            .appliesToPriceIntervalIds(listOf("string"))
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .minimumAmount("minimum_amount")
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                )
                .netTerms(0L)
                .plan(
                    Plan.builder()
                        .id("id")
                        .adjustments(
                            listOf(
                                Plan.Adjustment.ofAmountDiscountAdjustment(
                                    Plan.Adjustment.AmountDiscountAdjustment.builder()
                                        .id("id")
                                        .adjustmentType(
                                            Plan.Adjustment.AmountDiscountAdjustment.AdjustmentType
                                                .AMOUNT_DISCOUNT
                                        )
                                        .amountDiscount("amount_discount")
                                        .appliesToPriceIds(listOf("string"))
                                        .isInvoiceLevel(true)
                                        .planPhaseOrder(0L)
                                        .reason("reason")
                                        .build()
                                )
                            )
                        )
                        .basePlan(
                            Plan.BasePlan.builder()
                                .id("m2t5akQeh2obwxeU")
                                .externalPlanId("m2t5akQeh2obwxeU")
                                .name("Example plan")
                                .build()
                        )
                        .basePlanId("base_plan_id")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .currency("currency")
                        .defaultInvoiceMemo("default_invoice_memo")
                        .description("description")
                        .discount(
                            Discount.ofPercentageDiscount(
                                PercentageDiscount.builder()
                                    .appliesToPriceIds(
                                        listOf("h74gfhdjvn7ujokd", "7hfgtgjnbvc3ujkl")
                                    )
                                    .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                    .percentageDiscount(0.15)
                                    .reason("reason")
                                    .build()
                            )
                        )
                        .externalPlanId("external_plan_id")
                        .invoicingCurrency("invoicing_currency")
                        .maximum(
                            Plan.Maximum.builder()
                                .appliesToPriceIds(listOf("string"))
                                .maximumAmount("maximum_amount")
                                .build()
                        )
                        .maximumAmount("maximum_amount")
                        .metadata(
                            Plan.Metadata.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .minimum(
                            Plan.Minimum.builder()
                                .appliesToPriceIds(listOf("string"))
                                .minimumAmount("minimum_amount")
                                .build()
                        )
                        .minimumAmount("minimum_amount")
                        .name("name")
                        .netTerms(0L)
                        .planPhases(
                            listOf(
                                Plan.PlanPhase.builder()
                                    .id("id")
                                    .description("description")
                                    .discount(
                                        Discount.ofPercentageDiscount(
                                            PercentageDiscount.builder()
                                                .appliesToPriceIds(
                                                    listOf("h74gfhdjvn7ujokd", "7hfgtgjnbvc3ujkl")
                                                )
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .reason("reason")
                                                .build()
                                        )
                                    )
                                    .duration(0L)
                                    .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                    .maximum(
                                        Plan.PlanPhase.Maximum.builder()
                                            .appliesToPriceIds(listOf("string"))
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .minimum(
                                        Plan.PlanPhase.Minimum.builder()
                                            .appliesToPriceIds(listOf("string"))
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .name("name")
                                    .order(0L)
                                    .build()
                            )
                        )
                        .prices(
                            listOf(
                                Price.ofUnitPrice(
                                    Price.UnitPrice.builder()
                                        .id("id")
                                        .billableMetric(
                                            Price.UnitPrice.BillableMetric.builder()
                                                .id("id")
                                                .build()
                                        )
                                        .billingCycleConfiguration(
                                            Price.UnitPrice.BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.UnitPrice.BillingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                        .conversionRate(0.0)
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Price.UnitPrice.CreditAllocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            Discount.ofPercentageDiscount(
                                                PercentageDiscount.builder()
                                                    .appliesToPriceIds(
                                                        listOf(
                                                            "h74gfhdjvn7ujokd",
                                                            "7hfgtgjnbvc3ujkl"
                                                        )
                                                    )
                                                    .discountType(
                                                        PercentageDiscount.DiscountType.PERCENTAGE
                                                    )
                                                    .percentageDiscount(0.15)
                                                    .reason("reason")
                                                    .build()
                                            )
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(0.0)
                                        .invoicingCycleConfiguration(
                                            Price.UnitPrice.InvoicingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.UnitPrice.InvoicingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .item(
                                            Price.UnitPrice.Item.builder()
                                                .id("id")
                                                .name("name")
                                                .build()
                                        )
                                        .maximum(
                                            Price.UnitPrice.Maximum.builder()
                                                .appliesToPriceIds(listOf("string"))
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(
                                            Price.UnitPrice.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string")
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Price.UnitPrice.Minimum.builder()
                                                .appliesToPriceIds(listOf("string"))
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .modelType(Price.UnitPrice.ModelType.UNIT)
                                        .name("name")
                                        .planPhaseOrder(0L)
                                        .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            Price.UnitPrice.UnitConfig.builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .build()
                                )
                            )
                        )
                        .product(
                            Plan.Product.builder()
                                .id("id")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .name("name")
                                .build()
                        )
                        .status(Plan.Status.ACTIVE)
                        .trialConfig(
                            Plan.TrialConfig.builder()
                                .trialPeriod(0L)
                                .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                                .build()
                        )
                        .version(0L)
                        .build()
                )
                .priceIntervals(
                    listOf(
                        SubscriptionUnschedulePendingPlanChangesResponse.PriceInterval.builder()
                            .id("id")
                            .billingCycleDay(0L)
                            .currentBillingPeriodEndDate(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                            .currentBillingPeriodStartDate(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .fixedFeeQuantityTransitions(
                                listOf(
                                    SubscriptionUnschedulePendingPlanChangesResponse.PriceInterval
                                        .FixedFeeQuantityTransition
                                        .builder()
                                        .effectiveDate(
                                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                        )
                                        .priceId("price_id")
                                        .quantity(0L)
                                        .build()
                                )
                            )
                            .price(
                                Price.ofUnitPrice(
                                    Price.UnitPrice.builder()
                                        .id("id")
                                        .billableMetric(
                                            Price.UnitPrice.BillableMetric.builder()
                                                .id("id")
                                                .build()
                                        )
                                        .billingCycleConfiguration(
                                            Price.UnitPrice.BillingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.UnitPrice.BillingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                        .conversionRate(0.0)
                                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                        .creditAllocation(
                                            Price.UnitPrice.CreditAllocation.builder()
                                                .allowsRollover(true)
                                                .currency("currency")
                                                .build()
                                        )
                                        .currency("currency")
                                        .discount(
                                            Discount.ofPercentageDiscount(
                                                PercentageDiscount.builder()
                                                    .appliesToPriceIds(
                                                        listOf(
                                                            "h74gfhdjvn7ujokd",
                                                            "7hfgtgjnbvc3ujkl"
                                                        )
                                                    )
                                                    .discountType(
                                                        PercentageDiscount.DiscountType.PERCENTAGE
                                                    )
                                                    .percentageDiscount(0.15)
                                                    .reason("reason")
                                                    .build()
                                            )
                                        )
                                        .externalPriceId("external_price_id")
                                        .fixedPriceQuantity(0.0)
                                        .invoicingCycleConfiguration(
                                            Price.UnitPrice.InvoicingCycleConfiguration.builder()
                                                .duration(0L)
                                                .durationUnit(
                                                    Price.UnitPrice.InvoicingCycleConfiguration
                                                        .DurationUnit
                                                        .DAY
                                                )
                                                .build()
                                        )
                                        .item(
                                            Price.UnitPrice.Item.builder()
                                                .id("id")
                                                .name("name")
                                                .build()
                                        )
                                        .maximum(
                                            Price.UnitPrice.Maximum.builder()
                                                .appliesToPriceIds(listOf("string"))
                                                .maximumAmount("maximum_amount")
                                                .build()
                                        )
                                        .maximumAmount("maximum_amount")
                                        .metadata(
                                            Price.UnitPrice.Metadata.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string")
                                                )
                                                .build()
                                        )
                                        .minimum(
                                            Price.UnitPrice.Minimum.builder()
                                                .appliesToPriceIds(listOf("string"))
                                                .minimumAmount("minimum_amount")
                                                .build()
                                        )
                                        .minimumAmount("minimum_amount")
                                        .modelType(Price.UnitPrice.ModelType.UNIT)
                                        .name("name")
                                        .planPhaseOrder(0L)
                                        .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                        .unitConfig(
                                            Price.UnitPrice.UnitConfig.builder()
                                                .unitAmount("unit_amount")
                                                .build()
                                        )
                                        .build()
                                )
                            )
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                )
                .redeemedCoupon(
                    SubscriptionUnschedulePendingPlanChangesResponse.RedeemedCoupon.builder()
                        .couponId("coupon_id")
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .status(SubscriptionUnschedulePendingPlanChangesResponse.Status.ACTIVE)
                .trialInfo(
                    SubscriptionUnschedulePendingPlanChangesResponse.TrialInfo.builder()
                        .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .build()
        assertThat(subscriptionUnschedulePendingPlanChangesResponse).isNotNull
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.id()).isEqualTo("id")
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.activePlanPhaseOrder())
            .contains(0L)
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.adjustmentIntervals())
            .containsExactly(
                SubscriptionUnschedulePendingPlanChangesResponse.AdjustmentInterval.builder()
                    .id("id")
                    .adjustment(
                        SubscriptionUnschedulePendingPlanChangesResponse.AdjustmentInterval
                            .Adjustment
                            .ofAmountDiscountAdjustment(
                                SubscriptionUnschedulePendingPlanChangesResponse.AdjustmentInterval
                                    .Adjustment
                                    .AmountDiscountAdjustment
                                    .builder()
                                    .id("id")
                                    .adjustmentType(
                                        SubscriptionUnschedulePendingPlanChangesResponse
                                            .AdjustmentInterval
                                            .Adjustment
                                            .AmountDiscountAdjustment
                                            .AdjustmentType
                                            .AMOUNT_DISCOUNT
                                    )
                                    .amountDiscount("amount_discount")
                                    .appliesToPriceIds(listOf("string"))
                                    .isInvoiceLevel(true)
                                    .planPhaseOrder(0L)
                                    .reason("reason")
                                    .build()
                            )
                    )
                    .appliesToPriceIntervalIds(listOf("string"))
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.autoCollection()).contains(true)
        assertThat(
                subscriptionUnschedulePendingPlanChangesResponse.billingCycleAnchorConfiguration()
            )
            .isEqualTo(
                SubscriptionUnschedulePendingPlanChangesResponse.BillingCycleAnchorConfiguration
                    .builder()
                    .day(1L)
                    .month(1L)
                    .year(0L)
                    .build()
            )
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.billingCycleDay()).isEqualTo(1L)
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.createdAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.currentBillingPeriodEndDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.currentBillingPeriodStartDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.customer())
            .isEqualTo(
                Customer.builder()
                    .id("id")
                    .additionalEmails(listOf("string"))
                    .autoCollection(true)
                    .balance("balance")
                    .billingAddress(
                        Customer.BillingAddress.builder()
                            .city("city")
                            .country("country")
                            .line1("line1")
                            .line2("line2")
                            .postalCode("postal_code")
                            .state("state")
                            .build()
                    )
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currency("currency")
                    .email("email")
                    .emailDelivery(true)
                    .exemptFromAutomatedTax(true)
                    .externalCustomerId("external_customer_id")
                    .metadata(
                        Customer.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .name("name")
                    .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                    .paymentProviderId("payment_provider_id")
                    .portalUrl("portal_url")
                    .shippingAddress(
                        Customer.ShippingAddress.builder()
                            .city("city")
                            .country("country")
                            .line1("line1")
                            .line2("line2")
                            .postalCode("postal_code")
                            .state("state")
                            .build()
                    )
                    .taxId(
                        Customer.TaxId.builder()
                            .country(Customer.TaxId.Country.AD)
                            .type(Customer.TaxId.Type.AD_NRT)
                            .value("value")
                            .build()
                    )
                    .timezone("timezone")
                    .accountingSyncConfiguration(
                        Customer.AccountingSyncConfiguration.builder()
                            .accountingProviders(
                                listOf(
                                    Customer.AccountingSyncConfiguration.AccountingProvider
                                        .builder()
                                        .externalProviderId("external_provider_id")
                                        .providerType(
                                            Customer.AccountingSyncConfiguration.AccountingProvider
                                                .ProviderType
                                                .QUICKBOOKS
                                        )
                                        .build()
                                )
                            )
                            .excluded(true)
                            .build()
                    )
                    .reportingConfiguration(
                        Customer.ReportingConfiguration.builder().exempt(true).build()
                    )
                    .build()
            )
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.defaultInvoiceMemo())
            .contains("default_invoice_memo")
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.discountIntervals())
            .containsExactly(
                SubscriptionUnschedulePendingPlanChangesResponse.DiscountInterval
                    .ofAmountDiscountInterval(
                        SubscriptionUnschedulePendingPlanChangesResponse.DiscountInterval
                            .AmountDiscountInterval
                            .builder()
                            .amountDiscount("amount_discount")
                            .appliesToPriceIds(listOf("string"))
                            .appliesToPriceIntervalIds(listOf("string"))
                            .discountType(
                                SubscriptionUnschedulePendingPlanChangesResponse.DiscountInterval
                                    .AmountDiscountInterval
                                    .DiscountType
                                    .AMOUNT
                            )
                            .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
            )
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.endDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.fixedFeeQuantitySchedule())
            .containsExactly(
                SubscriptionUnschedulePendingPlanChangesResponse.FixedFeeQuantitySchedule.builder()
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .priceId("price_id")
                    .quantity(0.0)
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.invoicingThreshold())
            .contains("invoicing_threshold")
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.maximumIntervals())
            .containsExactly(
                SubscriptionUnschedulePendingPlanChangesResponse.MaximumInterval.builder()
                    .appliesToPriceIds(listOf("string"))
                    .appliesToPriceIntervalIds(listOf("string"))
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .maximumAmount("maximum_amount")
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.metadata())
            .isEqualTo(
                SubscriptionUnschedulePendingPlanChangesResponse.Metadata.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.minimumIntervals())
            .containsExactly(
                SubscriptionUnschedulePendingPlanChangesResponse.MinimumInterval.builder()
                    .appliesToPriceIds(listOf("string"))
                    .appliesToPriceIntervalIds(listOf("string"))
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .minimumAmount("minimum_amount")
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.netTerms()).isEqualTo(0L)
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.plan())
            .isEqualTo(
                Plan.builder()
                    .id("id")
                    .adjustments(
                        listOf(
                            Plan.Adjustment.ofAmountDiscountAdjustment(
                                Plan.Adjustment.AmountDiscountAdjustment.builder()
                                    .id("id")
                                    .adjustmentType(
                                        Plan.Adjustment.AmountDiscountAdjustment.AdjustmentType
                                            .AMOUNT_DISCOUNT
                                    )
                                    .amountDiscount("amount_discount")
                                    .appliesToPriceIds(listOf("string"))
                                    .isInvoiceLevel(true)
                                    .planPhaseOrder(0L)
                                    .reason("reason")
                                    .build()
                            )
                        )
                    )
                    .basePlan(
                        Plan.BasePlan.builder()
                            .id("m2t5akQeh2obwxeU")
                            .externalPlanId("m2t5akQeh2obwxeU")
                            .name("Example plan")
                            .build()
                    )
                    .basePlanId("base_plan_id")
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currency("currency")
                    .defaultInvoiceMemo("default_invoice_memo")
                    .description("description")
                    .discount(
                        Discount.ofPercentageDiscount(
                            PercentageDiscount.builder()
                                .appliesToPriceIds(listOf("h74gfhdjvn7ujokd", "7hfgtgjnbvc3ujkl"))
                                .discountType(PercentageDiscount.DiscountType.PERCENTAGE)
                                .percentageDiscount(0.15)
                                .reason("reason")
                                .build()
                        )
                    )
                    .externalPlanId("external_plan_id")
                    .invoicingCurrency("invoicing_currency")
                    .maximum(
                        Plan.Maximum.builder()
                            .appliesToPriceIds(listOf("string"))
                            .maximumAmount("maximum_amount")
                            .build()
                    )
                    .maximumAmount("maximum_amount")
                    .metadata(
                        Plan.Metadata.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .minimum(
                        Plan.Minimum.builder()
                            .appliesToPriceIds(listOf("string"))
                            .minimumAmount("minimum_amount")
                            .build()
                    )
                    .minimumAmount("minimum_amount")
                    .name("name")
                    .netTerms(0L)
                    .planPhases(
                        listOf(
                            Plan.PlanPhase.builder()
                                .id("id")
                                .description("description")
                                .discount(
                                    Discount.ofPercentageDiscount(
                                        PercentageDiscount.builder()
                                            .appliesToPriceIds(
                                                listOf("h74gfhdjvn7ujokd", "7hfgtgjnbvc3ujkl")
                                            )
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .reason("reason")
                                            .build()
                                    )
                                )
                                .duration(0L)
                                .durationUnit(Plan.PlanPhase.DurationUnit.DAILY)
                                .maximum(
                                    Plan.PlanPhase.Maximum.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .minimum(
                                    Plan.PlanPhase.Minimum.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .name("name")
                                .order(0L)
                                .build()
                        )
                    )
                    .prices(
                        listOf(
                            Price.ofUnitPrice(
                                Price.UnitPrice.builder()
                                    .id("id")
                                    .billableMetric(
                                        Price.UnitPrice.BillableMetric.builder().id("id").build()
                                    )
                                    .billingCycleConfiguration(
                                        Price.UnitPrice.BillingCycleConfiguration.builder()
                                            .duration(0L)
                                            .durationUnit(
                                                Price.UnitPrice.BillingCycleConfiguration
                                                    .DurationUnit
                                                    .DAY
                                            )
                                            .build()
                                    )
                                    .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                    .conversionRate(0.0)
                                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .creditAllocation(
                                        Price.UnitPrice.CreditAllocation.builder()
                                            .allowsRollover(true)
                                            .currency("currency")
                                            .build()
                                    )
                                    .currency("currency")
                                    .discount(
                                        Discount.ofPercentageDiscount(
                                            PercentageDiscount.builder()
                                                .appliesToPriceIds(
                                                    listOf("h74gfhdjvn7ujokd", "7hfgtgjnbvc3ujkl")
                                                )
                                                .discountType(
                                                    PercentageDiscount.DiscountType.PERCENTAGE
                                                )
                                                .percentageDiscount(0.15)
                                                .reason("reason")
                                                .build()
                                        )
                                    )
                                    .externalPriceId("external_price_id")
                                    .fixedPriceQuantity(0.0)
                                    .invoicingCycleConfiguration(
                                        Price.UnitPrice.InvoicingCycleConfiguration.builder()
                                            .duration(0L)
                                            .durationUnit(
                                                Price.UnitPrice.InvoicingCycleConfiguration
                                                    .DurationUnit
                                                    .DAY
                                            )
                                            .build()
                                    )
                                    .item(
                                        Price.UnitPrice.Item.builder().id("id").name("name").build()
                                    )
                                    .maximum(
                                        Price.UnitPrice.Maximum.builder()
                                            .appliesToPriceIds(listOf("string"))
                                            .maximumAmount("maximum_amount")
                                            .build()
                                    )
                                    .maximumAmount("maximum_amount")
                                    .metadata(
                                        Price.UnitPrice.Metadata.builder()
                                            .putAdditionalProperty("foo", JsonValue.from("string"))
                                            .build()
                                    )
                                    .minimum(
                                        Price.UnitPrice.Minimum.builder()
                                            .appliesToPriceIds(listOf("string"))
                                            .minimumAmount("minimum_amount")
                                            .build()
                                    )
                                    .minimumAmount("minimum_amount")
                                    .modelType(Price.UnitPrice.ModelType.UNIT)
                                    .name("name")
                                    .planPhaseOrder(0L)
                                    .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                    .unitConfig(
                                        Price.UnitPrice.UnitConfig.builder()
                                            .unitAmount("unit_amount")
                                            .build()
                                    )
                                    .build()
                            )
                        )
                    )
                    .product(
                        Plan.Product.builder()
                            .id("id")
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .name("name")
                            .build()
                    )
                    .status(Plan.Status.ACTIVE)
                    .trialConfig(
                        Plan.TrialConfig.builder()
                            .trialPeriod(0L)
                            .trialPeriodUnit(Plan.TrialConfig.TrialPeriodUnit.DAYS)
                            .build()
                    )
                    .version(0L)
                    .build()
            )
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.priceIntervals())
            .containsExactly(
                SubscriptionUnschedulePendingPlanChangesResponse.PriceInterval.builder()
                    .id("id")
                    .billingCycleDay(0L)
                    .currentBillingPeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currentBillingPeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .fixedFeeQuantityTransitions(
                        listOf(
                            SubscriptionUnschedulePendingPlanChangesResponse.PriceInterval
                                .FixedFeeQuantityTransition
                                .builder()
                                .effectiveDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .priceId("price_id")
                                .quantity(0L)
                                .build()
                        )
                    )
                    .price(
                        Price.ofUnitPrice(
                            Price.UnitPrice.builder()
                                .id("id")
                                .billableMetric(
                                    Price.UnitPrice.BillableMetric.builder().id("id").build()
                                )
                                .billingCycleConfiguration(
                                    Price.UnitPrice.BillingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.UnitPrice.BillingCycleConfiguration.DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .cadence(Price.UnitPrice.Cadence.ONE_TIME)
                                .conversionRate(0.0)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .creditAllocation(
                                    Price.UnitPrice.CreditAllocation.builder()
                                        .allowsRollover(true)
                                        .currency("currency")
                                        .build()
                                )
                                .currency("currency")
                                .discount(
                                    Discount.ofPercentageDiscount(
                                        PercentageDiscount.builder()
                                            .appliesToPriceIds(
                                                listOf("h74gfhdjvn7ujokd", "7hfgtgjnbvc3ujkl")
                                            )
                                            .discountType(
                                                PercentageDiscount.DiscountType.PERCENTAGE
                                            )
                                            .percentageDiscount(0.15)
                                            .reason("reason")
                                            .build()
                                    )
                                )
                                .externalPriceId("external_price_id")
                                .fixedPriceQuantity(0.0)
                                .invoicingCycleConfiguration(
                                    Price.UnitPrice.InvoicingCycleConfiguration.builder()
                                        .duration(0L)
                                        .durationUnit(
                                            Price.UnitPrice.InvoicingCycleConfiguration.DurationUnit
                                                .DAY
                                        )
                                        .build()
                                )
                                .item(Price.UnitPrice.Item.builder().id("id").name("name").build())
                                .maximum(
                                    Price.UnitPrice.Maximum.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .maximumAmount("maximum_amount")
                                        .build()
                                )
                                .maximumAmount("maximum_amount")
                                .metadata(
                                    Price.UnitPrice.Metadata.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .minimum(
                                    Price.UnitPrice.Minimum.builder()
                                        .appliesToPriceIds(listOf("string"))
                                        .minimumAmount("minimum_amount")
                                        .build()
                                )
                                .minimumAmount("minimum_amount")
                                .modelType(Price.UnitPrice.ModelType.UNIT)
                                .name("name")
                                .planPhaseOrder(0L)
                                .priceType(Price.UnitPrice.PriceType.USAGE_PRICE)
                                .unitConfig(
                                    Price.UnitPrice.UnitConfig.builder()
                                        .unitAmount("unit_amount")
                                        .build()
                                )
                                .build()
                        )
                    )
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.redeemedCoupon())
            .contains(
                SubscriptionUnschedulePendingPlanChangesResponse.RedeemedCoupon.builder()
                    .couponId("coupon_id")
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .startDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.startDate())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.status())
            .isEqualTo(SubscriptionUnschedulePendingPlanChangesResponse.Status.ACTIVE)
        assertThat(subscriptionUnschedulePendingPlanChangesResponse.trialInfo())
            .isEqualTo(
                SubscriptionUnschedulePendingPlanChangesResponse.TrialInfo.builder()
                    .endDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
    }
}
