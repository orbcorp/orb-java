// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonMissing
import com.withorb.api.core.JsonValue
import com.withorb.api.core.checkRequired
import com.withorb.api.errors.OrbInvalidDataException
import java.util.Collections
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

class CustomerCreditTopUpCreateResponse
private constructor(
    private val id: JsonField<String>,
    private val amount: JsonField<String>,
    private val currency: JsonField<String>,
    private val invoiceSettings: JsonField<TopUpInvoiceSettings>,
    private val perUnitCostBasis: JsonField<String>,
    private val threshold: JsonField<String>,
    private val expiresAfter: JsonField<Long>,
    private val expiresAfterUnit: JsonField<ExpiresAfterUnit>,
    private val additionalProperties: MutableMap<String, JsonValue>,
) {

    @JsonCreator
    private constructor(
        @JsonProperty("id") @ExcludeMissing id: JsonField<String> = JsonMissing.of(),
        @JsonProperty("amount") @ExcludeMissing amount: JsonField<String> = JsonMissing.of(),
        @JsonProperty("currency") @ExcludeMissing currency: JsonField<String> = JsonMissing.of(),
        @JsonProperty("invoice_settings")
        @ExcludeMissing
        invoiceSettings: JsonField<TopUpInvoiceSettings> = JsonMissing.of(),
        @JsonProperty("per_unit_cost_basis")
        @ExcludeMissing
        perUnitCostBasis: JsonField<String> = JsonMissing.of(),
        @JsonProperty("threshold") @ExcludeMissing threshold: JsonField<String> = JsonMissing.of(),
        @JsonProperty("expires_after")
        @ExcludeMissing
        expiresAfter: JsonField<Long> = JsonMissing.of(),
        @JsonProperty("expires_after_unit")
        @ExcludeMissing
        expiresAfterUnit: JsonField<ExpiresAfterUnit> = JsonMissing.of(),
    ) : this(
        id,
        amount,
        currency,
        invoiceSettings,
        perUnitCostBasis,
        threshold,
        expiresAfter,
        expiresAfterUnit,
        mutableMapOf(),
    )

    /**
     * @throws OrbInvalidDataException if the JSON field has an unexpected type or is unexpectedly
     *   missing or null (e.g. if the server responded with an unexpected value).
     */
    fun id(): String = id.getRequired("id")

    /**
     * The amount to increment when the threshold is reached.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type or is unexpectedly
     *   missing or null (e.g. if the server responded with an unexpected value).
     */
    fun amount(): String = amount.getRequired("amount")

    /**
     * The currency or custom pricing unit to use for this top-up. If this is a real-world currency,
     * it must match the customer's invoicing currency.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type or is unexpectedly
     *   missing or null (e.g. if the server responded with an unexpected value).
     */
    fun currency(): String = currency.getRequired("currency")

    /**
     * Settings for invoices generated by triggered top-ups.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type or is unexpectedly
     *   missing or null (e.g. if the server responded with an unexpected value).
     */
    fun invoiceSettings(): TopUpInvoiceSettings = invoiceSettings.getRequired("invoice_settings")

    /**
     * How much, in the customer's currency, to charge for each unit.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type or is unexpectedly
     *   missing or null (e.g. if the server responded with an unexpected value).
     */
    fun perUnitCostBasis(): String = perUnitCostBasis.getRequired("per_unit_cost_basis")

    /**
     * The threshold at which to trigger the top-up. If the balance is at or below this threshold,
     * the top-up will be triggered.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type or is unexpectedly
     *   missing or null (e.g. if the server responded with an unexpected value).
     */
    fun threshold(): String = threshold.getRequired("threshold")

    /**
     * The number of days or months after which the top-up expires. If unspecified, it does not
     * expire.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun expiresAfter(): Optional<Long> = expiresAfter.getOptional("expires_after")

    /**
     * The unit of expires_after.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun expiresAfterUnit(): Optional<ExpiresAfterUnit> =
        expiresAfterUnit.getOptional("expires_after_unit")

    /**
     * Returns the raw JSON value of [id].
     *
     * Unlike [id], this method doesn't throw if the JSON field has an unexpected type.
     */
    @JsonProperty("id") @ExcludeMissing fun _id(): JsonField<String> = id

    /**
     * Returns the raw JSON value of [amount].
     *
     * Unlike [amount], this method doesn't throw if the JSON field has an unexpected type.
     */
    @JsonProperty("amount") @ExcludeMissing fun _amount(): JsonField<String> = amount

    /**
     * Returns the raw JSON value of [currency].
     *
     * Unlike [currency], this method doesn't throw if the JSON field has an unexpected type.
     */
    @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

    /**
     * Returns the raw JSON value of [invoiceSettings].
     *
     * Unlike [invoiceSettings], this method doesn't throw if the JSON field has an unexpected type.
     */
    @JsonProperty("invoice_settings")
    @ExcludeMissing
    fun _invoiceSettings(): JsonField<TopUpInvoiceSettings> = invoiceSettings

    /**
     * Returns the raw JSON value of [perUnitCostBasis].
     *
     * Unlike [perUnitCostBasis], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    @JsonProperty("per_unit_cost_basis")
    @ExcludeMissing
    fun _perUnitCostBasis(): JsonField<String> = perUnitCostBasis

    /**
     * Returns the raw JSON value of [threshold].
     *
     * Unlike [threshold], this method doesn't throw if the JSON field has an unexpected type.
     */
    @JsonProperty("threshold") @ExcludeMissing fun _threshold(): JsonField<String> = threshold

    /**
     * Returns the raw JSON value of [expiresAfter].
     *
     * Unlike [expiresAfter], this method doesn't throw if the JSON field has an unexpected type.
     */
    @JsonProperty("expires_after")
    @ExcludeMissing
    fun _expiresAfter(): JsonField<Long> = expiresAfter

    /**
     * Returns the raw JSON value of [expiresAfterUnit].
     *
     * Unlike [expiresAfterUnit], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    @JsonProperty("expires_after_unit")
    @ExcludeMissing
    fun _expiresAfterUnit(): JsonField<ExpiresAfterUnit> = expiresAfterUnit

    @JsonAnySetter
    private fun putAdditionalProperty(key: String, value: JsonValue) {
        additionalProperties.put(key, value)
    }

    @JsonAnyGetter
    @ExcludeMissing
    fun _additionalProperties(): Map<String, JsonValue> =
        Collections.unmodifiableMap(additionalProperties)

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of
         * [CustomerCreditTopUpCreateResponse].
         *
         * The following fields are required:
         * ```java
         * .id()
         * .amount()
         * .currency()
         * .invoiceSettings()
         * .perUnitCostBasis()
         * .threshold()
         * ```
         */
        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [CustomerCreditTopUpCreateResponse]. */
    class Builder internal constructor() {

        private var id: JsonField<String>? = null
        private var amount: JsonField<String>? = null
        private var currency: JsonField<String>? = null
        private var invoiceSettings: JsonField<TopUpInvoiceSettings>? = null
        private var perUnitCostBasis: JsonField<String>? = null
        private var threshold: JsonField<String>? = null
        private var expiresAfter: JsonField<Long> = JsonMissing.of()
        private var expiresAfterUnit: JsonField<ExpiresAfterUnit> = JsonMissing.of()
        private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

        @JvmSynthetic
        internal fun from(customerCreditTopUpCreateResponse: CustomerCreditTopUpCreateResponse) =
            apply {
                id = customerCreditTopUpCreateResponse.id
                amount = customerCreditTopUpCreateResponse.amount
                currency = customerCreditTopUpCreateResponse.currency
                invoiceSettings = customerCreditTopUpCreateResponse.invoiceSettings
                perUnitCostBasis = customerCreditTopUpCreateResponse.perUnitCostBasis
                threshold = customerCreditTopUpCreateResponse.threshold
                expiresAfter = customerCreditTopUpCreateResponse.expiresAfter
                expiresAfterUnit = customerCreditTopUpCreateResponse.expiresAfterUnit
                additionalProperties =
                    customerCreditTopUpCreateResponse.additionalProperties.toMutableMap()
            }

        fun id(id: String) = id(JsonField.of(id))

        /**
         * Sets [Builder.id] to an arbitrary JSON value.
         *
         * You should usually call [Builder.id] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun id(id: JsonField<String>) = apply { this.id = id }

        /** The amount to increment when the threshold is reached. */
        fun amount(amount: String) = amount(JsonField.of(amount))

        /**
         * Sets [Builder.amount] to an arbitrary JSON value.
         *
         * You should usually call [Builder.amount] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun amount(amount: JsonField<String>) = apply { this.amount = amount }

        /**
         * The currency or custom pricing unit to use for this top-up. If this is a real-world
         * currency, it must match the customer's invoicing currency.
         */
        fun currency(currency: String) = currency(JsonField.of(currency))

        /**
         * Sets [Builder.currency] to an arbitrary JSON value.
         *
         * You should usually call [Builder.currency] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun currency(currency: JsonField<String>) = apply { this.currency = currency }

        /** Settings for invoices generated by triggered top-ups. */
        fun invoiceSettings(invoiceSettings: TopUpInvoiceSettings) =
            invoiceSettings(JsonField.of(invoiceSettings))

        /**
         * Sets [Builder.invoiceSettings] to an arbitrary JSON value.
         *
         * You should usually call [Builder.invoiceSettings] with a well-typed
         * [TopUpInvoiceSettings] value instead. This method is primarily for setting the field to
         * an undocumented or not yet supported value.
         */
        fun invoiceSettings(invoiceSettings: JsonField<TopUpInvoiceSettings>) = apply {
            this.invoiceSettings = invoiceSettings
        }

        /** How much, in the customer's currency, to charge for each unit. */
        fun perUnitCostBasis(perUnitCostBasis: String) =
            perUnitCostBasis(JsonField.of(perUnitCostBasis))

        /**
         * Sets [Builder.perUnitCostBasis] to an arbitrary JSON value.
         *
         * You should usually call [Builder.perUnitCostBasis] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun perUnitCostBasis(perUnitCostBasis: JsonField<String>) = apply {
            this.perUnitCostBasis = perUnitCostBasis
        }

        /**
         * The threshold at which to trigger the top-up. If the balance is at or below this
         * threshold, the top-up will be triggered.
         */
        fun threshold(threshold: String) = threshold(JsonField.of(threshold))

        /**
         * Sets [Builder.threshold] to an arbitrary JSON value.
         *
         * You should usually call [Builder.threshold] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun threshold(threshold: JsonField<String>) = apply { this.threshold = threshold }

        /**
         * The number of days or months after which the top-up expires. If unspecified, it does not
         * expire.
         */
        fun expiresAfter(expiresAfter: Long?) = expiresAfter(JsonField.ofNullable(expiresAfter))

        /**
         * Alias for [Builder.expiresAfter].
         *
         * This unboxed primitive overload exists for backwards compatibility.
         */
        fun expiresAfter(expiresAfter: Long) = expiresAfter(expiresAfter as Long?)

        /** Alias for calling [Builder.expiresAfter] with `expiresAfter.orElse(null)`. */
        fun expiresAfter(expiresAfter: Optional<Long>) = expiresAfter(expiresAfter.getOrNull())

        /**
         * Sets [Builder.expiresAfter] to an arbitrary JSON value.
         *
         * You should usually call [Builder.expiresAfter] with a well-typed [Long] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun expiresAfter(expiresAfter: JsonField<Long>) = apply { this.expiresAfter = expiresAfter }

        /** The unit of expires_after. */
        fun expiresAfterUnit(expiresAfterUnit: ExpiresAfterUnit?) =
            expiresAfterUnit(JsonField.ofNullable(expiresAfterUnit))

        /** Alias for calling [Builder.expiresAfterUnit] with `expiresAfterUnit.orElse(null)`. */
        fun expiresAfterUnit(expiresAfterUnit: Optional<ExpiresAfterUnit>) =
            expiresAfterUnit(expiresAfterUnit.getOrNull())

        /**
         * Sets [Builder.expiresAfterUnit] to an arbitrary JSON value.
         *
         * You should usually call [Builder.expiresAfterUnit] with a well-typed [ExpiresAfterUnit]
         * value instead. This method is primarily for setting the field to an undocumented or not
         * yet supported value.
         */
        fun expiresAfterUnit(expiresAfterUnit: JsonField<ExpiresAfterUnit>) = apply {
            this.expiresAfterUnit = expiresAfterUnit
        }

        fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
            this.additionalProperties.clear()
            putAllAdditionalProperties(additionalProperties)
        }

        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
            additionalProperties.put(key, value)
        }

        fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
            this.additionalProperties.putAll(additionalProperties)
        }

        fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
            keys.forEach(::removeAdditionalProperty)
        }

        /**
         * Returns an immutable instance of [CustomerCreditTopUpCreateResponse].
         *
         * Further updates to this [Builder] will not mutate the returned instance.
         *
         * The following fields are required:
         * ```java
         * .id()
         * .amount()
         * .currency()
         * .invoiceSettings()
         * .perUnitCostBasis()
         * .threshold()
         * ```
         *
         * @throws IllegalStateException if any required field is unset.
         */
        fun build(): CustomerCreditTopUpCreateResponse =
            CustomerCreditTopUpCreateResponse(
                checkRequired("id", id),
                checkRequired("amount", amount),
                checkRequired("currency", currency),
                checkRequired("invoiceSettings", invoiceSettings),
                checkRequired("perUnitCostBasis", perUnitCostBasis),
                checkRequired("threshold", threshold),
                expiresAfter,
                expiresAfterUnit,
                additionalProperties.toMutableMap(),
            )
    }

    private var validated: Boolean = false

    fun validate(): CustomerCreditTopUpCreateResponse = apply {
        if (validated) {
            return@apply
        }

        id()
        amount()
        currency()
        invoiceSettings().validate()
        perUnitCostBasis()
        threshold()
        expiresAfter()
        expiresAfterUnit().ifPresent { it.validate() }
        validated = true
    }

    fun isValid(): Boolean =
        try {
            validate()
            true
        } catch (e: OrbInvalidDataException) {
            false
        }

    /**
     * Returns a score indicating how many valid values are contained in this object recursively.
     *
     * Used for best match union deserialization.
     */
    @JvmSynthetic
    internal fun validity(): Int =
        (if (id.asKnown().isPresent) 1 else 0) +
            (if (amount.asKnown().isPresent) 1 else 0) +
            (if (currency.asKnown().isPresent) 1 else 0) +
            (invoiceSettings.asKnown().getOrNull()?.validity() ?: 0) +
            (if (perUnitCostBasis.asKnown().isPresent) 1 else 0) +
            (if (threshold.asKnown().isPresent) 1 else 0) +
            (if (expiresAfter.asKnown().isPresent) 1 else 0) +
            (expiresAfterUnit.asKnown().getOrNull()?.validity() ?: 0)

    /** The unit of expires_after. */
    class ExpiresAfterUnit @JsonCreator private constructor(private val value: JsonField<String>) :
        Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val DAY = of("day")

            @JvmField val MONTH = of("month")

            @JvmStatic fun of(value: String) = ExpiresAfterUnit(JsonField.of(value))
        }

        /** An enum containing [ExpiresAfterUnit]'s known values. */
        enum class Known {
            DAY,
            MONTH,
        }

        /**
         * An enum containing [ExpiresAfterUnit]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [ExpiresAfterUnit] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            DAY,
            MONTH,
            /**
             * An enum member indicating that [ExpiresAfterUnit] was instantiated with an unknown
             * value.
             */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                DAY -> Value.DAY
                MONTH -> Value.MONTH
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws OrbInvalidDataException if this class instance's value is a not a known member.
         */
        fun known(): Known =
            when (this) {
                DAY -> Known.DAY
                MONTH -> Known.MONTH
                else -> throw OrbInvalidDataException("Unknown ExpiresAfterUnit: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws OrbInvalidDataException if this class instance's value does not have the expected
         *   primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

        private var validated: Boolean = false

        fun validate(): ExpiresAfterUnit = apply {
            if (validated) {
                return@apply
            }

            known()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: OrbInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is ExpiresAfterUnit && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is CustomerCreditTopUpCreateResponse && id == other.id && amount == other.amount && currency == other.currency && invoiceSettings == other.invoiceSettings && perUnitCostBasis == other.perUnitCostBasis && threshold == other.threshold && expiresAfter == other.expiresAfter && expiresAfterUnit == other.expiresAfterUnit && additionalProperties == other.additionalProperties /* spotless:on */
    }

    /* spotless:off */
    private val hashCode: Int by lazy { Objects.hash(id, amount, currency, invoiceSettings, perUnitCostBasis, threshold, expiresAfter, expiresAfterUnit, additionalProperties) }
    /* spotless:on */

    override fun hashCode(): Int = hashCode

    override fun toString() =
        "CustomerCreditTopUpCreateResponse{id=$id, amount=$amount, currency=$currency, invoiceSettings=$invoiceSettings, perUnitCostBasis=$perUnitCostBasis, threshold=$threshold, expiresAfter=$expiresAfter, expiresAfterUnit=$expiresAfterUnit, additionalProperties=$additionalProperties}"
}
