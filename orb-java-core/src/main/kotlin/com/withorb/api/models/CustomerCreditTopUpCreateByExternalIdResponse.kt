// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonMissing
import com.withorb.api.core.JsonValue
import com.withorb.api.core.NoAutoDetect
import com.withorb.api.core.checkRequired
import com.withorb.api.core.immutableEmptyMap
import com.withorb.api.core.toImmutable
import com.withorb.api.errors.OrbInvalidDataException
import java.util.Objects
import java.util.Optional

@NoAutoDetect
class CustomerCreditTopUpCreateByExternalIdResponse
@JsonCreator
private constructor(
    @JsonProperty("id") @ExcludeMissing private val id: JsonField<String> = JsonMissing.of(),
    @JsonProperty("amount")
    @ExcludeMissing
    private val amount: JsonField<String> = JsonMissing.of(),
    @JsonProperty("currency")
    @ExcludeMissing
    private val currency: JsonField<String> = JsonMissing.of(),
    @JsonProperty("invoice_settings")
    @ExcludeMissing
    private val invoiceSettings: JsonField<InvoiceSettings> = JsonMissing.of(),
    @JsonProperty("per_unit_cost_basis")
    @ExcludeMissing
    private val perUnitCostBasis: JsonField<String> = JsonMissing.of(),
    @JsonProperty("threshold")
    @ExcludeMissing
    private val threshold: JsonField<String> = JsonMissing.of(),
    @JsonProperty("expires_after")
    @ExcludeMissing
    private val expiresAfter: JsonField<Long> = JsonMissing.of(),
    @JsonProperty("expires_after_unit")
    @ExcludeMissing
    private val expiresAfterUnit: JsonField<ExpiresAfterUnit> = JsonMissing.of(),
    @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
) {

    fun id(): String = id.getRequired("id")

    /** The amount to increment when the threshold is reached. */
    fun amount(): String = amount.getRequired("amount")

    /**
     * The currency or custom pricing unit to use for this top-up. If this is a real-world currency,
     * it must match the customer's invoicing currency.
     */
    fun currency(): String = currency.getRequired("currency")

    /** Settings for invoices generated by triggered top-ups. */
    fun invoiceSettings(): InvoiceSettings = invoiceSettings.getRequired("invoice_settings")

    /** How much, in the customer's currency, to charge for each unit. */
    fun perUnitCostBasis(): String = perUnitCostBasis.getRequired("per_unit_cost_basis")

    /**
     * The threshold at which to trigger the top-up. If the balance is at or below this threshold,
     * the top-up will be triggered.
     */
    fun threshold(): String = threshold.getRequired("threshold")

    /**
     * The number of days or months after which the top-up expires. If unspecified, it does not
     * expire.
     */
    fun expiresAfter(): Optional<Long> =
        Optional.ofNullable(expiresAfter.getNullable("expires_after"))

    /** The unit of expires_after. */
    fun expiresAfterUnit(): Optional<ExpiresAfterUnit> =
        Optional.ofNullable(expiresAfterUnit.getNullable("expires_after_unit"))

    @JsonProperty("id") @ExcludeMissing fun _id(): JsonField<String> = id

    /** The amount to increment when the threshold is reached. */
    @JsonProperty("amount") @ExcludeMissing fun _amount(): JsonField<String> = amount

    /**
     * The currency or custom pricing unit to use for this top-up. If this is a real-world currency,
     * it must match the customer's invoicing currency.
     */
    @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

    /** Settings for invoices generated by triggered top-ups. */
    @JsonProperty("invoice_settings")
    @ExcludeMissing
    fun _invoiceSettings(): JsonField<InvoiceSettings> = invoiceSettings

    /** How much, in the customer's currency, to charge for each unit. */
    @JsonProperty("per_unit_cost_basis")
    @ExcludeMissing
    fun _perUnitCostBasis(): JsonField<String> = perUnitCostBasis

    /**
     * The threshold at which to trigger the top-up. If the balance is at or below this threshold,
     * the top-up will be triggered.
     */
    @JsonProperty("threshold") @ExcludeMissing fun _threshold(): JsonField<String> = threshold

    /**
     * The number of days or months after which the top-up expires. If unspecified, it does not
     * expire.
     */
    @JsonProperty("expires_after")
    @ExcludeMissing
    fun _expiresAfter(): JsonField<Long> = expiresAfter

    /** The unit of expires_after. */
    @JsonProperty("expires_after_unit")
    @ExcludeMissing
    fun _expiresAfterUnit(): JsonField<ExpiresAfterUnit> = expiresAfterUnit

    @JsonAnyGetter
    @ExcludeMissing
    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

    private var validated: Boolean = false

    fun validate(): CustomerCreditTopUpCreateByExternalIdResponse = apply {
        if (validated) {
            return@apply
        }

        id()
        amount()
        currency()
        invoiceSettings().validate()
        perUnitCostBasis()
        threshold()
        expiresAfter()
        expiresAfterUnit()
        validated = true
    }

    fun toBuilder() = Builder().from(this)

    companion object {

        @JvmStatic fun builder() = Builder()
    }

    class Builder {

        private var id: JsonField<String>? = null
        private var amount: JsonField<String>? = null
        private var currency: JsonField<String>? = null
        private var invoiceSettings: JsonField<InvoiceSettings>? = null
        private var perUnitCostBasis: JsonField<String>? = null
        private var threshold: JsonField<String>? = null
        private var expiresAfter: JsonField<Long> = JsonMissing.of()
        private var expiresAfterUnit: JsonField<ExpiresAfterUnit> = JsonMissing.of()
        private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

        @JvmSynthetic
        internal fun from(
            customerCreditTopUpCreateByExternalIdResponse:
                CustomerCreditTopUpCreateByExternalIdResponse
        ) = apply {
            id = customerCreditTopUpCreateByExternalIdResponse.id
            amount = customerCreditTopUpCreateByExternalIdResponse.amount
            currency = customerCreditTopUpCreateByExternalIdResponse.currency
            invoiceSettings = customerCreditTopUpCreateByExternalIdResponse.invoiceSettings
            perUnitCostBasis = customerCreditTopUpCreateByExternalIdResponse.perUnitCostBasis
            threshold = customerCreditTopUpCreateByExternalIdResponse.threshold
            expiresAfter = customerCreditTopUpCreateByExternalIdResponse.expiresAfter
            expiresAfterUnit = customerCreditTopUpCreateByExternalIdResponse.expiresAfterUnit
            additionalProperties =
                customerCreditTopUpCreateByExternalIdResponse.additionalProperties.toMutableMap()
        }

        fun id(id: String) = id(JsonField.of(id))

        fun id(id: JsonField<String>) = apply { this.id = id }

        /** The amount to increment when the threshold is reached. */
        fun amount(amount: String) = amount(JsonField.of(amount))

        /** The amount to increment when the threshold is reached. */
        fun amount(amount: JsonField<String>) = apply { this.amount = amount }

        /**
         * The currency or custom pricing unit to use for this top-up. If this is a real-world
         * currency, it must match the customer's invoicing currency.
         */
        fun currency(currency: String) = currency(JsonField.of(currency))

        /**
         * The currency or custom pricing unit to use for this top-up. If this is a real-world
         * currency, it must match the customer's invoicing currency.
         */
        fun currency(currency: JsonField<String>) = apply { this.currency = currency }

        /** Settings for invoices generated by triggered top-ups. */
        fun invoiceSettings(invoiceSettings: InvoiceSettings) =
            invoiceSettings(JsonField.of(invoiceSettings))

        /** Settings for invoices generated by triggered top-ups. */
        fun invoiceSettings(invoiceSettings: JsonField<InvoiceSettings>) = apply {
            this.invoiceSettings = invoiceSettings
        }

        /** How much, in the customer's currency, to charge for each unit. */
        fun perUnitCostBasis(perUnitCostBasis: String) =
            perUnitCostBasis(JsonField.of(perUnitCostBasis))

        /** How much, in the customer's currency, to charge for each unit. */
        fun perUnitCostBasis(perUnitCostBasis: JsonField<String>) = apply {
            this.perUnitCostBasis = perUnitCostBasis
        }

        /**
         * The threshold at which to trigger the top-up. If the balance is at or below this
         * threshold, the top-up will be triggered.
         */
        fun threshold(threshold: String) = threshold(JsonField.of(threshold))

        /**
         * The threshold at which to trigger the top-up. If the balance is at or below this
         * threshold, the top-up will be triggered.
         */
        fun threshold(threshold: JsonField<String>) = apply { this.threshold = threshold }

        /**
         * The number of days or months after which the top-up expires. If unspecified, it does not
         * expire.
         */
        fun expiresAfter(expiresAfter: Long?) = expiresAfter(JsonField.ofNullable(expiresAfter))

        /**
         * The number of days or months after which the top-up expires. If unspecified, it does not
         * expire.
         */
        fun expiresAfter(expiresAfter: Long) = expiresAfter(expiresAfter as Long?)

        /**
         * The number of days or months after which the top-up expires. If unspecified, it does not
         * expire.
         */
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun expiresAfter(expiresAfter: Optional<Long>) =
            expiresAfter(expiresAfter.orElse(null) as Long?)

        /**
         * The number of days or months after which the top-up expires. If unspecified, it does not
         * expire.
         */
        fun expiresAfter(expiresAfter: JsonField<Long>) = apply { this.expiresAfter = expiresAfter }

        /** The unit of expires_after. */
        fun expiresAfterUnit(expiresAfterUnit: ExpiresAfterUnit?) =
            expiresAfterUnit(JsonField.ofNullable(expiresAfterUnit))

        /** The unit of expires_after. */
        fun expiresAfterUnit(expiresAfterUnit: Optional<ExpiresAfterUnit>) =
            expiresAfterUnit(expiresAfterUnit.orElse(null))

        /** The unit of expires_after. */
        fun expiresAfterUnit(expiresAfterUnit: JsonField<ExpiresAfterUnit>) = apply {
            this.expiresAfterUnit = expiresAfterUnit
        }

        fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
            this.additionalProperties.clear()
            putAllAdditionalProperties(additionalProperties)
        }

        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
            additionalProperties.put(key, value)
        }

        fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
            this.additionalProperties.putAll(additionalProperties)
        }

        fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
            keys.forEach(::removeAdditionalProperty)
        }

        fun build(): CustomerCreditTopUpCreateByExternalIdResponse =
            CustomerCreditTopUpCreateByExternalIdResponse(
                checkRequired("id", id),
                checkRequired("amount", amount),
                checkRequired("currency", currency),
                checkRequired("invoiceSettings", invoiceSettings),
                checkRequired("perUnitCostBasis", perUnitCostBasis),
                checkRequired("threshold", threshold),
                expiresAfter,
                expiresAfterUnit,
                additionalProperties.toImmutable(),
            )
    }

    /** Settings for invoices generated by triggered top-ups. */
    @NoAutoDetect
    class InvoiceSettings
    @JsonCreator
    private constructor(
        @JsonProperty("auto_collection")
        @ExcludeMissing
        private val autoCollection: JsonField<Boolean> = JsonMissing.of(),
        @JsonProperty("net_terms")
        @ExcludeMissing
        private val netTerms: JsonField<Long> = JsonMissing.of(),
        @JsonProperty("memo")
        @ExcludeMissing
        private val memo: JsonField<String> = JsonMissing.of(),
        @JsonProperty("require_successful_payment")
        @ExcludeMissing
        private val requireSuccessfulPayment: JsonField<Boolean> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /**
         * Whether the credits purchase invoice should auto collect with the customer's saved
         * payment method.
         */
        fun autoCollection(): Boolean = autoCollection.getRequired("auto_collection")

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0.
         */
        fun netTerms(): Long = netTerms.getRequired("net_terms")

        /** An optional memo to display on the invoice. */
        fun memo(): Optional<String> = Optional.ofNullable(memo.getNullable("memo"))

        /**
         * If true, new credit blocks created by this top-up will require that the corresponding
         * invoice is paid before they can be drawn down from.
         */
        fun requireSuccessfulPayment(): Optional<Boolean> =
            Optional.ofNullable(requireSuccessfulPayment.getNullable("require_successful_payment"))

        /**
         * Whether the credits purchase invoice should auto collect with the customer's saved
         * payment method.
         */
        @JsonProperty("auto_collection")
        @ExcludeMissing
        fun _autoCollection(): JsonField<Boolean> = autoCollection

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0.
         */
        @JsonProperty("net_terms") @ExcludeMissing fun _netTerms(): JsonField<Long> = netTerms

        /** An optional memo to display on the invoice. */
        @JsonProperty("memo") @ExcludeMissing fun _memo(): JsonField<String> = memo

        /**
         * If true, new credit blocks created by this top-up will require that the corresponding
         * invoice is paid before they can be drawn down from.
         */
        @JsonProperty("require_successful_payment")
        @ExcludeMissing
        fun _requireSuccessfulPayment(): JsonField<Boolean> = requireSuccessfulPayment

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): InvoiceSettings = apply {
            if (validated) {
                return@apply
            }

            autoCollection()
            netTerms()
            memo()
            requireSuccessfulPayment()
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var autoCollection: JsonField<Boolean>? = null
            private var netTerms: JsonField<Long>? = null
            private var memo: JsonField<String> = JsonMissing.of()
            private var requireSuccessfulPayment: JsonField<Boolean> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(invoiceSettings: InvoiceSettings) = apply {
                autoCollection = invoiceSettings.autoCollection
                netTerms = invoiceSettings.netTerms
                memo = invoiceSettings.memo
                requireSuccessfulPayment = invoiceSettings.requireSuccessfulPayment
                additionalProperties = invoiceSettings.additionalProperties.toMutableMap()
            }

            /**
             * Whether the credits purchase invoice should auto collect with the customer's saved
             * payment method.
             */
            fun autoCollection(autoCollection: Boolean) =
                autoCollection(JsonField.of(autoCollection))

            /**
             * Whether the credits purchase invoice should auto collect with the customer's saved
             * payment method.
             */
            fun autoCollection(autoCollection: JsonField<Boolean>) = apply {
                this.autoCollection = autoCollection
            }

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0.
             */
            fun netTerms(netTerms: Long) = netTerms(JsonField.of(netTerms))

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0.
             */
            fun netTerms(netTerms: JsonField<Long>) = apply { this.netTerms = netTerms }

            /** An optional memo to display on the invoice. */
            fun memo(memo: String?) = memo(JsonField.ofNullable(memo))

            /** An optional memo to display on the invoice. */
            fun memo(memo: Optional<String>) = memo(memo.orElse(null))

            /** An optional memo to display on the invoice. */
            fun memo(memo: JsonField<String>) = apply { this.memo = memo }

            /**
             * If true, new credit blocks created by this top-up will require that the corresponding
             * invoice is paid before they can be drawn down from.
             */
            fun requireSuccessfulPayment(requireSuccessfulPayment: Boolean) =
                requireSuccessfulPayment(JsonField.of(requireSuccessfulPayment))

            /**
             * If true, new credit blocks created by this top-up will require that the corresponding
             * invoice is paid before they can be drawn down from.
             */
            fun requireSuccessfulPayment(requireSuccessfulPayment: JsonField<Boolean>) = apply {
                this.requireSuccessfulPayment = requireSuccessfulPayment
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): InvoiceSettings =
                InvoiceSettings(
                    checkRequired("autoCollection", autoCollection),
                    checkRequired("netTerms", netTerms),
                    memo,
                    requireSuccessfulPayment,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is InvoiceSettings && autoCollection == other.autoCollection && netTerms == other.netTerms && memo == other.memo && requireSuccessfulPayment == other.requireSuccessfulPayment && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(autoCollection, netTerms, memo, requireSuccessfulPayment, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "InvoiceSettings{autoCollection=$autoCollection, netTerms=$netTerms, memo=$memo, requireSuccessfulPayment=$requireSuccessfulPayment, additionalProperties=$additionalProperties}"
    }

    /** The unit of expires_after. */
    class ExpiresAfterUnit
    @JsonCreator
    private constructor(
        private val value: JsonField<String>,
    ) : Enum {

        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val DAY = of("day")

            @JvmField val MONTH = of("month")

            @JvmStatic fun of(value: String) = ExpiresAfterUnit(JsonField.of(value))
        }

        enum class Known {
            DAY,
            MONTH,
        }

        enum class Value {
            DAY,
            MONTH,
            _UNKNOWN,
        }

        fun value(): Value =
            when (this) {
                DAY -> Value.DAY
                MONTH -> Value.MONTH
                else -> Value._UNKNOWN
            }

        fun known(): Known =
            when (this) {
                DAY -> Known.DAY
                MONTH -> Known.MONTH
                else -> throw OrbInvalidDataException("Unknown ExpiresAfterUnit: $value")
            }

        fun asString(): String = _value().asStringOrThrow()

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is ExpiresAfterUnit && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is CustomerCreditTopUpCreateByExternalIdResponse && id == other.id && amount == other.amount && currency == other.currency && invoiceSettings == other.invoiceSettings && perUnitCostBasis == other.perUnitCostBasis && threshold == other.threshold && expiresAfter == other.expiresAfter && expiresAfterUnit == other.expiresAfterUnit && additionalProperties == other.additionalProperties /* spotless:on */
    }

    /* spotless:off */
    private val hashCode: Int by lazy { Objects.hash(id, amount, currency, invoiceSettings, perUnitCostBasis, threshold, expiresAfter, expiresAfterUnit, additionalProperties) }
    /* spotless:on */

    override fun hashCode(): Int = hashCode

    override fun toString() =
        "CustomerCreditTopUpCreateByExternalIdResponse{id=$id, amount=$amount, currency=$currency, invoiceSettings=$invoiceSettings, perUnitCostBasis=$perUnitCostBasis, threshold=$threshold, expiresAfter=$expiresAfter, expiresAfterUnit=$expiresAfterUnit, additionalProperties=$additionalProperties}"
}
