// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.ObjectCodec
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.SerializerProvider
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.BaseDeserializer
import com.withorb.api.core.BaseSerializer
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonMissing
import com.withorb.api.core.JsonValue
import com.withorb.api.core.NoAutoDetect
import com.withorb.api.core.getOrThrow
import com.withorb.api.core.toImmutable
import com.withorb.api.errors.OrbInvalidDataException
import com.withorb.api.models.*
import java.time.OffsetDateTime
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

class SubscriptionCreateParams
constructor(
    private val addAdjustments: List<AddAdjustment>?,
    private val addPrices: List<AddPrice>?,
    private val alignBillingWithSubscriptionStartDate: Boolean?,
    private val autoCollection: Boolean?,
    private val awsRegion: String?,
    private val billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration?,
    private val couponRedemptionCode: String?,
    private val creditsOverageRate: Double?,
    private val customerId: String?,
    private val defaultInvoiceMemo: String?,
    private val endDate: OffsetDateTime?,
    private val externalCustomerId: String?,
    private val externalMarketplace: ExternalMarketplace?,
    private val externalMarketplaceReportingId: String?,
    private val externalPlanId: String?,
    private val initialPhaseOrder: Long?,
    private val invoicingThreshold: String?,
    private val metadata: Metadata?,
    private val netTerms: Long?,
    private val perCreditOverageAmount: Double?,
    private val planId: String?,
    private val planVersionNumber: Long?,
    private val priceOverrides: List<JsonValue>?,
    private val removeAdjustments: List<RemoveAdjustment>?,
    private val removePrices: List<RemovePrice>?,
    private val replaceAdjustments: List<ReplaceAdjustment>?,
    private val replacePrices: List<ReplacePrice>?,
    private val startDate: OffsetDateTime?,
    private val trialDurationDays: Long?,
    private val additionalQueryParams: Map<String, List<String>>,
    private val additionalHeaders: Map<String, List<String>>,
    private val additionalBodyProperties: Map<String, JsonValue>,
) {

    fun addAdjustments(): Optional<List<AddAdjustment>> = Optional.ofNullable(addAdjustments)

    fun addPrices(): Optional<List<AddPrice>> = Optional.ofNullable(addPrices)

    fun alignBillingWithSubscriptionStartDate(): Optional<Boolean> =
        Optional.ofNullable(alignBillingWithSubscriptionStartDate)

    fun autoCollection(): Optional<Boolean> = Optional.ofNullable(autoCollection)

    fun awsRegion(): Optional<String> = Optional.ofNullable(awsRegion)

    fun billingCycleAnchorConfiguration(): Optional<BillingCycleAnchorConfiguration> =
        Optional.ofNullable(billingCycleAnchorConfiguration)

    fun couponRedemptionCode(): Optional<String> = Optional.ofNullable(couponRedemptionCode)

    fun creditsOverageRate(): Optional<Double> = Optional.ofNullable(creditsOverageRate)

    fun customerId(): Optional<String> = Optional.ofNullable(customerId)

    fun defaultInvoiceMemo(): Optional<String> = Optional.ofNullable(defaultInvoiceMemo)

    fun endDate(): Optional<OffsetDateTime> = Optional.ofNullable(endDate)

    fun externalCustomerId(): Optional<String> = Optional.ofNullable(externalCustomerId)

    fun externalMarketplace(): Optional<ExternalMarketplace> =
        Optional.ofNullable(externalMarketplace)

    fun externalMarketplaceReportingId(): Optional<String> =
        Optional.ofNullable(externalMarketplaceReportingId)

    fun externalPlanId(): Optional<String> = Optional.ofNullable(externalPlanId)

    fun initialPhaseOrder(): Optional<Long> = Optional.ofNullable(initialPhaseOrder)

    fun invoicingThreshold(): Optional<String> = Optional.ofNullable(invoicingThreshold)

    fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

    fun netTerms(): Optional<Long> = Optional.ofNullable(netTerms)

    fun perCreditOverageAmount(): Optional<Double> = Optional.ofNullable(perCreditOverageAmount)

    fun planId(): Optional<String> = Optional.ofNullable(planId)

    fun planVersionNumber(): Optional<Long> = Optional.ofNullable(planVersionNumber)

    fun priceOverrides(): Optional<List<JsonValue>> = Optional.ofNullable(priceOverrides)

    fun removeAdjustments(): Optional<List<RemoveAdjustment>> =
        Optional.ofNullable(removeAdjustments)

    fun removePrices(): Optional<List<RemovePrice>> = Optional.ofNullable(removePrices)

    fun replaceAdjustments(): Optional<List<ReplaceAdjustment>> =
        Optional.ofNullable(replaceAdjustments)

    fun replacePrices(): Optional<List<ReplacePrice>> = Optional.ofNullable(replacePrices)

    fun startDate(): Optional<OffsetDateTime> = Optional.ofNullable(startDate)

    fun trialDurationDays(): Optional<Long> = Optional.ofNullable(trialDurationDays)

    @JvmSynthetic
    internal fun getBody(): SubscriptionCreateBody {
        return SubscriptionCreateBody(
            addAdjustments,
            addPrices,
            alignBillingWithSubscriptionStartDate,
            autoCollection,
            awsRegion,
            billingCycleAnchorConfiguration,
            couponRedemptionCode,
            creditsOverageRate,
            customerId,
            defaultInvoiceMemo,
            endDate,
            externalCustomerId,
            externalMarketplace,
            externalMarketplaceReportingId,
            externalPlanId,
            initialPhaseOrder,
            invoicingThreshold,
            metadata,
            netTerms,
            perCreditOverageAmount,
            planId,
            planVersionNumber,
            priceOverrides,
            removeAdjustments,
            removePrices,
            replaceAdjustments,
            replacePrices,
            startDate,
            trialDurationDays,
            additionalBodyProperties,
        )
    }

    @JvmSynthetic internal fun getQueryParams(): Map<String, List<String>> = additionalQueryParams

    @JvmSynthetic internal fun getHeaders(): Map<String, List<String>> = additionalHeaders

    @JsonDeserialize(builder = SubscriptionCreateBody.Builder::class)
    @NoAutoDetect
    class SubscriptionCreateBody
    internal constructor(
        private val addAdjustments: List<AddAdjustment>?,
        private val addPrices: List<AddPrice>?,
        private val alignBillingWithSubscriptionStartDate: Boolean?,
        private val autoCollection: Boolean?,
        private val awsRegion: String?,
        private val billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration?,
        private val couponRedemptionCode: String?,
        private val creditsOverageRate: Double?,
        private val customerId: String?,
        private val defaultInvoiceMemo: String?,
        private val endDate: OffsetDateTime?,
        private val externalCustomerId: String?,
        private val externalMarketplace: ExternalMarketplace?,
        private val externalMarketplaceReportingId: String?,
        private val externalPlanId: String?,
        private val initialPhaseOrder: Long?,
        private val invoicingThreshold: String?,
        private val metadata: Metadata?,
        private val netTerms: Long?,
        private val perCreditOverageAmount: Double?,
        private val planId: String?,
        private val planVersionNumber: Long?,
        private val priceOverrides: List<JsonValue>?,
        private val removeAdjustments: List<RemoveAdjustment>?,
        private val removePrices: List<RemovePrice>?,
        private val replaceAdjustments: List<ReplaceAdjustment>?,
        private val replacePrices: List<ReplacePrice>?,
        private val startDate: OffsetDateTime?,
        private val trialDurationDays: Long?,
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        /**
         * Additional adjustments to be added to the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        @JsonProperty("add_adjustments") fun addAdjustments(): List<AddAdjustment>? = addAdjustments

        /**
         * Additional prices to be added to the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        @JsonProperty("add_prices") fun addPrices(): List<AddPrice>? = addPrices

        @JsonProperty("align_billing_with_subscription_start_date")
        fun alignBillingWithSubscriptionStartDate(): Boolean? =
            alignBillingWithSubscriptionStartDate

        /**
         * Determines whether issued invoices for this subscription will automatically be charged
         * with the saved payment method on the due date. If not specified, this defaults to the
         * behavior configured for this customer.
         */
        @JsonProperty("auto_collection") fun autoCollection(): Boolean? = autoCollection

        @JsonProperty("aws_region") fun awsRegion(): String? = awsRegion

        @JsonProperty("billing_cycle_anchor_configuration")
        fun billingCycleAnchorConfiguration(): BillingCycleAnchorConfiguration? =
            billingCycleAnchorConfiguration

        /**
         * Redemption code to be used for this subscription. If the coupon cannot be found by its
         * redemption code, or cannot be redeemed, an error response will be returned and the
         * subscription creation or plan change will not be scheduled.
         */
        @JsonProperty("coupon_redemption_code")
        fun couponRedemptionCode(): String? = couponRedemptionCode

        @JsonProperty("credits_overage_rate") fun creditsOverageRate(): Double? = creditsOverageRate

        @JsonProperty("customer_id") fun customerId(): String? = customerId

        /**
         * Determines the default memo on this subscription's invoices. Note that if this is not
         * provided, it is determined by the plan configuration.
         */
        @JsonProperty("default_invoice_memo") fun defaultInvoiceMemo(): String? = defaultInvoiceMemo

        @JsonProperty("end_date") fun endDate(): OffsetDateTime? = endDate

        @JsonProperty("external_customer_id") fun externalCustomerId(): String? = externalCustomerId

        @JsonProperty("external_marketplace")
        fun externalMarketplace(): ExternalMarketplace? = externalMarketplace

        @JsonProperty("external_marketplace_reporting_id")
        fun externalMarketplaceReportingId(): String? = externalMarketplaceReportingId

        /**
         * The external_plan_id of the plan that the given subscription should be switched to. Note
         * that either this property or `plan_id` must be specified.
         */
        @JsonProperty("external_plan_id") fun externalPlanId(): String? = externalPlanId

        /** The phase of the plan to start with */
        @JsonProperty("initial_phase_order") fun initialPhaseOrder(): Long? = initialPhaseOrder

        /**
         * When this subscription's accrued usage reaches this threshold, an invoice will be issued
         * for the subscription. If not specified, invoices will only be issued at the end of the
         * billing period.
         */
        @JsonProperty("invoicing_threshold") fun invoicingThreshold(): String? = invoicingThreshold

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed by
         * setting the value to `null`, and the entire metadata mapping can be cleared by setting
         * `metadata` to `null`.
         */
        @JsonProperty("metadata") fun metadata(): Metadata? = metadata

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0. If not
         * provided, this defaults to the value specified in the plan.
         */
        @JsonProperty("net_terms") fun netTerms(): Long? = netTerms

        @JsonProperty("per_credit_overage_amount")
        fun perCreditOverageAmount(): Double? = perCreditOverageAmount

        /**
         * The plan that the given subscription should be switched to. Note that either this
         * property or `external_plan_id` must be specified.
         */
        @JsonProperty("plan_id") fun planId(): String? = planId

        /**
         * Specifies which version of the plan to subscribe to. If null, the default version will be
         * used.
         */
        @JsonProperty("plan_version_number") fun planVersionNumber(): Long? = planVersionNumber

        /** Optionally provide a list of overrides for prices on the plan */
        @JsonProperty("price_overrides") fun priceOverrides(): List<JsonValue>? = priceOverrides

        /**
         * Plan adjustments to be removed from the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        @JsonProperty("remove_adjustments")
        fun removeAdjustments(): List<RemoveAdjustment>? = removeAdjustments

        /**
         * Plan prices to be removed from the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        @JsonProperty("remove_prices") fun removePrices(): List<RemovePrice>? = removePrices

        /**
         * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
         * available for accounts that have migrated off of legacy subscription overrides)
         */
        @JsonProperty("replace_adjustments")
        fun replaceAdjustments(): List<ReplaceAdjustment>? = replaceAdjustments

        /**
         * Plan prices to be replaced with additional prices on the subscription. (Only available
         * for accounts that have migrated off of legacy subscription overrides)
         */
        @JsonProperty("replace_prices") fun replacePrices(): List<ReplacePrice>? = replacePrices

        @JsonProperty("start_date") fun startDate(): OffsetDateTime? = startDate

        /**
         * The duration of the trial period in days. If not provided, this defaults to the value
         * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
         */
        @JsonProperty("trial_duration_days") fun trialDurationDays(): Long? = trialDurationDays

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var addAdjustments: List<AddAdjustment>? = null
            private var addPrices: List<AddPrice>? = null
            private var alignBillingWithSubscriptionStartDate: Boolean? = null
            private var autoCollection: Boolean? = null
            private var awsRegion: String? = null
            private var billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration? = null
            private var couponRedemptionCode: String? = null
            private var creditsOverageRate: Double? = null
            private var customerId: String? = null
            private var defaultInvoiceMemo: String? = null
            private var endDate: OffsetDateTime? = null
            private var externalCustomerId: String? = null
            private var externalMarketplace: ExternalMarketplace? = null
            private var externalMarketplaceReportingId: String? = null
            private var externalPlanId: String? = null
            private var initialPhaseOrder: Long? = null
            private var invoicingThreshold: String? = null
            private var metadata: Metadata? = null
            private var netTerms: Long? = null
            private var perCreditOverageAmount: Double? = null
            private var planId: String? = null
            private var planVersionNumber: Long? = null
            private var priceOverrides: List<JsonValue>? = null
            private var removeAdjustments: List<RemoveAdjustment>? = null
            private var removePrices: List<RemovePrice>? = null
            private var replaceAdjustments: List<ReplaceAdjustment>? = null
            private var replacePrices: List<ReplacePrice>? = null
            private var startDate: OffsetDateTime? = null
            private var trialDurationDays: Long? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(subscriptionCreateBody: SubscriptionCreateBody) = apply {
                this.addAdjustments = subscriptionCreateBody.addAdjustments
                this.addPrices = subscriptionCreateBody.addPrices
                this.alignBillingWithSubscriptionStartDate =
                    subscriptionCreateBody.alignBillingWithSubscriptionStartDate
                this.autoCollection = subscriptionCreateBody.autoCollection
                this.awsRegion = subscriptionCreateBody.awsRegion
                this.billingCycleAnchorConfiguration =
                    subscriptionCreateBody.billingCycleAnchorConfiguration
                this.couponRedemptionCode = subscriptionCreateBody.couponRedemptionCode
                this.creditsOverageRate = subscriptionCreateBody.creditsOverageRate
                this.customerId = subscriptionCreateBody.customerId
                this.defaultInvoiceMemo = subscriptionCreateBody.defaultInvoiceMemo
                this.endDate = subscriptionCreateBody.endDate
                this.externalCustomerId = subscriptionCreateBody.externalCustomerId
                this.externalMarketplace = subscriptionCreateBody.externalMarketplace
                this.externalMarketplaceReportingId =
                    subscriptionCreateBody.externalMarketplaceReportingId
                this.externalPlanId = subscriptionCreateBody.externalPlanId
                this.initialPhaseOrder = subscriptionCreateBody.initialPhaseOrder
                this.invoicingThreshold = subscriptionCreateBody.invoicingThreshold
                this.metadata = subscriptionCreateBody.metadata
                this.netTerms = subscriptionCreateBody.netTerms
                this.perCreditOverageAmount = subscriptionCreateBody.perCreditOverageAmount
                this.planId = subscriptionCreateBody.planId
                this.planVersionNumber = subscriptionCreateBody.planVersionNumber
                this.priceOverrides = subscriptionCreateBody.priceOverrides
                this.removeAdjustments = subscriptionCreateBody.removeAdjustments
                this.removePrices = subscriptionCreateBody.removePrices
                this.replaceAdjustments = subscriptionCreateBody.replaceAdjustments
                this.replacePrices = subscriptionCreateBody.replacePrices
                this.startDate = subscriptionCreateBody.startDate
                this.trialDurationDays = subscriptionCreateBody.trialDurationDays
                additionalProperties(subscriptionCreateBody.additionalProperties)
            }

            /**
             * Additional adjustments to be added to the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            @JsonProperty("add_adjustments")
            fun addAdjustments(addAdjustments: List<AddAdjustment>) = apply {
                this.addAdjustments = addAdjustments
            }

            /**
             * Additional prices to be added to the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            @JsonProperty("add_prices")
            fun addPrices(addPrices: List<AddPrice>) = apply { this.addPrices = addPrices }

            @JsonProperty("align_billing_with_subscription_start_date")
            fun alignBillingWithSubscriptionStartDate(
                alignBillingWithSubscriptionStartDate: Boolean
            ) = apply {
                this.alignBillingWithSubscriptionStartDate = alignBillingWithSubscriptionStartDate
            }

            /**
             * Determines whether issued invoices for this subscription will automatically be
             * charged with the saved payment method on the due date. If not specified, this
             * defaults to the behavior configured for this customer.
             */
            @JsonProperty("auto_collection")
            fun autoCollection(autoCollection: Boolean) = apply {
                this.autoCollection = autoCollection
            }

            @JsonProperty("aws_region")
            fun awsRegion(awsRegion: String) = apply { this.awsRegion = awsRegion }

            @JsonProperty("billing_cycle_anchor_configuration")
            fun billingCycleAnchorConfiguration(
                billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration
            ) = apply { this.billingCycleAnchorConfiguration = billingCycleAnchorConfiguration }

            /**
             * Redemption code to be used for this subscription. If the coupon cannot be found by
             * its redemption code, or cannot be redeemed, an error response will be returned and
             * the subscription creation or plan change will not be scheduled.
             */
            @JsonProperty("coupon_redemption_code")
            fun couponRedemptionCode(couponRedemptionCode: String) = apply {
                this.couponRedemptionCode = couponRedemptionCode
            }

            @JsonProperty("credits_overage_rate")
            fun creditsOverageRate(creditsOverageRate: Double) = apply {
                this.creditsOverageRate = creditsOverageRate
            }

            @JsonProperty("customer_id")
            fun customerId(customerId: String) = apply { this.customerId = customerId }

            /**
             * Determines the default memo on this subscription's invoices. Note that if this is not
             * provided, it is determined by the plan configuration.
             */
            @JsonProperty("default_invoice_memo")
            fun defaultInvoiceMemo(defaultInvoiceMemo: String) = apply {
                this.defaultInvoiceMemo = defaultInvoiceMemo
            }

            @JsonProperty("end_date")
            fun endDate(endDate: OffsetDateTime) = apply { this.endDate = endDate }

            @JsonProperty("external_customer_id")
            fun externalCustomerId(externalCustomerId: String) = apply {
                this.externalCustomerId = externalCustomerId
            }

            @JsonProperty("external_marketplace")
            fun externalMarketplace(externalMarketplace: ExternalMarketplace) = apply {
                this.externalMarketplace = externalMarketplace
            }

            @JsonProperty("external_marketplace_reporting_id")
            fun externalMarketplaceReportingId(externalMarketplaceReportingId: String) = apply {
                this.externalMarketplaceReportingId = externalMarketplaceReportingId
            }

            /**
             * The external_plan_id of the plan that the given subscription should be switched to.
             * Note that either this property or `plan_id` must be specified.
             */
            @JsonProperty("external_plan_id")
            fun externalPlanId(externalPlanId: String) = apply {
                this.externalPlanId = externalPlanId
            }

            /** The phase of the plan to start with */
            @JsonProperty("initial_phase_order")
            fun initialPhaseOrder(initialPhaseOrder: Long) = apply {
                this.initialPhaseOrder = initialPhaseOrder
            }

            /**
             * When this subscription's accrued usage reaches this threshold, an invoice will be
             * issued for the subscription. If not specified, invoices will only be issued at the
             * end of the billing period.
             */
            @JsonProperty("invoicing_threshold")
            fun invoicingThreshold(invoicingThreshold: String) = apply {
                this.invoicingThreshold = invoicingThreshold
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0. If not
             * provided, this defaults to the value specified in the plan.
             */
            @JsonProperty("net_terms")
            fun netTerms(netTerms: Long) = apply { this.netTerms = netTerms }

            @JsonProperty("per_credit_overage_amount")
            fun perCreditOverageAmount(perCreditOverageAmount: Double) = apply {
                this.perCreditOverageAmount = perCreditOverageAmount
            }

            /**
             * The plan that the given subscription should be switched to. Note that either this
             * property or `external_plan_id` must be specified.
             */
            @JsonProperty("plan_id") fun planId(planId: String) = apply { this.planId = planId }

            /**
             * Specifies which version of the plan to subscribe to. If null, the default version
             * will be used.
             */
            @JsonProperty("plan_version_number")
            fun planVersionNumber(planVersionNumber: Long) = apply {
                this.planVersionNumber = planVersionNumber
            }

            /** Optionally provide a list of overrides for prices on the plan */
            @JsonProperty("price_overrides")
            fun priceOverrides(priceOverrides: List<JsonValue>) = apply {
                this.priceOverrides = priceOverrides
            }

            /**
             * Plan adjustments to be removed from the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            @JsonProperty("remove_adjustments")
            fun removeAdjustments(removeAdjustments: List<RemoveAdjustment>) = apply {
                this.removeAdjustments = removeAdjustments
            }

            /**
             * Plan prices to be removed from the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            @JsonProperty("remove_prices")
            fun removePrices(removePrices: List<RemovePrice>) = apply {
                this.removePrices = removePrices
            }

            /**
             * Plan adjustments to be replaced with additional adjustments on the subscription.
             * (Only available for accounts that have migrated off of legacy subscription overrides)
             */
            @JsonProperty("replace_adjustments")
            fun replaceAdjustments(replaceAdjustments: List<ReplaceAdjustment>) = apply {
                this.replaceAdjustments = replaceAdjustments
            }

            /**
             * Plan prices to be replaced with additional prices on the subscription. (Only
             * available for accounts that have migrated off of legacy subscription overrides)
             */
            @JsonProperty("replace_prices")
            fun replacePrices(replacePrices: List<ReplacePrice>) = apply {
                this.replacePrices = replacePrices
            }

            @JsonProperty("start_date")
            fun startDate(startDate: OffsetDateTime) = apply { this.startDate = startDate }

            /**
             * The duration of the trial period in days. If not provided, this defaults to the value
             * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
             */
            @JsonProperty("trial_duration_days")
            fun trialDurationDays(trialDurationDays: Long) = apply {
                this.trialDurationDays = trialDurationDays
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): SubscriptionCreateBody =
                SubscriptionCreateBody(
                    addAdjustments?.toImmutable(),
                    addPrices?.toImmutable(),
                    alignBillingWithSubscriptionStartDate,
                    autoCollection,
                    awsRegion,
                    billingCycleAnchorConfiguration,
                    couponRedemptionCode,
                    creditsOverageRate,
                    customerId,
                    defaultInvoiceMemo,
                    endDate,
                    externalCustomerId,
                    externalMarketplace,
                    externalMarketplaceReportingId,
                    externalPlanId,
                    initialPhaseOrder,
                    invoicingThreshold,
                    metadata,
                    netTerms,
                    perCreditOverageAmount,
                    planId,
                    planVersionNumber,
                    priceOverrides?.toImmutable(),
                    removeAdjustments?.toImmutable(),
                    removePrices?.toImmutable(),
                    replaceAdjustments?.toImmutable(),
                    replacePrices?.toImmutable(),
                    startDate,
                    trialDurationDays,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is SubscriptionCreateBody && this.addAdjustments == other.addAdjustments && this.addPrices == other.addPrices && this.alignBillingWithSubscriptionStartDate == other.alignBillingWithSubscriptionStartDate && this.autoCollection == other.autoCollection && this.awsRegion == other.awsRegion && this.billingCycleAnchorConfiguration == other.billingCycleAnchorConfiguration && this.couponRedemptionCode == other.couponRedemptionCode && this.creditsOverageRate == other.creditsOverageRate && this.customerId == other.customerId && this.defaultInvoiceMemo == other.defaultInvoiceMemo && this.endDate == other.endDate && this.externalCustomerId == other.externalCustomerId && this.externalMarketplace == other.externalMarketplace && this.externalMarketplaceReportingId == other.externalMarketplaceReportingId && this.externalPlanId == other.externalPlanId && this.initialPhaseOrder == other.initialPhaseOrder && this.invoicingThreshold == other.invoicingThreshold && this.metadata == other.metadata && this.netTerms == other.netTerms && this.perCreditOverageAmount == other.perCreditOverageAmount && this.planId == other.planId && this.planVersionNumber == other.planVersionNumber && this.priceOverrides == other.priceOverrides && this.removeAdjustments == other.removeAdjustments && this.removePrices == other.removePrices && this.replaceAdjustments == other.replaceAdjustments && this.replacePrices == other.replacePrices && this.startDate == other.startDate && this.trialDurationDays == other.trialDurationDays && this.additionalProperties == other.additionalProperties /* spotless:on */
        }

        private var hashCode: Int = 0

        override fun hashCode(): Int {
            if (hashCode == 0) {
                hashCode = /* spotless:off */ Objects.hash(addAdjustments, addPrices, alignBillingWithSubscriptionStartDate, autoCollection, awsRegion, billingCycleAnchorConfiguration, couponRedemptionCode, creditsOverageRate, customerId, defaultInvoiceMemo, endDate, externalCustomerId, externalMarketplace, externalMarketplaceReportingId, externalPlanId, initialPhaseOrder, invoicingThreshold, metadata, netTerms, perCreditOverageAmount, planId, planVersionNumber, priceOverrides, removeAdjustments, removePrices, replaceAdjustments, replacePrices, startDate, trialDurationDays, additionalProperties) /* spotless:on */
            }
            return hashCode
        }

        override fun toString() =
            "SubscriptionCreateBody{addAdjustments=$addAdjustments, addPrices=$addPrices, alignBillingWithSubscriptionStartDate=$alignBillingWithSubscriptionStartDate, autoCollection=$autoCollection, awsRegion=$awsRegion, billingCycleAnchorConfiguration=$billingCycleAnchorConfiguration, couponRedemptionCode=$couponRedemptionCode, creditsOverageRate=$creditsOverageRate, customerId=$customerId, defaultInvoiceMemo=$defaultInvoiceMemo, endDate=$endDate, externalCustomerId=$externalCustomerId, externalMarketplace=$externalMarketplace, externalMarketplaceReportingId=$externalMarketplaceReportingId, externalPlanId=$externalPlanId, initialPhaseOrder=$initialPhaseOrder, invoicingThreshold=$invoicingThreshold, metadata=$metadata, netTerms=$netTerms, perCreditOverageAmount=$perCreditOverageAmount, planId=$planId, planVersionNumber=$planVersionNumber, priceOverrides=$priceOverrides, removeAdjustments=$removeAdjustments, removePrices=$removePrices, replaceAdjustments=$replaceAdjustments, replacePrices=$replacePrices, startDate=$startDate, trialDurationDays=$trialDurationDays, additionalProperties=$additionalProperties}"
    }

    fun _additionalQueryParams(): Map<String, List<String>> = additionalQueryParams

    fun _additionalHeaders(): Map<String, List<String>> = additionalHeaders

    fun _additionalBodyProperties(): Map<String, JsonValue> = additionalBodyProperties

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is SubscriptionCreateParams && this.addAdjustments == other.addAdjustments && this.addPrices == other.addPrices && this.alignBillingWithSubscriptionStartDate == other.alignBillingWithSubscriptionStartDate && this.autoCollection == other.autoCollection && this.awsRegion == other.awsRegion && this.billingCycleAnchorConfiguration == other.billingCycleAnchorConfiguration && this.couponRedemptionCode == other.couponRedemptionCode && this.creditsOverageRate == other.creditsOverageRate && this.customerId == other.customerId && this.defaultInvoiceMemo == other.defaultInvoiceMemo && this.endDate == other.endDate && this.externalCustomerId == other.externalCustomerId && this.externalMarketplace == other.externalMarketplace && this.externalMarketplaceReportingId == other.externalMarketplaceReportingId && this.externalPlanId == other.externalPlanId && this.initialPhaseOrder == other.initialPhaseOrder && this.invoicingThreshold == other.invoicingThreshold && this.metadata == other.metadata && this.netTerms == other.netTerms && this.perCreditOverageAmount == other.perCreditOverageAmount && this.planId == other.planId && this.planVersionNumber == other.planVersionNumber && this.priceOverrides == other.priceOverrides && this.removeAdjustments == other.removeAdjustments && this.removePrices == other.removePrices && this.replaceAdjustments == other.replaceAdjustments && this.replacePrices == other.replacePrices && this.startDate == other.startDate && this.trialDurationDays == other.trialDurationDays && this.additionalQueryParams == other.additionalQueryParams && this.additionalHeaders == other.additionalHeaders && this.additionalBodyProperties == other.additionalBodyProperties /* spotless:on */
    }

    override fun hashCode(): Int {
        return /* spotless:off */ Objects.hash(addAdjustments, addPrices, alignBillingWithSubscriptionStartDate, autoCollection, awsRegion, billingCycleAnchorConfiguration, couponRedemptionCode, creditsOverageRate, customerId, defaultInvoiceMemo, endDate, externalCustomerId, externalMarketplace, externalMarketplaceReportingId, externalPlanId, initialPhaseOrder, invoicingThreshold, metadata, netTerms, perCreditOverageAmount, planId, planVersionNumber, priceOverrides, removeAdjustments, removePrices, replaceAdjustments, replacePrices, startDate, trialDurationDays, additionalQueryParams, additionalHeaders, additionalBodyProperties) /* spotless:on */
    }

    override fun toString() =
        "SubscriptionCreateParams{addAdjustments=$addAdjustments, addPrices=$addPrices, alignBillingWithSubscriptionStartDate=$alignBillingWithSubscriptionStartDate, autoCollection=$autoCollection, awsRegion=$awsRegion, billingCycleAnchorConfiguration=$billingCycleAnchorConfiguration, couponRedemptionCode=$couponRedemptionCode, creditsOverageRate=$creditsOverageRate, customerId=$customerId, defaultInvoiceMemo=$defaultInvoiceMemo, endDate=$endDate, externalCustomerId=$externalCustomerId, externalMarketplace=$externalMarketplace, externalMarketplaceReportingId=$externalMarketplaceReportingId, externalPlanId=$externalPlanId, initialPhaseOrder=$initialPhaseOrder, invoicingThreshold=$invoicingThreshold, metadata=$metadata, netTerms=$netTerms, perCreditOverageAmount=$perCreditOverageAmount, planId=$planId, planVersionNumber=$planVersionNumber, priceOverrides=$priceOverrides, removeAdjustments=$removeAdjustments, removePrices=$removePrices, replaceAdjustments=$replaceAdjustments, replacePrices=$replacePrices, startDate=$startDate, trialDurationDays=$trialDurationDays, additionalQueryParams=$additionalQueryParams, additionalHeaders=$additionalHeaders, additionalBodyProperties=$additionalBodyProperties}"

    fun toBuilder() = Builder().from(this)

    companion object {

        @JvmStatic fun builder() = Builder()
    }

    @NoAutoDetect
    class Builder {

        private var addAdjustments: MutableList<AddAdjustment> = mutableListOf()
        private var addPrices: MutableList<AddPrice> = mutableListOf()
        private var alignBillingWithSubscriptionStartDate: Boolean? = null
        private var autoCollection: Boolean? = null
        private var awsRegion: String? = null
        private var billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration? = null
        private var couponRedemptionCode: String? = null
        private var creditsOverageRate: Double? = null
        private var customerId: String? = null
        private var defaultInvoiceMemo: String? = null
        private var endDate: OffsetDateTime? = null
        private var externalCustomerId: String? = null
        private var externalMarketplace: ExternalMarketplace? = null
        private var externalMarketplaceReportingId: String? = null
        private var externalPlanId: String? = null
        private var initialPhaseOrder: Long? = null
        private var invoicingThreshold: String? = null
        private var metadata: Metadata? = null
        private var netTerms: Long? = null
        private var perCreditOverageAmount: Double? = null
        private var planId: String? = null
        private var planVersionNumber: Long? = null
        private var priceOverrides: MutableList<JsonValue> = mutableListOf()
        private var removeAdjustments: MutableList<RemoveAdjustment> = mutableListOf()
        private var removePrices: MutableList<RemovePrice> = mutableListOf()
        private var replaceAdjustments: MutableList<ReplaceAdjustment> = mutableListOf()
        private var replacePrices: MutableList<ReplacePrice> = mutableListOf()
        private var startDate: OffsetDateTime? = null
        private var trialDurationDays: Long? = null
        private var additionalQueryParams: MutableMap<String, MutableList<String>> = mutableMapOf()
        private var additionalHeaders: MutableMap<String, MutableList<String>> = mutableMapOf()
        private var additionalBodyProperties: MutableMap<String, JsonValue> = mutableMapOf()

        @JvmSynthetic
        internal fun from(subscriptionCreateParams: SubscriptionCreateParams) = apply {
            this.addAdjustments(subscriptionCreateParams.addAdjustments ?: listOf())
            this.addPrices(subscriptionCreateParams.addPrices ?: listOf())
            this.alignBillingWithSubscriptionStartDate =
                subscriptionCreateParams.alignBillingWithSubscriptionStartDate
            this.autoCollection = subscriptionCreateParams.autoCollection
            this.awsRegion = subscriptionCreateParams.awsRegion
            this.billingCycleAnchorConfiguration =
                subscriptionCreateParams.billingCycleAnchorConfiguration
            this.couponRedemptionCode = subscriptionCreateParams.couponRedemptionCode
            this.creditsOverageRate = subscriptionCreateParams.creditsOverageRate
            this.customerId = subscriptionCreateParams.customerId
            this.defaultInvoiceMemo = subscriptionCreateParams.defaultInvoiceMemo
            this.endDate = subscriptionCreateParams.endDate
            this.externalCustomerId = subscriptionCreateParams.externalCustomerId
            this.externalMarketplace = subscriptionCreateParams.externalMarketplace
            this.externalMarketplaceReportingId =
                subscriptionCreateParams.externalMarketplaceReportingId
            this.externalPlanId = subscriptionCreateParams.externalPlanId
            this.initialPhaseOrder = subscriptionCreateParams.initialPhaseOrder
            this.invoicingThreshold = subscriptionCreateParams.invoicingThreshold
            this.metadata = subscriptionCreateParams.metadata
            this.netTerms = subscriptionCreateParams.netTerms
            this.perCreditOverageAmount = subscriptionCreateParams.perCreditOverageAmount
            this.planId = subscriptionCreateParams.planId
            this.planVersionNumber = subscriptionCreateParams.planVersionNumber
            this.priceOverrides(subscriptionCreateParams.priceOverrides ?: listOf())
            this.removeAdjustments(subscriptionCreateParams.removeAdjustments ?: listOf())
            this.removePrices(subscriptionCreateParams.removePrices ?: listOf())
            this.replaceAdjustments(subscriptionCreateParams.replaceAdjustments ?: listOf())
            this.replacePrices(subscriptionCreateParams.replacePrices ?: listOf())
            this.startDate = subscriptionCreateParams.startDate
            this.trialDurationDays = subscriptionCreateParams.trialDurationDays
            additionalQueryParams(subscriptionCreateParams.additionalQueryParams)
            additionalHeaders(subscriptionCreateParams.additionalHeaders)
            additionalBodyProperties(subscriptionCreateParams.additionalBodyProperties)
        }

        /**
         * Additional adjustments to be added to the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun addAdjustments(addAdjustments: List<AddAdjustment>) = apply {
            this.addAdjustments.clear()
            this.addAdjustments.addAll(addAdjustments)
        }

        /**
         * Additional adjustments to be added to the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun addAddAdjustment(addAdjustment: AddAdjustment) = apply {
            this.addAdjustments.add(addAdjustment)
        }

        /**
         * Additional prices to be added to the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun addPrices(addPrices: List<AddPrice>) = apply {
            this.addPrices.clear()
            this.addPrices.addAll(addPrices)
        }

        /**
         * Additional prices to be added to the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun addAddPrice(addPrice: AddPrice) = apply { this.addPrices.add(addPrice) }

        fun alignBillingWithSubscriptionStartDate(alignBillingWithSubscriptionStartDate: Boolean) =
            apply {
                this.alignBillingWithSubscriptionStartDate = alignBillingWithSubscriptionStartDate
            }

        /**
         * Determines whether issued invoices for this subscription will automatically be charged
         * with the saved payment method on the due date. If not specified, this defaults to the
         * behavior configured for this customer.
         */
        fun autoCollection(autoCollection: Boolean) = apply { this.autoCollection = autoCollection }

        fun awsRegion(awsRegion: String) = apply { this.awsRegion = awsRegion }

        fun billingCycleAnchorConfiguration(
            billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration
        ) = apply { this.billingCycleAnchorConfiguration = billingCycleAnchorConfiguration }

        /**
         * Redemption code to be used for this subscription. If the coupon cannot be found by its
         * redemption code, or cannot be redeemed, an error response will be returned and the
         * subscription creation or plan change will not be scheduled.
         */
        fun couponRedemptionCode(couponRedemptionCode: String) = apply {
            this.couponRedemptionCode = couponRedemptionCode
        }

        fun creditsOverageRate(creditsOverageRate: Double) = apply {
            this.creditsOverageRate = creditsOverageRate
        }

        fun customerId(customerId: String) = apply { this.customerId = customerId }

        /**
         * Determines the default memo on this subscription's invoices. Note that if this is not
         * provided, it is determined by the plan configuration.
         */
        fun defaultInvoiceMemo(defaultInvoiceMemo: String) = apply {
            this.defaultInvoiceMemo = defaultInvoiceMemo
        }

        fun endDate(endDate: OffsetDateTime) = apply { this.endDate = endDate }

        fun externalCustomerId(externalCustomerId: String) = apply {
            this.externalCustomerId = externalCustomerId
        }

        fun externalMarketplace(externalMarketplace: ExternalMarketplace) = apply {
            this.externalMarketplace = externalMarketplace
        }

        fun externalMarketplaceReportingId(externalMarketplaceReportingId: String) = apply {
            this.externalMarketplaceReportingId = externalMarketplaceReportingId
        }

        /**
         * The external_plan_id of the plan that the given subscription should be switched to. Note
         * that either this property or `plan_id` must be specified.
         */
        fun externalPlanId(externalPlanId: String) = apply { this.externalPlanId = externalPlanId }

        /** The phase of the plan to start with */
        fun initialPhaseOrder(initialPhaseOrder: Long) = apply {
            this.initialPhaseOrder = initialPhaseOrder
        }

        /**
         * When this subscription's accrued usage reaches this threshold, an invoice will be issued
         * for the subscription. If not specified, invoices will only be issued at the end of the
         * billing period.
         */
        fun invoicingThreshold(invoicingThreshold: String) = apply {
            this.invoicingThreshold = invoicingThreshold
        }

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed by
         * setting the value to `null`, and the entire metadata mapping can be cleared by setting
         * `metadata` to `null`.
         */
        fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0. If not
         * provided, this defaults to the value specified in the plan.
         */
        fun netTerms(netTerms: Long) = apply { this.netTerms = netTerms }

        fun perCreditOverageAmount(perCreditOverageAmount: Double) = apply {
            this.perCreditOverageAmount = perCreditOverageAmount
        }

        /**
         * The plan that the given subscription should be switched to. Note that either this
         * property or `external_plan_id` must be specified.
         */
        fun planId(planId: String) = apply { this.planId = planId }

        /**
         * Specifies which version of the plan to subscribe to. If null, the default version will be
         * used.
         */
        fun planVersionNumber(planVersionNumber: Long) = apply {
            this.planVersionNumber = planVersionNumber
        }

        /** Optionally provide a list of overrides for prices on the plan */
        fun priceOverrides(priceOverrides: List<JsonValue>) = apply {
            this.priceOverrides.clear()
            this.priceOverrides.addAll(priceOverrides)
        }

        /** Optionally provide a list of overrides for prices on the plan */
        fun addPriceOverride(priceOverride: JsonValue) = apply {
            this.priceOverrides.add(priceOverride)
        }

        /**
         * Plan adjustments to be removed from the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun removeAdjustments(removeAdjustments: List<RemoveAdjustment>) = apply {
            this.removeAdjustments.clear()
            this.removeAdjustments.addAll(removeAdjustments)
        }

        /**
         * Plan adjustments to be removed from the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun addRemoveAdjustment(removeAdjustment: RemoveAdjustment) = apply {
            this.removeAdjustments.add(removeAdjustment)
        }

        /**
         * Plan prices to be removed from the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun removePrices(removePrices: List<RemovePrice>) = apply {
            this.removePrices.clear()
            this.removePrices.addAll(removePrices)
        }

        /**
         * Plan prices to be removed from the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun addRemovePrice(removePrice: RemovePrice) = apply { this.removePrices.add(removePrice) }

        /**
         * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
         * available for accounts that have migrated off of legacy subscription overrides)
         */
        fun replaceAdjustments(replaceAdjustments: List<ReplaceAdjustment>) = apply {
            this.replaceAdjustments.clear()
            this.replaceAdjustments.addAll(replaceAdjustments)
        }

        /**
         * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
         * available for accounts that have migrated off of legacy subscription overrides)
         */
        fun addReplaceAdjustment(replaceAdjustment: ReplaceAdjustment) = apply {
            this.replaceAdjustments.add(replaceAdjustment)
        }

        /**
         * Plan prices to be replaced with additional prices on the subscription. (Only available
         * for accounts that have migrated off of legacy subscription overrides)
         */
        fun replacePrices(replacePrices: List<ReplacePrice>) = apply {
            this.replacePrices.clear()
            this.replacePrices.addAll(replacePrices)
        }

        /**
         * Plan prices to be replaced with additional prices on the subscription. (Only available
         * for accounts that have migrated off of legacy subscription overrides)
         */
        fun addReplacePrice(replacePrice: ReplacePrice) = apply {
            this.replacePrices.add(replacePrice)
        }

        fun startDate(startDate: OffsetDateTime) = apply { this.startDate = startDate }

        /**
         * The duration of the trial period in days. If not provided, this defaults to the value
         * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
         */
        fun trialDurationDays(trialDurationDays: Long) = apply {
            this.trialDurationDays = trialDurationDays
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, List<String>>) = apply {
            this.additionalQueryParams.clear()
            putAllQueryParams(additionalQueryParams)
        }

        fun putQueryParam(name: String, value: String) = apply {
            this.additionalQueryParams.getOrPut(name) { mutableListOf() }.add(value)
        }

        fun putQueryParams(name: String, values: Iterable<String>) = apply {
            this.additionalQueryParams.getOrPut(name) { mutableListOf() }.addAll(values)
        }

        fun putAllQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            additionalQueryParams.forEach(this::putQueryParams)
        }

        fun removeQueryParam(name: String) = apply {
            this.additionalQueryParams.put(name, mutableListOf())
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAllHeaders(additionalHeaders)
        }

        fun putHeader(name: String, value: String) = apply {
            this.additionalHeaders.getOrPut(name) { mutableListOf() }.add(value)
        }

        fun putHeaders(name: String, values: Iterable<String>) = apply {
            this.additionalHeaders.getOrPut(name) { mutableListOf() }.addAll(values)
        }

        fun putAllHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            additionalHeaders.forEach(this::putHeaders)
        }

        fun removeHeader(name: String) = apply { this.additionalHeaders.put(name, mutableListOf()) }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            this.additionalBodyProperties.clear()
            this.additionalBodyProperties.putAll(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            this.additionalBodyProperties.put(key, value)
        }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                this.additionalBodyProperties.putAll(additionalBodyProperties)
            }

        fun build(): SubscriptionCreateParams =
            SubscriptionCreateParams(
                if (addAdjustments.size == 0) null else addAdjustments.toImmutable(),
                if (addPrices.size == 0) null else addPrices.toImmutable(),
                alignBillingWithSubscriptionStartDate,
                autoCollection,
                awsRegion,
                billingCycleAnchorConfiguration,
                couponRedemptionCode,
                creditsOverageRate,
                customerId,
                defaultInvoiceMemo,
                endDate,
                externalCustomerId,
                externalMarketplace,
                externalMarketplaceReportingId,
                externalPlanId,
                initialPhaseOrder,
                invoicingThreshold,
                metadata,
                netTerms,
                perCreditOverageAmount,
                planId,
                planVersionNumber,
                if (priceOverrides.size == 0) null else priceOverrides.toImmutable(),
                if (removeAdjustments.size == 0) null else removeAdjustments.toImmutable(),
                if (removePrices.size == 0) null else removePrices.toImmutable(),
                if (replaceAdjustments.size == 0) null else replaceAdjustments.toImmutable(),
                if (replacePrices.size == 0) null else replacePrices.toImmutable(),
                startDate,
                trialDurationDays,
                additionalQueryParams.mapValues { it.value.toImmutable() }.toImmutable(),
                additionalHeaders.mapValues { it.value.toImmutable() }.toImmutable(),
                additionalBodyProperties.toImmutable(),
            )
    }

    @JsonDeserialize(builder = AddAdjustment.Builder::class)
    @NoAutoDetect
    class AddAdjustment
    private constructor(
        private val adjustment: Adjustment?,
        private val startDate: OffsetDateTime?,
        private val endDate: OffsetDateTime?,
        private val planPhaseOrder: Long?,
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonProperty("adjustment") fun adjustment(): Adjustment? = adjustment

        /**
         * The start date of the adjustment interval. This is the date that the adjustment will
         * start affecting prices on the subscription. If null, the adjustment will start when the
         * phase or subscription starts.
         */
        @JsonProperty("start_date") fun startDate(): OffsetDateTime? = startDate

        /**
         * The end date of the adjustment interval. This is the date that the adjustment will stop
         * affecting prices on the subscription. If null, the adjustment will start when the phase
         * or subscription starts.
         */
        @JsonProperty("end_date") fun endDate(): OffsetDateTime? = endDate

        /** The phase to add this adjustment to. */
        @JsonProperty("plan_phase_order") fun planPhaseOrder(): Long? = planPhaseOrder

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var adjustment: Adjustment? = null
            private var startDate: OffsetDateTime? = null
            private var endDate: OffsetDateTime? = null
            private var planPhaseOrder: Long? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(addAdjustment: AddAdjustment) = apply {
                this.adjustment = addAdjustment.adjustment
                this.startDate = addAdjustment.startDate
                this.endDate = addAdjustment.endDate
                this.planPhaseOrder = addAdjustment.planPhaseOrder
                additionalProperties(addAdjustment.additionalProperties)
            }

            /** The definition of a new adjustment to create and add to the subscription. */
            @JsonProperty("adjustment")
            fun adjustment(adjustment: Adjustment) = apply { this.adjustment = adjustment }

            /**
             * The start date of the adjustment interval. This is the date that the adjustment will
             * start affecting prices on the subscription. If null, the adjustment will start when
             * the phase or subscription starts.
             */
            @JsonProperty("start_date")
            fun startDate(startDate: OffsetDateTime) = apply { this.startDate = startDate }

            /**
             * The end date of the adjustment interval. This is the date that the adjustment will
             * stop affecting prices on the subscription. If null, the adjustment will start when
             * the phase or subscription starts.
             */
            @JsonProperty("end_date")
            fun endDate(endDate: OffsetDateTime) = apply { this.endDate = endDate }

            /** The phase to add this adjustment to. */
            @JsonProperty("plan_phase_order")
            fun planPhaseOrder(planPhaseOrder: Long) = apply {
                this.planPhaseOrder = planPhaseOrder
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): AddAdjustment =
                AddAdjustment(
                    checkNotNull(adjustment) { "`adjustment` is required but was not set" },
                    startDate,
                    endDate,
                    planPhaseOrder,
                    additionalProperties.toImmutable(),
                )
        }

        @JsonDeserialize(using = Adjustment.Deserializer::class)
        @JsonSerialize(using = Adjustment.Serializer::class)
        class Adjustment
        private constructor(
            private val newPercentageDiscount: NewPercentageDiscount? = null,
            private val newAmountDiscount: NewAmountDiscount? = null,
            private val newMinimum: NewMinimum? = null,
            private val newMaximum: NewMaximum? = null,
            private val _json: JsonValue? = null,
        ) {

            private var validated: Boolean = false

            fun newPercentageDiscount(): Optional<NewPercentageDiscount> =
                Optional.ofNullable(newPercentageDiscount)

            fun newAmountDiscount(): Optional<NewAmountDiscount> =
                Optional.ofNullable(newAmountDiscount)

            fun newMinimum(): Optional<NewMinimum> = Optional.ofNullable(newMinimum)

            fun newMaximum(): Optional<NewMaximum> = Optional.ofNullable(newMaximum)

            fun isNewPercentageDiscount(): Boolean = newPercentageDiscount != null

            fun isNewAmountDiscount(): Boolean = newAmountDiscount != null

            fun isNewMinimum(): Boolean = newMinimum != null

            fun isNewMaximum(): Boolean = newMaximum != null

            fun asNewPercentageDiscount(): NewPercentageDiscount =
                newPercentageDiscount.getOrThrow("newPercentageDiscount")

            fun asNewAmountDiscount(): NewAmountDiscount =
                newAmountDiscount.getOrThrow("newAmountDiscount")

            fun asNewMinimum(): NewMinimum = newMinimum.getOrThrow("newMinimum")

            fun asNewMaximum(): NewMaximum = newMaximum.getOrThrow("newMaximum")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newPercentageDiscount != null ->
                        visitor.visitNewPercentageDiscount(newPercentageDiscount)
                    newAmountDiscount != null -> visitor.visitNewAmountDiscount(newAmountDiscount)
                    newMinimum != null -> visitor.visitNewMinimum(newMinimum)
                    newMaximum != null -> visitor.visitNewMaximum(newMaximum)
                    else -> visitor.unknown(_json)
                }
            }

            fun validate(): Adjustment = apply {
                if (!validated) {
                    if (
                        newPercentageDiscount == null &&
                            newAmountDiscount == null &&
                            newMinimum == null &&
                            newMaximum == null
                    ) {
                        throw OrbInvalidDataException("Unknown Adjustment: $_json")
                    }
                    newPercentageDiscount?.validate()
                    newAmountDiscount?.validate()
                    newMinimum?.validate()
                    newMaximum?.validate()
                    validated = true
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Adjustment && this.newPercentageDiscount == other.newPercentageDiscount && this.newAmountDiscount == other.newAmountDiscount && this.newMinimum == other.newMinimum && this.newMaximum == other.newMaximum /* spotless:on */
            }

            override fun hashCode(): Int {
                return /* spotless:off */ Objects.hash(newPercentageDiscount, newAmountDiscount, newMinimum, newMaximum) /* spotless:on */
            }

            override fun toString(): String {
                return when {
                    newPercentageDiscount != null ->
                        "Adjustment{newPercentageDiscount=$newPercentageDiscount}"
                    newAmountDiscount != null -> "Adjustment{newAmountDiscount=$newAmountDiscount}"
                    newMinimum != null -> "Adjustment{newMinimum=$newMinimum}"
                    newMaximum != null -> "Adjustment{newMaximum=$newMaximum}"
                    _json != null -> "Adjustment{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Adjustment")
                }
            }

            companion object {

                @JvmStatic
                fun ofNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount) =
                    Adjustment(newPercentageDiscount = newPercentageDiscount)

                @JvmStatic
                fun ofNewAmountDiscount(newAmountDiscount: NewAmountDiscount) =
                    Adjustment(newAmountDiscount = newAmountDiscount)

                @JvmStatic
                fun ofNewMinimum(newMinimum: NewMinimum) = Adjustment(newMinimum = newMinimum)

                @JvmStatic
                fun ofNewMaximum(newMaximum: NewMaximum) = Adjustment(newMaximum = newMaximum)
            }

            interface Visitor<out T> {

                fun visitNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount): T

                fun visitNewAmountDiscount(newAmountDiscount: NewAmountDiscount): T

                fun visitNewMinimum(newMinimum: NewMinimum): T

                fun visitNewMaximum(newMaximum: NewMaximum): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Adjustment: $json")
                }
            }

            class Deserializer : BaseDeserializer<Adjustment>(Adjustment::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Adjustment {
                    val json = JsonValue.fromJsonNode(node)
                    val adjustmentType =
                        json.asObject().getOrNull()?.get("adjustment_type")?.asString()?.getOrNull()

                    when (adjustmentType) {
                        "percentage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewPercentageDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newPercentageDiscount = it, _json = json)
                                }
                        }
                        "amount_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewAmountDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newAmountDiscount = it, _json = json)
                                }
                        }
                        "minimum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMinimum>()) { it.validate() }
                                ?.let {
                                    return Adjustment(newMinimum = it, _json = json)
                                }
                        }
                        "maximum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMaximum>()) { it.validate() }
                                ?.let {
                                    return Adjustment(newMaximum = it, _json = json)
                                }
                        }
                    }

                    return Adjustment(_json = json)
                }
            }

            class Serializer : BaseSerializer<Adjustment>(Adjustment::class) {

                override fun serialize(
                    value: Adjustment,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.newPercentageDiscount != null ->
                            generator.writeObject(value.newPercentageDiscount)
                        value.newAmountDiscount != null ->
                            generator.writeObject(value.newAmountDiscount)
                        value.newMinimum != null -> generator.writeObject(value.newMinimum)
                        value.newMaximum != null -> generator.writeObject(value.newMaximum)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Adjustment")
                    }
                }
            }

            @JsonDeserialize(builder = NewPercentageDiscount.Builder::class)
            @NoAutoDetect
            class NewPercentageDiscount
            private constructor(
                private val appliesToPriceIds: JsonField<List<String>>,
                private val adjustmentType: JsonField<AdjustmentType>,
                private val percentageDiscount: JsonField<Double>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                fun percentageDiscount(): Double =
                    percentageDiscount.getRequired("percentage_discount")

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds() = appliesToPriceIds

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType() = adjustmentType

                @JsonProperty("percentage_discount")
                @ExcludeMissing
                fun _percentageDiscount() = percentageDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewPercentageDiscount = apply {
                    if (!validated) {
                        appliesToPriceIds()
                        adjustmentType()
                        percentageDiscount()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var appliesToPriceIds: JsonField<List<String>> = JsonMissing.of()
                    private var adjustmentType: JsonField<AdjustmentType> = JsonMissing.of()
                    private var percentageDiscount: JsonField<Double> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newPercentageDiscount: NewPercentageDiscount) = apply {
                        this.appliesToPriceIds = newPercentageDiscount.appliesToPriceIds
                        this.adjustmentType = newPercentageDiscount.adjustmentType
                        this.percentageDiscount = newPercentageDiscount.percentageDiscount
                        additionalProperties(newPercentageDiscount.additionalProperties)
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    @JsonProperty("applies_to_price_ids")
                    @ExcludeMissing
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    @JsonProperty("adjustment_type")
                    @ExcludeMissing
                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun percentageDiscount(percentageDiscount: Double) =
                        percentageDiscount(JsonField.of(percentageDiscount))

                    @JsonProperty("percentage_discount")
                    @ExcludeMissing
                    fun percentageDiscount(percentageDiscount: JsonField<Double>) = apply {
                        this.percentageDiscount = percentageDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewPercentageDiscount =
                        NewPercentageDiscount(
                            appliesToPriceIds.map { it.toImmutable() },
                            adjustmentType,
                            percentageDiscount,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val PERCENTAGE_DISCOUNT =
                            AdjustmentType(JsonField.of("percentage_discount"))

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        PERCENTAGE_DISCOUNT,
                    }

                    enum class Value {
                        PERCENTAGE_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Value.PERCENTAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Known.PERCENTAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewPercentageDiscount && this.appliesToPriceIds == other.appliesToPriceIds && this.adjustmentType == other.adjustmentType && this.percentageDiscount == other.percentageDiscount && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(appliesToPriceIds, adjustmentType, percentageDiscount, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewPercentageDiscount{appliesToPriceIds=$appliesToPriceIds, adjustmentType=$adjustmentType, percentageDiscount=$percentageDiscount, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewAmountDiscount.Builder::class)
            @NoAutoDetect
            class NewAmountDiscount
            private constructor(
                private val appliesToPriceIds: JsonField<List<String>>,
                private val adjustmentType: JsonField<AdjustmentType>,
                private val amountDiscount: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                fun amountDiscount(): String = amountDiscount.getRequired("amount_discount")

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds() = appliesToPriceIds

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType() = adjustmentType

                @JsonProperty("amount_discount")
                @ExcludeMissing
                fun _amountDiscount() = amountDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewAmountDiscount = apply {
                    if (!validated) {
                        appliesToPriceIds()
                        adjustmentType()
                        amountDiscount()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var appliesToPriceIds: JsonField<List<String>> = JsonMissing.of()
                    private var adjustmentType: JsonField<AdjustmentType> = JsonMissing.of()
                    private var amountDiscount: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newAmountDiscount: NewAmountDiscount) = apply {
                        this.appliesToPriceIds = newAmountDiscount.appliesToPriceIds
                        this.adjustmentType = newAmountDiscount.adjustmentType
                        this.amountDiscount = newAmountDiscount.amountDiscount
                        additionalProperties(newAmountDiscount.additionalProperties)
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    @JsonProperty("applies_to_price_ids")
                    @ExcludeMissing
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    @JsonProperty("adjustment_type")
                    @ExcludeMissing
                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun amountDiscount(amountDiscount: String) =
                        amountDiscount(JsonField.of(amountDiscount))

                    @JsonProperty("amount_discount")
                    @ExcludeMissing
                    fun amountDiscount(amountDiscount: JsonField<String>) = apply {
                        this.amountDiscount = amountDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewAmountDiscount =
                        NewAmountDiscount(
                            appliesToPriceIds.map { it.toImmutable() },
                            adjustmentType,
                            amountDiscount,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val AMOUNT_DISCOUNT = AdjustmentType(JsonField.of("amount_discount"))

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        AMOUNT_DISCOUNT,
                    }

                    enum class Value {
                        AMOUNT_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            AMOUNT_DISCOUNT -> Value.AMOUNT_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            AMOUNT_DISCOUNT -> Known.AMOUNT_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewAmountDiscount && this.appliesToPriceIds == other.appliesToPriceIds && this.adjustmentType == other.adjustmentType && this.amountDiscount == other.amountDiscount && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(appliesToPriceIds, adjustmentType, amountDiscount, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewAmountDiscount{appliesToPriceIds=$appliesToPriceIds, adjustmentType=$adjustmentType, amountDiscount=$amountDiscount, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewMinimum.Builder::class)
            @NoAutoDetect
            class NewMinimum
            private constructor(
                private val appliesToPriceIds: JsonField<List<String>>,
                private val adjustmentType: JsonField<AdjustmentType>,
                private val minimumAmount: JsonField<String>,
                private val itemId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                /** The item ID that revenue from this minimum will be attributed to. */
                fun itemId(): String = itemId.getRequired("item_id")

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds() = appliesToPriceIds

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType() = adjustmentType

                @JsonProperty("minimum_amount") @ExcludeMissing fun _minimumAmount() = minimumAmount

                /** The item ID that revenue from this minimum will be attributed to. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewMinimum = apply {
                    if (!validated) {
                        appliesToPriceIds()
                        adjustmentType()
                        minimumAmount()
                        itemId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var appliesToPriceIds: JsonField<List<String>> = JsonMissing.of()
                    private var adjustmentType: JsonField<AdjustmentType> = JsonMissing.of()
                    private var minimumAmount: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMinimum: NewMinimum) = apply {
                        this.appliesToPriceIds = newMinimum.appliesToPriceIds
                        this.adjustmentType = newMinimum.adjustmentType
                        this.minimumAmount = newMinimum.minimumAmount
                        this.itemId = newMinimum.itemId
                        additionalProperties(newMinimum.additionalProperties)
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    @JsonProperty("applies_to_price_ids")
                    @ExcludeMissing
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    @JsonProperty("adjustment_type")
                    @ExcludeMissing
                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun minimumAmount(minimumAmount: String) =
                        minimumAmount(JsonField.of(minimumAmount))

                    @JsonProperty("minimum_amount")
                    @ExcludeMissing
                    fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                        this.minimumAmount = minimumAmount
                    }

                    /** The item ID that revenue from this minimum will be attributed to. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The item ID that revenue from this minimum will be attributed to. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewMinimum =
                        NewMinimum(
                            appliesToPriceIds.map { it.toImmutable() },
                            adjustmentType,
                            minimumAmount,
                            itemId,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val MINIMUM = AdjustmentType(JsonField.of("minimum"))

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        MINIMUM,
                    }

                    enum class Value {
                        MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MINIMUM -> Value.MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MINIMUM -> Known.MINIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMinimum && this.appliesToPriceIds == other.appliesToPriceIds && this.adjustmentType == other.adjustmentType && this.minimumAmount == other.minimumAmount && this.itemId == other.itemId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(appliesToPriceIds, adjustmentType, minimumAmount, itemId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewMinimum{appliesToPriceIds=$appliesToPriceIds, adjustmentType=$adjustmentType, minimumAmount=$minimumAmount, itemId=$itemId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewMaximum.Builder::class)
            @NoAutoDetect
            class NewMaximum
            private constructor(
                private val appliesToPriceIds: JsonField<List<String>>,
                private val adjustmentType: JsonField<AdjustmentType>,
                private val maximumAmount: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                fun maximumAmount(): String = maximumAmount.getRequired("maximum_amount")

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds() = appliesToPriceIds

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType() = adjustmentType

                @JsonProperty("maximum_amount") @ExcludeMissing fun _maximumAmount() = maximumAmount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewMaximum = apply {
                    if (!validated) {
                        appliesToPriceIds()
                        adjustmentType()
                        maximumAmount()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var appliesToPriceIds: JsonField<List<String>> = JsonMissing.of()
                    private var adjustmentType: JsonField<AdjustmentType> = JsonMissing.of()
                    private var maximumAmount: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMaximum: NewMaximum) = apply {
                        this.appliesToPriceIds = newMaximum.appliesToPriceIds
                        this.adjustmentType = newMaximum.adjustmentType
                        this.maximumAmount = newMaximum.maximumAmount
                        additionalProperties(newMaximum.additionalProperties)
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    @JsonProperty("applies_to_price_ids")
                    @ExcludeMissing
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    @JsonProperty("adjustment_type")
                    @ExcludeMissing
                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun maximumAmount(maximumAmount: String) =
                        maximumAmount(JsonField.of(maximumAmount))

                    @JsonProperty("maximum_amount")
                    @ExcludeMissing
                    fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                        this.maximumAmount = maximumAmount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewMaximum =
                        NewMaximum(
                            appliesToPriceIds.map { it.toImmutable() },
                            adjustmentType,
                            maximumAmount,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val MAXIMUM = AdjustmentType(JsonField.of("maximum"))

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        MAXIMUM,
                    }

                    enum class Value {
                        MAXIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MAXIMUM -> Value.MAXIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MAXIMUM -> Known.MAXIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMaximum && this.appliesToPriceIds == other.appliesToPriceIds && this.adjustmentType == other.adjustmentType && this.maximumAmount == other.maximumAmount && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(appliesToPriceIds, adjustmentType, maximumAmount, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewMaximum{appliesToPriceIds=$appliesToPriceIds, adjustmentType=$adjustmentType, maximumAmount=$maximumAmount, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is AddAdjustment && this.adjustment == other.adjustment && this.startDate == other.startDate && this.endDate == other.endDate && this.planPhaseOrder == other.planPhaseOrder && this.additionalProperties == other.additionalProperties /* spotless:on */
        }

        private var hashCode: Int = 0

        override fun hashCode(): Int {
            if (hashCode == 0) {
                hashCode = /* spotless:off */ Objects.hash(adjustment, startDate, endDate, planPhaseOrder, additionalProperties) /* spotless:on */
            }
            return hashCode
        }

        override fun toString() =
            "AddAdjustment{adjustment=$adjustment, startDate=$startDate, endDate=$endDate, planPhaseOrder=$planPhaseOrder, additionalProperties=$additionalProperties}"
    }

    @JsonDeserialize(builder = AddPrice.Builder::class)
    @NoAutoDetect
    class AddPrice
    private constructor(
        private val priceId: String?,
        private val externalPriceId: String?,
        private val price: Price?,
        private val startDate: OffsetDateTime?,
        private val endDate: OffsetDateTime?,
        private val planPhaseOrder: Long?,
        private val minimumAmount: String?,
        private val maximumAmount: String?,
        private val discounts: List<Discount>?,
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        /** The id of the price to add to the subscription. */
        @JsonProperty("price_id") fun priceId(): String? = priceId

        /** The external price id of the price to add to the subscription. */
        @JsonProperty("external_price_id") fun externalPriceId(): String? = externalPriceId

        /** The definition of a new price to create and add to the subscription. */
        @JsonProperty("price") fun price(): Price? = price

        /**
         * The start date of the price interval. This is the date that the price will start billing
         * on the subscription. If null, billing will start when the phase or subscription starts.
         */
        @JsonProperty("start_date") fun startDate(): OffsetDateTime? = startDate

        /**
         * The end date of the price interval. This is the date that the price will stop billing on
         * the subscription. If null, billing will end when the phase or subscription ends.
         */
        @JsonProperty("end_date") fun endDate(): OffsetDateTime? = endDate

        /** The phase to add this price to. */
        @JsonProperty("plan_phase_order") fun planPhaseOrder(): Long? = planPhaseOrder

        /** The subscription's minimum amount for this price. */
        @JsonProperty("minimum_amount") fun minimumAmount(): String? = minimumAmount

        /** The subscription's maximum amount for this price. */
        @JsonProperty("maximum_amount") fun maximumAmount(): String? = maximumAmount

        /** The subscription's discounts for this price. */
        @JsonProperty("discounts") fun discounts(): List<Discount>? = discounts

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var priceId: String? = null
            private var externalPriceId: String? = null
            private var price: Price? = null
            private var startDate: OffsetDateTime? = null
            private var endDate: OffsetDateTime? = null
            private var planPhaseOrder: Long? = null
            private var minimumAmount: String? = null
            private var maximumAmount: String? = null
            private var discounts: List<Discount>? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(addPrice: AddPrice) = apply {
                this.priceId = addPrice.priceId
                this.externalPriceId = addPrice.externalPriceId
                this.price = addPrice.price
                this.startDate = addPrice.startDate
                this.endDate = addPrice.endDate
                this.planPhaseOrder = addPrice.planPhaseOrder
                this.minimumAmount = addPrice.minimumAmount
                this.maximumAmount = addPrice.maximumAmount
                this.discounts = addPrice.discounts
                additionalProperties(addPrice.additionalProperties)
            }

            /** The id of the price to add to the subscription. */
            @JsonProperty("price_id")
            fun priceId(priceId: String) = apply { this.priceId = priceId }

            /** The external price id of the price to add to the subscription. */
            @JsonProperty("external_price_id")
            fun externalPriceId(externalPriceId: String) = apply {
                this.externalPriceId = externalPriceId
            }

            /** The definition of a new price to create and add to the subscription. */
            @JsonProperty("price") fun price(price: Price) = apply { this.price = price }

            /**
             * The start date of the price interval. This is the date that the price will start
             * billing on the subscription. If null, billing will start when the phase or
             * subscription starts.
             */
            @JsonProperty("start_date")
            fun startDate(startDate: OffsetDateTime) = apply { this.startDate = startDate }

            /**
             * The end date of the price interval. This is the date that the price will stop billing
             * on the subscription. If null, billing will end when the phase or subscription ends.
             */
            @JsonProperty("end_date")
            fun endDate(endDate: OffsetDateTime) = apply { this.endDate = endDate }

            /** The phase to add this price to. */
            @JsonProperty("plan_phase_order")
            fun planPhaseOrder(planPhaseOrder: Long) = apply {
                this.planPhaseOrder = planPhaseOrder
            }

            /** The subscription's minimum amount for this price. */
            @JsonProperty("minimum_amount")
            fun minimumAmount(minimumAmount: String) = apply { this.minimumAmount = minimumAmount }

            /** The subscription's maximum amount for this price. */
            @JsonProperty("maximum_amount")
            fun maximumAmount(maximumAmount: String) = apply { this.maximumAmount = maximumAmount }

            /** The subscription's discounts for this price. */
            @JsonProperty("discounts")
            fun discounts(discounts: List<Discount>) = apply { this.discounts = discounts }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): AddPrice =
                AddPrice(
                    priceId,
                    externalPriceId,
                    price,
                    startDate,
                    endDate,
                    planPhaseOrder,
                    minimumAmount,
                    maximumAmount,
                    discounts?.toImmutable(),
                    additionalProperties.toImmutable(),
                )
        }

        @JsonDeserialize(builder = Discount.Builder::class)
        @NoAutoDetect
        class Discount
        private constructor(
            private val discountType: DiscountType?,
            private val percentageDiscount: Double?,
            private val usageDiscount: Double?,
            private val amountDiscount: String?,
            private val additionalProperties: Map<String, JsonValue>,
        ) {

            @JsonProperty("discount_type") fun discountType(): DiscountType? = discountType

            /**
             * Only available if discount_type is `percentage`. This is a number between 0 and 1.
             */
            @JsonProperty("percentage_discount")
            fun percentageDiscount(): Double? = percentageDiscount

            /**
             * Only available if discount_type is `usage`. Number of usage units that this discount
             * is for
             */
            @JsonProperty("usage_discount") fun usageDiscount(): Double? = usageDiscount

            /** Only available if discount_type is `amount`. */
            @JsonProperty("amount_discount") fun amountDiscount(): String? = amountDiscount

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            class Builder {

                private var discountType: DiscountType? = null
                private var percentageDiscount: Double? = null
                private var usageDiscount: Double? = null
                private var amountDiscount: String? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(discount: Discount) = apply {
                    this.discountType = discount.discountType
                    this.percentageDiscount = discount.percentageDiscount
                    this.usageDiscount = discount.usageDiscount
                    this.amountDiscount = discount.amountDiscount
                    additionalProperties(discount.additionalProperties)
                }

                @JsonProperty("discount_type")
                fun discountType(discountType: DiscountType) = apply {
                    this.discountType = discountType
                }

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                @JsonProperty("percentage_discount")
                fun percentageDiscount(percentageDiscount: Double) = apply {
                    this.percentageDiscount = percentageDiscount
                }

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                @JsonProperty("usage_discount")
                fun usageDiscount(usageDiscount: Double) = apply {
                    this.usageDiscount = usageDiscount
                }

                /** Only available if discount_type is `amount`. */
                @JsonProperty("amount_discount")
                fun amountDiscount(amountDiscount: String) = apply {
                    this.amountDiscount = amountDiscount
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    this.additionalProperties.putAll(additionalProperties)
                }

                @JsonAnySetter
                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    this.additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun build(): Discount =
                    Discount(
                        checkNotNull(discountType) { "`discountType` is required but was not set" },
                        percentageDiscount,
                        usageDiscount,
                        amountDiscount,
                        additionalProperties.toImmutable(),
                    )
            }

            class DiscountType
            @JsonCreator
            private constructor(
                private val value: JsonField<String>,
            ) : Enum {

                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is DiscountType && this.value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()

                companion object {

                    @JvmField val PERCENTAGE = DiscountType(JsonField.of("percentage"))

                    @JvmField val USAGE = DiscountType(JsonField.of("usage"))

                    @JvmField val AMOUNT = DiscountType(JsonField.of("amount"))

                    @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                }

                enum class Known {
                    PERCENTAGE,
                    USAGE,
                    AMOUNT,
                }

                enum class Value {
                    PERCENTAGE,
                    USAGE,
                    AMOUNT,
                    _UNKNOWN,
                }

                fun value(): Value =
                    when (this) {
                        PERCENTAGE -> Value.PERCENTAGE
                        USAGE -> Value.USAGE
                        AMOUNT -> Value.AMOUNT
                        else -> Value._UNKNOWN
                    }

                fun known(): Known =
                    when (this) {
                        PERCENTAGE -> Known.PERCENTAGE
                        USAGE -> Known.USAGE
                        AMOUNT -> Known.AMOUNT
                        else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                    }

                fun asString(): String = _value().asStringOrThrow()
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Discount && this.discountType == other.discountType && this.percentageDiscount == other.percentageDiscount && this.usageDiscount == other.usageDiscount && this.amountDiscount == other.amountDiscount && this.additionalProperties == other.additionalProperties /* spotless:on */
            }

            private var hashCode: Int = 0

            override fun hashCode(): Int {
                if (hashCode == 0) {
                    hashCode = /* spotless:off */ Objects.hash(discountType, percentageDiscount, usageDiscount, amountDiscount, additionalProperties) /* spotless:on */
                }
                return hashCode
            }

            override fun toString() =
                "Discount{discountType=$discountType, percentageDiscount=$percentageDiscount, usageDiscount=$usageDiscount, amountDiscount=$amountDiscount, additionalProperties=$additionalProperties}"
        }

        @JsonDeserialize(using = Price.Deserializer::class)
        @JsonSerialize(using = Price.Serializer::class)
        class Price
        private constructor(
            private val newSubscriptionUnitPrice: NewSubscriptionUnitPrice? = null,
            private val newSubscriptionPackagePrice: NewSubscriptionPackagePrice? = null,
            private val newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice? = null,
            private val newSubscriptionTieredPrice: NewSubscriptionTieredPrice? = null,
            private val newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice? = null,
            private val newSubscriptionBpsPrice: NewSubscriptionBpsPrice? = null,
            private val newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice? = null,
            private val newSubscriptionBulkPrice: NewSubscriptionBulkPrice? = null,
            private val newSubscriptionThresholdTotalAmountPrice:
                NewSubscriptionThresholdTotalAmountPrice? =
                null,
            private val newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice? =
                null,
            private val newSubscriptionTieredWithMinimumPrice:
                NewSubscriptionTieredWithMinimumPrice? =
                null,
            private val newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice? =
                null,
            private val newSubscriptionPackageWithAllocationPrice:
                NewSubscriptionPackageWithAllocationPrice? =
                null,
            private val newSubscriptionTierWithProrationPrice:
                NewSubscriptionTierWithProrationPrice? =
                null,
            private val newSubscriptionUnitWithProrationPrice:
                NewSubscriptionUnitWithProrationPrice? =
                null,
            private val newSubscriptionGroupedAllocationPrice:
                NewSubscriptionGroupedAllocationPrice? =
                null,
            private val newSubscriptionGroupedWithProratedMinimumPrice:
                NewSubscriptionGroupedWithProratedMinimumPrice? =
                null,
            private val newSubscriptionBulkWithProrationPrice:
                NewSubscriptionBulkWithProrationPrice? =
                null,
            private val _json: JsonValue? = null,
        ) {

            private var validated: Boolean = false

            fun newSubscriptionUnitPrice(): Optional<NewSubscriptionUnitPrice> =
                Optional.ofNullable(newSubscriptionUnitPrice)

            fun newSubscriptionPackagePrice(): Optional<NewSubscriptionPackagePrice> =
                Optional.ofNullable(newSubscriptionPackagePrice)

            fun newSubscriptionMatrixPrice(): Optional<NewSubscriptionMatrixPrice> =
                Optional.ofNullable(newSubscriptionMatrixPrice)

            fun newSubscriptionTieredPrice(): Optional<NewSubscriptionTieredPrice> =
                Optional.ofNullable(newSubscriptionTieredPrice)

            fun newSubscriptionTieredBpsPrice(): Optional<NewSubscriptionTieredBpsPrice> =
                Optional.ofNullable(newSubscriptionTieredBpsPrice)

            fun newSubscriptionBpsPrice(): Optional<NewSubscriptionBpsPrice> =
                Optional.ofNullable(newSubscriptionBpsPrice)

            fun newSubscriptionBulkBpsPrice(): Optional<NewSubscriptionBulkBpsPrice> =
                Optional.ofNullable(newSubscriptionBulkBpsPrice)

            fun newSubscriptionBulkPrice(): Optional<NewSubscriptionBulkPrice> =
                Optional.ofNullable(newSubscriptionBulkPrice)

            fun newSubscriptionThresholdTotalAmountPrice():
                Optional<NewSubscriptionThresholdTotalAmountPrice> =
                Optional.ofNullable(newSubscriptionThresholdTotalAmountPrice)

            fun newSubscriptionTieredPackagePrice(): Optional<NewSubscriptionTieredPackagePrice> =
                Optional.ofNullable(newSubscriptionTieredPackagePrice)

            fun newSubscriptionTieredWithMinimumPrice():
                Optional<NewSubscriptionTieredWithMinimumPrice> =
                Optional.ofNullable(newSubscriptionTieredWithMinimumPrice)

            fun newSubscriptionUnitWithPercentPrice():
                Optional<NewSubscriptionUnitWithPercentPrice> =
                Optional.ofNullable(newSubscriptionUnitWithPercentPrice)

            fun newSubscriptionPackageWithAllocationPrice():
                Optional<NewSubscriptionPackageWithAllocationPrice> =
                Optional.ofNullable(newSubscriptionPackageWithAllocationPrice)

            fun newSubscriptionTierWithProrationPrice():
                Optional<NewSubscriptionTierWithProrationPrice> =
                Optional.ofNullable(newSubscriptionTierWithProrationPrice)

            fun newSubscriptionUnitWithProrationPrice():
                Optional<NewSubscriptionUnitWithProrationPrice> =
                Optional.ofNullable(newSubscriptionUnitWithProrationPrice)

            fun newSubscriptionGroupedAllocationPrice():
                Optional<NewSubscriptionGroupedAllocationPrice> =
                Optional.ofNullable(newSubscriptionGroupedAllocationPrice)

            fun newSubscriptionGroupedWithProratedMinimumPrice():
                Optional<NewSubscriptionGroupedWithProratedMinimumPrice> =
                Optional.ofNullable(newSubscriptionGroupedWithProratedMinimumPrice)

            fun newSubscriptionBulkWithProrationPrice():
                Optional<NewSubscriptionBulkWithProrationPrice> =
                Optional.ofNullable(newSubscriptionBulkWithProrationPrice)

            fun isNewSubscriptionUnitPrice(): Boolean = newSubscriptionUnitPrice != null

            fun isNewSubscriptionPackagePrice(): Boolean = newSubscriptionPackagePrice != null

            fun isNewSubscriptionMatrixPrice(): Boolean = newSubscriptionMatrixPrice != null

            fun isNewSubscriptionTieredPrice(): Boolean = newSubscriptionTieredPrice != null

            fun isNewSubscriptionTieredBpsPrice(): Boolean = newSubscriptionTieredBpsPrice != null

            fun isNewSubscriptionBpsPrice(): Boolean = newSubscriptionBpsPrice != null

            fun isNewSubscriptionBulkBpsPrice(): Boolean = newSubscriptionBulkBpsPrice != null

            fun isNewSubscriptionBulkPrice(): Boolean = newSubscriptionBulkPrice != null

            fun isNewSubscriptionThresholdTotalAmountPrice(): Boolean =
                newSubscriptionThresholdTotalAmountPrice != null

            fun isNewSubscriptionTieredPackagePrice(): Boolean =
                newSubscriptionTieredPackagePrice != null

            fun isNewSubscriptionTieredWithMinimumPrice(): Boolean =
                newSubscriptionTieredWithMinimumPrice != null

            fun isNewSubscriptionUnitWithPercentPrice(): Boolean =
                newSubscriptionUnitWithPercentPrice != null

            fun isNewSubscriptionPackageWithAllocationPrice(): Boolean =
                newSubscriptionPackageWithAllocationPrice != null

            fun isNewSubscriptionTierWithProrationPrice(): Boolean =
                newSubscriptionTierWithProrationPrice != null

            fun isNewSubscriptionUnitWithProrationPrice(): Boolean =
                newSubscriptionUnitWithProrationPrice != null

            fun isNewSubscriptionGroupedAllocationPrice(): Boolean =
                newSubscriptionGroupedAllocationPrice != null

            fun isNewSubscriptionGroupedWithProratedMinimumPrice(): Boolean =
                newSubscriptionGroupedWithProratedMinimumPrice != null

            fun isNewSubscriptionBulkWithProrationPrice(): Boolean =
                newSubscriptionBulkWithProrationPrice != null

            fun asNewSubscriptionUnitPrice(): NewSubscriptionUnitPrice =
                newSubscriptionUnitPrice.getOrThrow("newSubscriptionUnitPrice")

            fun asNewSubscriptionPackagePrice(): NewSubscriptionPackagePrice =
                newSubscriptionPackagePrice.getOrThrow("newSubscriptionPackagePrice")

            fun asNewSubscriptionMatrixPrice(): NewSubscriptionMatrixPrice =
                newSubscriptionMatrixPrice.getOrThrow("newSubscriptionMatrixPrice")

            fun asNewSubscriptionTieredPrice(): NewSubscriptionTieredPrice =
                newSubscriptionTieredPrice.getOrThrow("newSubscriptionTieredPrice")

            fun asNewSubscriptionTieredBpsPrice(): NewSubscriptionTieredBpsPrice =
                newSubscriptionTieredBpsPrice.getOrThrow("newSubscriptionTieredBpsPrice")

            fun asNewSubscriptionBpsPrice(): NewSubscriptionBpsPrice =
                newSubscriptionBpsPrice.getOrThrow("newSubscriptionBpsPrice")

            fun asNewSubscriptionBulkBpsPrice(): NewSubscriptionBulkBpsPrice =
                newSubscriptionBulkBpsPrice.getOrThrow("newSubscriptionBulkBpsPrice")

            fun asNewSubscriptionBulkPrice(): NewSubscriptionBulkPrice =
                newSubscriptionBulkPrice.getOrThrow("newSubscriptionBulkPrice")

            fun asNewSubscriptionThresholdTotalAmountPrice():
                NewSubscriptionThresholdTotalAmountPrice =
                newSubscriptionThresholdTotalAmountPrice.getOrThrow(
                    "newSubscriptionThresholdTotalAmountPrice"
                )

            fun asNewSubscriptionTieredPackagePrice(): NewSubscriptionTieredPackagePrice =
                newSubscriptionTieredPackagePrice.getOrThrow("newSubscriptionTieredPackagePrice")

            fun asNewSubscriptionTieredWithMinimumPrice(): NewSubscriptionTieredWithMinimumPrice =
                newSubscriptionTieredWithMinimumPrice.getOrThrow(
                    "newSubscriptionTieredWithMinimumPrice"
                )

            fun asNewSubscriptionUnitWithPercentPrice(): NewSubscriptionUnitWithPercentPrice =
                newSubscriptionUnitWithPercentPrice.getOrThrow(
                    "newSubscriptionUnitWithPercentPrice"
                )

            fun asNewSubscriptionPackageWithAllocationPrice():
                NewSubscriptionPackageWithAllocationPrice =
                newSubscriptionPackageWithAllocationPrice.getOrThrow(
                    "newSubscriptionPackageWithAllocationPrice"
                )

            fun asNewSubscriptionTierWithProrationPrice(): NewSubscriptionTierWithProrationPrice =
                newSubscriptionTierWithProrationPrice.getOrThrow(
                    "newSubscriptionTierWithProrationPrice"
                )

            fun asNewSubscriptionUnitWithProrationPrice(): NewSubscriptionUnitWithProrationPrice =
                newSubscriptionUnitWithProrationPrice.getOrThrow(
                    "newSubscriptionUnitWithProrationPrice"
                )

            fun asNewSubscriptionGroupedAllocationPrice(): NewSubscriptionGroupedAllocationPrice =
                newSubscriptionGroupedAllocationPrice.getOrThrow(
                    "newSubscriptionGroupedAllocationPrice"
                )

            fun asNewSubscriptionGroupedWithProratedMinimumPrice():
                NewSubscriptionGroupedWithProratedMinimumPrice =
                newSubscriptionGroupedWithProratedMinimumPrice.getOrThrow(
                    "newSubscriptionGroupedWithProratedMinimumPrice"
                )

            fun asNewSubscriptionBulkWithProrationPrice(): NewSubscriptionBulkWithProrationPrice =
                newSubscriptionBulkWithProrationPrice.getOrThrow(
                    "newSubscriptionBulkWithProrationPrice"
                )

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newSubscriptionUnitPrice != null ->
                        visitor.visitNewSubscriptionUnitPrice(newSubscriptionUnitPrice)
                    newSubscriptionPackagePrice != null ->
                        visitor.visitNewSubscriptionPackagePrice(newSubscriptionPackagePrice)
                    newSubscriptionMatrixPrice != null ->
                        visitor.visitNewSubscriptionMatrixPrice(newSubscriptionMatrixPrice)
                    newSubscriptionTieredPrice != null ->
                        visitor.visitNewSubscriptionTieredPrice(newSubscriptionTieredPrice)
                    newSubscriptionTieredBpsPrice != null ->
                        visitor.visitNewSubscriptionTieredBpsPrice(newSubscriptionTieredBpsPrice)
                    newSubscriptionBpsPrice != null ->
                        visitor.visitNewSubscriptionBpsPrice(newSubscriptionBpsPrice)
                    newSubscriptionBulkBpsPrice != null ->
                        visitor.visitNewSubscriptionBulkBpsPrice(newSubscriptionBulkBpsPrice)
                    newSubscriptionBulkPrice != null ->
                        visitor.visitNewSubscriptionBulkPrice(newSubscriptionBulkPrice)
                    newSubscriptionThresholdTotalAmountPrice != null ->
                        visitor.visitNewSubscriptionThresholdTotalAmountPrice(
                            newSubscriptionThresholdTotalAmountPrice
                        )
                    newSubscriptionTieredPackagePrice != null ->
                        visitor.visitNewSubscriptionTieredPackagePrice(
                            newSubscriptionTieredPackagePrice
                        )
                    newSubscriptionTieredWithMinimumPrice != null ->
                        visitor.visitNewSubscriptionTieredWithMinimumPrice(
                            newSubscriptionTieredWithMinimumPrice
                        )
                    newSubscriptionUnitWithPercentPrice != null ->
                        visitor.visitNewSubscriptionUnitWithPercentPrice(
                            newSubscriptionUnitWithPercentPrice
                        )
                    newSubscriptionPackageWithAllocationPrice != null ->
                        visitor.visitNewSubscriptionPackageWithAllocationPrice(
                            newSubscriptionPackageWithAllocationPrice
                        )
                    newSubscriptionTierWithProrationPrice != null ->
                        visitor.visitNewSubscriptionTierWithProrationPrice(
                            newSubscriptionTierWithProrationPrice
                        )
                    newSubscriptionUnitWithProrationPrice != null ->
                        visitor.visitNewSubscriptionUnitWithProrationPrice(
                            newSubscriptionUnitWithProrationPrice
                        )
                    newSubscriptionGroupedAllocationPrice != null ->
                        visitor.visitNewSubscriptionGroupedAllocationPrice(
                            newSubscriptionGroupedAllocationPrice
                        )
                    newSubscriptionGroupedWithProratedMinimumPrice != null ->
                        visitor.visitNewSubscriptionGroupedWithProratedMinimumPrice(
                            newSubscriptionGroupedWithProratedMinimumPrice
                        )
                    newSubscriptionBulkWithProrationPrice != null ->
                        visitor.visitNewSubscriptionBulkWithProrationPrice(
                            newSubscriptionBulkWithProrationPrice
                        )
                    else -> visitor.unknown(_json)
                }
            }

            fun validate(): Price = apply {
                if (!validated) {
                    if (
                        newSubscriptionUnitPrice == null &&
                            newSubscriptionPackagePrice == null &&
                            newSubscriptionMatrixPrice == null &&
                            newSubscriptionTieredPrice == null &&
                            newSubscriptionTieredBpsPrice == null &&
                            newSubscriptionBpsPrice == null &&
                            newSubscriptionBulkBpsPrice == null &&
                            newSubscriptionBulkPrice == null &&
                            newSubscriptionThresholdTotalAmountPrice == null &&
                            newSubscriptionTieredPackagePrice == null &&
                            newSubscriptionTieredWithMinimumPrice == null &&
                            newSubscriptionUnitWithPercentPrice == null &&
                            newSubscriptionPackageWithAllocationPrice == null &&
                            newSubscriptionTierWithProrationPrice == null &&
                            newSubscriptionUnitWithProrationPrice == null &&
                            newSubscriptionGroupedAllocationPrice == null &&
                            newSubscriptionGroupedWithProratedMinimumPrice == null &&
                            newSubscriptionBulkWithProrationPrice == null
                    ) {
                        throw OrbInvalidDataException("Unknown Price: $_json")
                    }
                    newSubscriptionUnitPrice?.validate()
                    newSubscriptionPackagePrice?.validate()
                    newSubscriptionMatrixPrice?.validate()
                    newSubscriptionTieredPrice?.validate()
                    newSubscriptionTieredBpsPrice?.validate()
                    newSubscriptionBpsPrice?.validate()
                    newSubscriptionBulkBpsPrice?.validate()
                    newSubscriptionBulkPrice?.validate()
                    newSubscriptionThresholdTotalAmountPrice?.validate()
                    newSubscriptionTieredPackagePrice?.validate()
                    newSubscriptionTieredWithMinimumPrice?.validate()
                    newSubscriptionUnitWithPercentPrice?.validate()
                    newSubscriptionPackageWithAllocationPrice?.validate()
                    newSubscriptionTierWithProrationPrice?.validate()
                    newSubscriptionUnitWithProrationPrice?.validate()
                    newSubscriptionGroupedAllocationPrice?.validate()
                    newSubscriptionGroupedWithProratedMinimumPrice?.validate()
                    newSubscriptionBulkWithProrationPrice?.validate()
                    validated = true
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Price && this.newSubscriptionUnitPrice == other.newSubscriptionUnitPrice && this.newSubscriptionPackagePrice == other.newSubscriptionPackagePrice && this.newSubscriptionMatrixPrice == other.newSubscriptionMatrixPrice && this.newSubscriptionTieredPrice == other.newSubscriptionTieredPrice && this.newSubscriptionTieredBpsPrice == other.newSubscriptionTieredBpsPrice && this.newSubscriptionBpsPrice == other.newSubscriptionBpsPrice && this.newSubscriptionBulkBpsPrice == other.newSubscriptionBulkBpsPrice && this.newSubscriptionBulkPrice == other.newSubscriptionBulkPrice && this.newSubscriptionThresholdTotalAmountPrice == other.newSubscriptionThresholdTotalAmountPrice && this.newSubscriptionTieredPackagePrice == other.newSubscriptionTieredPackagePrice && this.newSubscriptionTieredWithMinimumPrice == other.newSubscriptionTieredWithMinimumPrice && this.newSubscriptionUnitWithPercentPrice == other.newSubscriptionUnitWithPercentPrice && this.newSubscriptionPackageWithAllocationPrice == other.newSubscriptionPackageWithAllocationPrice && this.newSubscriptionTierWithProrationPrice == other.newSubscriptionTierWithProrationPrice && this.newSubscriptionUnitWithProrationPrice == other.newSubscriptionUnitWithProrationPrice && this.newSubscriptionGroupedAllocationPrice == other.newSubscriptionGroupedAllocationPrice && this.newSubscriptionGroupedWithProratedMinimumPrice == other.newSubscriptionGroupedWithProratedMinimumPrice && this.newSubscriptionBulkWithProrationPrice == other.newSubscriptionBulkWithProrationPrice /* spotless:on */
            }

            override fun hashCode(): Int {
                return /* spotless:off */ Objects.hash(newSubscriptionUnitPrice, newSubscriptionPackagePrice, newSubscriptionMatrixPrice, newSubscriptionTieredPrice, newSubscriptionTieredBpsPrice, newSubscriptionBpsPrice, newSubscriptionBulkBpsPrice, newSubscriptionBulkPrice, newSubscriptionThresholdTotalAmountPrice, newSubscriptionTieredPackagePrice, newSubscriptionTieredWithMinimumPrice, newSubscriptionUnitWithPercentPrice, newSubscriptionPackageWithAllocationPrice, newSubscriptionTierWithProrationPrice, newSubscriptionUnitWithProrationPrice, newSubscriptionGroupedAllocationPrice, newSubscriptionGroupedWithProratedMinimumPrice, newSubscriptionBulkWithProrationPrice) /* spotless:on */
            }

            override fun toString(): String {
                return when {
                    newSubscriptionUnitPrice != null ->
                        "Price{newSubscriptionUnitPrice=$newSubscriptionUnitPrice}"
                    newSubscriptionPackagePrice != null ->
                        "Price{newSubscriptionPackagePrice=$newSubscriptionPackagePrice}"
                    newSubscriptionMatrixPrice != null ->
                        "Price{newSubscriptionMatrixPrice=$newSubscriptionMatrixPrice}"
                    newSubscriptionTieredPrice != null ->
                        "Price{newSubscriptionTieredPrice=$newSubscriptionTieredPrice}"
                    newSubscriptionTieredBpsPrice != null ->
                        "Price{newSubscriptionTieredBpsPrice=$newSubscriptionTieredBpsPrice}"
                    newSubscriptionBpsPrice != null ->
                        "Price{newSubscriptionBpsPrice=$newSubscriptionBpsPrice}"
                    newSubscriptionBulkBpsPrice != null ->
                        "Price{newSubscriptionBulkBpsPrice=$newSubscriptionBulkBpsPrice}"
                    newSubscriptionBulkPrice != null ->
                        "Price{newSubscriptionBulkPrice=$newSubscriptionBulkPrice}"
                    newSubscriptionThresholdTotalAmountPrice != null ->
                        "Price{newSubscriptionThresholdTotalAmountPrice=$newSubscriptionThresholdTotalAmountPrice}"
                    newSubscriptionTieredPackagePrice != null ->
                        "Price{newSubscriptionTieredPackagePrice=$newSubscriptionTieredPackagePrice}"
                    newSubscriptionTieredWithMinimumPrice != null ->
                        "Price{newSubscriptionTieredWithMinimumPrice=$newSubscriptionTieredWithMinimumPrice}"
                    newSubscriptionUnitWithPercentPrice != null ->
                        "Price{newSubscriptionUnitWithPercentPrice=$newSubscriptionUnitWithPercentPrice}"
                    newSubscriptionPackageWithAllocationPrice != null ->
                        "Price{newSubscriptionPackageWithAllocationPrice=$newSubscriptionPackageWithAllocationPrice}"
                    newSubscriptionTierWithProrationPrice != null ->
                        "Price{newSubscriptionTierWithProrationPrice=$newSubscriptionTierWithProrationPrice}"
                    newSubscriptionUnitWithProrationPrice != null ->
                        "Price{newSubscriptionUnitWithProrationPrice=$newSubscriptionUnitWithProrationPrice}"
                    newSubscriptionGroupedAllocationPrice != null ->
                        "Price{newSubscriptionGroupedAllocationPrice=$newSubscriptionGroupedAllocationPrice}"
                    newSubscriptionGroupedWithProratedMinimumPrice != null ->
                        "Price{newSubscriptionGroupedWithProratedMinimumPrice=$newSubscriptionGroupedWithProratedMinimumPrice}"
                    newSubscriptionBulkWithProrationPrice != null ->
                        "Price{newSubscriptionBulkWithProrationPrice=$newSubscriptionBulkWithProrationPrice}"
                    _json != null -> "Price{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Price")
                }
            }

            companion object {

                @JvmStatic
                fun ofNewSubscriptionUnitPrice(newSubscriptionUnitPrice: NewSubscriptionUnitPrice) =
                    Price(newSubscriptionUnitPrice = newSubscriptionUnitPrice)

                @JvmStatic
                fun ofNewSubscriptionPackagePrice(
                    newSubscriptionPackagePrice: NewSubscriptionPackagePrice
                ) = Price(newSubscriptionPackagePrice = newSubscriptionPackagePrice)

                @JvmStatic
                fun ofNewSubscriptionMatrixPrice(
                    newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice
                ) = Price(newSubscriptionMatrixPrice = newSubscriptionMatrixPrice)

                @JvmStatic
                fun ofNewSubscriptionTieredPrice(
                    newSubscriptionTieredPrice: NewSubscriptionTieredPrice
                ) = Price(newSubscriptionTieredPrice = newSubscriptionTieredPrice)

                @JvmStatic
                fun ofNewSubscriptionTieredBpsPrice(
                    newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                ) = Price(newSubscriptionTieredBpsPrice = newSubscriptionTieredBpsPrice)

                @JvmStatic
                fun ofNewSubscriptionBpsPrice(newSubscriptionBpsPrice: NewSubscriptionBpsPrice) =
                    Price(newSubscriptionBpsPrice = newSubscriptionBpsPrice)

                @JvmStatic
                fun ofNewSubscriptionBulkBpsPrice(
                    newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice
                ) = Price(newSubscriptionBulkBpsPrice = newSubscriptionBulkBpsPrice)

                @JvmStatic
                fun ofNewSubscriptionBulkPrice(newSubscriptionBulkPrice: NewSubscriptionBulkPrice) =
                    Price(newSubscriptionBulkPrice = newSubscriptionBulkPrice)

                @JvmStatic
                fun ofNewSubscriptionThresholdTotalAmountPrice(
                    newSubscriptionThresholdTotalAmountPrice:
                        NewSubscriptionThresholdTotalAmountPrice
                ) =
                    Price(
                        newSubscriptionThresholdTotalAmountPrice =
                            newSubscriptionThresholdTotalAmountPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionTieredPackagePrice(
                    newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                ) = Price(newSubscriptionTieredPackagePrice = newSubscriptionTieredPackagePrice)

                @JvmStatic
                fun ofNewSubscriptionTieredWithMinimumPrice(
                    newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                ) =
                    Price(
                        newSubscriptionTieredWithMinimumPrice =
                            newSubscriptionTieredWithMinimumPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionUnitWithPercentPrice(
                    newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                ) = Price(newSubscriptionUnitWithPercentPrice = newSubscriptionUnitWithPercentPrice)

                @JvmStatic
                fun ofNewSubscriptionPackageWithAllocationPrice(
                    newSubscriptionPackageWithAllocationPrice:
                        NewSubscriptionPackageWithAllocationPrice
                ) =
                    Price(
                        newSubscriptionPackageWithAllocationPrice =
                            newSubscriptionPackageWithAllocationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionTierWithProrationPrice(
                    newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                ) =
                    Price(
                        newSubscriptionTierWithProrationPrice =
                            newSubscriptionTierWithProrationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionUnitWithProrationPrice(
                    newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                ) =
                    Price(
                        newSubscriptionUnitWithProrationPrice =
                            newSubscriptionUnitWithProrationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionGroupedAllocationPrice(
                    newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                ) =
                    Price(
                        newSubscriptionGroupedAllocationPrice =
                            newSubscriptionGroupedAllocationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionGroupedWithProratedMinimumPrice(
                    newSubscriptionGroupedWithProratedMinimumPrice:
                        NewSubscriptionGroupedWithProratedMinimumPrice
                ) =
                    Price(
                        newSubscriptionGroupedWithProratedMinimumPrice =
                            newSubscriptionGroupedWithProratedMinimumPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionBulkWithProrationPrice(
                    newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                ) =
                    Price(
                        newSubscriptionBulkWithProrationPrice =
                            newSubscriptionBulkWithProrationPrice
                    )
            }

            interface Visitor<out T> {

                fun visitNewSubscriptionUnitPrice(
                    newSubscriptionUnitPrice: NewSubscriptionUnitPrice
                ): T

                fun visitNewSubscriptionPackagePrice(
                    newSubscriptionPackagePrice: NewSubscriptionPackagePrice
                ): T

                fun visitNewSubscriptionMatrixPrice(
                    newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice
                ): T

                fun visitNewSubscriptionTieredPrice(
                    newSubscriptionTieredPrice: NewSubscriptionTieredPrice
                ): T

                fun visitNewSubscriptionTieredBpsPrice(
                    newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                ): T

                fun visitNewSubscriptionBpsPrice(
                    newSubscriptionBpsPrice: NewSubscriptionBpsPrice
                ): T

                fun visitNewSubscriptionBulkBpsPrice(
                    newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice
                ): T

                fun visitNewSubscriptionBulkPrice(
                    newSubscriptionBulkPrice: NewSubscriptionBulkPrice
                ): T

                fun visitNewSubscriptionThresholdTotalAmountPrice(
                    newSubscriptionThresholdTotalAmountPrice:
                        NewSubscriptionThresholdTotalAmountPrice
                ): T

                fun visitNewSubscriptionTieredPackagePrice(
                    newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                ): T

                fun visitNewSubscriptionTieredWithMinimumPrice(
                    newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                ): T

                fun visitNewSubscriptionUnitWithPercentPrice(
                    newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                ): T

                fun visitNewSubscriptionPackageWithAllocationPrice(
                    newSubscriptionPackageWithAllocationPrice:
                        NewSubscriptionPackageWithAllocationPrice
                ): T

                fun visitNewSubscriptionTierWithProrationPrice(
                    newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                ): T

                fun visitNewSubscriptionUnitWithProrationPrice(
                    newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                ): T

                fun visitNewSubscriptionGroupedAllocationPrice(
                    newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                ): T

                fun visitNewSubscriptionGroupedWithProratedMinimumPrice(
                    newSubscriptionGroupedWithProratedMinimumPrice:
                        NewSubscriptionGroupedWithProratedMinimumPrice
                ): T

                fun visitNewSubscriptionBulkWithProrationPrice(
                    newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Price: $json")
                }
            }

            class Deserializer : BaseDeserializer<Price>(Price::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Price {
                    val json = JsonValue.fromJsonNode(node)
                    val modelType =
                        json.asObject().getOrNull()?.get("model_type")?.asString()?.getOrNull()

                    when (modelType) {
                        "unit" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionUnitPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionUnitPrice = it, _json = json)
                                }
                        }
                        "package" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionPackagePrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionPackagePrice = it, _json = json)
                                }
                        }
                        "matrix" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionMatrixPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionMatrixPrice = it, _json = json)
                                }
                        }
                        "tiered" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionTieredPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionTieredPrice = it, _json = json)
                                }
                        }
                        "tiered_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionTieredBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionTieredBpsPrice = it, _json = json)
                                }
                        }
                        "bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionBpsPrice = it, _json = json)
                                }
                        }
                        "bulk_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBulkBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionBulkBpsPrice = it, _json = json)
                                }
                        }
                        "bulk" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBulkPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionBulkPrice = it, _json = json)
                                }
                        }
                        "threshold_total_amount" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionThresholdTotalAmountPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionThresholdTotalAmountPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_package" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTieredPackagePrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionTieredPackagePrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_with_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTieredWithMinimumPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionTieredWithMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "unit_with_percent" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionUnitWithPercentPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionUnitWithPercentPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "package_with_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionPackageWithAllocationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionPackageWithAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTierWithProrationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionTierWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "unit_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionUnitWithProrationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionUnitWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionGroupedAllocationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionGroupedAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_with_prorated_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionGroupedWithProratedMinimumPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionGroupedWithProratedMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "bulk_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionBulkWithProrationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionBulkWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                    }

                    return Price(_json = json)
                }
            }

            class Serializer : BaseSerializer<Price>(Price::class) {

                override fun serialize(
                    value: Price,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.newSubscriptionUnitPrice != null ->
                            generator.writeObject(value.newSubscriptionUnitPrice)
                        value.newSubscriptionPackagePrice != null ->
                            generator.writeObject(value.newSubscriptionPackagePrice)
                        value.newSubscriptionMatrixPrice != null ->
                            generator.writeObject(value.newSubscriptionMatrixPrice)
                        value.newSubscriptionTieredPrice != null ->
                            generator.writeObject(value.newSubscriptionTieredPrice)
                        value.newSubscriptionTieredBpsPrice != null ->
                            generator.writeObject(value.newSubscriptionTieredBpsPrice)
                        value.newSubscriptionBpsPrice != null ->
                            generator.writeObject(value.newSubscriptionBpsPrice)
                        value.newSubscriptionBulkBpsPrice != null ->
                            generator.writeObject(value.newSubscriptionBulkBpsPrice)
                        value.newSubscriptionBulkPrice != null ->
                            generator.writeObject(value.newSubscriptionBulkPrice)
                        value.newSubscriptionThresholdTotalAmountPrice != null ->
                            generator.writeObject(value.newSubscriptionThresholdTotalAmountPrice)
                        value.newSubscriptionTieredPackagePrice != null ->
                            generator.writeObject(value.newSubscriptionTieredPackagePrice)
                        value.newSubscriptionTieredWithMinimumPrice != null ->
                            generator.writeObject(value.newSubscriptionTieredWithMinimumPrice)
                        value.newSubscriptionUnitWithPercentPrice != null ->
                            generator.writeObject(value.newSubscriptionUnitWithPercentPrice)
                        value.newSubscriptionPackageWithAllocationPrice != null ->
                            generator.writeObject(value.newSubscriptionPackageWithAllocationPrice)
                        value.newSubscriptionTierWithProrationPrice != null ->
                            generator.writeObject(value.newSubscriptionTierWithProrationPrice)
                        value.newSubscriptionUnitWithProrationPrice != null ->
                            generator.writeObject(value.newSubscriptionUnitWithProrationPrice)
                        value.newSubscriptionGroupedAllocationPrice != null ->
                            generator.writeObject(value.newSubscriptionGroupedAllocationPrice)
                        value.newSubscriptionGroupedWithProratedMinimumPrice != null ->
                            generator.writeObject(
                                value.newSubscriptionGroupedWithProratedMinimumPrice
                            )
                        value.newSubscriptionBulkWithProrationPrice != null ->
                            generator.writeObject(value.newSubscriptionBulkWithProrationPrice)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Price")
                    }
                }
            }

            @JsonDeserialize(builder = NewSubscriptionUnitPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionUnitPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val unitConfig: JsonField<UnitConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun unitConfig(): UnitConfig = unitConfig.getRequired("unit_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("unit_config") @ExcludeMissing fun _unitConfig() = unitConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionUnitPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        unitConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var unitConfig: JsonField<UnitConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionUnitPrice: NewSubscriptionUnitPrice) = apply {
                        this.metadata = newSubscriptionUnitPrice.metadata
                        this.externalPriceId = newSubscriptionUnitPrice.externalPriceId
                        this.name = newSubscriptionUnitPrice.name
                        this.billableMetricId = newSubscriptionUnitPrice.billableMetricId
                        this.itemId = newSubscriptionUnitPrice.itemId
                        this.billedInAdvance = newSubscriptionUnitPrice.billedInAdvance
                        this.fixedPriceQuantity = newSubscriptionUnitPrice.fixedPriceQuantity
                        this.invoiceGroupingKey = newSubscriptionUnitPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionUnitPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionUnitPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionUnitPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionUnitPrice.conversionRate
                        this.modelType = newSubscriptionUnitPrice.modelType
                        this.unitConfig = newSubscriptionUnitPrice.unitConfig
                        this.currency = newSubscriptionUnitPrice.currency
                        this.referenceId = newSubscriptionUnitPrice.referenceId
                        additionalProperties(newSubscriptionUnitPrice.additionalProperties)
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun unitConfig(unitConfig: UnitConfig) = unitConfig(JsonField.of(unitConfig))

                    @JsonProperty("unit_config")
                    @ExcludeMissing
                    fun unitConfig(unitConfig: JsonField<UnitConfig>) = apply {
                        this.unitConfig = unitConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionUnitPrice =
                        NewSubscriptionUnitPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            unitConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val UNIT = ModelType(JsonField.of("unit"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT,
                    }

                    enum class Value {
                        UNIT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT -> Value.UNIT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT -> Known.UNIT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = UnitConfig.Builder::class)
                @NoAutoDetect
                class UnitConfig
                private constructor(
                    private val unitAmount: JsonField<String>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** Rate per unit of usage */
                    fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                    /** Rate per unit of usage */
                    @JsonProperty("unit_amount") @ExcludeMissing fun _unitAmount() = unitAmount

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): UnitConfig = apply {
                        if (!validated) {
                            unitAmount()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var unitAmount: JsonField<String> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitConfig: UnitConfig) = apply {
                            this.unitAmount = unitConfig.unitAmount
                            additionalProperties(unitConfig.additionalProperties)
                        }

                        /** Rate per unit of usage */
                        fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                        /** Rate per unit of usage */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun unitAmount(unitAmount: JsonField<String>) = apply {
                            this.unitAmount = unitAmount
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): UnitConfig =
                            UnitConfig(unitAmount, additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitConfig && this.unitAmount == other.unitAmount && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(unitAmount, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "UnitConfig{unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.unitConfig == other.unitConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, unitConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionUnitPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, unitConfig=$unitConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionPackagePrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionPackagePrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val packageConfig: JsonField<PackageConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun packageConfig(): PackageConfig = packageConfig.getRequired("package_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("package_config") @ExcludeMissing fun _packageConfig() = packageConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionPackagePrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        packageConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var packageConfig: JsonField<PackageConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionPackagePrice: NewSubscriptionPackagePrice) =
                        apply {
                            this.metadata = newSubscriptionPackagePrice.metadata
                            this.externalPriceId = newSubscriptionPackagePrice.externalPriceId
                            this.name = newSubscriptionPackagePrice.name
                            this.billableMetricId = newSubscriptionPackagePrice.billableMetricId
                            this.itemId = newSubscriptionPackagePrice.itemId
                            this.billedInAdvance = newSubscriptionPackagePrice.billedInAdvance
                            this.fixedPriceQuantity = newSubscriptionPackagePrice.fixedPriceQuantity
                            this.invoiceGroupingKey = newSubscriptionPackagePrice.invoiceGroupingKey
                            this.cadence = newSubscriptionPackagePrice.cadence
                            this.billingCycleConfiguration =
                                newSubscriptionPackagePrice.billingCycleConfiguration
                            this.invoicingCycleConfiguration =
                                newSubscriptionPackagePrice.invoicingCycleConfiguration
                            this.conversionRate = newSubscriptionPackagePrice.conversionRate
                            this.modelType = newSubscriptionPackagePrice.modelType
                            this.packageConfig = newSubscriptionPackagePrice.packageConfig
                            this.currency = newSubscriptionPackagePrice.currency
                            this.referenceId = newSubscriptionPackagePrice.referenceId
                            additionalProperties(newSubscriptionPackagePrice.additionalProperties)
                        }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun packageConfig(packageConfig: PackageConfig) =
                        packageConfig(JsonField.of(packageConfig))

                    @JsonProperty("package_config")
                    @ExcludeMissing
                    fun packageConfig(packageConfig: JsonField<PackageConfig>) = apply {
                        this.packageConfig = packageConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionPackagePrice =
                        NewSubscriptionPackagePrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            packageConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val PACKAGE = ModelType(JsonField.of("package"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        PACKAGE,
                    }

                    enum class Value {
                        PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PACKAGE -> Value.PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PACKAGE -> Known.PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = PackageConfig.Builder::class)
                @NoAutoDetect
                class PackageConfig
                private constructor(
                    private val packageAmount: JsonField<String>,
                    private val packageSize: JsonField<Long>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** A currency amount to rate usage by */
                    fun packageAmount(): String = packageAmount.getRequired("package_amount")

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    fun packageSize(): Long = packageSize.getRequired("package_size")

                    /** A currency amount to rate usage by */
                    @JsonProperty("package_amount")
                    @ExcludeMissing
                    fun _packageAmount() = packageAmount

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    @JsonProperty("package_size") @ExcludeMissing fun _packageSize() = packageSize

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): PackageConfig = apply {
                        if (!validated) {
                            packageAmount()
                            packageSize()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var packageAmount: JsonField<String> = JsonMissing.of()
                        private var packageSize: JsonField<Long> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(packageConfig: PackageConfig) = apply {
                            this.packageAmount = packageConfig.packageAmount
                            this.packageSize = packageConfig.packageSize
                            additionalProperties(packageConfig.additionalProperties)
                        }

                        /** A currency amount to rate usage by */
                        fun packageAmount(packageAmount: String) =
                            packageAmount(JsonField.of(packageAmount))

                        /** A currency amount to rate usage by */
                        @JsonProperty("package_amount")
                        @ExcludeMissing
                        fun packageAmount(packageAmount: JsonField<String>) = apply {
                            this.packageAmount = packageAmount
                        }

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        fun packageSize(packageSize: Long) = packageSize(JsonField.of(packageSize))

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        @JsonProperty("package_size")
                        @ExcludeMissing
                        fun packageSize(packageSize: JsonField<Long>) = apply {
                            this.packageSize = packageSize
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): PackageConfig =
                            PackageConfig(
                                packageAmount,
                                packageSize,
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageConfig && this.packageAmount == other.packageAmount && this.packageSize == other.packageSize && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(packageAmount, packageSize, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "PackageConfig{packageAmount=$packageAmount, packageSize=$packageSize, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionPackagePrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.packageConfig == other.packageConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, packageConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionPackagePrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, packageConfig=$packageConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionMatrixPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionMatrixPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val matrixConfig: JsonField<MatrixConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun matrixConfig(): MatrixConfig = matrixConfig.getRequired("matrix_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("matrix_config") @ExcludeMissing fun _matrixConfig() = matrixConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionMatrixPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        matrixConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var matrixConfig: JsonField<MatrixConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice) =
                        apply {
                            this.metadata = newSubscriptionMatrixPrice.metadata
                            this.externalPriceId = newSubscriptionMatrixPrice.externalPriceId
                            this.name = newSubscriptionMatrixPrice.name
                            this.billableMetricId = newSubscriptionMatrixPrice.billableMetricId
                            this.itemId = newSubscriptionMatrixPrice.itemId
                            this.billedInAdvance = newSubscriptionMatrixPrice.billedInAdvance
                            this.fixedPriceQuantity = newSubscriptionMatrixPrice.fixedPriceQuantity
                            this.invoiceGroupingKey = newSubscriptionMatrixPrice.invoiceGroupingKey
                            this.cadence = newSubscriptionMatrixPrice.cadence
                            this.billingCycleConfiguration =
                                newSubscriptionMatrixPrice.billingCycleConfiguration
                            this.invoicingCycleConfiguration =
                                newSubscriptionMatrixPrice.invoicingCycleConfiguration
                            this.conversionRate = newSubscriptionMatrixPrice.conversionRate
                            this.modelType = newSubscriptionMatrixPrice.modelType
                            this.matrixConfig = newSubscriptionMatrixPrice.matrixConfig
                            this.currency = newSubscriptionMatrixPrice.currency
                            this.referenceId = newSubscriptionMatrixPrice.referenceId
                            additionalProperties(newSubscriptionMatrixPrice.additionalProperties)
                        }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun matrixConfig(matrixConfig: MatrixConfig) =
                        matrixConfig(JsonField.of(matrixConfig))

                    @JsonProperty("matrix_config")
                    @ExcludeMissing
                    fun matrixConfig(matrixConfig: JsonField<MatrixConfig>) = apply {
                        this.matrixConfig = matrixConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionMatrixPrice =
                        NewSubscriptionMatrixPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            matrixConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = MatrixConfig.Builder::class)
                @NoAutoDetect
                class MatrixConfig
                private constructor(
                    private val dimensions: JsonField<List<String?>>,
                    private val defaultUnitAmount: JsonField<String>,
                    private val matrixValues: JsonField<List<MatrixValue>>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** One or two event property values to evaluate matrix groups by */
                    fun dimensions(): List<String?> = dimensions.getRequired("dimensions")

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    fun defaultUnitAmount(): String =
                        defaultUnitAmount.getRequired("default_unit_amount")

                    /** Matrix values for specified matrix grouping keys */
                    fun matrixValues(): List<MatrixValue> =
                        matrixValues.getRequired("matrix_values")

                    /** One or two event property values to evaluate matrix groups by */
                    @JsonProperty("dimensions") @ExcludeMissing fun _dimensions() = dimensions

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    fun _defaultUnitAmount() = defaultUnitAmount

                    /** Matrix values for specified matrix grouping keys */
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    fun _matrixValues() = matrixValues

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): MatrixConfig = apply {
                        if (!validated) {
                            dimensions()
                            defaultUnitAmount()
                            matrixValues().forEach { it.validate() }
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var dimensions: JsonField<List<String?>> = JsonMissing.of()
                        private var defaultUnitAmount: JsonField<String> = JsonMissing.of()
                        private var matrixValues: JsonField<List<MatrixValue>> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixConfig: MatrixConfig) = apply {
                            this.dimensions = matrixConfig.dimensions
                            this.defaultUnitAmount = matrixConfig.defaultUnitAmount
                            this.matrixValues = matrixConfig.matrixValues
                            additionalProperties(matrixConfig.additionalProperties)
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: List<String?>) =
                            dimensions(JsonField.of(dimensions))

                        /** One or two event property values to evaluate matrix groups by */
                        @JsonProperty("dimensions")
                        @ExcludeMissing
                        fun dimensions(dimensions: JsonField<List<String?>>) = apply {
                            this.dimensions = dimensions
                        }

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: String) =
                            defaultUnitAmount(JsonField.of(defaultUnitAmount))

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        @JsonProperty("default_unit_amount")
                        @ExcludeMissing
                        fun defaultUnitAmount(defaultUnitAmount: JsonField<String>) = apply {
                            this.defaultUnitAmount = defaultUnitAmount
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: List<MatrixValue>) =
                            matrixValues(JsonField.of(matrixValues))

                        /** Matrix values for specified matrix grouping keys */
                        @JsonProperty("matrix_values")
                        @ExcludeMissing
                        fun matrixValues(matrixValues: JsonField<List<MatrixValue>>) = apply {
                            this.matrixValues = matrixValues
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): MatrixConfig =
                            MatrixConfig(
                                dimensions.map { it.toImmutable() },
                                defaultUnitAmount,
                                matrixValues.map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @JsonDeserialize(builder = MatrixValue.Builder::class)
                    @NoAutoDetect
                    class MatrixValue
                    private constructor(
                        private val unitAmount: JsonField<String>,
                        private val dimensionValues: JsonField<List<String?>>,
                        private val additionalProperties: Map<String, JsonValue>,
                    ) {

                        private var validated: Boolean = false

                        /** Unit price for the specified dimension_values */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        fun dimensionValues(): List<String?> =
                            dimensionValues.getRequired("dimension_values")

                        /** Unit price for the specified dimension_values */
                        @JsonProperty("unit_amount") @ExcludeMissing fun _unitAmount() = unitAmount

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        fun _dimensionValues() = dimensionValues

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun validate(): MatrixValue = apply {
                            if (!validated) {
                                unitAmount()
                                dimensionValues()
                                validated = true
                            }
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var unitAmount: JsonField<String> = JsonMissing.of()
                            private var dimensionValues: JsonField<List<String?>> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(matrixValue: MatrixValue) = apply {
                                this.unitAmount = matrixValue.unitAmount
                                this.dimensionValues = matrixValue.dimensionValues
                                additionalProperties(matrixValue.additionalProperties)
                            }

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Unit price for the specified dimension_values */
                            @JsonProperty("unit_amount")
                            @ExcludeMissing
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: List<String?>) =
                                dimensionValues(JsonField.of(dimensionValues))

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            @JsonProperty("dimension_values")
                            @ExcludeMissing
                            fun dimensionValues(dimensionValues: JsonField<List<String?>>) = apply {
                                this.dimensionValues = dimensionValues
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    this.additionalProperties.putAll(additionalProperties)
                                }

                            @JsonAnySetter
                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                this.additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun build(): MatrixValue =
                                MatrixValue(
                                    unitAmount,
                                    dimensionValues.map { it.toImmutable() },
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is MatrixValue && this.unitAmount == other.unitAmount && this.dimensionValues == other.dimensionValues && this.additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        private var hashCode: Int = 0

                        override fun hashCode(): Int {
                            if (hashCode == 0) {
                                hashCode = /* spotless:off */ Objects.hash(unitAmount, dimensionValues, additionalProperties) /* spotless:on */
                            }
                            return hashCode
                        }

                        override fun toString() =
                            "MatrixValue{unitAmount=$unitAmount, dimensionValues=$dimensionValues, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixConfig && this.dimensions == other.dimensions && this.defaultUnitAmount == other.defaultUnitAmount && this.matrixValues == other.matrixValues && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(dimensions, defaultUnitAmount, matrixValues, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "MatrixConfig{dimensions=$dimensions, defaultUnitAmount=$defaultUnitAmount, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val MATRIX = ModelType(JsonField.of("matrix"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        MATRIX,
                    }

                    enum class Value {
                        MATRIX,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MATRIX -> Value.MATRIX
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MATRIX -> Known.MATRIX
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionMatrixPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.matrixConfig == other.matrixConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, matrixConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionMatrixPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, matrixConfig=$matrixConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionTieredPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionTieredPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val tieredConfig: JsonField<TieredConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun tieredConfig(): TieredConfig = tieredConfig.getRequired("tiered_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("tiered_config") @ExcludeMissing fun _tieredConfig() = tieredConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionTieredPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        tieredConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var tieredConfig: JsonField<TieredConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionTieredPrice: NewSubscriptionTieredPrice) =
                        apply {
                            this.metadata = newSubscriptionTieredPrice.metadata
                            this.externalPriceId = newSubscriptionTieredPrice.externalPriceId
                            this.name = newSubscriptionTieredPrice.name
                            this.billableMetricId = newSubscriptionTieredPrice.billableMetricId
                            this.itemId = newSubscriptionTieredPrice.itemId
                            this.billedInAdvance = newSubscriptionTieredPrice.billedInAdvance
                            this.fixedPriceQuantity = newSubscriptionTieredPrice.fixedPriceQuantity
                            this.invoiceGroupingKey = newSubscriptionTieredPrice.invoiceGroupingKey
                            this.cadence = newSubscriptionTieredPrice.cadence
                            this.billingCycleConfiguration =
                                newSubscriptionTieredPrice.billingCycleConfiguration
                            this.invoicingCycleConfiguration =
                                newSubscriptionTieredPrice.invoicingCycleConfiguration
                            this.conversionRate = newSubscriptionTieredPrice.conversionRate
                            this.modelType = newSubscriptionTieredPrice.modelType
                            this.tieredConfig = newSubscriptionTieredPrice.tieredConfig
                            this.currency = newSubscriptionTieredPrice.currency
                            this.referenceId = newSubscriptionTieredPrice.referenceId
                            additionalProperties(newSubscriptionTieredPrice.additionalProperties)
                        }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun tieredConfig(tieredConfig: TieredConfig) =
                        tieredConfig(JsonField.of(tieredConfig))

                    @JsonProperty("tiered_config")
                    @ExcludeMissing
                    fun tieredConfig(tieredConfig: JsonField<TieredConfig>) = apply {
                        this.tieredConfig = tieredConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionTieredPrice =
                        NewSubscriptionTieredPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            tieredConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val TIERED = ModelType(JsonField.of("tiered"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED,
                    }

                    enum class Value {
                        TIERED,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED -> Value.TIERED
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED -> Known.TIERED
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = TieredConfig.Builder::class)
                @NoAutoDetect
                class TieredConfig
                private constructor(
                    private val tiers: JsonField<List<Tier>>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    @JsonProperty("tiers") @ExcludeMissing fun _tiers() = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): TieredConfig = apply {
                        if (!validated) {
                            tiers().forEach { it.validate() }
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: JsonField<List<Tier>> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredConfig: TieredConfig) = apply {
                            this.tiers = tieredConfig.tiers
                            additionalProperties(tieredConfig.additionalProperties)
                        }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        @JsonProperty("tiers")
                        @ExcludeMissing
                        fun tiers(tiers: JsonField<List<Tier>>) = apply { this.tiers = tiers }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): TieredConfig =
                            TieredConfig(
                                tiers.map { it.toImmutable() },
                                additionalProperties.toImmutable()
                            )
                    }

                    @JsonDeserialize(builder = Tier.Builder::class)
                    @NoAutoDetect
                    class Tier
                    private constructor(
                        private val firstUnit: JsonField<Double>,
                        private val lastUnit: JsonField<Double>,
                        private val unitAmount: JsonField<String>,
                        private val additionalProperties: Map<String, JsonValue>,
                    ) {

                        private var validated: Boolean = false

                        /** Inclusive tier starting value */
                        fun firstUnit(): Double = firstUnit.getRequired("first_unit")

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         */
                        fun lastUnit(): Optional<Double> =
                            Optional.ofNullable(lastUnit.getNullable("last_unit"))

                        /** Amount per unit */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /** Inclusive tier starting value */
                        @JsonProperty("first_unit") @ExcludeMissing fun _firstUnit() = firstUnit

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         */
                        @JsonProperty("last_unit") @ExcludeMissing fun _lastUnit() = lastUnit

                        /** Amount per unit */
                        @JsonProperty("unit_amount") @ExcludeMissing fun _unitAmount() = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun validate(): Tier = apply {
                            if (!validated) {
                                firstUnit()
                                lastUnit()
                                unitAmount()
                                validated = true
                            }
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var firstUnit: JsonField<Double> = JsonMissing.of()
                            private var lastUnit: JsonField<Double> = JsonMissing.of()
                            private var unitAmount: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                this.firstUnit = tier.firstUnit
                                this.lastUnit = tier.lastUnit
                                this.unitAmount = tier.unitAmount
                                additionalProperties(tier.additionalProperties)
                            }

                            /** Inclusive tier starting value */
                            fun firstUnit(firstUnit: Double) = firstUnit(JsonField.of(firstUnit))

                            /** Inclusive tier starting value */
                            @JsonProperty("first_unit")
                            @ExcludeMissing
                            fun firstUnit(firstUnit: JsonField<Double>) = apply {
                                this.firstUnit = firstUnit
                            }

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double) = lastUnit(JsonField.of(lastUnit))

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            @JsonProperty("last_unit")
                            @ExcludeMissing
                            fun lastUnit(lastUnit: JsonField<Double>) = apply {
                                this.lastUnit = lastUnit
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Amount per unit */
                            @JsonProperty("unit_amount")
                            @ExcludeMissing
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    this.additionalProperties.putAll(additionalProperties)
                                }

                            @JsonAnySetter
                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                this.additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun build(): Tier =
                                Tier(
                                    firstUnit,
                                    lastUnit,
                                    unitAmount,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && this.firstUnit == other.firstUnit && this.lastUnit == other.lastUnit && this.unitAmount == other.unitAmount && this.additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        private var hashCode: Int = 0

                        override fun hashCode(): Int {
                            if (hashCode == 0) {
                                hashCode = /* spotless:off */ Objects.hash(firstUnit, lastUnit, unitAmount, additionalProperties) /* spotless:on */
                            }
                            return hashCode
                        }

                        override fun toString() =
                            "Tier{firstUnit=$firstUnit, lastUnit=$lastUnit, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredConfig && this.tiers == other.tiers && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(tiers, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "TieredConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.tieredConfig == other.tieredConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionTieredPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredConfig=$tieredConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionTieredBpsPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionTieredBpsPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val tieredBpsConfig: JsonField<TieredBpsConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun tieredBpsConfig(): TieredBpsConfig =
                    tieredBpsConfig.getRequired("tiered_bps_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("tiered_bps_config")
                @ExcludeMissing
                fun _tieredBpsConfig() = tieredBpsConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionTieredBpsPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        tieredBpsConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var tieredBpsConfig: JsonField<TieredBpsConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                    ) = apply {
                        this.metadata = newSubscriptionTieredBpsPrice.metadata
                        this.externalPriceId = newSubscriptionTieredBpsPrice.externalPriceId
                        this.name = newSubscriptionTieredBpsPrice.name
                        this.billableMetricId = newSubscriptionTieredBpsPrice.billableMetricId
                        this.itemId = newSubscriptionTieredBpsPrice.itemId
                        this.billedInAdvance = newSubscriptionTieredBpsPrice.billedInAdvance
                        this.fixedPriceQuantity = newSubscriptionTieredBpsPrice.fixedPriceQuantity
                        this.invoiceGroupingKey = newSubscriptionTieredBpsPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionTieredBpsPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionTieredBpsPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionTieredBpsPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionTieredBpsPrice.conversionRate
                        this.modelType = newSubscriptionTieredBpsPrice.modelType
                        this.tieredBpsConfig = newSubscriptionTieredBpsPrice.tieredBpsConfig
                        this.currency = newSubscriptionTieredBpsPrice.currency
                        this.referenceId = newSubscriptionTieredBpsPrice.referenceId
                        additionalProperties(newSubscriptionTieredBpsPrice.additionalProperties)
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun tieredBpsConfig(tieredBpsConfig: TieredBpsConfig) =
                        tieredBpsConfig(JsonField.of(tieredBpsConfig))

                    @JsonProperty("tiered_bps_config")
                    @ExcludeMissing
                    fun tieredBpsConfig(tieredBpsConfig: JsonField<TieredBpsConfig>) = apply {
                        this.tieredBpsConfig = tieredBpsConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionTieredBpsPrice =
                        NewSubscriptionTieredBpsPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            tieredBpsConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val TIERED_BPS = ModelType(JsonField.of("tiered_bps"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_BPS,
                    }

                    enum class Value {
                        TIERED_BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_BPS -> Value.TIERED_BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_BPS -> Known.TIERED_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = TieredBpsConfig.Builder::class)
                @NoAutoDetect
                class TieredBpsConfig
                private constructor(
                    private val tiers: JsonField<List<Tier>>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    @JsonProperty("tiers") @ExcludeMissing fun _tiers() = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): TieredBpsConfig = apply {
                        if (!validated) {
                            tiers().forEach { it.validate() }
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: JsonField<List<Tier>> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredBpsConfig: TieredBpsConfig) = apply {
                            this.tiers = tieredBpsConfig.tiers
                            additionalProperties(tieredBpsConfig.additionalProperties)
                        }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        @JsonProperty("tiers")
                        @ExcludeMissing
                        fun tiers(tiers: JsonField<List<Tier>>) = apply { this.tiers = tiers }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): TieredBpsConfig =
                            TieredBpsConfig(
                                tiers.map { it.toImmutable() },
                                additionalProperties.toImmutable()
                            )
                    }

                    @JsonDeserialize(builder = Tier.Builder::class)
                    @NoAutoDetect
                    class Tier
                    private constructor(
                        private val minimumAmount: JsonField<String>,
                        private val maximumAmount: JsonField<String>,
                        private val bps: JsonField<Double>,
                        private val perUnitMaximum: JsonField<String>,
                        private val additionalProperties: Map<String, JsonValue>,
                    ) {

                        private var validated: Boolean = false

                        /** Inclusive tier starting value */
                        fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                        /** Exclusive tier ending value */
                        fun maximumAmount(): Optional<String> =
                            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                        /** Per-event basis point rate */
                        fun bps(): Double = bps.getRequired("bps")

                        /** Per unit maximum to charge */
                        fun perUnitMaximum(): Optional<String> =
                            Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                        /** Inclusive tier starting value */
                        @JsonProperty("minimum_amount")
                        @ExcludeMissing
                        fun _minimumAmount() = minimumAmount

                        /** Exclusive tier ending value */
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        fun _maximumAmount() = maximumAmount

                        /** Per-event basis point rate */
                        @JsonProperty("bps") @ExcludeMissing fun _bps() = bps

                        /** Per unit maximum to charge */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun _perUnitMaximum() = perUnitMaximum

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun validate(): Tier = apply {
                            if (!validated) {
                                minimumAmount()
                                maximumAmount()
                                bps()
                                perUnitMaximum()
                                validated = true
                            }
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var minimumAmount: JsonField<String> = JsonMissing.of()
                            private var maximumAmount: JsonField<String> = JsonMissing.of()
                            private var bps: JsonField<Double> = JsonMissing.of()
                            private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                this.minimumAmount = tier.minimumAmount
                                this.maximumAmount = tier.maximumAmount
                                this.bps = tier.bps
                                this.perUnitMaximum = tier.perUnitMaximum
                                additionalProperties(tier.additionalProperties)
                            }

                            /** Inclusive tier starting value */
                            fun minimumAmount(minimumAmount: String) =
                                minimumAmount(JsonField.of(minimumAmount))

                            /** Inclusive tier starting value */
                            @JsonProperty("minimum_amount")
                            @ExcludeMissing
                            fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                                this.minimumAmount = minimumAmount
                            }

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: String) =
                                maximumAmount(JsonField.of(maximumAmount))

                            /** Exclusive tier ending value */
                            @JsonProperty("maximum_amount")
                            @ExcludeMissing
                            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Per-event basis point rate */
                            fun bps(bps: Double) = bps(JsonField.of(bps))

                            /** Per-event basis point rate */
                            @JsonProperty("bps")
                            @ExcludeMissing
                            fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: String) =
                                perUnitMaximum(JsonField.of(perUnitMaximum))

                            /** Per unit maximum to charge */
                            @JsonProperty("per_unit_maximum")
                            @ExcludeMissing
                            fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    this.additionalProperties.putAll(additionalProperties)
                                }

                            @JsonAnySetter
                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                this.additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun build(): Tier =
                                Tier(
                                    minimumAmount,
                                    maximumAmount,
                                    bps,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && this.minimumAmount == other.minimumAmount && this.maximumAmount == other.maximumAmount && this.bps == other.bps && this.perUnitMaximum == other.perUnitMaximum && this.additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        private var hashCode: Int = 0

                        override fun hashCode(): Int {
                            if (hashCode == 0) {
                                hashCode = /* spotless:off */ Objects.hash(minimumAmount, maximumAmount, bps, perUnitMaximum, additionalProperties) /* spotless:on */
                            }
                            return hashCode
                        }

                        override fun toString() =
                            "Tier{minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredBpsConfig && this.tiers == other.tiers && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(tiers, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "TieredBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredBpsPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.tieredBpsConfig == other.tieredBpsConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredBpsConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionTieredBpsPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredBpsConfig=$tieredBpsConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionBpsPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionBpsPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val bpsConfig: JsonField<BpsConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun bpsConfig(): BpsConfig = bpsConfig.getRequired("bps_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("bps_config") @ExcludeMissing fun _bpsConfig() = bpsConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionBpsPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        bpsConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var bpsConfig: JsonField<BpsConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBpsPrice: NewSubscriptionBpsPrice) = apply {
                        this.metadata = newSubscriptionBpsPrice.metadata
                        this.externalPriceId = newSubscriptionBpsPrice.externalPriceId
                        this.name = newSubscriptionBpsPrice.name
                        this.billableMetricId = newSubscriptionBpsPrice.billableMetricId
                        this.itemId = newSubscriptionBpsPrice.itemId
                        this.billedInAdvance = newSubscriptionBpsPrice.billedInAdvance
                        this.fixedPriceQuantity = newSubscriptionBpsPrice.fixedPriceQuantity
                        this.invoiceGroupingKey = newSubscriptionBpsPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionBpsPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionBpsPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionBpsPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionBpsPrice.conversionRate
                        this.modelType = newSubscriptionBpsPrice.modelType
                        this.bpsConfig = newSubscriptionBpsPrice.bpsConfig
                        this.currency = newSubscriptionBpsPrice.currency
                        this.referenceId = newSubscriptionBpsPrice.referenceId
                        additionalProperties(newSubscriptionBpsPrice.additionalProperties)
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun bpsConfig(bpsConfig: BpsConfig) = bpsConfig(JsonField.of(bpsConfig))

                    @JsonProperty("bps_config")
                    @ExcludeMissing
                    fun bpsConfig(bpsConfig: JsonField<BpsConfig>) = apply {
                        this.bpsConfig = bpsConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionBpsPrice =
                        NewSubscriptionBpsPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            bpsConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @JsonDeserialize(builder = BpsConfig.Builder::class)
                @NoAutoDetect
                class BpsConfig
                private constructor(
                    private val bps: JsonField<Double>,
                    private val perUnitMaximum: JsonField<String>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** Basis point take rate per event */
                    fun bps(): Double = bps.getRequired("bps")

                    /** Optional currency amount maximum to cap spend per event */
                    fun perUnitMaximum(): Optional<String> =
                        Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                    /** Basis point take rate per event */
                    @JsonProperty("bps") @ExcludeMissing fun _bps() = bps

                    /** Optional currency amount maximum to cap spend per event */
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    fun _perUnitMaximum() = perUnitMaximum

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BpsConfig = apply {
                        if (!validated) {
                            bps()
                            perUnitMaximum()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var bps: JsonField<Double> = JsonMissing.of()
                        private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bpsConfig: BpsConfig) = apply {
                            this.bps = bpsConfig.bps
                            this.perUnitMaximum = bpsConfig.perUnitMaximum
                            additionalProperties(bpsConfig.additionalProperties)
                        }

                        /** Basis point take rate per event */
                        fun bps(bps: Double) = bps(JsonField.of(bps))

                        /** Basis point take rate per event */
                        @JsonProperty("bps")
                        @ExcludeMissing
                        fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: String) =
                            perUnitMaximum(JsonField.of(perUnitMaximum))

                        /** Optional currency amount maximum to cap spend per event */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                            this.perUnitMaximum = perUnitMaximum
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BpsConfig =
                            BpsConfig(
                                bps,
                                perUnitMaximum,
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BpsConfig && this.bps == other.bps && this.perUnitMaximum == other.perUnitMaximum && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(bps, perUnitMaximum, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BpsConfig{bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val BPS = ModelType(JsonField.of("bps"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BPS,
                    }

                    enum class Value {
                        BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BPS -> Value.BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BPS -> Known.BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBpsPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.bpsConfig == other.bpsConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, bpsConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionBpsPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, bpsConfig=$bpsConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionBulkBpsPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionBulkBpsPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val bulkBpsConfig: JsonField<BulkBpsConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun bulkBpsConfig(): BulkBpsConfig = bulkBpsConfig.getRequired("bulk_bps_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("bulk_bps_config")
                @ExcludeMissing
                fun _bulkBpsConfig() = bulkBpsConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionBulkBpsPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        bulkBpsConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var bulkBpsConfig: JsonField<BulkBpsConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice) =
                        apply {
                            this.metadata = newSubscriptionBulkBpsPrice.metadata
                            this.externalPriceId = newSubscriptionBulkBpsPrice.externalPriceId
                            this.name = newSubscriptionBulkBpsPrice.name
                            this.billableMetricId = newSubscriptionBulkBpsPrice.billableMetricId
                            this.itemId = newSubscriptionBulkBpsPrice.itemId
                            this.billedInAdvance = newSubscriptionBulkBpsPrice.billedInAdvance
                            this.fixedPriceQuantity = newSubscriptionBulkBpsPrice.fixedPriceQuantity
                            this.invoiceGroupingKey = newSubscriptionBulkBpsPrice.invoiceGroupingKey
                            this.cadence = newSubscriptionBulkBpsPrice.cadence
                            this.billingCycleConfiguration =
                                newSubscriptionBulkBpsPrice.billingCycleConfiguration
                            this.invoicingCycleConfiguration =
                                newSubscriptionBulkBpsPrice.invoicingCycleConfiguration
                            this.conversionRate = newSubscriptionBulkBpsPrice.conversionRate
                            this.modelType = newSubscriptionBulkBpsPrice.modelType
                            this.bulkBpsConfig = newSubscriptionBulkBpsPrice.bulkBpsConfig
                            this.currency = newSubscriptionBulkBpsPrice.currency
                            this.referenceId = newSubscriptionBulkBpsPrice.referenceId
                            additionalProperties(newSubscriptionBulkBpsPrice.additionalProperties)
                        }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun bulkBpsConfig(bulkBpsConfig: BulkBpsConfig) =
                        bulkBpsConfig(JsonField.of(bulkBpsConfig))

                    @JsonProperty("bulk_bps_config")
                    @ExcludeMissing
                    fun bulkBpsConfig(bulkBpsConfig: JsonField<BulkBpsConfig>) = apply {
                        this.bulkBpsConfig = bulkBpsConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionBulkBpsPrice =
                        NewSubscriptionBulkBpsPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            bulkBpsConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @JsonDeserialize(builder = BulkBpsConfig.Builder::class)
                @NoAutoDetect
                class BulkBpsConfig
                private constructor(
                    private val tiers: JsonField<List<Tier>>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    @JsonProperty("tiers") @ExcludeMissing fun _tiers() = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BulkBpsConfig = apply {
                        if (!validated) {
                            tiers().forEach { it.validate() }
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: JsonField<List<Tier>> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkBpsConfig: BulkBpsConfig) = apply {
                            this.tiers = bulkBpsConfig.tiers
                            additionalProperties(bulkBpsConfig.additionalProperties)
                        }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        @JsonProperty("tiers")
                        @ExcludeMissing
                        fun tiers(tiers: JsonField<List<Tier>>) = apply { this.tiers = tiers }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BulkBpsConfig =
                            BulkBpsConfig(
                                tiers.map { it.toImmutable() },
                                additionalProperties.toImmutable()
                            )
                    }

                    @JsonDeserialize(builder = Tier.Builder::class)
                    @NoAutoDetect
                    class Tier
                    private constructor(
                        private val maximumAmount: JsonField<String>,
                        private val bps: JsonField<Double>,
                        private val perUnitMaximum: JsonField<String>,
                        private val additionalProperties: Map<String, JsonValue>,
                    ) {

                        private var validated: Boolean = false

                        /** Upper bound for tier */
                        fun maximumAmount(): Optional<String> =
                            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                        /** Basis points to rate on */
                        fun bps(): Double = bps.getRequired("bps")

                        /** The maximum amount to charge for any one event */
                        fun perUnitMaximum(): Optional<String> =
                            Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                        /** Upper bound for tier */
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        fun _maximumAmount() = maximumAmount

                        /** Basis points to rate on */
                        @JsonProperty("bps") @ExcludeMissing fun _bps() = bps

                        /** The maximum amount to charge for any one event */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun _perUnitMaximum() = perUnitMaximum

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun validate(): Tier = apply {
                            if (!validated) {
                                maximumAmount()
                                bps()
                                perUnitMaximum()
                                validated = true
                            }
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var maximumAmount: JsonField<String> = JsonMissing.of()
                            private var bps: JsonField<Double> = JsonMissing.of()
                            private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                this.maximumAmount = tier.maximumAmount
                                this.bps = tier.bps
                                this.perUnitMaximum = tier.perUnitMaximum
                                additionalProperties(tier.additionalProperties)
                            }

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: String) =
                                maximumAmount(JsonField.of(maximumAmount))

                            /** Upper bound for tier */
                            @JsonProperty("maximum_amount")
                            @ExcludeMissing
                            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Basis points to rate on */
                            fun bps(bps: Double) = bps(JsonField.of(bps))

                            /** Basis points to rate on */
                            @JsonProperty("bps")
                            @ExcludeMissing
                            fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: String) =
                                perUnitMaximum(JsonField.of(perUnitMaximum))

                            /** The maximum amount to charge for any one event */
                            @JsonProperty("per_unit_maximum")
                            @ExcludeMissing
                            fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    this.additionalProperties.putAll(additionalProperties)
                                }

                            @JsonAnySetter
                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                this.additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun build(): Tier =
                                Tier(
                                    maximumAmount,
                                    bps,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && this.maximumAmount == other.maximumAmount && this.bps == other.bps && this.perUnitMaximum == other.perUnitMaximum && this.additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        private var hashCode: Int = 0

                        override fun hashCode(): Int {
                            if (hashCode == 0) {
                                hashCode = /* spotless:off */ Objects.hash(maximumAmount, bps, perUnitMaximum, additionalProperties) /* spotless:on */
                            }
                            return hashCode
                        }

                        override fun toString() =
                            "Tier{maximumAmount=$maximumAmount, bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkBpsConfig && this.tiers == other.tiers && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(tiers, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BulkBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val BULK_BPS = ModelType(JsonField.of("bulk_bps"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK_BPS,
                    }

                    enum class Value {
                        BULK_BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK_BPS -> Value.BULK_BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK_BPS -> Known.BULK_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkBpsPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.bulkBpsConfig == other.bulkBpsConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, bulkBpsConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionBulkBpsPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, bulkBpsConfig=$bulkBpsConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionBulkPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionBulkPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val bulkConfig: JsonField<BulkConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun bulkConfig(): BulkConfig = bulkConfig.getRequired("bulk_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("bulk_config") @ExcludeMissing fun _bulkConfig() = bulkConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionBulkPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        bulkConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var bulkConfig: JsonField<BulkConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBulkPrice: NewSubscriptionBulkPrice) = apply {
                        this.metadata = newSubscriptionBulkPrice.metadata
                        this.externalPriceId = newSubscriptionBulkPrice.externalPriceId
                        this.name = newSubscriptionBulkPrice.name
                        this.billableMetricId = newSubscriptionBulkPrice.billableMetricId
                        this.itemId = newSubscriptionBulkPrice.itemId
                        this.billedInAdvance = newSubscriptionBulkPrice.billedInAdvance
                        this.fixedPriceQuantity = newSubscriptionBulkPrice.fixedPriceQuantity
                        this.invoiceGroupingKey = newSubscriptionBulkPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionBulkPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionBulkPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionBulkPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionBulkPrice.conversionRate
                        this.modelType = newSubscriptionBulkPrice.modelType
                        this.bulkConfig = newSubscriptionBulkPrice.bulkConfig
                        this.currency = newSubscriptionBulkPrice.currency
                        this.referenceId = newSubscriptionBulkPrice.referenceId
                        additionalProperties(newSubscriptionBulkPrice.additionalProperties)
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun bulkConfig(bulkConfig: BulkConfig) = bulkConfig(JsonField.of(bulkConfig))

                    @JsonProperty("bulk_config")
                    @ExcludeMissing
                    fun bulkConfig(bulkConfig: JsonField<BulkConfig>) = apply {
                        this.bulkConfig = bulkConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionBulkPrice =
                        NewSubscriptionBulkPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            bulkConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @JsonDeserialize(builder = BulkConfig.Builder::class)
                @NoAutoDetect
                class BulkConfig
                private constructor(
                    private val tiers: JsonField<List<Tier>>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** Bulk tiers for rating based on total usage volume */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /** Bulk tiers for rating based on total usage volume */
                    @JsonProperty("tiers") @ExcludeMissing fun _tiers() = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BulkConfig = apply {
                        if (!validated) {
                            tiers().forEach { it.validate() }
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: JsonField<List<Tier>> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkConfig: BulkConfig) = apply {
                            this.tiers = bulkConfig.tiers
                            additionalProperties(bulkConfig.additionalProperties)
                        }

                        /** Bulk tiers for rating based on total usage volume */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /** Bulk tiers for rating based on total usage volume */
                        @JsonProperty("tiers")
                        @ExcludeMissing
                        fun tiers(tiers: JsonField<List<Tier>>) = apply { this.tiers = tiers }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BulkConfig =
                            BulkConfig(
                                tiers.map { it.toImmutable() },
                                additionalProperties.toImmutable()
                            )
                    }

                    @JsonDeserialize(builder = Tier.Builder::class)
                    @NoAutoDetect
                    class Tier
                    private constructor(
                        private val maximumUnits: JsonField<Double>,
                        private val unitAmount: JsonField<String>,
                        private val additionalProperties: Map<String, JsonValue>,
                    ) {

                        private var validated: Boolean = false

                        /** Upper bound for this tier */
                        fun maximumUnits(): Optional<Double> =
                            Optional.ofNullable(maximumUnits.getNullable("maximum_units"))

                        /** Amount per unit */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /** Upper bound for this tier */
                        @JsonProperty("maximum_units")
                        @ExcludeMissing
                        fun _maximumUnits() = maximumUnits

                        /** Amount per unit */
                        @JsonProperty("unit_amount") @ExcludeMissing fun _unitAmount() = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun validate(): Tier = apply {
                            if (!validated) {
                                maximumUnits()
                                unitAmount()
                                validated = true
                            }
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var maximumUnits: JsonField<Double> = JsonMissing.of()
                            private var unitAmount: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                this.maximumUnits = tier.maximumUnits
                                this.unitAmount = tier.unitAmount
                                additionalProperties(tier.additionalProperties)
                            }

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double) =
                                maximumUnits(JsonField.of(maximumUnits))

                            /** Upper bound for this tier */
                            @JsonProperty("maximum_units")
                            @ExcludeMissing
                            fun maximumUnits(maximumUnits: JsonField<Double>) = apply {
                                this.maximumUnits = maximumUnits
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Amount per unit */
                            @JsonProperty("unit_amount")
                            @ExcludeMissing
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    this.additionalProperties.putAll(additionalProperties)
                                }

                            @JsonAnySetter
                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                this.additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun build(): Tier =
                                Tier(
                                    maximumUnits,
                                    unitAmount,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && this.maximumUnits == other.maximumUnits && this.unitAmount == other.unitAmount && this.additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        private var hashCode: Int = 0

                        override fun hashCode(): Int {
                            if (hashCode == 0) {
                                hashCode = /* spotless:off */ Objects.hash(maximumUnits, unitAmount, additionalProperties) /* spotless:on */
                            }
                            return hashCode
                        }

                        override fun toString() =
                            "Tier{maximumUnits=$maximumUnits, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkConfig && this.tiers == other.tiers && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(tiers, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BulkConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val BULK = ModelType(JsonField.of("bulk"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK,
                    }

                    enum class Value {
                        BULK,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK -> Value.BULK
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK -> Known.BULK
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.bulkConfig == other.bulkConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, bulkConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionBulkPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, bulkConfig=$bulkConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionThresholdTotalAmountPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionThresholdTotalAmountPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun thresholdTotalAmountConfig(): ThresholdTotalAmountConfig =
                    thresholdTotalAmountConfig.getRequired("threshold_total_amount_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("threshold_total_amount_config")
                @ExcludeMissing
                fun _thresholdTotalAmountConfig() = thresholdTotalAmountConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionThresholdTotalAmountPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        thresholdTotalAmountConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionThresholdTotalAmountPrice:
                            NewSubscriptionThresholdTotalAmountPrice
                    ) = apply {
                        this.metadata = newSubscriptionThresholdTotalAmountPrice.metadata
                        this.externalPriceId =
                            newSubscriptionThresholdTotalAmountPrice.externalPriceId
                        this.name = newSubscriptionThresholdTotalAmountPrice.name
                        this.billableMetricId =
                            newSubscriptionThresholdTotalAmountPrice.billableMetricId
                        this.itemId = newSubscriptionThresholdTotalAmountPrice.itemId
                        this.billedInAdvance =
                            newSubscriptionThresholdTotalAmountPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionThresholdTotalAmountPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionThresholdTotalAmountPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionThresholdTotalAmountPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionThresholdTotalAmountPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionThresholdTotalAmountPrice.invoicingCycleConfiguration
                        this.conversionRate =
                            newSubscriptionThresholdTotalAmountPrice.conversionRate
                        this.modelType = newSubscriptionThresholdTotalAmountPrice.modelType
                        this.thresholdTotalAmountConfig =
                            newSubscriptionThresholdTotalAmountPrice.thresholdTotalAmountConfig
                        this.currency = newSubscriptionThresholdTotalAmountPrice.currency
                        this.referenceId = newSubscriptionThresholdTotalAmountPrice.referenceId
                        additionalProperties(
                            newSubscriptionThresholdTotalAmountPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: ThresholdTotalAmountConfig
                    ) = thresholdTotalAmountConfig(JsonField.of(thresholdTotalAmountConfig))

                    @JsonProperty("threshold_total_amount_config")
                    @ExcludeMissing
                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>
                    ) = apply { this.thresholdTotalAmountConfig = thresholdTotalAmountConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionThresholdTotalAmountPrice =
                        NewSubscriptionThresholdTotalAmountPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            thresholdTotalAmountConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val THRESHOLD_TOTAL_AMOUNT =
                            ModelType(JsonField.of("threshold_total_amount"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        THRESHOLD_TOTAL_AMOUNT,
                    }

                    enum class Value {
                        THRESHOLD_TOTAL_AMOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Value.THRESHOLD_TOTAL_AMOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Known.THRESHOLD_TOTAL_AMOUNT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = ThresholdTotalAmountConfig.Builder::class)
                @NoAutoDetect
                class ThresholdTotalAmountConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): ThresholdTotalAmountConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(thresholdTotalAmountConfig: ThresholdTotalAmountConfig) =
                            apply {
                                additionalProperties(
                                    thresholdTotalAmountConfig.additionalProperties
                                )
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): ThresholdTotalAmountConfig =
                            ThresholdTotalAmountConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ThresholdTotalAmountConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "ThresholdTotalAmountConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionThresholdTotalAmountPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.thresholdTotalAmountConfig == other.thresholdTotalAmountConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, thresholdTotalAmountConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionThresholdTotalAmountPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, thresholdTotalAmountConfig=$thresholdTotalAmountConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionTieredPackagePrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionTieredPackagePrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val tieredPackageConfig: JsonField<TieredPackageConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun tieredPackageConfig(): TieredPackageConfig =
                    tieredPackageConfig.getRequired("tiered_package_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("tiered_package_config")
                @ExcludeMissing
                fun _tieredPackageConfig() = tieredPackageConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionTieredPackagePrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        tieredPackageConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var tieredPackageConfig: JsonField<TieredPackageConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                    ) = apply {
                        this.metadata = newSubscriptionTieredPackagePrice.metadata
                        this.externalPriceId = newSubscriptionTieredPackagePrice.externalPriceId
                        this.name = newSubscriptionTieredPackagePrice.name
                        this.billableMetricId = newSubscriptionTieredPackagePrice.billableMetricId
                        this.itemId = newSubscriptionTieredPackagePrice.itemId
                        this.billedInAdvance = newSubscriptionTieredPackagePrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionTieredPackagePrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionTieredPackagePrice.invoiceGroupingKey
                        this.cadence = newSubscriptionTieredPackagePrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionTieredPackagePrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionTieredPackagePrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionTieredPackagePrice.conversionRate
                        this.modelType = newSubscriptionTieredPackagePrice.modelType
                        this.tieredPackageConfig =
                            newSubscriptionTieredPackagePrice.tieredPackageConfig
                        this.currency = newSubscriptionTieredPackagePrice.currency
                        this.referenceId = newSubscriptionTieredPackagePrice.referenceId
                        additionalProperties(newSubscriptionTieredPackagePrice.additionalProperties)
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun tieredPackageConfig(tieredPackageConfig: TieredPackageConfig) =
                        tieredPackageConfig(JsonField.of(tieredPackageConfig))

                    @JsonProperty("tiered_package_config")
                    @ExcludeMissing
                    fun tieredPackageConfig(tieredPackageConfig: JsonField<TieredPackageConfig>) =
                        apply {
                            this.tieredPackageConfig = tieredPackageConfig
                        }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionTieredPackagePrice =
                        NewSubscriptionTieredPackagePrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            tieredPackageConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val TIERED_PACKAGE = ModelType(JsonField.of("tiered_package"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_PACKAGE,
                    }

                    enum class Value {
                        TIERED_PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_PACKAGE -> Value.TIERED_PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_PACKAGE -> Known.TIERED_PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = TieredPackageConfig.Builder::class)
                @NoAutoDetect
                class TieredPackageConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): TieredPackageConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredPackageConfig: TieredPackageConfig) = apply {
                            additionalProperties(tieredPackageConfig.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): TieredPackageConfig =
                            TieredPackageConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredPackageConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "TieredPackageConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredPackagePrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.tieredPackageConfig == other.tieredPackageConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredPackageConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionTieredPackagePrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredPackageConfig=$tieredPackageConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionTieredWithMinimumPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionTieredWithMinimumPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun tieredWithMinimumConfig(): TieredWithMinimumConfig =
                    tieredWithMinimumConfig.getRequired("tiered_with_minimum_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("tiered_with_minimum_config")
                @ExcludeMissing
                fun _tieredWithMinimumConfig() = tieredWithMinimumConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionTieredWithMinimumPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        tieredWithMinimumConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                    ) = apply {
                        this.metadata = newSubscriptionTieredWithMinimumPrice.metadata
                        this.externalPriceId = newSubscriptionTieredWithMinimumPrice.externalPriceId
                        this.name = newSubscriptionTieredWithMinimumPrice.name
                        this.billableMetricId =
                            newSubscriptionTieredWithMinimumPrice.billableMetricId
                        this.itemId = newSubscriptionTieredWithMinimumPrice.itemId
                        this.billedInAdvance = newSubscriptionTieredWithMinimumPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionTieredWithMinimumPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionTieredWithMinimumPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionTieredWithMinimumPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionTieredWithMinimumPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionTieredWithMinimumPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionTieredWithMinimumPrice.conversionRate
                        this.modelType = newSubscriptionTieredWithMinimumPrice.modelType
                        this.tieredWithMinimumConfig =
                            newSubscriptionTieredWithMinimumPrice.tieredWithMinimumConfig
                        this.currency = newSubscriptionTieredWithMinimumPrice.currency
                        this.referenceId = newSubscriptionTieredWithMinimumPrice.referenceId
                        additionalProperties(
                            newSubscriptionTieredWithMinimumPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun tieredWithMinimumConfig(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                        tieredWithMinimumConfig(JsonField.of(tieredWithMinimumConfig))

                    @JsonProperty("tiered_with_minimum_config")
                    @ExcludeMissing
                    fun tieredWithMinimumConfig(
                        tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>
                    ) = apply { this.tieredWithMinimumConfig = tieredWithMinimumConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionTieredWithMinimumPrice =
                        NewSubscriptionTieredWithMinimumPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            tieredWithMinimumConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val TIERED_WITH_MINIMUM = ModelType(JsonField.of("tiered_with_minimum"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_WITH_MINIMUM,
                    }

                    enum class Value {
                        TIERED_WITH_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Value.TIERED_WITH_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Known.TIERED_WITH_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = TieredWithMinimumConfig.Builder::class)
                @NoAutoDetect
                class TieredWithMinimumConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): TieredWithMinimumConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                            apply {
                                additionalProperties(tieredWithMinimumConfig.additionalProperties)
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): TieredWithMinimumConfig =
                            TieredWithMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithMinimumConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "TieredWithMinimumConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredWithMinimumPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.tieredWithMinimumConfig == other.tieredWithMinimumConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredWithMinimumConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionTieredWithMinimumPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredWithMinimumConfig=$tieredWithMinimumConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionUnitWithPercentPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionUnitWithPercentPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val unitWithPercentConfig: JsonField<UnitWithPercentConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun unitWithPercentConfig(): UnitWithPercentConfig =
                    unitWithPercentConfig.getRequired("unit_with_percent_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("unit_with_percent_config")
                @ExcludeMissing
                fun _unitWithPercentConfig() = unitWithPercentConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionUnitWithPercentPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        unitWithPercentConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var unitWithPercentConfig: JsonField<UnitWithPercentConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                    ) = apply {
                        this.metadata = newSubscriptionUnitWithPercentPrice.metadata
                        this.externalPriceId = newSubscriptionUnitWithPercentPrice.externalPriceId
                        this.name = newSubscriptionUnitWithPercentPrice.name
                        this.billableMetricId = newSubscriptionUnitWithPercentPrice.billableMetricId
                        this.itemId = newSubscriptionUnitWithPercentPrice.itemId
                        this.billedInAdvance = newSubscriptionUnitWithPercentPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionUnitWithPercentPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionUnitWithPercentPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionUnitWithPercentPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionUnitWithPercentPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionUnitWithPercentPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionUnitWithPercentPrice.conversionRate
                        this.modelType = newSubscriptionUnitWithPercentPrice.modelType
                        this.unitWithPercentConfig =
                            newSubscriptionUnitWithPercentPrice.unitWithPercentConfig
                        this.currency = newSubscriptionUnitWithPercentPrice.currency
                        this.referenceId = newSubscriptionUnitWithPercentPrice.referenceId
                        additionalProperties(
                            newSubscriptionUnitWithPercentPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun unitWithPercentConfig(unitWithPercentConfig: UnitWithPercentConfig) =
                        unitWithPercentConfig(JsonField.of(unitWithPercentConfig))

                    @JsonProperty("unit_with_percent_config")
                    @ExcludeMissing
                    fun unitWithPercentConfig(
                        unitWithPercentConfig: JsonField<UnitWithPercentConfig>
                    ) = apply { this.unitWithPercentConfig = unitWithPercentConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionUnitWithPercentPrice =
                        NewSubscriptionUnitWithPercentPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            unitWithPercentConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val UNIT_WITH_PERCENT = ModelType(JsonField.of("unit_with_percent"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT_WITH_PERCENT,
                    }

                    enum class Value {
                        UNIT_WITH_PERCENT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PERCENT -> Value.UNIT_WITH_PERCENT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PERCENT -> Known.UNIT_WITH_PERCENT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = UnitWithPercentConfig.Builder::class)
                @NoAutoDetect
                class UnitWithPercentConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): UnitWithPercentConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithPercentConfig: UnitWithPercentConfig) = apply {
                            additionalProperties(unitWithPercentConfig.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): UnitWithPercentConfig =
                            UnitWithPercentConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithPercentConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "UnitWithPercentConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitWithPercentPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.unitWithPercentConfig == other.unitWithPercentConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, unitWithPercentConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionUnitWithPercentPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, unitWithPercentConfig=$unitWithPercentConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionPackageWithAllocationPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionPackageWithAllocationPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val packageWithAllocationConfig: JsonField<PackageWithAllocationConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun packageWithAllocationConfig(): PackageWithAllocationConfig =
                    packageWithAllocationConfig.getRequired("package_with_allocation_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("package_with_allocation_config")
                @ExcludeMissing
                fun _packageWithAllocationConfig() = packageWithAllocationConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionPackageWithAllocationPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        packageWithAllocationConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var packageWithAllocationConfig:
                        JsonField<PackageWithAllocationConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionPackageWithAllocationPrice:
                            NewSubscriptionPackageWithAllocationPrice
                    ) = apply {
                        this.metadata = newSubscriptionPackageWithAllocationPrice.metadata
                        this.externalPriceId =
                            newSubscriptionPackageWithAllocationPrice.externalPriceId
                        this.name = newSubscriptionPackageWithAllocationPrice.name
                        this.billableMetricId =
                            newSubscriptionPackageWithAllocationPrice.billableMetricId
                        this.itemId = newSubscriptionPackageWithAllocationPrice.itemId
                        this.billedInAdvance =
                            newSubscriptionPackageWithAllocationPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionPackageWithAllocationPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionPackageWithAllocationPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionPackageWithAllocationPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionPackageWithAllocationPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionPackageWithAllocationPrice.invoicingCycleConfiguration
                        this.conversionRate =
                            newSubscriptionPackageWithAllocationPrice.conversionRate
                        this.modelType = newSubscriptionPackageWithAllocationPrice.modelType
                        this.packageWithAllocationConfig =
                            newSubscriptionPackageWithAllocationPrice.packageWithAllocationConfig
                        this.currency = newSubscriptionPackageWithAllocationPrice.currency
                        this.referenceId = newSubscriptionPackageWithAllocationPrice.referenceId
                        additionalProperties(
                            newSubscriptionPackageWithAllocationPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: PackageWithAllocationConfig
                    ) = packageWithAllocationConfig(JsonField.of(packageWithAllocationConfig))

                    @JsonProperty("package_with_allocation_config")
                    @ExcludeMissing
                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: JsonField<PackageWithAllocationConfig>
                    ) = apply { this.packageWithAllocationConfig = packageWithAllocationConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionPackageWithAllocationPrice =
                        NewSubscriptionPackageWithAllocationPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            packageWithAllocationConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val PACKAGE_WITH_ALLOCATION =
                            ModelType(JsonField.of("package_with_allocation"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        PACKAGE_WITH_ALLOCATION,
                    }

                    enum class Value {
                        PACKAGE_WITH_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Value.PACKAGE_WITH_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Known.PACKAGE_WITH_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = PackageWithAllocationConfig.Builder::class)
                @NoAutoDetect
                class PackageWithAllocationConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): PackageWithAllocationConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            packageWithAllocationConfig: PackageWithAllocationConfig
                        ) = apply {
                            additionalProperties(packageWithAllocationConfig.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): PackageWithAllocationConfig =
                            PackageWithAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageWithAllocationConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "PackageWithAllocationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionPackageWithAllocationPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.packageWithAllocationConfig == other.packageWithAllocationConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, packageWithAllocationConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionPackageWithAllocationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, packageWithAllocationConfig=$packageWithAllocationConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionTierWithProrationPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionTierWithProrationPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val tieredWithProrationConfig: JsonField<TieredWithProrationConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun tieredWithProrationConfig(): TieredWithProrationConfig =
                    tieredWithProrationConfig.getRequired("tiered_with_proration_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("tiered_with_proration_config")
                @ExcludeMissing
                fun _tieredWithProrationConfig() = tieredWithProrationConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionTierWithProrationPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        tieredWithProrationConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var tieredWithProrationConfig: JsonField<TieredWithProrationConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                    ) = apply {
                        this.metadata = newSubscriptionTierWithProrationPrice.metadata
                        this.externalPriceId = newSubscriptionTierWithProrationPrice.externalPriceId
                        this.name = newSubscriptionTierWithProrationPrice.name
                        this.billableMetricId =
                            newSubscriptionTierWithProrationPrice.billableMetricId
                        this.itemId = newSubscriptionTierWithProrationPrice.itemId
                        this.billedInAdvance = newSubscriptionTierWithProrationPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionTierWithProrationPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionTierWithProrationPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionTierWithProrationPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionTierWithProrationPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionTierWithProrationPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionTierWithProrationPrice.conversionRate
                        this.modelType = newSubscriptionTierWithProrationPrice.modelType
                        this.tieredWithProrationConfig =
                            newSubscriptionTierWithProrationPrice.tieredWithProrationConfig
                        this.currency = newSubscriptionTierWithProrationPrice.currency
                        this.referenceId = newSubscriptionTierWithProrationPrice.referenceId
                        additionalProperties(
                            newSubscriptionTierWithProrationPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: TieredWithProrationConfig
                    ) = tieredWithProrationConfig(JsonField.of(tieredWithProrationConfig))

                    @JsonProperty("tiered_with_proration_config")
                    @ExcludeMissing
                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: JsonField<TieredWithProrationConfig>
                    ) = apply { this.tieredWithProrationConfig = tieredWithProrationConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionTierWithProrationPrice =
                        NewSubscriptionTierWithProrationPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            tieredWithProrationConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val TIERED_WITH_PRORATION = ModelType(JsonField.of("tiered_with_proration"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_WITH_PRORATION,
                    }

                    enum class Value {
                        TIERED_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_PRORATION -> Value.TIERED_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_PRORATION -> Known.TIERED_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = TieredWithProrationConfig.Builder::class)
                @NoAutoDetect
                class TieredWithProrationConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): TieredWithProrationConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithProrationConfig: TieredWithProrationConfig) =
                            apply {
                                additionalProperties(tieredWithProrationConfig.additionalProperties)
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): TieredWithProrationConfig =
                            TieredWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithProrationConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "TieredWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTierWithProrationPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.tieredWithProrationConfig == other.tieredWithProrationConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredWithProrationConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionTierWithProrationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredWithProrationConfig=$tieredWithProrationConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionUnitWithProrationPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionUnitWithProrationPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val unitWithProrationConfig: JsonField<UnitWithProrationConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun unitWithProrationConfig(): UnitWithProrationConfig =
                    unitWithProrationConfig.getRequired("unit_with_proration_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("unit_with_proration_config")
                @ExcludeMissing
                fun _unitWithProrationConfig() = unitWithProrationConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionUnitWithProrationPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        unitWithProrationConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var unitWithProrationConfig: JsonField<UnitWithProrationConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                    ) = apply {
                        this.metadata = newSubscriptionUnitWithProrationPrice.metadata
                        this.externalPriceId = newSubscriptionUnitWithProrationPrice.externalPriceId
                        this.name = newSubscriptionUnitWithProrationPrice.name
                        this.billableMetricId =
                            newSubscriptionUnitWithProrationPrice.billableMetricId
                        this.itemId = newSubscriptionUnitWithProrationPrice.itemId
                        this.billedInAdvance = newSubscriptionUnitWithProrationPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionUnitWithProrationPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionUnitWithProrationPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionUnitWithProrationPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionUnitWithProrationPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionUnitWithProrationPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionUnitWithProrationPrice.conversionRate
                        this.modelType = newSubscriptionUnitWithProrationPrice.modelType
                        this.unitWithProrationConfig =
                            newSubscriptionUnitWithProrationPrice.unitWithProrationConfig
                        this.currency = newSubscriptionUnitWithProrationPrice.currency
                        this.referenceId = newSubscriptionUnitWithProrationPrice.referenceId
                        additionalProperties(
                            newSubscriptionUnitWithProrationPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun unitWithProrationConfig(unitWithProrationConfig: UnitWithProrationConfig) =
                        unitWithProrationConfig(JsonField.of(unitWithProrationConfig))

                    @JsonProperty("unit_with_proration_config")
                    @ExcludeMissing
                    fun unitWithProrationConfig(
                        unitWithProrationConfig: JsonField<UnitWithProrationConfig>
                    ) = apply { this.unitWithProrationConfig = unitWithProrationConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionUnitWithProrationPrice =
                        NewSubscriptionUnitWithProrationPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            unitWithProrationConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val UNIT_WITH_PRORATION = ModelType(JsonField.of("unit_with_proration"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT_WITH_PRORATION,
                    }

                    enum class Value {
                        UNIT_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PRORATION -> Value.UNIT_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PRORATION -> Known.UNIT_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = UnitWithProrationConfig.Builder::class)
                @NoAutoDetect
                class UnitWithProrationConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): UnitWithProrationConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithProrationConfig: UnitWithProrationConfig) =
                            apply {
                                additionalProperties(unitWithProrationConfig.additionalProperties)
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): UnitWithProrationConfig =
                            UnitWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithProrationConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "UnitWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitWithProrationPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.unitWithProrationConfig == other.unitWithProrationConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, unitWithProrationConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionUnitWithProrationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, unitWithProrationConfig=$unitWithProrationConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionGroupedAllocationPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionGroupedAllocationPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val groupedAllocationConfig: JsonField<GroupedAllocationConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun groupedAllocationConfig(): GroupedAllocationConfig =
                    groupedAllocationConfig.getRequired("grouped_allocation_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("grouped_allocation_config")
                @ExcludeMissing
                fun _groupedAllocationConfig() = groupedAllocationConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionGroupedAllocationPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        groupedAllocationConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var groupedAllocationConfig: JsonField<GroupedAllocationConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                    ) = apply {
                        this.metadata = newSubscriptionGroupedAllocationPrice.metadata
                        this.externalPriceId = newSubscriptionGroupedAllocationPrice.externalPriceId
                        this.name = newSubscriptionGroupedAllocationPrice.name
                        this.billableMetricId =
                            newSubscriptionGroupedAllocationPrice.billableMetricId
                        this.itemId = newSubscriptionGroupedAllocationPrice.itemId
                        this.billedInAdvance = newSubscriptionGroupedAllocationPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionGroupedAllocationPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionGroupedAllocationPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionGroupedAllocationPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionGroupedAllocationPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionGroupedAllocationPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionGroupedAllocationPrice.conversionRate
                        this.modelType = newSubscriptionGroupedAllocationPrice.modelType
                        this.groupedAllocationConfig =
                            newSubscriptionGroupedAllocationPrice.groupedAllocationConfig
                        this.currency = newSubscriptionGroupedAllocationPrice.currency
                        this.referenceId = newSubscriptionGroupedAllocationPrice.referenceId
                        additionalProperties(
                            newSubscriptionGroupedAllocationPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun groupedAllocationConfig(groupedAllocationConfig: GroupedAllocationConfig) =
                        groupedAllocationConfig(JsonField.of(groupedAllocationConfig))

                    @JsonProperty("grouped_allocation_config")
                    @ExcludeMissing
                    fun groupedAllocationConfig(
                        groupedAllocationConfig: JsonField<GroupedAllocationConfig>
                    ) = apply { this.groupedAllocationConfig = groupedAllocationConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionGroupedAllocationPrice =
                        NewSubscriptionGroupedAllocationPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            groupedAllocationConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = GroupedAllocationConfig.Builder::class)
                @NoAutoDetect
                class GroupedAllocationConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): GroupedAllocationConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedAllocationConfig: GroupedAllocationConfig) =
                            apply {
                                additionalProperties(groupedAllocationConfig.additionalProperties)
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): GroupedAllocationConfig =
                            GroupedAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedAllocationConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "GroupedAllocationConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val GROUPED_ALLOCATION = ModelType(JsonField.of("grouped_allocation"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_ALLOCATION,
                    }

                    enum class Value {
                        GROUPED_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_ALLOCATION -> Value.GROUPED_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_ALLOCATION -> Known.GROUPED_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionGroupedAllocationPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.groupedAllocationConfig == other.groupedAllocationConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, groupedAllocationConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionGroupedAllocationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, groupedAllocationConfig=$groupedAllocationConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(
                builder = NewSubscriptionGroupedWithProratedMinimumPrice.Builder::class
            )
            @NoAutoDetect
            class NewSubscriptionGroupedWithProratedMinimumPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val groupedWithProratedMinimumConfig:
                    JsonField<GroupedWithProratedMinimumConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun groupedWithProratedMinimumConfig(): GroupedWithProratedMinimumConfig =
                    groupedWithProratedMinimumConfig.getRequired(
                        "grouped_with_prorated_minimum_config"
                    )

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("grouped_with_prorated_minimum_config")
                @ExcludeMissing
                fun _groupedWithProratedMinimumConfig() = groupedWithProratedMinimumConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionGroupedWithProratedMinimumPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        groupedWithProratedMinimumConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var groupedWithProratedMinimumConfig:
                        JsonField<GroupedWithProratedMinimumConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionGroupedWithProratedMinimumPrice:
                            NewSubscriptionGroupedWithProratedMinimumPrice
                    ) = apply {
                        this.metadata = newSubscriptionGroupedWithProratedMinimumPrice.metadata
                        this.externalPriceId =
                            newSubscriptionGroupedWithProratedMinimumPrice.externalPriceId
                        this.name = newSubscriptionGroupedWithProratedMinimumPrice.name
                        this.billableMetricId =
                            newSubscriptionGroupedWithProratedMinimumPrice.billableMetricId
                        this.itemId = newSubscriptionGroupedWithProratedMinimumPrice.itemId
                        this.billedInAdvance =
                            newSubscriptionGroupedWithProratedMinimumPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionGroupedWithProratedMinimumPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionGroupedWithProratedMinimumPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionGroupedWithProratedMinimumPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionGroupedWithProratedMinimumPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionGroupedWithProratedMinimumPrice
                                .invoicingCycleConfiguration
                        this.conversionRate =
                            newSubscriptionGroupedWithProratedMinimumPrice.conversionRate
                        this.modelType = newSubscriptionGroupedWithProratedMinimumPrice.modelType
                        this.groupedWithProratedMinimumConfig =
                            newSubscriptionGroupedWithProratedMinimumPrice
                                .groupedWithProratedMinimumConfig
                        this.currency = newSubscriptionGroupedWithProratedMinimumPrice.currency
                        this.referenceId =
                            newSubscriptionGroupedWithProratedMinimumPrice.referenceId
                        additionalProperties(
                            newSubscriptionGroupedWithProratedMinimumPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                    ) =
                        groupedWithProratedMinimumConfig(
                            JsonField.of(groupedWithProratedMinimumConfig)
                        )

                    @JsonProperty("grouped_with_prorated_minimum_config")
                    @ExcludeMissing
                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig:
                            JsonField<GroupedWithProratedMinimumConfig>
                    ) = apply {
                        this.groupedWithProratedMinimumConfig = groupedWithProratedMinimumConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionGroupedWithProratedMinimumPrice =
                        NewSubscriptionGroupedWithProratedMinimumPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            groupedWithProratedMinimumConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = GroupedWithProratedMinimumConfig.Builder::class)
                @NoAutoDetect
                class GroupedWithProratedMinimumConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): GroupedWithProratedMinimumConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                        ) = apply {
                            additionalProperties(
                                groupedWithProratedMinimumConfig.additionalProperties
                            )
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): GroupedWithProratedMinimumConfig =
                            GroupedWithProratedMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedWithProratedMinimumConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "GroupedWithProratedMinimumConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val GROUPED_WITH_PRORATED_MINIMUM =
                            ModelType(JsonField.of("grouped_with_prorated_minimum"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_WITH_PRORATED_MINIMUM,
                    }

                    enum class Value {
                        GROUPED_WITH_PRORATED_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Value.GROUPED_WITH_PRORATED_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Known.GROUPED_WITH_PRORATED_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionGroupedWithProratedMinimumPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.groupedWithProratedMinimumConfig == other.groupedWithProratedMinimumConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, groupedWithProratedMinimumConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionGroupedWithProratedMinimumPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, groupedWithProratedMinimumConfig=$groupedWithProratedMinimumConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionBulkWithProrationPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionBulkWithProrationPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val bulkWithProrationConfig: JsonField<BulkWithProrationConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun bulkWithProrationConfig(): BulkWithProrationConfig =
                    bulkWithProrationConfig.getRequired("bulk_with_proration_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("bulk_with_proration_config")
                @ExcludeMissing
                fun _bulkWithProrationConfig() = bulkWithProrationConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionBulkWithProrationPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        bulkWithProrationConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var bulkWithProrationConfig: JsonField<BulkWithProrationConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                    ) = apply {
                        this.metadata = newSubscriptionBulkWithProrationPrice.metadata
                        this.externalPriceId = newSubscriptionBulkWithProrationPrice.externalPriceId
                        this.name = newSubscriptionBulkWithProrationPrice.name
                        this.billableMetricId =
                            newSubscriptionBulkWithProrationPrice.billableMetricId
                        this.itemId = newSubscriptionBulkWithProrationPrice.itemId
                        this.billedInAdvance = newSubscriptionBulkWithProrationPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionBulkWithProrationPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionBulkWithProrationPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionBulkWithProrationPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionBulkWithProrationPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionBulkWithProrationPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionBulkWithProrationPrice.conversionRate
                        this.modelType = newSubscriptionBulkWithProrationPrice.modelType
                        this.bulkWithProrationConfig =
                            newSubscriptionBulkWithProrationPrice.bulkWithProrationConfig
                        this.currency = newSubscriptionBulkWithProrationPrice.currency
                        this.referenceId = newSubscriptionBulkWithProrationPrice.referenceId
                        additionalProperties(
                            newSubscriptionBulkWithProrationPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun bulkWithProrationConfig(bulkWithProrationConfig: BulkWithProrationConfig) =
                        bulkWithProrationConfig(JsonField.of(bulkWithProrationConfig))

                    @JsonProperty("bulk_with_proration_config")
                    @ExcludeMissing
                    fun bulkWithProrationConfig(
                        bulkWithProrationConfig: JsonField<BulkWithProrationConfig>
                    ) = apply { this.bulkWithProrationConfig = bulkWithProrationConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionBulkWithProrationPrice =
                        NewSubscriptionBulkWithProrationPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            bulkWithProrationConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @JsonDeserialize(builder = BulkWithProrationConfig.Builder::class)
                @NoAutoDetect
                class BulkWithProrationConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BulkWithProrationConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkWithProrationConfig: BulkWithProrationConfig) =
                            apply {
                                additionalProperties(bulkWithProrationConfig.additionalProperties)
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BulkWithProrationConfig =
                            BulkWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkWithProrationConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BulkWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val BULK_WITH_PRORATION = ModelType(JsonField.of("bulk_with_proration"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK_WITH_PRORATION,
                    }

                    enum class Value {
                        BULK_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK_WITH_PRORATION -> Value.BULK_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK_WITH_PRORATION -> Known.BULK_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkWithProrationPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.bulkWithProrationConfig == other.bulkWithProrationConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, bulkWithProrationConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionBulkWithProrationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, bulkWithProrationConfig=$bulkWithProrationConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is AddPrice && this.priceId == other.priceId && this.externalPriceId == other.externalPriceId && this.price == other.price && this.startDate == other.startDate && this.endDate == other.endDate && this.planPhaseOrder == other.planPhaseOrder && this.minimumAmount == other.minimumAmount && this.maximumAmount == other.maximumAmount && this.discounts == other.discounts && this.additionalProperties == other.additionalProperties /* spotless:on */
        }

        private var hashCode: Int = 0

        override fun hashCode(): Int {
            if (hashCode == 0) {
                hashCode = /* spotless:off */ Objects.hash(priceId, externalPriceId, price, startDate, endDate, planPhaseOrder, minimumAmount, maximumAmount, discounts, additionalProperties) /* spotless:on */
            }
            return hashCode
        }

        override fun toString() =
            "AddPrice{priceId=$priceId, externalPriceId=$externalPriceId, price=$price, startDate=$startDate, endDate=$endDate, planPhaseOrder=$planPhaseOrder, minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, discounts=$discounts, additionalProperties=$additionalProperties}"
    }

    @JsonDeserialize(builder = BillingCycleAnchorConfiguration.Builder::class)
    @NoAutoDetect
    class BillingCycleAnchorConfiguration
    private constructor(
        private val day: Long?,
        private val month: Long?,
        private val year: Long?,
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        /**
         * The day of the month on which the billing cycle is anchored. If the maximum number of
         * days in a month is greater than this value, the last day of the month is the billing
         * cycle day (e.g. billing_cycle_day=31 for April means the billing period begins on the
         * 30th.
         */
        @JsonProperty("day") fun day(): Long? = day

        /**
         * The month on which the billing cycle is anchored (e.g. a quarterly price anchored in
         * February would have cycles starting February, May, August, and November).
         */
        @JsonProperty("month") fun month(): Long? = month

        /**
         * The year on which the billing cycle is anchored (e.g. a 2 year billing cycle anchored on
         * 2021 would have cycles starting on 2021, 2023, 2025, etc.).
         */
        @JsonProperty("year") fun year(): Long? = year

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var day: Long? = null
            private var month: Long? = null
            private var year: Long? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration) =
                apply {
                    this.day = billingCycleAnchorConfiguration.day
                    this.month = billingCycleAnchorConfiguration.month
                    this.year = billingCycleAnchorConfiguration.year
                    additionalProperties(billingCycleAnchorConfiguration.additionalProperties)
                }

            /**
             * The day of the month on which the billing cycle is anchored. If the maximum number of
             * days in a month is greater than this value, the last day of the month is the billing
             * cycle day (e.g. billing_cycle_day=31 for April means the billing period begins on the
             * 30th.
             */
            @JsonProperty("day") fun day(day: Long) = apply { this.day = day }

            /**
             * The month on which the billing cycle is anchored (e.g. a quarterly price anchored in
             * February would have cycles starting February, May, August, and November).
             */
            @JsonProperty("month") fun month(month: Long) = apply { this.month = month }

            /**
             * The year on which the billing cycle is anchored (e.g. a 2 year billing cycle anchored
             * on 2021 would have cycles starting on 2021, 2023, 2025, etc.).
             */
            @JsonProperty("year") fun year(year: Long) = apply { this.year = year }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): BillingCycleAnchorConfiguration =
                BillingCycleAnchorConfiguration(
                    checkNotNull(day) { "`day` is required but was not set" },
                    month,
                    year,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is BillingCycleAnchorConfiguration && this.day == other.day && this.month == other.month && this.year == other.year && this.additionalProperties == other.additionalProperties /* spotless:on */
        }

        private var hashCode: Int = 0

        override fun hashCode(): Int {
            if (hashCode == 0) {
                hashCode = /* spotless:off */ Objects.hash(day, month, year, additionalProperties) /* spotless:on */
            }
            return hashCode
        }

        override fun toString() =
            "BillingCycleAnchorConfiguration{day=$day, month=$month, year=$year, additionalProperties=$additionalProperties}"
    }

    class ExternalMarketplace
    @JsonCreator
    private constructor(
        private val value: JsonField<String>,
    ) : Enum {

        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is ExternalMarketplace && this.value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()

        companion object {

            @JvmField val GOOGLE = ExternalMarketplace(JsonField.of("google"))

            @JvmField val AWS = ExternalMarketplace(JsonField.of("aws"))

            @JvmField val AZURE = ExternalMarketplace(JsonField.of("azure"))

            @JvmStatic fun of(value: String) = ExternalMarketplace(JsonField.of(value))
        }

        enum class Known {
            GOOGLE,
            AWS,
            AZURE,
        }

        enum class Value {
            GOOGLE,
            AWS,
            AZURE,
            _UNKNOWN,
        }

        fun value(): Value =
            when (this) {
                GOOGLE -> Value.GOOGLE
                AWS -> Value.AWS
                AZURE -> Value.AZURE
                else -> Value._UNKNOWN
            }

        fun known(): Known =
            when (this) {
                GOOGLE -> Known.GOOGLE
                AWS -> Known.AWS
                AZURE -> Known.AZURE
                else -> throw OrbInvalidDataException("Unknown ExternalMarketplace: $value")
            }

        fun asString(): String = _value().asStringOrThrow()
    }

    /**
     * User-specified key/value pairs for the resource. Individual keys can be removed by setting
     * the value to `null`, and the entire metadata mapping can be cleared by setting `metadata` to
     * `null`.
     */
    @JsonDeserialize(builder = Metadata.Builder::class)
    @NoAutoDetect
    class Metadata
    private constructor(
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(metadata: Metadata) = apply {
                additionalProperties(metadata.additionalProperties)
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): Metadata = Metadata(additionalProperties.toImmutable())
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
        }

        private var hashCode: Int = 0

        override fun hashCode(): Int {
            if (hashCode == 0) {
                hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
            }
            return hashCode
        }

        override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
    }

    @JsonDeserialize(builder = RemoveAdjustment.Builder::class)
    @NoAutoDetect
    class RemoveAdjustment
    private constructor(
        private val adjustmentId: String?,
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        /** The id of the adjustment to remove on the subscription. */
        @JsonProperty("adjustment_id") fun adjustmentId(): String? = adjustmentId

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var adjustmentId: String? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(removeAdjustment: RemoveAdjustment) = apply {
                this.adjustmentId = removeAdjustment.adjustmentId
                additionalProperties(removeAdjustment.additionalProperties)
            }

            /** The id of the adjustment to remove on the subscription. */
            @JsonProperty("adjustment_id")
            fun adjustmentId(adjustmentId: String) = apply { this.adjustmentId = adjustmentId }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): RemoveAdjustment =
                RemoveAdjustment(
                    checkNotNull(adjustmentId) { "`adjustmentId` is required but was not set" },
                    additionalProperties.toImmutable()
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is RemoveAdjustment && this.adjustmentId == other.adjustmentId && this.additionalProperties == other.additionalProperties /* spotless:on */
        }

        private var hashCode: Int = 0

        override fun hashCode(): Int {
            if (hashCode == 0) {
                hashCode = /* spotless:off */ Objects.hash(adjustmentId, additionalProperties) /* spotless:on */
            }
            return hashCode
        }

        override fun toString() =
            "RemoveAdjustment{adjustmentId=$adjustmentId, additionalProperties=$additionalProperties}"
    }

    @JsonDeserialize(builder = RemovePrice.Builder::class)
    @NoAutoDetect
    class RemovePrice
    private constructor(
        private val priceId: String?,
        private val externalPriceId: String?,
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        /** The id of the price to remove on the subscription. */
        @JsonProperty("price_id") fun priceId(): String? = priceId

        /** The external price id of the price to remove on the subscription. */
        @JsonProperty("external_price_id") fun externalPriceId(): String? = externalPriceId

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var priceId: String? = null
            private var externalPriceId: String? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(removePrice: RemovePrice) = apply {
                this.priceId = removePrice.priceId
                this.externalPriceId = removePrice.externalPriceId
                additionalProperties(removePrice.additionalProperties)
            }

            /** The id of the price to remove on the subscription. */
            @JsonProperty("price_id")
            fun priceId(priceId: String) = apply { this.priceId = priceId }

            /** The external price id of the price to remove on the subscription. */
            @JsonProperty("external_price_id")
            fun externalPriceId(externalPriceId: String) = apply {
                this.externalPriceId = externalPriceId
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): RemovePrice =
                RemovePrice(
                    priceId,
                    externalPriceId,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is RemovePrice && this.priceId == other.priceId && this.externalPriceId == other.externalPriceId && this.additionalProperties == other.additionalProperties /* spotless:on */
        }

        private var hashCode: Int = 0

        override fun hashCode(): Int {
            if (hashCode == 0) {
                hashCode = /* spotless:off */ Objects.hash(priceId, externalPriceId, additionalProperties) /* spotless:on */
            }
            return hashCode
        }

        override fun toString() =
            "RemovePrice{priceId=$priceId, externalPriceId=$externalPriceId, additionalProperties=$additionalProperties}"
    }

    @JsonDeserialize(builder = ReplaceAdjustment.Builder::class)
    @NoAutoDetect
    class ReplaceAdjustment
    private constructor(
        private val adjustment: Adjustment?,
        private val replacesAdjustmentId: String?,
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonProperty("adjustment") fun adjustment(): Adjustment? = adjustment

        /** The id of the adjustment on the plan to replace in the subscription. */
        @JsonProperty("replaces_adjustment_id")
        fun replacesAdjustmentId(): String? = replacesAdjustmentId

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var adjustment: Adjustment? = null
            private var replacesAdjustmentId: String? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(replaceAdjustment: ReplaceAdjustment) = apply {
                this.adjustment = replaceAdjustment.adjustment
                this.replacesAdjustmentId = replaceAdjustment.replacesAdjustmentId
                additionalProperties(replaceAdjustment.additionalProperties)
            }

            /** The definition of a new adjustment to create and add to the subscription. */
            @JsonProperty("adjustment")
            fun adjustment(adjustment: Adjustment) = apply { this.adjustment = adjustment }

            /** The id of the adjustment on the plan to replace in the subscription. */
            @JsonProperty("replaces_adjustment_id")
            fun replacesAdjustmentId(replacesAdjustmentId: String) = apply {
                this.replacesAdjustmentId = replacesAdjustmentId
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): ReplaceAdjustment =
                ReplaceAdjustment(
                    checkNotNull(adjustment) { "`adjustment` is required but was not set" },
                    checkNotNull(replacesAdjustmentId) {
                        "`replacesAdjustmentId` is required but was not set"
                    },
                    additionalProperties.toImmutable(),
                )
        }

        @JsonDeserialize(using = Adjustment.Deserializer::class)
        @JsonSerialize(using = Adjustment.Serializer::class)
        class Adjustment
        private constructor(
            private val newPercentageDiscount: NewPercentageDiscount? = null,
            private val newAmountDiscount: NewAmountDiscount? = null,
            private val newMinimum: NewMinimum? = null,
            private val newMaximum: NewMaximum? = null,
            private val _json: JsonValue? = null,
        ) {

            private var validated: Boolean = false

            fun newPercentageDiscount(): Optional<NewPercentageDiscount> =
                Optional.ofNullable(newPercentageDiscount)

            fun newAmountDiscount(): Optional<NewAmountDiscount> =
                Optional.ofNullable(newAmountDiscount)

            fun newMinimum(): Optional<NewMinimum> = Optional.ofNullable(newMinimum)

            fun newMaximum(): Optional<NewMaximum> = Optional.ofNullable(newMaximum)

            fun isNewPercentageDiscount(): Boolean = newPercentageDiscount != null

            fun isNewAmountDiscount(): Boolean = newAmountDiscount != null

            fun isNewMinimum(): Boolean = newMinimum != null

            fun isNewMaximum(): Boolean = newMaximum != null

            fun asNewPercentageDiscount(): NewPercentageDiscount =
                newPercentageDiscount.getOrThrow("newPercentageDiscount")

            fun asNewAmountDiscount(): NewAmountDiscount =
                newAmountDiscount.getOrThrow("newAmountDiscount")

            fun asNewMinimum(): NewMinimum = newMinimum.getOrThrow("newMinimum")

            fun asNewMaximum(): NewMaximum = newMaximum.getOrThrow("newMaximum")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newPercentageDiscount != null ->
                        visitor.visitNewPercentageDiscount(newPercentageDiscount)
                    newAmountDiscount != null -> visitor.visitNewAmountDiscount(newAmountDiscount)
                    newMinimum != null -> visitor.visitNewMinimum(newMinimum)
                    newMaximum != null -> visitor.visitNewMaximum(newMaximum)
                    else -> visitor.unknown(_json)
                }
            }

            fun validate(): Adjustment = apply {
                if (!validated) {
                    if (
                        newPercentageDiscount == null &&
                            newAmountDiscount == null &&
                            newMinimum == null &&
                            newMaximum == null
                    ) {
                        throw OrbInvalidDataException("Unknown Adjustment: $_json")
                    }
                    newPercentageDiscount?.validate()
                    newAmountDiscount?.validate()
                    newMinimum?.validate()
                    newMaximum?.validate()
                    validated = true
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Adjustment && this.newPercentageDiscount == other.newPercentageDiscount && this.newAmountDiscount == other.newAmountDiscount && this.newMinimum == other.newMinimum && this.newMaximum == other.newMaximum /* spotless:on */
            }

            override fun hashCode(): Int {
                return /* spotless:off */ Objects.hash(newPercentageDiscount, newAmountDiscount, newMinimum, newMaximum) /* spotless:on */
            }

            override fun toString(): String {
                return when {
                    newPercentageDiscount != null ->
                        "Adjustment{newPercentageDiscount=$newPercentageDiscount}"
                    newAmountDiscount != null -> "Adjustment{newAmountDiscount=$newAmountDiscount}"
                    newMinimum != null -> "Adjustment{newMinimum=$newMinimum}"
                    newMaximum != null -> "Adjustment{newMaximum=$newMaximum}"
                    _json != null -> "Adjustment{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Adjustment")
                }
            }

            companion object {

                @JvmStatic
                fun ofNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount) =
                    Adjustment(newPercentageDiscount = newPercentageDiscount)

                @JvmStatic
                fun ofNewAmountDiscount(newAmountDiscount: NewAmountDiscount) =
                    Adjustment(newAmountDiscount = newAmountDiscount)

                @JvmStatic
                fun ofNewMinimum(newMinimum: NewMinimum) = Adjustment(newMinimum = newMinimum)

                @JvmStatic
                fun ofNewMaximum(newMaximum: NewMaximum) = Adjustment(newMaximum = newMaximum)
            }

            interface Visitor<out T> {

                fun visitNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount): T

                fun visitNewAmountDiscount(newAmountDiscount: NewAmountDiscount): T

                fun visitNewMinimum(newMinimum: NewMinimum): T

                fun visitNewMaximum(newMaximum: NewMaximum): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Adjustment: $json")
                }
            }

            class Deserializer : BaseDeserializer<Adjustment>(Adjustment::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Adjustment {
                    val json = JsonValue.fromJsonNode(node)
                    val adjustmentType =
                        json.asObject().getOrNull()?.get("adjustment_type")?.asString()?.getOrNull()

                    when (adjustmentType) {
                        "percentage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewPercentageDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newPercentageDiscount = it, _json = json)
                                }
                        }
                        "amount_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewAmountDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newAmountDiscount = it, _json = json)
                                }
                        }
                        "minimum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMinimum>()) { it.validate() }
                                ?.let {
                                    return Adjustment(newMinimum = it, _json = json)
                                }
                        }
                        "maximum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMaximum>()) { it.validate() }
                                ?.let {
                                    return Adjustment(newMaximum = it, _json = json)
                                }
                        }
                    }

                    return Adjustment(_json = json)
                }
            }

            class Serializer : BaseSerializer<Adjustment>(Adjustment::class) {

                override fun serialize(
                    value: Adjustment,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.newPercentageDiscount != null ->
                            generator.writeObject(value.newPercentageDiscount)
                        value.newAmountDiscount != null ->
                            generator.writeObject(value.newAmountDiscount)
                        value.newMinimum != null -> generator.writeObject(value.newMinimum)
                        value.newMaximum != null -> generator.writeObject(value.newMaximum)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Adjustment")
                    }
                }
            }

            @JsonDeserialize(builder = NewPercentageDiscount.Builder::class)
            @NoAutoDetect
            class NewPercentageDiscount
            private constructor(
                private val appliesToPriceIds: JsonField<List<String>>,
                private val adjustmentType: JsonField<AdjustmentType>,
                private val percentageDiscount: JsonField<Double>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                fun percentageDiscount(): Double =
                    percentageDiscount.getRequired("percentage_discount")

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds() = appliesToPriceIds

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType() = adjustmentType

                @JsonProperty("percentage_discount")
                @ExcludeMissing
                fun _percentageDiscount() = percentageDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewPercentageDiscount = apply {
                    if (!validated) {
                        appliesToPriceIds()
                        adjustmentType()
                        percentageDiscount()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var appliesToPriceIds: JsonField<List<String>> = JsonMissing.of()
                    private var adjustmentType: JsonField<AdjustmentType> = JsonMissing.of()
                    private var percentageDiscount: JsonField<Double> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newPercentageDiscount: NewPercentageDiscount) = apply {
                        this.appliesToPriceIds = newPercentageDiscount.appliesToPriceIds
                        this.adjustmentType = newPercentageDiscount.adjustmentType
                        this.percentageDiscount = newPercentageDiscount.percentageDiscount
                        additionalProperties(newPercentageDiscount.additionalProperties)
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    @JsonProperty("applies_to_price_ids")
                    @ExcludeMissing
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    @JsonProperty("adjustment_type")
                    @ExcludeMissing
                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun percentageDiscount(percentageDiscount: Double) =
                        percentageDiscount(JsonField.of(percentageDiscount))

                    @JsonProperty("percentage_discount")
                    @ExcludeMissing
                    fun percentageDiscount(percentageDiscount: JsonField<Double>) = apply {
                        this.percentageDiscount = percentageDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewPercentageDiscount =
                        NewPercentageDiscount(
                            appliesToPriceIds.map { it.toImmutable() },
                            adjustmentType,
                            percentageDiscount,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val PERCENTAGE_DISCOUNT =
                            AdjustmentType(JsonField.of("percentage_discount"))

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        PERCENTAGE_DISCOUNT,
                    }

                    enum class Value {
                        PERCENTAGE_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Value.PERCENTAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Known.PERCENTAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewPercentageDiscount && this.appliesToPriceIds == other.appliesToPriceIds && this.adjustmentType == other.adjustmentType && this.percentageDiscount == other.percentageDiscount && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(appliesToPriceIds, adjustmentType, percentageDiscount, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewPercentageDiscount{appliesToPriceIds=$appliesToPriceIds, adjustmentType=$adjustmentType, percentageDiscount=$percentageDiscount, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewAmountDiscount.Builder::class)
            @NoAutoDetect
            class NewAmountDiscount
            private constructor(
                private val appliesToPriceIds: JsonField<List<String>>,
                private val adjustmentType: JsonField<AdjustmentType>,
                private val amountDiscount: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                fun amountDiscount(): String = amountDiscount.getRequired("amount_discount")

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds() = appliesToPriceIds

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType() = adjustmentType

                @JsonProperty("amount_discount")
                @ExcludeMissing
                fun _amountDiscount() = amountDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewAmountDiscount = apply {
                    if (!validated) {
                        appliesToPriceIds()
                        adjustmentType()
                        amountDiscount()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var appliesToPriceIds: JsonField<List<String>> = JsonMissing.of()
                    private var adjustmentType: JsonField<AdjustmentType> = JsonMissing.of()
                    private var amountDiscount: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newAmountDiscount: NewAmountDiscount) = apply {
                        this.appliesToPriceIds = newAmountDiscount.appliesToPriceIds
                        this.adjustmentType = newAmountDiscount.adjustmentType
                        this.amountDiscount = newAmountDiscount.amountDiscount
                        additionalProperties(newAmountDiscount.additionalProperties)
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    @JsonProperty("applies_to_price_ids")
                    @ExcludeMissing
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    @JsonProperty("adjustment_type")
                    @ExcludeMissing
                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun amountDiscount(amountDiscount: String) =
                        amountDiscount(JsonField.of(amountDiscount))

                    @JsonProperty("amount_discount")
                    @ExcludeMissing
                    fun amountDiscount(amountDiscount: JsonField<String>) = apply {
                        this.amountDiscount = amountDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewAmountDiscount =
                        NewAmountDiscount(
                            appliesToPriceIds.map { it.toImmutable() },
                            adjustmentType,
                            amountDiscount,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val AMOUNT_DISCOUNT = AdjustmentType(JsonField.of("amount_discount"))

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        AMOUNT_DISCOUNT,
                    }

                    enum class Value {
                        AMOUNT_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            AMOUNT_DISCOUNT -> Value.AMOUNT_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            AMOUNT_DISCOUNT -> Known.AMOUNT_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewAmountDiscount && this.appliesToPriceIds == other.appliesToPriceIds && this.adjustmentType == other.adjustmentType && this.amountDiscount == other.amountDiscount && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(appliesToPriceIds, adjustmentType, amountDiscount, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewAmountDiscount{appliesToPriceIds=$appliesToPriceIds, adjustmentType=$adjustmentType, amountDiscount=$amountDiscount, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewMinimum.Builder::class)
            @NoAutoDetect
            class NewMinimum
            private constructor(
                private val appliesToPriceIds: JsonField<List<String>>,
                private val adjustmentType: JsonField<AdjustmentType>,
                private val minimumAmount: JsonField<String>,
                private val itemId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                /** The item ID that revenue from this minimum will be attributed to. */
                fun itemId(): String = itemId.getRequired("item_id")

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds() = appliesToPriceIds

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType() = adjustmentType

                @JsonProperty("minimum_amount") @ExcludeMissing fun _minimumAmount() = minimumAmount

                /** The item ID that revenue from this minimum will be attributed to. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewMinimum = apply {
                    if (!validated) {
                        appliesToPriceIds()
                        adjustmentType()
                        minimumAmount()
                        itemId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var appliesToPriceIds: JsonField<List<String>> = JsonMissing.of()
                    private var adjustmentType: JsonField<AdjustmentType> = JsonMissing.of()
                    private var minimumAmount: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMinimum: NewMinimum) = apply {
                        this.appliesToPriceIds = newMinimum.appliesToPriceIds
                        this.adjustmentType = newMinimum.adjustmentType
                        this.minimumAmount = newMinimum.minimumAmount
                        this.itemId = newMinimum.itemId
                        additionalProperties(newMinimum.additionalProperties)
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    @JsonProperty("applies_to_price_ids")
                    @ExcludeMissing
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    @JsonProperty("adjustment_type")
                    @ExcludeMissing
                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun minimumAmount(minimumAmount: String) =
                        minimumAmount(JsonField.of(minimumAmount))

                    @JsonProperty("minimum_amount")
                    @ExcludeMissing
                    fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                        this.minimumAmount = minimumAmount
                    }

                    /** The item ID that revenue from this minimum will be attributed to. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The item ID that revenue from this minimum will be attributed to. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewMinimum =
                        NewMinimum(
                            appliesToPriceIds.map { it.toImmutable() },
                            adjustmentType,
                            minimumAmount,
                            itemId,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val MINIMUM = AdjustmentType(JsonField.of("minimum"))

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        MINIMUM,
                    }

                    enum class Value {
                        MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MINIMUM -> Value.MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MINIMUM -> Known.MINIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMinimum && this.appliesToPriceIds == other.appliesToPriceIds && this.adjustmentType == other.adjustmentType && this.minimumAmount == other.minimumAmount && this.itemId == other.itemId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(appliesToPriceIds, adjustmentType, minimumAmount, itemId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewMinimum{appliesToPriceIds=$appliesToPriceIds, adjustmentType=$adjustmentType, minimumAmount=$minimumAmount, itemId=$itemId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewMaximum.Builder::class)
            @NoAutoDetect
            class NewMaximum
            private constructor(
                private val appliesToPriceIds: JsonField<List<String>>,
                private val adjustmentType: JsonField<AdjustmentType>,
                private val maximumAmount: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                fun maximumAmount(): String = maximumAmount.getRequired("maximum_amount")

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds() = appliesToPriceIds

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType() = adjustmentType

                @JsonProperty("maximum_amount") @ExcludeMissing fun _maximumAmount() = maximumAmount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewMaximum = apply {
                    if (!validated) {
                        appliesToPriceIds()
                        adjustmentType()
                        maximumAmount()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var appliesToPriceIds: JsonField<List<String>> = JsonMissing.of()
                    private var adjustmentType: JsonField<AdjustmentType> = JsonMissing.of()
                    private var maximumAmount: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMaximum: NewMaximum) = apply {
                        this.appliesToPriceIds = newMaximum.appliesToPriceIds
                        this.adjustmentType = newMaximum.adjustmentType
                        this.maximumAmount = newMaximum.maximumAmount
                        additionalProperties(newMaximum.additionalProperties)
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    @JsonProperty("applies_to_price_ids")
                    @ExcludeMissing
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    @JsonProperty("adjustment_type")
                    @ExcludeMissing
                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun maximumAmount(maximumAmount: String) =
                        maximumAmount(JsonField.of(maximumAmount))

                    @JsonProperty("maximum_amount")
                    @ExcludeMissing
                    fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                        this.maximumAmount = maximumAmount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewMaximum =
                        NewMaximum(
                            appliesToPriceIds.map { it.toImmutable() },
                            adjustmentType,
                            maximumAmount,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val MAXIMUM = AdjustmentType(JsonField.of("maximum"))

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        MAXIMUM,
                    }

                    enum class Value {
                        MAXIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MAXIMUM -> Value.MAXIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MAXIMUM -> Known.MAXIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMaximum && this.appliesToPriceIds == other.appliesToPriceIds && this.adjustmentType == other.adjustmentType && this.maximumAmount == other.maximumAmount && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(appliesToPriceIds, adjustmentType, maximumAmount, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewMaximum{appliesToPriceIds=$appliesToPriceIds, adjustmentType=$adjustmentType, maximumAmount=$maximumAmount, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is ReplaceAdjustment && this.adjustment == other.adjustment && this.replacesAdjustmentId == other.replacesAdjustmentId && this.additionalProperties == other.additionalProperties /* spotless:on */
        }

        private var hashCode: Int = 0

        override fun hashCode(): Int {
            if (hashCode == 0) {
                hashCode = /* spotless:off */ Objects.hash(adjustment, replacesAdjustmentId, additionalProperties) /* spotless:on */
            }
            return hashCode
        }

        override fun toString() =
            "ReplaceAdjustment{adjustment=$adjustment, replacesAdjustmentId=$replacesAdjustmentId, additionalProperties=$additionalProperties}"
    }

    @JsonDeserialize(builder = ReplacePrice.Builder::class)
    @NoAutoDetect
    class ReplacePrice
    private constructor(
        private val priceId: String?,
        private val externalPriceId: String?,
        private val price: Price?,
        private val fixedPriceQuantity: Double?,
        private val replacesPriceId: String?,
        private val minimumAmount: String?,
        private val maximumAmount: String?,
        private val discounts: List<Discount>?,
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        /** The id of the price to add to the subscription. */
        @JsonProperty("price_id") fun priceId(): String? = priceId

        /** The external price id of the price to add to the subscription. */
        @JsonProperty("external_price_id") fun externalPriceId(): String? = externalPriceId

        /** The definition of a new price to create and add to the subscription. */
        @JsonProperty("price") fun price(): Price? = price

        /** The new quantity of the price, if the price is a fixed price. */
        @JsonProperty("fixed_price_quantity") fun fixedPriceQuantity(): Double? = fixedPriceQuantity

        /** The id of the price on the plan to replace in the subscription. */
        @JsonProperty("replaces_price_id") fun replacesPriceId(): String? = replacesPriceId

        /** The subscription's minimum amount for the replacement price. */
        @JsonProperty("minimum_amount") fun minimumAmount(): String? = minimumAmount

        /** The subscription's maximum amount for the replacement price. */
        @JsonProperty("maximum_amount") fun maximumAmount(): String? = maximumAmount

        /** The subscription's discounts for the replacement price. */
        @JsonProperty("discounts") fun discounts(): List<Discount>? = discounts

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var priceId: String? = null
            private var externalPriceId: String? = null
            private var price: Price? = null
            private var fixedPriceQuantity: Double? = null
            private var replacesPriceId: String? = null
            private var minimumAmount: String? = null
            private var maximumAmount: String? = null
            private var discounts: List<Discount>? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(replacePrice: ReplacePrice) = apply {
                this.priceId = replacePrice.priceId
                this.externalPriceId = replacePrice.externalPriceId
                this.price = replacePrice.price
                this.fixedPriceQuantity = replacePrice.fixedPriceQuantity
                this.replacesPriceId = replacePrice.replacesPriceId
                this.minimumAmount = replacePrice.minimumAmount
                this.maximumAmount = replacePrice.maximumAmount
                this.discounts = replacePrice.discounts
                additionalProperties(replacePrice.additionalProperties)
            }

            /** The id of the price to add to the subscription. */
            @JsonProperty("price_id")
            fun priceId(priceId: String) = apply { this.priceId = priceId }

            /** The external price id of the price to add to the subscription. */
            @JsonProperty("external_price_id")
            fun externalPriceId(externalPriceId: String) = apply {
                this.externalPriceId = externalPriceId
            }

            /** The definition of a new price to create and add to the subscription. */
            @JsonProperty("price") fun price(price: Price) = apply { this.price = price }

            /** The new quantity of the price, if the price is a fixed price. */
            @JsonProperty("fixed_price_quantity")
            fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                this.fixedPriceQuantity = fixedPriceQuantity
            }

            /** The id of the price on the plan to replace in the subscription. */
            @JsonProperty("replaces_price_id")
            fun replacesPriceId(replacesPriceId: String) = apply {
                this.replacesPriceId = replacesPriceId
            }

            /** The subscription's minimum amount for the replacement price. */
            @JsonProperty("minimum_amount")
            fun minimumAmount(minimumAmount: String) = apply { this.minimumAmount = minimumAmount }

            /** The subscription's maximum amount for the replacement price. */
            @JsonProperty("maximum_amount")
            fun maximumAmount(maximumAmount: String) = apply { this.maximumAmount = maximumAmount }

            /** The subscription's discounts for the replacement price. */
            @JsonProperty("discounts")
            fun discounts(discounts: List<Discount>) = apply { this.discounts = discounts }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): ReplacePrice =
                ReplacePrice(
                    priceId,
                    externalPriceId,
                    price,
                    fixedPriceQuantity,
                    checkNotNull(replacesPriceId) {
                        "`replacesPriceId` is required but was not set"
                    },
                    minimumAmount,
                    maximumAmount,
                    discounts?.toImmutable(),
                    additionalProperties.toImmutable(),
                )
        }

        @JsonDeserialize(builder = Discount.Builder::class)
        @NoAutoDetect
        class Discount
        private constructor(
            private val discountType: DiscountType?,
            private val percentageDiscount: Double?,
            private val usageDiscount: Double?,
            private val amountDiscount: String?,
            private val additionalProperties: Map<String, JsonValue>,
        ) {

            @JsonProperty("discount_type") fun discountType(): DiscountType? = discountType

            /**
             * Only available if discount_type is `percentage`. This is a number between 0 and 1.
             */
            @JsonProperty("percentage_discount")
            fun percentageDiscount(): Double? = percentageDiscount

            /**
             * Only available if discount_type is `usage`. Number of usage units that this discount
             * is for
             */
            @JsonProperty("usage_discount") fun usageDiscount(): Double? = usageDiscount

            /** Only available if discount_type is `amount`. */
            @JsonProperty("amount_discount") fun amountDiscount(): String? = amountDiscount

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            class Builder {

                private var discountType: DiscountType? = null
                private var percentageDiscount: Double? = null
                private var usageDiscount: Double? = null
                private var amountDiscount: String? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(discount: Discount) = apply {
                    this.discountType = discount.discountType
                    this.percentageDiscount = discount.percentageDiscount
                    this.usageDiscount = discount.usageDiscount
                    this.amountDiscount = discount.amountDiscount
                    additionalProperties(discount.additionalProperties)
                }

                @JsonProperty("discount_type")
                fun discountType(discountType: DiscountType) = apply {
                    this.discountType = discountType
                }

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                @JsonProperty("percentage_discount")
                fun percentageDiscount(percentageDiscount: Double) = apply {
                    this.percentageDiscount = percentageDiscount
                }

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                @JsonProperty("usage_discount")
                fun usageDiscount(usageDiscount: Double) = apply {
                    this.usageDiscount = usageDiscount
                }

                /** Only available if discount_type is `amount`. */
                @JsonProperty("amount_discount")
                fun amountDiscount(amountDiscount: String) = apply {
                    this.amountDiscount = amountDiscount
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    this.additionalProperties.putAll(additionalProperties)
                }

                @JsonAnySetter
                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    this.additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun build(): Discount =
                    Discount(
                        checkNotNull(discountType) { "`discountType` is required but was not set" },
                        percentageDiscount,
                        usageDiscount,
                        amountDiscount,
                        additionalProperties.toImmutable(),
                    )
            }

            class DiscountType
            @JsonCreator
            private constructor(
                private val value: JsonField<String>,
            ) : Enum {

                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is DiscountType && this.value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()

                companion object {

                    @JvmField val PERCENTAGE = DiscountType(JsonField.of("percentage"))

                    @JvmField val USAGE = DiscountType(JsonField.of("usage"))

                    @JvmField val AMOUNT = DiscountType(JsonField.of("amount"))

                    @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                }

                enum class Known {
                    PERCENTAGE,
                    USAGE,
                    AMOUNT,
                }

                enum class Value {
                    PERCENTAGE,
                    USAGE,
                    AMOUNT,
                    _UNKNOWN,
                }

                fun value(): Value =
                    when (this) {
                        PERCENTAGE -> Value.PERCENTAGE
                        USAGE -> Value.USAGE
                        AMOUNT -> Value.AMOUNT
                        else -> Value._UNKNOWN
                    }

                fun known(): Known =
                    when (this) {
                        PERCENTAGE -> Known.PERCENTAGE
                        USAGE -> Known.USAGE
                        AMOUNT -> Known.AMOUNT
                        else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                    }

                fun asString(): String = _value().asStringOrThrow()
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Discount && this.discountType == other.discountType && this.percentageDiscount == other.percentageDiscount && this.usageDiscount == other.usageDiscount && this.amountDiscount == other.amountDiscount && this.additionalProperties == other.additionalProperties /* spotless:on */
            }

            private var hashCode: Int = 0

            override fun hashCode(): Int {
                if (hashCode == 0) {
                    hashCode = /* spotless:off */ Objects.hash(discountType, percentageDiscount, usageDiscount, amountDiscount, additionalProperties) /* spotless:on */
                }
                return hashCode
            }

            override fun toString() =
                "Discount{discountType=$discountType, percentageDiscount=$percentageDiscount, usageDiscount=$usageDiscount, amountDiscount=$amountDiscount, additionalProperties=$additionalProperties}"
        }

        @JsonDeserialize(using = Price.Deserializer::class)
        @JsonSerialize(using = Price.Serializer::class)
        class Price
        private constructor(
            private val newSubscriptionUnitPrice: NewSubscriptionUnitPrice? = null,
            private val newSubscriptionPackagePrice: NewSubscriptionPackagePrice? = null,
            private val newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice? = null,
            private val newSubscriptionTieredPrice: NewSubscriptionTieredPrice? = null,
            private val newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice? = null,
            private val newSubscriptionBpsPrice: NewSubscriptionBpsPrice? = null,
            private val newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice? = null,
            private val newSubscriptionBulkPrice: NewSubscriptionBulkPrice? = null,
            private val newSubscriptionThresholdTotalAmountPrice:
                NewSubscriptionThresholdTotalAmountPrice? =
                null,
            private val newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice? =
                null,
            private val newSubscriptionTieredWithMinimumPrice:
                NewSubscriptionTieredWithMinimumPrice? =
                null,
            private val newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice? =
                null,
            private val newSubscriptionPackageWithAllocationPrice:
                NewSubscriptionPackageWithAllocationPrice? =
                null,
            private val newSubscriptionTierWithProrationPrice:
                NewSubscriptionTierWithProrationPrice? =
                null,
            private val newSubscriptionUnitWithProrationPrice:
                NewSubscriptionUnitWithProrationPrice? =
                null,
            private val newSubscriptionGroupedAllocationPrice:
                NewSubscriptionGroupedAllocationPrice? =
                null,
            private val newSubscriptionGroupedWithProratedMinimumPrice:
                NewSubscriptionGroupedWithProratedMinimumPrice? =
                null,
            private val newSubscriptionBulkWithProrationPrice:
                NewSubscriptionBulkWithProrationPrice? =
                null,
            private val _json: JsonValue? = null,
        ) {

            private var validated: Boolean = false

            fun newSubscriptionUnitPrice(): Optional<NewSubscriptionUnitPrice> =
                Optional.ofNullable(newSubscriptionUnitPrice)

            fun newSubscriptionPackagePrice(): Optional<NewSubscriptionPackagePrice> =
                Optional.ofNullable(newSubscriptionPackagePrice)

            fun newSubscriptionMatrixPrice(): Optional<NewSubscriptionMatrixPrice> =
                Optional.ofNullable(newSubscriptionMatrixPrice)

            fun newSubscriptionTieredPrice(): Optional<NewSubscriptionTieredPrice> =
                Optional.ofNullable(newSubscriptionTieredPrice)

            fun newSubscriptionTieredBpsPrice(): Optional<NewSubscriptionTieredBpsPrice> =
                Optional.ofNullable(newSubscriptionTieredBpsPrice)

            fun newSubscriptionBpsPrice(): Optional<NewSubscriptionBpsPrice> =
                Optional.ofNullable(newSubscriptionBpsPrice)

            fun newSubscriptionBulkBpsPrice(): Optional<NewSubscriptionBulkBpsPrice> =
                Optional.ofNullable(newSubscriptionBulkBpsPrice)

            fun newSubscriptionBulkPrice(): Optional<NewSubscriptionBulkPrice> =
                Optional.ofNullable(newSubscriptionBulkPrice)

            fun newSubscriptionThresholdTotalAmountPrice():
                Optional<NewSubscriptionThresholdTotalAmountPrice> =
                Optional.ofNullable(newSubscriptionThresholdTotalAmountPrice)

            fun newSubscriptionTieredPackagePrice(): Optional<NewSubscriptionTieredPackagePrice> =
                Optional.ofNullable(newSubscriptionTieredPackagePrice)

            fun newSubscriptionTieredWithMinimumPrice():
                Optional<NewSubscriptionTieredWithMinimumPrice> =
                Optional.ofNullable(newSubscriptionTieredWithMinimumPrice)

            fun newSubscriptionUnitWithPercentPrice():
                Optional<NewSubscriptionUnitWithPercentPrice> =
                Optional.ofNullable(newSubscriptionUnitWithPercentPrice)

            fun newSubscriptionPackageWithAllocationPrice():
                Optional<NewSubscriptionPackageWithAllocationPrice> =
                Optional.ofNullable(newSubscriptionPackageWithAllocationPrice)

            fun newSubscriptionTierWithProrationPrice():
                Optional<NewSubscriptionTierWithProrationPrice> =
                Optional.ofNullable(newSubscriptionTierWithProrationPrice)

            fun newSubscriptionUnitWithProrationPrice():
                Optional<NewSubscriptionUnitWithProrationPrice> =
                Optional.ofNullable(newSubscriptionUnitWithProrationPrice)

            fun newSubscriptionGroupedAllocationPrice():
                Optional<NewSubscriptionGroupedAllocationPrice> =
                Optional.ofNullable(newSubscriptionGroupedAllocationPrice)

            fun newSubscriptionGroupedWithProratedMinimumPrice():
                Optional<NewSubscriptionGroupedWithProratedMinimumPrice> =
                Optional.ofNullable(newSubscriptionGroupedWithProratedMinimumPrice)

            fun newSubscriptionBulkWithProrationPrice():
                Optional<NewSubscriptionBulkWithProrationPrice> =
                Optional.ofNullable(newSubscriptionBulkWithProrationPrice)

            fun isNewSubscriptionUnitPrice(): Boolean = newSubscriptionUnitPrice != null

            fun isNewSubscriptionPackagePrice(): Boolean = newSubscriptionPackagePrice != null

            fun isNewSubscriptionMatrixPrice(): Boolean = newSubscriptionMatrixPrice != null

            fun isNewSubscriptionTieredPrice(): Boolean = newSubscriptionTieredPrice != null

            fun isNewSubscriptionTieredBpsPrice(): Boolean = newSubscriptionTieredBpsPrice != null

            fun isNewSubscriptionBpsPrice(): Boolean = newSubscriptionBpsPrice != null

            fun isNewSubscriptionBulkBpsPrice(): Boolean = newSubscriptionBulkBpsPrice != null

            fun isNewSubscriptionBulkPrice(): Boolean = newSubscriptionBulkPrice != null

            fun isNewSubscriptionThresholdTotalAmountPrice(): Boolean =
                newSubscriptionThresholdTotalAmountPrice != null

            fun isNewSubscriptionTieredPackagePrice(): Boolean =
                newSubscriptionTieredPackagePrice != null

            fun isNewSubscriptionTieredWithMinimumPrice(): Boolean =
                newSubscriptionTieredWithMinimumPrice != null

            fun isNewSubscriptionUnitWithPercentPrice(): Boolean =
                newSubscriptionUnitWithPercentPrice != null

            fun isNewSubscriptionPackageWithAllocationPrice(): Boolean =
                newSubscriptionPackageWithAllocationPrice != null

            fun isNewSubscriptionTierWithProrationPrice(): Boolean =
                newSubscriptionTierWithProrationPrice != null

            fun isNewSubscriptionUnitWithProrationPrice(): Boolean =
                newSubscriptionUnitWithProrationPrice != null

            fun isNewSubscriptionGroupedAllocationPrice(): Boolean =
                newSubscriptionGroupedAllocationPrice != null

            fun isNewSubscriptionGroupedWithProratedMinimumPrice(): Boolean =
                newSubscriptionGroupedWithProratedMinimumPrice != null

            fun isNewSubscriptionBulkWithProrationPrice(): Boolean =
                newSubscriptionBulkWithProrationPrice != null

            fun asNewSubscriptionUnitPrice(): NewSubscriptionUnitPrice =
                newSubscriptionUnitPrice.getOrThrow("newSubscriptionUnitPrice")

            fun asNewSubscriptionPackagePrice(): NewSubscriptionPackagePrice =
                newSubscriptionPackagePrice.getOrThrow("newSubscriptionPackagePrice")

            fun asNewSubscriptionMatrixPrice(): NewSubscriptionMatrixPrice =
                newSubscriptionMatrixPrice.getOrThrow("newSubscriptionMatrixPrice")

            fun asNewSubscriptionTieredPrice(): NewSubscriptionTieredPrice =
                newSubscriptionTieredPrice.getOrThrow("newSubscriptionTieredPrice")

            fun asNewSubscriptionTieredBpsPrice(): NewSubscriptionTieredBpsPrice =
                newSubscriptionTieredBpsPrice.getOrThrow("newSubscriptionTieredBpsPrice")

            fun asNewSubscriptionBpsPrice(): NewSubscriptionBpsPrice =
                newSubscriptionBpsPrice.getOrThrow("newSubscriptionBpsPrice")

            fun asNewSubscriptionBulkBpsPrice(): NewSubscriptionBulkBpsPrice =
                newSubscriptionBulkBpsPrice.getOrThrow("newSubscriptionBulkBpsPrice")

            fun asNewSubscriptionBulkPrice(): NewSubscriptionBulkPrice =
                newSubscriptionBulkPrice.getOrThrow("newSubscriptionBulkPrice")

            fun asNewSubscriptionThresholdTotalAmountPrice():
                NewSubscriptionThresholdTotalAmountPrice =
                newSubscriptionThresholdTotalAmountPrice.getOrThrow(
                    "newSubscriptionThresholdTotalAmountPrice"
                )

            fun asNewSubscriptionTieredPackagePrice(): NewSubscriptionTieredPackagePrice =
                newSubscriptionTieredPackagePrice.getOrThrow("newSubscriptionTieredPackagePrice")

            fun asNewSubscriptionTieredWithMinimumPrice(): NewSubscriptionTieredWithMinimumPrice =
                newSubscriptionTieredWithMinimumPrice.getOrThrow(
                    "newSubscriptionTieredWithMinimumPrice"
                )

            fun asNewSubscriptionUnitWithPercentPrice(): NewSubscriptionUnitWithPercentPrice =
                newSubscriptionUnitWithPercentPrice.getOrThrow(
                    "newSubscriptionUnitWithPercentPrice"
                )

            fun asNewSubscriptionPackageWithAllocationPrice():
                NewSubscriptionPackageWithAllocationPrice =
                newSubscriptionPackageWithAllocationPrice.getOrThrow(
                    "newSubscriptionPackageWithAllocationPrice"
                )

            fun asNewSubscriptionTierWithProrationPrice(): NewSubscriptionTierWithProrationPrice =
                newSubscriptionTierWithProrationPrice.getOrThrow(
                    "newSubscriptionTierWithProrationPrice"
                )

            fun asNewSubscriptionUnitWithProrationPrice(): NewSubscriptionUnitWithProrationPrice =
                newSubscriptionUnitWithProrationPrice.getOrThrow(
                    "newSubscriptionUnitWithProrationPrice"
                )

            fun asNewSubscriptionGroupedAllocationPrice(): NewSubscriptionGroupedAllocationPrice =
                newSubscriptionGroupedAllocationPrice.getOrThrow(
                    "newSubscriptionGroupedAllocationPrice"
                )

            fun asNewSubscriptionGroupedWithProratedMinimumPrice():
                NewSubscriptionGroupedWithProratedMinimumPrice =
                newSubscriptionGroupedWithProratedMinimumPrice.getOrThrow(
                    "newSubscriptionGroupedWithProratedMinimumPrice"
                )

            fun asNewSubscriptionBulkWithProrationPrice(): NewSubscriptionBulkWithProrationPrice =
                newSubscriptionBulkWithProrationPrice.getOrThrow(
                    "newSubscriptionBulkWithProrationPrice"
                )

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newSubscriptionUnitPrice != null ->
                        visitor.visitNewSubscriptionUnitPrice(newSubscriptionUnitPrice)
                    newSubscriptionPackagePrice != null ->
                        visitor.visitNewSubscriptionPackagePrice(newSubscriptionPackagePrice)
                    newSubscriptionMatrixPrice != null ->
                        visitor.visitNewSubscriptionMatrixPrice(newSubscriptionMatrixPrice)
                    newSubscriptionTieredPrice != null ->
                        visitor.visitNewSubscriptionTieredPrice(newSubscriptionTieredPrice)
                    newSubscriptionTieredBpsPrice != null ->
                        visitor.visitNewSubscriptionTieredBpsPrice(newSubscriptionTieredBpsPrice)
                    newSubscriptionBpsPrice != null ->
                        visitor.visitNewSubscriptionBpsPrice(newSubscriptionBpsPrice)
                    newSubscriptionBulkBpsPrice != null ->
                        visitor.visitNewSubscriptionBulkBpsPrice(newSubscriptionBulkBpsPrice)
                    newSubscriptionBulkPrice != null ->
                        visitor.visitNewSubscriptionBulkPrice(newSubscriptionBulkPrice)
                    newSubscriptionThresholdTotalAmountPrice != null ->
                        visitor.visitNewSubscriptionThresholdTotalAmountPrice(
                            newSubscriptionThresholdTotalAmountPrice
                        )
                    newSubscriptionTieredPackagePrice != null ->
                        visitor.visitNewSubscriptionTieredPackagePrice(
                            newSubscriptionTieredPackagePrice
                        )
                    newSubscriptionTieredWithMinimumPrice != null ->
                        visitor.visitNewSubscriptionTieredWithMinimumPrice(
                            newSubscriptionTieredWithMinimumPrice
                        )
                    newSubscriptionUnitWithPercentPrice != null ->
                        visitor.visitNewSubscriptionUnitWithPercentPrice(
                            newSubscriptionUnitWithPercentPrice
                        )
                    newSubscriptionPackageWithAllocationPrice != null ->
                        visitor.visitNewSubscriptionPackageWithAllocationPrice(
                            newSubscriptionPackageWithAllocationPrice
                        )
                    newSubscriptionTierWithProrationPrice != null ->
                        visitor.visitNewSubscriptionTierWithProrationPrice(
                            newSubscriptionTierWithProrationPrice
                        )
                    newSubscriptionUnitWithProrationPrice != null ->
                        visitor.visitNewSubscriptionUnitWithProrationPrice(
                            newSubscriptionUnitWithProrationPrice
                        )
                    newSubscriptionGroupedAllocationPrice != null ->
                        visitor.visitNewSubscriptionGroupedAllocationPrice(
                            newSubscriptionGroupedAllocationPrice
                        )
                    newSubscriptionGroupedWithProratedMinimumPrice != null ->
                        visitor.visitNewSubscriptionGroupedWithProratedMinimumPrice(
                            newSubscriptionGroupedWithProratedMinimumPrice
                        )
                    newSubscriptionBulkWithProrationPrice != null ->
                        visitor.visitNewSubscriptionBulkWithProrationPrice(
                            newSubscriptionBulkWithProrationPrice
                        )
                    else -> visitor.unknown(_json)
                }
            }

            fun validate(): Price = apply {
                if (!validated) {
                    if (
                        newSubscriptionUnitPrice == null &&
                            newSubscriptionPackagePrice == null &&
                            newSubscriptionMatrixPrice == null &&
                            newSubscriptionTieredPrice == null &&
                            newSubscriptionTieredBpsPrice == null &&
                            newSubscriptionBpsPrice == null &&
                            newSubscriptionBulkBpsPrice == null &&
                            newSubscriptionBulkPrice == null &&
                            newSubscriptionThresholdTotalAmountPrice == null &&
                            newSubscriptionTieredPackagePrice == null &&
                            newSubscriptionTieredWithMinimumPrice == null &&
                            newSubscriptionUnitWithPercentPrice == null &&
                            newSubscriptionPackageWithAllocationPrice == null &&
                            newSubscriptionTierWithProrationPrice == null &&
                            newSubscriptionUnitWithProrationPrice == null &&
                            newSubscriptionGroupedAllocationPrice == null &&
                            newSubscriptionGroupedWithProratedMinimumPrice == null &&
                            newSubscriptionBulkWithProrationPrice == null
                    ) {
                        throw OrbInvalidDataException("Unknown Price: $_json")
                    }
                    newSubscriptionUnitPrice?.validate()
                    newSubscriptionPackagePrice?.validate()
                    newSubscriptionMatrixPrice?.validate()
                    newSubscriptionTieredPrice?.validate()
                    newSubscriptionTieredBpsPrice?.validate()
                    newSubscriptionBpsPrice?.validate()
                    newSubscriptionBulkBpsPrice?.validate()
                    newSubscriptionBulkPrice?.validate()
                    newSubscriptionThresholdTotalAmountPrice?.validate()
                    newSubscriptionTieredPackagePrice?.validate()
                    newSubscriptionTieredWithMinimumPrice?.validate()
                    newSubscriptionUnitWithPercentPrice?.validate()
                    newSubscriptionPackageWithAllocationPrice?.validate()
                    newSubscriptionTierWithProrationPrice?.validate()
                    newSubscriptionUnitWithProrationPrice?.validate()
                    newSubscriptionGroupedAllocationPrice?.validate()
                    newSubscriptionGroupedWithProratedMinimumPrice?.validate()
                    newSubscriptionBulkWithProrationPrice?.validate()
                    validated = true
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Price && this.newSubscriptionUnitPrice == other.newSubscriptionUnitPrice && this.newSubscriptionPackagePrice == other.newSubscriptionPackagePrice && this.newSubscriptionMatrixPrice == other.newSubscriptionMatrixPrice && this.newSubscriptionTieredPrice == other.newSubscriptionTieredPrice && this.newSubscriptionTieredBpsPrice == other.newSubscriptionTieredBpsPrice && this.newSubscriptionBpsPrice == other.newSubscriptionBpsPrice && this.newSubscriptionBulkBpsPrice == other.newSubscriptionBulkBpsPrice && this.newSubscriptionBulkPrice == other.newSubscriptionBulkPrice && this.newSubscriptionThresholdTotalAmountPrice == other.newSubscriptionThresholdTotalAmountPrice && this.newSubscriptionTieredPackagePrice == other.newSubscriptionTieredPackagePrice && this.newSubscriptionTieredWithMinimumPrice == other.newSubscriptionTieredWithMinimumPrice && this.newSubscriptionUnitWithPercentPrice == other.newSubscriptionUnitWithPercentPrice && this.newSubscriptionPackageWithAllocationPrice == other.newSubscriptionPackageWithAllocationPrice && this.newSubscriptionTierWithProrationPrice == other.newSubscriptionTierWithProrationPrice && this.newSubscriptionUnitWithProrationPrice == other.newSubscriptionUnitWithProrationPrice && this.newSubscriptionGroupedAllocationPrice == other.newSubscriptionGroupedAllocationPrice && this.newSubscriptionGroupedWithProratedMinimumPrice == other.newSubscriptionGroupedWithProratedMinimumPrice && this.newSubscriptionBulkWithProrationPrice == other.newSubscriptionBulkWithProrationPrice /* spotless:on */
            }

            override fun hashCode(): Int {
                return /* spotless:off */ Objects.hash(newSubscriptionUnitPrice, newSubscriptionPackagePrice, newSubscriptionMatrixPrice, newSubscriptionTieredPrice, newSubscriptionTieredBpsPrice, newSubscriptionBpsPrice, newSubscriptionBulkBpsPrice, newSubscriptionBulkPrice, newSubscriptionThresholdTotalAmountPrice, newSubscriptionTieredPackagePrice, newSubscriptionTieredWithMinimumPrice, newSubscriptionUnitWithPercentPrice, newSubscriptionPackageWithAllocationPrice, newSubscriptionTierWithProrationPrice, newSubscriptionUnitWithProrationPrice, newSubscriptionGroupedAllocationPrice, newSubscriptionGroupedWithProratedMinimumPrice, newSubscriptionBulkWithProrationPrice) /* spotless:on */
            }

            override fun toString(): String {
                return when {
                    newSubscriptionUnitPrice != null ->
                        "Price{newSubscriptionUnitPrice=$newSubscriptionUnitPrice}"
                    newSubscriptionPackagePrice != null ->
                        "Price{newSubscriptionPackagePrice=$newSubscriptionPackagePrice}"
                    newSubscriptionMatrixPrice != null ->
                        "Price{newSubscriptionMatrixPrice=$newSubscriptionMatrixPrice}"
                    newSubscriptionTieredPrice != null ->
                        "Price{newSubscriptionTieredPrice=$newSubscriptionTieredPrice}"
                    newSubscriptionTieredBpsPrice != null ->
                        "Price{newSubscriptionTieredBpsPrice=$newSubscriptionTieredBpsPrice}"
                    newSubscriptionBpsPrice != null ->
                        "Price{newSubscriptionBpsPrice=$newSubscriptionBpsPrice}"
                    newSubscriptionBulkBpsPrice != null ->
                        "Price{newSubscriptionBulkBpsPrice=$newSubscriptionBulkBpsPrice}"
                    newSubscriptionBulkPrice != null ->
                        "Price{newSubscriptionBulkPrice=$newSubscriptionBulkPrice}"
                    newSubscriptionThresholdTotalAmountPrice != null ->
                        "Price{newSubscriptionThresholdTotalAmountPrice=$newSubscriptionThresholdTotalAmountPrice}"
                    newSubscriptionTieredPackagePrice != null ->
                        "Price{newSubscriptionTieredPackagePrice=$newSubscriptionTieredPackagePrice}"
                    newSubscriptionTieredWithMinimumPrice != null ->
                        "Price{newSubscriptionTieredWithMinimumPrice=$newSubscriptionTieredWithMinimumPrice}"
                    newSubscriptionUnitWithPercentPrice != null ->
                        "Price{newSubscriptionUnitWithPercentPrice=$newSubscriptionUnitWithPercentPrice}"
                    newSubscriptionPackageWithAllocationPrice != null ->
                        "Price{newSubscriptionPackageWithAllocationPrice=$newSubscriptionPackageWithAllocationPrice}"
                    newSubscriptionTierWithProrationPrice != null ->
                        "Price{newSubscriptionTierWithProrationPrice=$newSubscriptionTierWithProrationPrice}"
                    newSubscriptionUnitWithProrationPrice != null ->
                        "Price{newSubscriptionUnitWithProrationPrice=$newSubscriptionUnitWithProrationPrice}"
                    newSubscriptionGroupedAllocationPrice != null ->
                        "Price{newSubscriptionGroupedAllocationPrice=$newSubscriptionGroupedAllocationPrice}"
                    newSubscriptionGroupedWithProratedMinimumPrice != null ->
                        "Price{newSubscriptionGroupedWithProratedMinimumPrice=$newSubscriptionGroupedWithProratedMinimumPrice}"
                    newSubscriptionBulkWithProrationPrice != null ->
                        "Price{newSubscriptionBulkWithProrationPrice=$newSubscriptionBulkWithProrationPrice}"
                    _json != null -> "Price{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Price")
                }
            }

            companion object {

                @JvmStatic
                fun ofNewSubscriptionUnitPrice(newSubscriptionUnitPrice: NewSubscriptionUnitPrice) =
                    Price(newSubscriptionUnitPrice = newSubscriptionUnitPrice)

                @JvmStatic
                fun ofNewSubscriptionPackagePrice(
                    newSubscriptionPackagePrice: NewSubscriptionPackagePrice
                ) = Price(newSubscriptionPackagePrice = newSubscriptionPackagePrice)

                @JvmStatic
                fun ofNewSubscriptionMatrixPrice(
                    newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice
                ) = Price(newSubscriptionMatrixPrice = newSubscriptionMatrixPrice)

                @JvmStatic
                fun ofNewSubscriptionTieredPrice(
                    newSubscriptionTieredPrice: NewSubscriptionTieredPrice
                ) = Price(newSubscriptionTieredPrice = newSubscriptionTieredPrice)

                @JvmStatic
                fun ofNewSubscriptionTieredBpsPrice(
                    newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                ) = Price(newSubscriptionTieredBpsPrice = newSubscriptionTieredBpsPrice)

                @JvmStatic
                fun ofNewSubscriptionBpsPrice(newSubscriptionBpsPrice: NewSubscriptionBpsPrice) =
                    Price(newSubscriptionBpsPrice = newSubscriptionBpsPrice)

                @JvmStatic
                fun ofNewSubscriptionBulkBpsPrice(
                    newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice
                ) = Price(newSubscriptionBulkBpsPrice = newSubscriptionBulkBpsPrice)

                @JvmStatic
                fun ofNewSubscriptionBulkPrice(newSubscriptionBulkPrice: NewSubscriptionBulkPrice) =
                    Price(newSubscriptionBulkPrice = newSubscriptionBulkPrice)

                @JvmStatic
                fun ofNewSubscriptionThresholdTotalAmountPrice(
                    newSubscriptionThresholdTotalAmountPrice:
                        NewSubscriptionThresholdTotalAmountPrice
                ) =
                    Price(
                        newSubscriptionThresholdTotalAmountPrice =
                            newSubscriptionThresholdTotalAmountPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionTieredPackagePrice(
                    newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                ) = Price(newSubscriptionTieredPackagePrice = newSubscriptionTieredPackagePrice)

                @JvmStatic
                fun ofNewSubscriptionTieredWithMinimumPrice(
                    newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                ) =
                    Price(
                        newSubscriptionTieredWithMinimumPrice =
                            newSubscriptionTieredWithMinimumPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionUnitWithPercentPrice(
                    newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                ) = Price(newSubscriptionUnitWithPercentPrice = newSubscriptionUnitWithPercentPrice)

                @JvmStatic
                fun ofNewSubscriptionPackageWithAllocationPrice(
                    newSubscriptionPackageWithAllocationPrice:
                        NewSubscriptionPackageWithAllocationPrice
                ) =
                    Price(
                        newSubscriptionPackageWithAllocationPrice =
                            newSubscriptionPackageWithAllocationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionTierWithProrationPrice(
                    newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                ) =
                    Price(
                        newSubscriptionTierWithProrationPrice =
                            newSubscriptionTierWithProrationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionUnitWithProrationPrice(
                    newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                ) =
                    Price(
                        newSubscriptionUnitWithProrationPrice =
                            newSubscriptionUnitWithProrationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionGroupedAllocationPrice(
                    newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                ) =
                    Price(
                        newSubscriptionGroupedAllocationPrice =
                            newSubscriptionGroupedAllocationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionGroupedWithProratedMinimumPrice(
                    newSubscriptionGroupedWithProratedMinimumPrice:
                        NewSubscriptionGroupedWithProratedMinimumPrice
                ) =
                    Price(
                        newSubscriptionGroupedWithProratedMinimumPrice =
                            newSubscriptionGroupedWithProratedMinimumPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionBulkWithProrationPrice(
                    newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                ) =
                    Price(
                        newSubscriptionBulkWithProrationPrice =
                            newSubscriptionBulkWithProrationPrice
                    )
            }

            interface Visitor<out T> {

                fun visitNewSubscriptionUnitPrice(
                    newSubscriptionUnitPrice: NewSubscriptionUnitPrice
                ): T

                fun visitNewSubscriptionPackagePrice(
                    newSubscriptionPackagePrice: NewSubscriptionPackagePrice
                ): T

                fun visitNewSubscriptionMatrixPrice(
                    newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice
                ): T

                fun visitNewSubscriptionTieredPrice(
                    newSubscriptionTieredPrice: NewSubscriptionTieredPrice
                ): T

                fun visitNewSubscriptionTieredBpsPrice(
                    newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                ): T

                fun visitNewSubscriptionBpsPrice(
                    newSubscriptionBpsPrice: NewSubscriptionBpsPrice
                ): T

                fun visitNewSubscriptionBulkBpsPrice(
                    newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice
                ): T

                fun visitNewSubscriptionBulkPrice(
                    newSubscriptionBulkPrice: NewSubscriptionBulkPrice
                ): T

                fun visitNewSubscriptionThresholdTotalAmountPrice(
                    newSubscriptionThresholdTotalAmountPrice:
                        NewSubscriptionThresholdTotalAmountPrice
                ): T

                fun visitNewSubscriptionTieredPackagePrice(
                    newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                ): T

                fun visitNewSubscriptionTieredWithMinimumPrice(
                    newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                ): T

                fun visitNewSubscriptionUnitWithPercentPrice(
                    newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                ): T

                fun visitNewSubscriptionPackageWithAllocationPrice(
                    newSubscriptionPackageWithAllocationPrice:
                        NewSubscriptionPackageWithAllocationPrice
                ): T

                fun visitNewSubscriptionTierWithProrationPrice(
                    newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                ): T

                fun visitNewSubscriptionUnitWithProrationPrice(
                    newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                ): T

                fun visitNewSubscriptionGroupedAllocationPrice(
                    newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                ): T

                fun visitNewSubscriptionGroupedWithProratedMinimumPrice(
                    newSubscriptionGroupedWithProratedMinimumPrice:
                        NewSubscriptionGroupedWithProratedMinimumPrice
                ): T

                fun visitNewSubscriptionBulkWithProrationPrice(
                    newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Price: $json")
                }
            }

            class Deserializer : BaseDeserializer<Price>(Price::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Price {
                    val json = JsonValue.fromJsonNode(node)
                    val modelType =
                        json.asObject().getOrNull()?.get("model_type")?.asString()?.getOrNull()

                    when (modelType) {
                        "unit" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionUnitPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionUnitPrice = it, _json = json)
                                }
                        }
                        "package" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionPackagePrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionPackagePrice = it, _json = json)
                                }
                        }
                        "matrix" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionMatrixPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionMatrixPrice = it, _json = json)
                                }
                        }
                        "tiered" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionTieredPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionTieredPrice = it, _json = json)
                                }
                        }
                        "tiered_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionTieredBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionTieredBpsPrice = it, _json = json)
                                }
                        }
                        "bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionBpsPrice = it, _json = json)
                                }
                        }
                        "bulk_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBulkBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionBulkBpsPrice = it, _json = json)
                                }
                        }
                        "bulk" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBulkPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionBulkPrice = it, _json = json)
                                }
                        }
                        "threshold_total_amount" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionThresholdTotalAmountPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionThresholdTotalAmountPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_package" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTieredPackagePrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionTieredPackagePrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_with_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTieredWithMinimumPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionTieredWithMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "unit_with_percent" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionUnitWithPercentPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionUnitWithPercentPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "package_with_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionPackageWithAllocationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionPackageWithAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTierWithProrationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionTierWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "unit_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionUnitWithProrationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionUnitWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionGroupedAllocationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionGroupedAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_with_prorated_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionGroupedWithProratedMinimumPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionGroupedWithProratedMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "bulk_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionBulkWithProrationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionBulkWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                    }

                    return Price(_json = json)
                }
            }

            class Serializer : BaseSerializer<Price>(Price::class) {

                override fun serialize(
                    value: Price,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.newSubscriptionUnitPrice != null ->
                            generator.writeObject(value.newSubscriptionUnitPrice)
                        value.newSubscriptionPackagePrice != null ->
                            generator.writeObject(value.newSubscriptionPackagePrice)
                        value.newSubscriptionMatrixPrice != null ->
                            generator.writeObject(value.newSubscriptionMatrixPrice)
                        value.newSubscriptionTieredPrice != null ->
                            generator.writeObject(value.newSubscriptionTieredPrice)
                        value.newSubscriptionTieredBpsPrice != null ->
                            generator.writeObject(value.newSubscriptionTieredBpsPrice)
                        value.newSubscriptionBpsPrice != null ->
                            generator.writeObject(value.newSubscriptionBpsPrice)
                        value.newSubscriptionBulkBpsPrice != null ->
                            generator.writeObject(value.newSubscriptionBulkBpsPrice)
                        value.newSubscriptionBulkPrice != null ->
                            generator.writeObject(value.newSubscriptionBulkPrice)
                        value.newSubscriptionThresholdTotalAmountPrice != null ->
                            generator.writeObject(value.newSubscriptionThresholdTotalAmountPrice)
                        value.newSubscriptionTieredPackagePrice != null ->
                            generator.writeObject(value.newSubscriptionTieredPackagePrice)
                        value.newSubscriptionTieredWithMinimumPrice != null ->
                            generator.writeObject(value.newSubscriptionTieredWithMinimumPrice)
                        value.newSubscriptionUnitWithPercentPrice != null ->
                            generator.writeObject(value.newSubscriptionUnitWithPercentPrice)
                        value.newSubscriptionPackageWithAllocationPrice != null ->
                            generator.writeObject(value.newSubscriptionPackageWithAllocationPrice)
                        value.newSubscriptionTierWithProrationPrice != null ->
                            generator.writeObject(value.newSubscriptionTierWithProrationPrice)
                        value.newSubscriptionUnitWithProrationPrice != null ->
                            generator.writeObject(value.newSubscriptionUnitWithProrationPrice)
                        value.newSubscriptionGroupedAllocationPrice != null ->
                            generator.writeObject(value.newSubscriptionGroupedAllocationPrice)
                        value.newSubscriptionGroupedWithProratedMinimumPrice != null ->
                            generator.writeObject(
                                value.newSubscriptionGroupedWithProratedMinimumPrice
                            )
                        value.newSubscriptionBulkWithProrationPrice != null ->
                            generator.writeObject(value.newSubscriptionBulkWithProrationPrice)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Price")
                    }
                }
            }

            @JsonDeserialize(builder = NewSubscriptionUnitPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionUnitPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val unitConfig: JsonField<UnitConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun unitConfig(): UnitConfig = unitConfig.getRequired("unit_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("unit_config") @ExcludeMissing fun _unitConfig() = unitConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionUnitPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        unitConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var unitConfig: JsonField<UnitConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionUnitPrice: NewSubscriptionUnitPrice) = apply {
                        this.metadata = newSubscriptionUnitPrice.metadata
                        this.externalPriceId = newSubscriptionUnitPrice.externalPriceId
                        this.name = newSubscriptionUnitPrice.name
                        this.billableMetricId = newSubscriptionUnitPrice.billableMetricId
                        this.itemId = newSubscriptionUnitPrice.itemId
                        this.billedInAdvance = newSubscriptionUnitPrice.billedInAdvance
                        this.fixedPriceQuantity = newSubscriptionUnitPrice.fixedPriceQuantity
                        this.invoiceGroupingKey = newSubscriptionUnitPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionUnitPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionUnitPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionUnitPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionUnitPrice.conversionRate
                        this.modelType = newSubscriptionUnitPrice.modelType
                        this.unitConfig = newSubscriptionUnitPrice.unitConfig
                        this.currency = newSubscriptionUnitPrice.currency
                        this.referenceId = newSubscriptionUnitPrice.referenceId
                        additionalProperties(newSubscriptionUnitPrice.additionalProperties)
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun unitConfig(unitConfig: UnitConfig) = unitConfig(JsonField.of(unitConfig))

                    @JsonProperty("unit_config")
                    @ExcludeMissing
                    fun unitConfig(unitConfig: JsonField<UnitConfig>) = apply {
                        this.unitConfig = unitConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionUnitPrice =
                        NewSubscriptionUnitPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            unitConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val UNIT = ModelType(JsonField.of("unit"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT,
                    }

                    enum class Value {
                        UNIT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT -> Value.UNIT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT -> Known.UNIT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = UnitConfig.Builder::class)
                @NoAutoDetect
                class UnitConfig
                private constructor(
                    private val unitAmount: JsonField<String>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** Rate per unit of usage */
                    fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                    /** Rate per unit of usage */
                    @JsonProperty("unit_amount") @ExcludeMissing fun _unitAmount() = unitAmount

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): UnitConfig = apply {
                        if (!validated) {
                            unitAmount()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var unitAmount: JsonField<String> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitConfig: UnitConfig) = apply {
                            this.unitAmount = unitConfig.unitAmount
                            additionalProperties(unitConfig.additionalProperties)
                        }

                        /** Rate per unit of usage */
                        fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                        /** Rate per unit of usage */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun unitAmount(unitAmount: JsonField<String>) = apply {
                            this.unitAmount = unitAmount
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): UnitConfig =
                            UnitConfig(unitAmount, additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitConfig && this.unitAmount == other.unitAmount && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(unitAmount, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "UnitConfig{unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.unitConfig == other.unitConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, unitConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionUnitPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, unitConfig=$unitConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionPackagePrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionPackagePrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val packageConfig: JsonField<PackageConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun packageConfig(): PackageConfig = packageConfig.getRequired("package_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("package_config") @ExcludeMissing fun _packageConfig() = packageConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionPackagePrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        packageConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var packageConfig: JsonField<PackageConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionPackagePrice: NewSubscriptionPackagePrice) =
                        apply {
                            this.metadata = newSubscriptionPackagePrice.metadata
                            this.externalPriceId = newSubscriptionPackagePrice.externalPriceId
                            this.name = newSubscriptionPackagePrice.name
                            this.billableMetricId = newSubscriptionPackagePrice.billableMetricId
                            this.itemId = newSubscriptionPackagePrice.itemId
                            this.billedInAdvance = newSubscriptionPackagePrice.billedInAdvance
                            this.fixedPriceQuantity = newSubscriptionPackagePrice.fixedPriceQuantity
                            this.invoiceGroupingKey = newSubscriptionPackagePrice.invoiceGroupingKey
                            this.cadence = newSubscriptionPackagePrice.cadence
                            this.billingCycleConfiguration =
                                newSubscriptionPackagePrice.billingCycleConfiguration
                            this.invoicingCycleConfiguration =
                                newSubscriptionPackagePrice.invoicingCycleConfiguration
                            this.conversionRate = newSubscriptionPackagePrice.conversionRate
                            this.modelType = newSubscriptionPackagePrice.modelType
                            this.packageConfig = newSubscriptionPackagePrice.packageConfig
                            this.currency = newSubscriptionPackagePrice.currency
                            this.referenceId = newSubscriptionPackagePrice.referenceId
                            additionalProperties(newSubscriptionPackagePrice.additionalProperties)
                        }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun packageConfig(packageConfig: PackageConfig) =
                        packageConfig(JsonField.of(packageConfig))

                    @JsonProperty("package_config")
                    @ExcludeMissing
                    fun packageConfig(packageConfig: JsonField<PackageConfig>) = apply {
                        this.packageConfig = packageConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionPackagePrice =
                        NewSubscriptionPackagePrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            packageConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val PACKAGE = ModelType(JsonField.of("package"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        PACKAGE,
                    }

                    enum class Value {
                        PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PACKAGE -> Value.PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PACKAGE -> Known.PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = PackageConfig.Builder::class)
                @NoAutoDetect
                class PackageConfig
                private constructor(
                    private val packageAmount: JsonField<String>,
                    private val packageSize: JsonField<Long>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** A currency amount to rate usage by */
                    fun packageAmount(): String = packageAmount.getRequired("package_amount")

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    fun packageSize(): Long = packageSize.getRequired("package_size")

                    /** A currency amount to rate usage by */
                    @JsonProperty("package_amount")
                    @ExcludeMissing
                    fun _packageAmount() = packageAmount

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    @JsonProperty("package_size") @ExcludeMissing fun _packageSize() = packageSize

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): PackageConfig = apply {
                        if (!validated) {
                            packageAmount()
                            packageSize()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var packageAmount: JsonField<String> = JsonMissing.of()
                        private var packageSize: JsonField<Long> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(packageConfig: PackageConfig) = apply {
                            this.packageAmount = packageConfig.packageAmount
                            this.packageSize = packageConfig.packageSize
                            additionalProperties(packageConfig.additionalProperties)
                        }

                        /** A currency amount to rate usage by */
                        fun packageAmount(packageAmount: String) =
                            packageAmount(JsonField.of(packageAmount))

                        /** A currency amount to rate usage by */
                        @JsonProperty("package_amount")
                        @ExcludeMissing
                        fun packageAmount(packageAmount: JsonField<String>) = apply {
                            this.packageAmount = packageAmount
                        }

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        fun packageSize(packageSize: Long) = packageSize(JsonField.of(packageSize))

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        @JsonProperty("package_size")
                        @ExcludeMissing
                        fun packageSize(packageSize: JsonField<Long>) = apply {
                            this.packageSize = packageSize
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): PackageConfig =
                            PackageConfig(
                                packageAmount,
                                packageSize,
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageConfig && this.packageAmount == other.packageAmount && this.packageSize == other.packageSize && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(packageAmount, packageSize, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "PackageConfig{packageAmount=$packageAmount, packageSize=$packageSize, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionPackagePrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.packageConfig == other.packageConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, packageConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionPackagePrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, packageConfig=$packageConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionMatrixPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionMatrixPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val matrixConfig: JsonField<MatrixConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun matrixConfig(): MatrixConfig = matrixConfig.getRequired("matrix_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("matrix_config") @ExcludeMissing fun _matrixConfig() = matrixConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionMatrixPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        matrixConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var matrixConfig: JsonField<MatrixConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice) =
                        apply {
                            this.metadata = newSubscriptionMatrixPrice.metadata
                            this.externalPriceId = newSubscriptionMatrixPrice.externalPriceId
                            this.name = newSubscriptionMatrixPrice.name
                            this.billableMetricId = newSubscriptionMatrixPrice.billableMetricId
                            this.itemId = newSubscriptionMatrixPrice.itemId
                            this.billedInAdvance = newSubscriptionMatrixPrice.billedInAdvance
                            this.fixedPriceQuantity = newSubscriptionMatrixPrice.fixedPriceQuantity
                            this.invoiceGroupingKey = newSubscriptionMatrixPrice.invoiceGroupingKey
                            this.cadence = newSubscriptionMatrixPrice.cadence
                            this.billingCycleConfiguration =
                                newSubscriptionMatrixPrice.billingCycleConfiguration
                            this.invoicingCycleConfiguration =
                                newSubscriptionMatrixPrice.invoicingCycleConfiguration
                            this.conversionRate = newSubscriptionMatrixPrice.conversionRate
                            this.modelType = newSubscriptionMatrixPrice.modelType
                            this.matrixConfig = newSubscriptionMatrixPrice.matrixConfig
                            this.currency = newSubscriptionMatrixPrice.currency
                            this.referenceId = newSubscriptionMatrixPrice.referenceId
                            additionalProperties(newSubscriptionMatrixPrice.additionalProperties)
                        }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun matrixConfig(matrixConfig: MatrixConfig) =
                        matrixConfig(JsonField.of(matrixConfig))

                    @JsonProperty("matrix_config")
                    @ExcludeMissing
                    fun matrixConfig(matrixConfig: JsonField<MatrixConfig>) = apply {
                        this.matrixConfig = matrixConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionMatrixPrice =
                        NewSubscriptionMatrixPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            matrixConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = MatrixConfig.Builder::class)
                @NoAutoDetect
                class MatrixConfig
                private constructor(
                    private val dimensions: JsonField<List<String?>>,
                    private val defaultUnitAmount: JsonField<String>,
                    private val matrixValues: JsonField<List<MatrixValue>>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** One or two event property values to evaluate matrix groups by */
                    fun dimensions(): List<String?> = dimensions.getRequired("dimensions")

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    fun defaultUnitAmount(): String =
                        defaultUnitAmount.getRequired("default_unit_amount")

                    /** Matrix values for specified matrix grouping keys */
                    fun matrixValues(): List<MatrixValue> =
                        matrixValues.getRequired("matrix_values")

                    /** One or two event property values to evaluate matrix groups by */
                    @JsonProperty("dimensions") @ExcludeMissing fun _dimensions() = dimensions

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    fun _defaultUnitAmount() = defaultUnitAmount

                    /** Matrix values for specified matrix grouping keys */
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    fun _matrixValues() = matrixValues

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): MatrixConfig = apply {
                        if (!validated) {
                            dimensions()
                            defaultUnitAmount()
                            matrixValues().forEach { it.validate() }
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var dimensions: JsonField<List<String?>> = JsonMissing.of()
                        private var defaultUnitAmount: JsonField<String> = JsonMissing.of()
                        private var matrixValues: JsonField<List<MatrixValue>> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixConfig: MatrixConfig) = apply {
                            this.dimensions = matrixConfig.dimensions
                            this.defaultUnitAmount = matrixConfig.defaultUnitAmount
                            this.matrixValues = matrixConfig.matrixValues
                            additionalProperties(matrixConfig.additionalProperties)
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: List<String?>) =
                            dimensions(JsonField.of(dimensions))

                        /** One or two event property values to evaluate matrix groups by */
                        @JsonProperty("dimensions")
                        @ExcludeMissing
                        fun dimensions(dimensions: JsonField<List<String?>>) = apply {
                            this.dimensions = dimensions
                        }

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: String) =
                            defaultUnitAmount(JsonField.of(defaultUnitAmount))

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        @JsonProperty("default_unit_amount")
                        @ExcludeMissing
                        fun defaultUnitAmount(defaultUnitAmount: JsonField<String>) = apply {
                            this.defaultUnitAmount = defaultUnitAmount
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: List<MatrixValue>) =
                            matrixValues(JsonField.of(matrixValues))

                        /** Matrix values for specified matrix grouping keys */
                        @JsonProperty("matrix_values")
                        @ExcludeMissing
                        fun matrixValues(matrixValues: JsonField<List<MatrixValue>>) = apply {
                            this.matrixValues = matrixValues
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): MatrixConfig =
                            MatrixConfig(
                                dimensions.map { it.toImmutable() },
                                defaultUnitAmount,
                                matrixValues.map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @JsonDeserialize(builder = MatrixValue.Builder::class)
                    @NoAutoDetect
                    class MatrixValue
                    private constructor(
                        private val unitAmount: JsonField<String>,
                        private val dimensionValues: JsonField<List<String?>>,
                        private val additionalProperties: Map<String, JsonValue>,
                    ) {

                        private var validated: Boolean = false

                        /** Unit price for the specified dimension_values */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        fun dimensionValues(): List<String?> =
                            dimensionValues.getRequired("dimension_values")

                        /** Unit price for the specified dimension_values */
                        @JsonProperty("unit_amount") @ExcludeMissing fun _unitAmount() = unitAmount

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        fun _dimensionValues() = dimensionValues

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun validate(): MatrixValue = apply {
                            if (!validated) {
                                unitAmount()
                                dimensionValues()
                                validated = true
                            }
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var unitAmount: JsonField<String> = JsonMissing.of()
                            private var dimensionValues: JsonField<List<String?>> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(matrixValue: MatrixValue) = apply {
                                this.unitAmount = matrixValue.unitAmount
                                this.dimensionValues = matrixValue.dimensionValues
                                additionalProperties(matrixValue.additionalProperties)
                            }

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Unit price for the specified dimension_values */
                            @JsonProperty("unit_amount")
                            @ExcludeMissing
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: List<String?>) =
                                dimensionValues(JsonField.of(dimensionValues))

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            @JsonProperty("dimension_values")
                            @ExcludeMissing
                            fun dimensionValues(dimensionValues: JsonField<List<String?>>) = apply {
                                this.dimensionValues = dimensionValues
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    this.additionalProperties.putAll(additionalProperties)
                                }

                            @JsonAnySetter
                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                this.additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun build(): MatrixValue =
                                MatrixValue(
                                    unitAmount,
                                    dimensionValues.map { it.toImmutable() },
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is MatrixValue && this.unitAmount == other.unitAmount && this.dimensionValues == other.dimensionValues && this.additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        private var hashCode: Int = 0

                        override fun hashCode(): Int {
                            if (hashCode == 0) {
                                hashCode = /* spotless:off */ Objects.hash(unitAmount, dimensionValues, additionalProperties) /* spotless:on */
                            }
                            return hashCode
                        }

                        override fun toString() =
                            "MatrixValue{unitAmount=$unitAmount, dimensionValues=$dimensionValues, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixConfig && this.dimensions == other.dimensions && this.defaultUnitAmount == other.defaultUnitAmount && this.matrixValues == other.matrixValues && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(dimensions, defaultUnitAmount, matrixValues, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "MatrixConfig{dimensions=$dimensions, defaultUnitAmount=$defaultUnitAmount, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val MATRIX = ModelType(JsonField.of("matrix"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        MATRIX,
                    }

                    enum class Value {
                        MATRIX,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MATRIX -> Value.MATRIX
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MATRIX -> Known.MATRIX
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionMatrixPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.matrixConfig == other.matrixConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, matrixConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionMatrixPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, matrixConfig=$matrixConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionTieredPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionTieredPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val tieredConfig: JsonField<TieredConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun tieredConfig(): TieredConfig = tieredConfig.getRequired("tiered_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("tiered_config") @ExcludeMissing fun _tieredConfig() = tieredConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionTieredPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        tieredConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var tieredConfig: JsonField<TieredConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionTieredPrice: NewSubscriptionTieredPrice) =
                        apply {
                            this.metadata = newSubscriptionTieredPrice.metadata
                            this.externalPriceId = newSubscriptionTieredPrice.externalPriceId
                            this.name = newSubscriptionTieredPrice.name
                            this.billableMetricId = newSubscriptionTieredPrice.billableMetricId
                            this.itemId = newSubscriptionTieredPrice.itemId
                            this.billedInAdvance = newSubscriptionTieredPrice.billedInAdvance
                            this.fixedPriceQuantity = newSubscriptionTieredPrice.fixedPriceQuantity
                            this.invoiceGroupingKey = newSubscriptionTieredPrice.invoiceGroupingKey
                            this.cadence = newSubscriptionTieredPrice.cadence
                            this.billingCycleConfiguration =
                                newSubscriptionTieredPrice.billingCycleConfiguration
                            this.invoicingCycleConfiguration =
                                newSubscriptionTieredPrice.invoicingCycleConfiguration
                            this.conversionRate = newSubscriptionTieredPrice.conversionRate
                            this.modelType = newSubscriptionTieredPrice.modelType
                            this.tieredConfig = newSubscriptionTieredPrice.tieredConfig
                            this.currency = newSubscriptionTieredPrice.currency
                            this.referenceId = newSubscriptionTieredPrice.referenceId
                            additionalProperties(newSubscriptionTieredPrice.additionalProperties)
                        }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun tieredConfig(tieredConfig: TieredConfig) =
                        tieredConfig(JsonField.of(tieredConfig))

                    @JsonProperty("tiered_config")
                    @ExcludeMissing
                    fun tieredConfig(tieredConfig: JsonField<TieredConfig>) = apply {
                        this.tieredConfig = tieredConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionTieredPrice =
                        NewSubscriptionTieredPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            tieredConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val TIERED = ModelType(JsonField.of("tiered"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED,
                    }

                    enum class Value {
                        TIERED,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED -> Value.TIERED
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED -> Known.TIERED
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = TieredConfig.Builder::class)
                @NoAutoDetect
                class TieredConfig
                private constructor(
                    private val tiers: JsonField<List<Tier>>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    @JsonProperty("tiers") @ExcludeMissing fun _tiers() = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): TieredConfig = apply {
                        if (!validated) {
                            tiers().forEach { it.validate() }
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: JsonField<List<Tier>> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredConfig: TieredConfig) = apply {
                            this.tiers = tieredConfig.tiers
                            additionalProperties(tieredConfig.additionalProperties)
                        }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        @JsonProperty("tiers")
                        @ExcludeMissing
                        fun tiers(tiers: JsonField<List<Tier>>) = apply { this.tiers = tiers }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): TieredConfig =
                            TieredConfig(
                                tiers.map { it.toImmutable() },
                                additionalProperties.toImmutable()
                            )
                    }

                    @JsonDeserialize(builder = Tier.Builder::class)
                    @NoAutoDetect
                    class Tier
                    private constructor(
                        private val firstUnit: JsonField<Double>,
                        private val lastUnit: JsonField<Double>,
                        private val unitAmount: JsonField<String>,
                        private val additionalProperties: Map<String, JsonValue>,
                    ) {

                        private var validated: Boolean = false

                        /** Inclusive tier starting value */
                        fun firstUnit(): Double = firstUnit.getRequired("first_unit")

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         */
                        fun lastUnit(): Optional<Double> =
                            Optional.ofNullable(lastUnit.getNullable("last_unit"))

                        /** Amount per unit */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /** Inclusive tier starting value */
                        @JsonProperty("first_unit") @ExcludeMissing fun _firstUnit() = firstUnit

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         */
                        @JsonProperty("last_unit") @ExcludeMissing fun _lastUnit() = lastUnit

                        /** Amount per unit */
                        @JsonProperty("unit_amount") @ExcludeMissing fun _unitAmount() = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun validate(): Tier = apply {
                            if (!validated) {
                                firstUnit()
                                lastUnit()
                                unitAmount()
                                validated = true
                            }
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var firstUnit: JsonField<Double> = JsonMissing.of()
                            private var lastUnit: JsonField<Double> = JsonMissing.of()
                            private var unitAmount: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                this.firstUnit = tier.firstUnit
                                this.lastUnit = tier.lastUnit
                                this.unitAmount = tier.unitAmount
                                additionalProperties(tier.additionalProperties)
                            }

                            /** Inclusive tier starting value */
                            fun firstUnit(firstUnit: Double) = firstUnit(JsonField.of(firstUnit))

                            /** Inclusive tier starting value */
                            @JsonProperty("first_unit")
                            @ExcludeMissing
                            fun firstUnit(firstUnit: JsonField<Double>) = apply {
                                this.firstUnit = firstUnit
                            }

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double) = lastUnit(JsonField.of(lastUnit))

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            @JsonProperty("last_unit")
                            @ExcludeMissing
                            fun lastUnit(lastUnit: JsonField<Double>) = apply {
                                this.lastUnit = lastUnit
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Amount per unit */
                            @JsonProperty("unit_amount")
                            @ExcludeMissing
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    this.additionalProperties.putAll(additionalProperties)
                                }

                            @JsonAnySetter
                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                this.additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun build(): Tier =
                                Tier(
                                    firstUnit,
                                    lastUnit,
                                    unitAmount,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && this.firstUnit == other.firstUnit && this.lastUnit == other.lastUnit && this.unitAmount == other.unitAmount && this.additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        private var hashCode: Int = 0

                        override fun hashCode(): Int {
                            if (hashCode == 0) {
                                hashCode = /* spotless:off */ Objects.hash(firstUnit, lastUnit, unitAmount, additionalProperties) /* spotless:on */
                            }
                            return hashCode
                        }

                        override fun toString() =
                            "Tier{firstUnit=$firstUnit, lastUnit=$lastUnit, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredConfig && this.tiers == other.tiers && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(tiers, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "TieredConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.tieredConfig == other.tieredConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionTieredPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredConfig=$tieredConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionTieredBpsPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionTieredBpsPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val tieredBpsConfig: JsonField<TieredBpsConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun tieredBpsConfig(): TieredBpsConfig =
                    tieredBpsConfig.getRequired("tiered_bps_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("tiered_bps_config")
                @ExcludeMissing
                fun _tieredBpsConfig() = tieredBpsConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionTieredBpsPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        tieredBpsConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var tieredBpsConfig: JsonField<TieredBpsConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                    ) = apply {
                        this.metadata = newSubscriptionTieredBpsPrice.metadata
                        this.externalPriceId = newSubscriptionTieredBpsPrice.externalPriceId
                        this.name = newSubscriptionTieredBpsPrice.name
                        this.billableMetricId = newSubscriptionTieredBpsPrice.billableMetricId
                        this.itemId = newSubscriptionTieredBpsPrice.itemId
                        this.billedInAdvance = newSubscriptionTieredBpsPrice.billedInAdvance
                        this.fixedPriceQuantity = newSubscriptionTieredBpsPrice.fixedPriceQuantity
                        this.invoiceGroupingKey = newSubscriptionTieredBpsPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionTieredBpsPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionTieredBpsPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionTieredBpsPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionTieredBpsPrice.conversionRate
                        this.modelType = newSubscriptionTieredBpsPrice.modelType
                        this.tieredBpsConfig = newSubscriptionTieredBpsPrice.tieredBpsConfig
                        this.currency = newSubscriptionTieredBpsPrice.currency
                        this.referenceId = newSubscriptionTieredBpsPrice.referenceId
                        additionalProperties(newSubscriptionTieredBpsPrice.additionalProperties)
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun tieredBpsConfig(tieredBpsConfig: TieredBpsConfig) =
                        tieredBpsConfig(JsonField.of(tieredBpsConfig))

                    @JsonProperty("tiered_bps_config")
                    @ExcludeMissing
                    fun tieredBpsConfig(tieredBpsConfig: JsonField<TieredBpsConfig>) = apply {
                        this.tieredBpsConfig = tieredBpsConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionTieredBpsPrice =
                        NewSubscriptionTieredBpsPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            tieredBpsConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val TIERED_BPS = ModelType(JsonField.of("tiered_bps"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_BPS,
                    }

                    enum class Value {
                        TIERED_BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_BPS -> Value.TIERED_BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_BPS -> Known.TIERED_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = TieredBpsConfig.Builder::class)
                @NoAutoDetect
                class TieredBpsConfig
                private constructor(
                    private val tiers: JsonField<List<Tier>>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    @JsonProperty("tiers") @ExcludeMissing fun _tiers() = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): TieredBpsConfig = apply {
                        if (!validated) {
                            tiers().forEach { it.validate() }
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: JsonField<List<Tier>> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredBpsConfig: TieredBpsConfig) = apply {
                            this.tiers = tieredBpsConfig.tiers
                            additionalProperties(tieredBpsConfig.additionalProperties)
                        }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        @JsonProperty("tiers")
                        @ExcludeMissing
                        fun tiers(tiers: JsonField<List<Tier>>) = apply { this.tiers = tiers }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): TieredBpsConfig =
                            TieredBpsConfig(
                                tiers.map { it.toImmutable() },
                                additionalProperties.toImmutable()
                            )
                    }

                    @JsonDeserialize(builder = Tier.Builder::class)
                    @NoAutoDetect
                    class Tier
                    private constructor(
                        private val minimumAmount: JsonField<String>,
                        private val maximumAmount: JsonField<String>,
                        private val bps: JsonField<Double>,
                        private val perUnitMaximum: JsonField<String>,
                        private val additionalProperties: Map<String, JsonValue>,
                    ) {

                        private var validated: Boolean = false

                        /** Inclusive tier starting value */
                        fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                        /** Exclusive tier ending value */
                        fun maximumAmount(): Optional<String> =
                            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                        /** Per-event basis point rate */
                        fun bps(): Double = bps.getRequired("bps")

                        /** Per unit maximum to charge */
                        fun perUnitMaximum(): Optional<String> =
                            Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                        /** Inclusive tier starting value */
                        @JsonProperty("minimum_amount")
                        @ExcludeMissing
                        fun _minimumAmount() = minimumAmount

                        /** Exclusive tier ending value */
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        fun _maximumAmount() = maximumAmount

                        /** Per-event basis point rate */
                        @JsonProperty("bps") @ExcludeMissing fun _bps() = bps

                        /** Per unit maximum to charge */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun _perUnitMaximum() = perUnitMaximum

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun validate(): Tier = apply {
                            if (!validated) {
                                minimumAmount()
                                maximumAmount()
                                bps()
                                perUnitMaximum()
                                validated = true
                            }
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var minimumAmount: JsonField<String> = JsonMissing.of()
                            private var maximumAmount: JsonField<String> = JsonMissing.of()
                            private var bps: JsonField<Double> = JsonMissing.of()
                            private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                this.minimumAmount = tier.minimumAmount
                                this.maximumAmount = tier.maximumAmount
                                this.bps = tier.bps
                                this.perUnitMaximum = tier.perUnitMaximum
                                additionalProperties(tier.additionalProperties)
                            }

                            /** Inclusive tier starting value */
                            fun minimumAmount(minimumAmount: String) =
                                minimumAmount(JsonField.of(minimumAmount))

                            /** Inclusive tier starting value */
                            @JsonProperty("minimum_amount")
                            @ExcludeMissing
                            fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                                this.minimumAmount = minimumAmount
                            }

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: String) =
                                maximumAmount(JsonField.of(maximumAmount))

                            /** Exclusive tier ending value */
                            @JsonProperty("maximum_amount")
                            @ExcludeMissing
                            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Per-event basis point rate */
                            fun bps(bps: Double) = bps(JsonField.of(bps))

                            /** Per-event basis point rate */
                            @JsonProperty("bps")
                            @ExcludeMissing
                            fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: String) =
                                perUnitMaximum(JsonField.of(perUnitMaximum))

                            /** Per unit maximum to charge */
                            @JsonProperty("per_unit_maximum")
                            @ExcludeMissing
                            fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    this.additionalProperties.putAll(additionalProperties)
                                }

                            @JsonAnySetter
                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                this.additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun build(): Tier =
                                Tier(
                                    minimumAmount,
                                    maximumAmount,
                                    bps,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && this.minimumAmount == other.minimumAmount && this.maximumAmount == other.maximumAmount && this.bps == other.bps && this.perUnitMaximum == other.perUnitMaximum && this.additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        private var hashCode: Int = 0

                        override fun hashCode(): Int {
                            if (hashCode == 0) {
                                hashCode = /* spotless:off */ Objects.hash(minimumAmount, maximumAmount, bps, perUnitMaximum, additionalProperties) /* spotless:on */
                            }
                            return hashCode
                        }

                        override fun toString() =
                            "Tier{minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredBpsConfig && this.tiers == other.tiers && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(tiers, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "TieredBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredBpsPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.tieredBpsConfig == other.tieredBpsConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredBpsConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionTieredBpsPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredBpsConfig=$tieredBpsConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionBpsPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionBpsPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val bpsConfig: JsonField<BpsConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun bpsConfig(): BpsConfig = bpsConfig.getRequired("bps_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("bps_config") @ExcludeMissing fun _bpsConfig() = bpsConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionBpsPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        bpsConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var bpsConfig: JsonField<BpsConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBpsPrice: NewSubscriptionBpsPrice) = apply {
                        this.metadata = newSubscriptionBpsPrice.metadata
                        this.externalPriceId = newSubscriptionBpsPrice.externalPriceId
                        this.name = newSubscriptionBpsPrice.name
                        this.billableMetricId = newSubscriptionBpsPrice.billableMetricId
                        this.itemId = newSubscriptionBpsPrice.itemId
                        this.billedInAdvance = newSubscriptionBpsPrice.billedInAdvance
                        this.fixedPriceQuantity = newSubscriptionBpsPrice.fixedPriceQuantity
                        this.invoiceGroupingKey = newSubscriptionBpsPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionBpsPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionBpsPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionBpsPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionBpsPrice.conversionRate
                        this.modelType = newSubscriptionBpsPrice.modelType
                        this.bpsConfig = newSubscriptionBpsPrice.bpsConfig
                        this.currency = newSubscriptionBpsPrice.currency
                        this.referenceId = newSubscriptionBpsPrice.referenceId
                        additionalProperties(newSubscriptionBpsPrice.additionalProperties)
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun bpsConfig(bpsConfig: BpsConfig) = bpsConfig(JsonField.of(bpsConfig))

                    @JsonProperty("bps_config")
                    @ExcludeMissing
                    fun bpsConfig(bpsConfig: JsonField<BpsConfig>) = apply {
                        this.bpsConfig = bpsConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionBpsPrice =
                        NewSubscriptionBpsPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            bpsConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @JsonDeserialize(builder = BpsConfig.Builder::class)
                @NoAutoDetect
                class BpsConfig
                private constructor(
                    private val bps: JsonField<Double>,
                    private val perUnitMaximum: JsonField<String>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** Basis point take rate per event */
                    fun bps(): Double = bps.getRequired("bps")

                    /** Optional currency amount maximum to cap spend per event */
                    fun perUnitMaximum(): Optional<String> =
                        Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                    /** Basis point take rate per event */
                    @JsonProperty("bps") @ExcludeMissing fun _bps() = bps

                    /** Optional currency amount maximum to cap spend per event */
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    fun _perUnitMaximum() = perUnitMaximum

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BpsConfig = apply {
                        if (!validated) {
                            bps()
                            perUnitMaximum()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var bps: JsonField<Double> = JsonMissing.of()
                        private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bpsConfig: BpsConfig) = apply {
                            this.bps = bpsConfig.bps
                            this.perUnitMaximum = bpsConfig.perUnitMaximum
                            additionalProperties(bpsConfig.additionalProperties)
                        }

                        /** Basis point take rate per event */
                        fun bps(bps: Double) = bps(JsonField.of(bps))

                        /** Basis point take rate per event */
                        @JsonProperty("bps")
                        @ExcludeMissing
                        fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: String) =
                            perUnitMaximum(JsonField.of(perUnitMaximum))

                        /** Optional currency amount maximum to cap spend per event */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                            this.perUnitMaximum = perUnitMaximum
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BpsConfig =
                            BpsConfig(
                                bps,
                                perUnitMaximum,
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BpsConfig && this.bps == other.bps && this.perUnitMaximum == other.perUnitMaximum && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(bps, perUnitMaximum, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BpsConfig{bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val BPS = ModelType(JsonField.of("bps"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BPS,
                    }

                    enum class Value {
                        BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BPS -> Value.BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BPS -> Known.BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBpsPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.bpsConfig == other.bpsConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, bpsConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionBpsPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, bpsConfig=$bpsConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionBulkBpsPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionBulkBpsPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val bulkBpsConfig: JsonField<BulkBpsConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun bulkBpsConfig(): BulkBpsConfig = bulkBpsConfig.getRequired("bulk_bps_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("bulk_bps_config")
                @ExcludeMissing
                fun _bulkBpsConfig() = bulkBpsConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionBulkBpsPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        bulkBpsConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var bulkBpsConfig: JsonField<BulkBpsConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice) =
                        apply {
                            this.metadata = newSubscriptionBulkBpsPrice.metadata
                            this.externalPriceId = newSubscriptionBulkBpsPrice.externalPriceId
                            this.name = newSubscriptionBulkBpsPrice.name
                            this.billableMetricId = newSubscriptionBulkBpsPrice.billableMetricId
                            this.itemId = newSubscriptionBulkBpsPrice.itemId
                            this.billedInAdvance = newSubscriptionBulkBpsPrice.billedInAdvance
                            this.fixedPriceQuantity = newSubscriptionBulkBpsPrice.fixedPriceQuantity
                            this.invoiceGroupingKey = newSubscriptionBulkBpsPrice.invoiceGroupingKey
                            this.cadence = newSubscriptionBulkBpsPrice.cadence
                            this.billingCycleConfiguration =
                                newSubscriptionBulkBpsPrice.billingCycleConfiguration
                            this.invoicingCycleConfiguration =
                                newSubscriptionBulkBpsPrice.invoicingCycleConfiguration
                            this.conversionRate = newSubscriptionBulkBpsPrice.conversionRate
                            this.modelType = newSubscriptionBulkBpsPrice.modelType
                            this.bulkBpsConfig = newSubscriptionBulkBpsPrice.bulkBpsConfig
                            this.currency = newSubscriptionBulkBpsPrice.currency
                            this.referenceId = newSubscriptionBulkBpsPrice.referenceId
                            additionalProperties(newSubscriptionBulkBpsPrice.additionalProperties)
                        }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun bulkBpsConfig(bulkBpsConfig: BulkBpsConfig) =
                        bulkBpsConfig(JsonField.of(bulkBpsConfig))

                    @JsonProperty("bulk_bps_config")
                    @ExcludeMissing
                    fun bulkBpsConfig(bulkBpsConfig: JsonField<BulkBpsConfig>) = apply {
                        this.bulkBpsConfig = bulkBpsConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionBulkBpsPrice =
                        NewSubscriptionBulkBpsPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            bulkBpsConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @JsonDeserialize(builder = BulkBpsConfig.Builder::class)
                @NoAutoDetect
                class BulkBpsConfig
                private constructor(
                    private val tiers: JsonField<List<Tier>>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    @JsonProperty("tiers") @ExcludeMissing fun _tiers() = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BulkBpsConfig = apply {
                        if (!validated) {
                            tiers().forEach { it.validate() }
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: JsonField<List<Tier>> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkBpsConfig: BulkBpsConfig) = apply {
                            this.tiers = bulkBpsConfig.tiers
                            additionalProperties(bulkBpsConfig.additionalProperties)
                        }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        @JsonProperty("tiers")
                        @ExcludeMissing
                        fun tiers(tiers: JsonField<List<Tier>>) = apply { this.tiers = tiers }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BulkBpsConfig =
                            BulkBpsConfig(
                                tiers.map { it.toImmutable() },
                                additionalProperties.toImmutable()
                            )
                    }

                    @JsonDeserialize(builder = Tier.Builder::class)
                    @NoAutoDetect
                    class Tier
                    private constructor(
                        private val maximumAmount: JsonField<String>,
                        private val bps: JsonField<Double>,
                        private val perUnitMaximum: JsonField<String>,
                        private val additionalProperties: Map<String, JsonValue>,
                    ) {

                        private var validated: Boolean = false

                        /** Upper bound for tier */
                        fun maximumAmount(): Optional<String> =
                            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                        /** Basis points to rate on */
                        fun bps(): Double = bps.getRequired("bps")

                        /** The maximum amount to charge for any one event */
                        fun perUnitMaximum(): Optional<String> =
                            Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                        /** Upper bound for tier */
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        fun _maximumAmount() = maximumAmount

                        /** Basis points to rate on */
                        @JsonProperty("bps") @ExcludeMissing fun _bps() = bps

                        /** The maximum amount to charge for any one event */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun _perUnitMaximum() = perUnitMaximum

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun validate(): Tier = apply {
                            if (!validated) {
                                maximumAmount()
                                bps()
                                perUnitMaximum()
                                validated = true
                            }
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var maximumAmount: JsonField<String> = JsonMissing.of()
                            private var bps: JsonField<Double> = JsonMissing.of()
                            private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                this.maximumAmount = tier.maximumAmount
                                this.bps = tier.bps
                                this.perUnitMaximum = tier.perUnitMaximum
                                additionalProperties(tier.additionalProperties)
                            }

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: String) =
                                maximumAmount(JsonField.of(maximumAmount))

                            /** Upper bound for tier */
                            @JsonProperty("maximum_amount")
                            @ExcludeMissing
                            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Basis points to rate on */
                            fun bps(bps: Double) = bps(JsonField.of(bps))

                            /** Basis points to rate on */
                            @JsonProperty("bps")
                            @ExcludeMissing
                            fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: String) =
                                perUnitMaximum(JsonField.of(perUnitMaximum))

                            /** The maximum amount to charge for any one event */
                            @JsonProperty("per_unit_maximum")
                            @ExcludeMissing
                            fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    this.additionalProperties.putAll(additionalProperties)
                                }

                            @JsonAnySetter
                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                this.additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun build(): Tier =
                                Tier(
                                    maximumAmount,
                                    bps,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && this.maximumAmount == other.maximumAmount && this.bps == other.bps && this.perUnitMaximum == other.perUnitMaximum && this.additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        private var hashCode: Int = 0

                        override fun hashCode(): Int {
                            if (hashCode == 0) {
                                hashCode = /* spotless:off */ Objects.hash(maximumAmount, bps, perUnitMaximum, additionalProperties) /* spotless:on */
                            }
                            return hashCode
                        }

                        override fun toString() =
                            "Tier{maximumAmount=$maximumAmount, bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkBpsConfig && this.tiers == other.tiers && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(tiers, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BulkBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val BULK_BPS = ModelType(JsonField.of("bulk_bps"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK_BPS,
                    }

                    enum class Value {
                        BULK_BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK_BPS -> Value.BULK_BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK_BPS -> Known.BULK_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkBpsPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.bulkBpsConfig == other.bulkBpsConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, bulkBpsConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionBulkBpsPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, bulkBpsConfig=$bulkBpsConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionBulkPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionBulkPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val bulkConfig: JsonField<BulkConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun bulkConfig(): BulkConfig = bulkConfig.getRequired("bulk_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("bulk_config") @ExcludeMissing fun _bulkConfig() = bulkConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionBulkPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        bulkConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var bulkConfig: JsonField<BulkConfig> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBulkPrice: NewSubscriptionBulkPrice) = apply {
                        this.metadata = newSubscriptionBulkPrice.metadata
                        this.externalPriceId = newSubscriptionBulkPrice.externalPriceId
                        this.name = newSubscriptionBulkPrice.name
                        this.billableMetricId = newSubscriptionBulkPrice.billableMetricId
                        this.itemId = newSubscriptionBulkPrice.itemId
                        this.billedInAdvance = newSubscriptionBulkPrice.billedInAdvance
                        this.fixedPriceQuantity = newSubscriptionBulkPrice.fixedPriceQuantity
                        this.invoiceGroupingKey = newSubscriptionBulkPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionBulkPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionBulkPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionBulkPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionBulkPrice.conversionRate
                        this.modelType = newSubscriptionBulkPrice.modelType
                        this.bulkConfig = newSubscriptionBulkPrice.bulkConfig
                        this.currency = newSubscriptionBulkPrice.currency
                        this.referenceId = newSubscriptionBulkPrice.referenceId
                        additionalProperties(newSubscriptionBulkPrice.additionalProperties)
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun bulkConfig(bulkConfig: BulkConfig) = bulkConfig(JsonField.of(bulkConfig))

                    @JsonProperty("bulk_config")
                    @ExcludeMissing
                    fun bulkConfig(bulkConfig: JsonField<BulkConfig>) = apply {
                        this.bulkConfig = bulkConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionBulkPrice =
                        NewSubscriptionBulkPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            bulkConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @JsonDeserialize(builder = BulkConfig.Builder::class)
                @NoAutoDetect
                class BulkConfig
                private constructor(
                    private val tiers: JsonField<List<Tier>>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** Bulk tiers for rating based on total usage volume */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /** Bulk tiers for rating based on total usage volume */
                    @JsonProperty("tiers") @ExcludeMissing fun _tiers() = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BulkConfig = apply {
                        if (!validated) {
                            tiers().forEach { it.validate() }
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: JsonField<List<Tier>> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkConfig: BulkConfig) = apply {
                            this.tiers = bulkConfig.tiers
                            additionalProperties(bulkConfig.additionalProperties)
                        }

                        /** Bulk tiers for rating based on total usage volume */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /** Bulk tiers for rating based on total usage volume */
                        @JsonProperty("tiers")
                        @ExcludeMissing
                        fun tiers(tiers: JsonField<List<Tier>>) = apply { this.tiers = tiers }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BulkConfig =
                            BulkConfig(
                                tiers.map { it.toImmutable() },
                                additionalProperties.toImmutable()
                            )
                    }

                    @JsonDeserialize(builder = Tier.Builder::class)
                    @NoAutoDetect
                    class Tier
                    private constructor(
                        private val maximumUnits: JsonField<Double>,
                        private val unitAmount: JsonField<String>,
                        private val additionalProperties: Map<String, JsonValue>,
                    ) {

                        private var validated: Boolean = false

                        /** Upper bound for this tier */
                        fun maximumUnits(): Optional<Double> =
                            Optional.ofNullable(maximumUnits.getNullable("maximum_units"))

                        /** Amount per unit */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /** Upper bound for this tier */
                        @JsonProperty("maximum_units")
                        @ExcludeMissing
                        fun _maximumUnits() = maximumUnits

                        /** Amount per unit */
                        @JsonProperty("unit_amount") @ExcludeMissing fun _unitAmount() = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun validate(): Tier = apply {
                            if (!validated) {
                                maximumUnits()
                                unitAmount()
                                validated = true
                            }
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var maximumUnits: JsonField<Double> = JsonMissing.of()
                            private var unitAmount: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                this.maximumUnits = tier.maximumUnits
                                this.unitAmount = tier.unitAmount
                                additionalProperties(tier.additionalProperties)
                            }

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double) =
                                maximumUnits(JsonField.of(maximumUnits))

                            /** Upper bound for this tier */
                            @JsonProperty("maximum_units")
                            @ExcludeMissing
                            fun maximumUnits(maximumUnits: JsonField<Double>) = apply {
                                this.maximumUnits = maximumUnits
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Amount per unit */
                            @JsonProperty("unit_amount")
                            @ExcludeMissing
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    this.additionalProperties.putAll(additionalProperties)
                                }

                            @JsonAnySetter
                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                this.additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun build(): Tier =
                                Tier(
                                    maximumUnits,
                                    unitAmount,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && this.maximumUnits == other.maximumUnits && this.unitAmount == other.unitAmount && this.additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        private var hashCode: Int = 0

                        override fun hashCode(): Int {
                            if (hashCode == 0) {
                                hashCode = /* spotless:off */ Objects.hash(maximumUnits, unitAmount, additionalProperties) /* spotless:on */
                            }
                            return hashCode
                        }

                        override fun toString() =
                            "Tier{maximumUnits=$maximumUnits, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkConfig && this.tiers == other.tiers && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(tiers, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BulkConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val BULK = ModelType(JsonField.of("bulk"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK,
                    }

                    enum class Value {
                        BULK,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK -> Value.BULK
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK -> Known.BULK
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.bulkConfig == other.bulkConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, bulkConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionBulkPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, bulkConfig=$bulkConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionThresholdTotalAmountPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionThresholdTotalAmountPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun thresholdTotalAmountConfig(): ThresholdTotalAmountConfig =
                    thresholdTotalAmountConfig.getRequired("threshold_total_amount_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("threshold_total_amount_config")
                @ExcludeMissing
                fun _thresholdTotalAmountConfig() = thresholdTotalAmountConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionThresholdTotalAmountPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        thresholdTotalAmountConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionThresholdTotalAmountPrice:
                            NewSubscriptionThresholdTotalAmountPrice
                    ) = apply {
                        this.metadata = newSubscriptionThresholdTotalAmountPrice.metadata
                        this.externalPriceId =
                            newSubscriptionThresholdTotalAmountPrice.externalPriceId
                        this.name = newSubscriptionThresholdTotalAmountPrice.name
                        this.billableMetricId =
                            newSubscriptionThresholdTotalAmountPrice.billableMetricId
                        this.itemId = newSubscriptionThresholdTotalAmountPrice.itemId
                        this.billedInAdvance =
                            newSubscriptionThresholdTotalAmountPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionThresholdTotalAmountPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionThresholdTotalAmountPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionThresholdTotalAmountPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionThresholdTotalAmountPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionThresholdTotalAmountPrice.invoicingCycleConfiguration
                        this.conversionRate =
                            newSubscriptionThresholdTotalAmountPrice.conversionRate
                        this.modelType = newSubscriptionThresholdTotalAmountPrice.modelType
                        this.thresholdTotalAmountConfig =
                            newSubscriptionThresholdTotalAmountPrice.thresholdTotalAmountConfig
                        this.currency = newSubscriptionThresholdTotalAmountPrice.currency
                        this.referenceId = newSubscriptionThresholdTotalAmountPrice.referenceId
                        additionalProperties(
                            newSubscriptionThresholdTotalAmountPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: ThresholdTotalAmountConfig
                    ) = thresholdTotalAmountConfig(JsonField.of(thresholdTotalAmountConfig))

                    @JsonProperty("threshold_total_amount_config")
                    @ExcludeMissing
                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>
                    ) = apply { this.thresholdTotalAmountConfig = thresholdTotalAmountConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionThresholdTotalAmountPrice =
                        NewSubscriptionThresholdTotalAmountPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            thresholdTotalAmountConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val THRESHOLD_TOTAL_AMOUNT =
                            ModelType(JsonField.of("threshold_total_amount"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        THRESHOLD_TOTAL_AMOUNT,
                    }

                    enum class Value {
                        THRESHOLD_TOTAL_AMOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Value.THRESHOLD_TOTAL_AMOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Known.THRESHOLD_TOTAL_AMOUNT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = ThresholdTotalAmountConfig.Builder::class)
                @NoAutoDetect
                class ThresholdTotalAmountConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): ThresholdTotalAmountConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(thresholdTotalAmountConfig: ThresholdTotalAmountConfig) =
                            apply {
                                additionalProperties(
                                    thresholdTotalAmountConfig.additionalProperties
                                )
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): ThresholdTotalAmountConfig =
                            ThresholdTotalAmountConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ThresholdTotalAmountConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "ThresholdTotalAmountConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionThresholdTotalAmountPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.thresholdTotalAmountConfig == other.thresholdTotalAmountConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, thresholdTotalAmountConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionThresholdTotalAmountPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, thresholdTotalAmountConfig=$thresholdTotalAmountConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionTieredPackagePrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionTieredPackagePrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val tieredPackageConfig: JsonField<TieredPackageConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun tieredPackageConfig(): TieredPackageConfig =
                    tieredPackageConfig.getRequired("tiered_package_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("tiered_package_config")
                @ExcludeMissing
                fun _tieredPackageConfig() = tieredPackageConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionTieredPackagePrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        tieredPackageConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var tieredPackageConfig: JsonField<TieredPackageConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                    ) = apply {
                        this.metadata = newSubscriptionTieredPackagePrice.metadata
                        this.externalPriceId = newSubscriptionTieredPackagePrice.externalPriceId
                        this.name = newSubscriptionTieredPackagePrice.name
                        this.billableMetricId = newSubscriptionTieredPackagePrice.billableMetricId
                        this.itemId = newSubscriptionTieredPackagePrice.itemId
                        this.billedInAdvance = newSubscriptionTieredPackagePrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionTieredPackagePrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionTieredPackagePrice.invoiceGroupingKey
                        this.cadence = newSubscriptionTieredPackagePrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionTieredPackagePrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionTieredPackagePrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionTieredPackagePrice.conversionRate
                        this.modelType = newSubscriptionTieredPackagePrice.modelType
                        this.tieredPackageConfig =
                            newSubscriptionTieredPackagePrice.tieredPackageConfig
                        this.currency = newSubscriptionTieredPackagePrice.currency
                        this.referenceId = newSubscriptionTieredPackagePrice.referenceId
                        additionalProperties(newSubscriptionTieredPackagePrice.additionalProperties)
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun tieredPackageConfig(tieredPackageConfig: TieredPackageConfig) =
                        tieredPackageConfig(JsonField.of(tieredPackageConfig))

                    @JsonProperty("tiered_package_config")
                    @ExcludeMissing
                    fun tieredPackageConfig(tieredPackageConfig: JsonField<TieredPackageConfig>) =
                        apply {
                            this.tieredPackageConfig = tieredPackageConfig
                        }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionTieredPackagePrice =
                        NewSubscriptionTieredPackagePrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            tieredPackageConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val TIERED_PACKAGE = ModelType(JsonField.of("tiered_package"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_PACKAGE,
                    }

                    enum class Value {
                        TIERED_PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_PACKAGE -> Value.TIERED_PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_PACKAGE -> Known.TIERED_PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = TieredPackageConfig.Builder::class)
                @NoAutoDetect
                class TieredPackageConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): TieredPackageConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredPackageConfig: TieredPackageConfig) = apply {
                            additionalProperties(tieredPackageConfig.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): TieredPackageConfig =
                            TieredPackageConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredPackageConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "TieredPackageConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredPackagePrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.tieredPackageConfig == other.tieredPackageConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredPackageConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionTieredPackagePrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredPackageConfig=$tieredPackageConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionTieredWithMinimumPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionTieredWithMinimumPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun tieredWithMinimumConfig(): TieredWithMinimumConfig =
                    tieredWithMinimumConfig.getRequired("tiered_with_minimum_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("tiered_with_minimum_config")
                @ExcludeMissing
                fun _tieredWithMinimumConfig() = tieredWithMinimumConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionTieredWithMinimumPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        tieredWithMinimumConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                    ) = apply {
                        this.metadata = newSubscriptionTieredWithMinimumPrice.metadata
                        this.externalPriceId = newSubscriptionTieredWithMinimumPrice.externalPriceId
                        this.name = newSubscriptionTieredWithMinimumPrice.name
                        this.billableMetricId =
                            newSubscriptionTieredWithMinimumPrice.billableMetricId
                        this.itemId = newSubscriptionTieredWithMinimumPrice.itemId
                        this.billedInAdvance = newSubscriptionTieredWithMinimumPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionTieredWithMinimumPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionTieredWithMinimumPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionTieredWithMinimumPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionTieredWithMinimumPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionTieredWithMinimumPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionTieredWithMinimumPrice.conversionRate
                        this.modelType = newSubscriptionTieredWithMinimumPrice.modelType
                        this.tieredWithMinimumConfig =
                            newSubscriptionTieredWithMinimumPrice.tieredWithMinimumConfig
                        this.currency = newSubscriptionTieredWithMinimumPrice.currency
                        this.referenceId = newSubscriptionTieredWithMinimumPrice.referenceId
                        additionalProperties(
                            newSubscriptionTieredWithMinimumPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun tieredWithMinimumConfig(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                        tieredWithMinimumConfig(JsonField.of(tieredWithMinimumConfig))

                    @JsonProperty("tiered_with_minimum_config")
                    @ExcludeMissing
                    fun tieredWithMinimumConfig(
                        tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>
                    ) = apply { this.tieredWithMinimumConfig = tieredWithMinimumConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionTieredWithMinimumPrice =
                        NewSubscriptionTieredWithMinimumPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            tieredWithMinimumConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val TIERED_WITH_MINIMUM = ModelType(JsonField.of("tiered_with_minimum"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_WITH_MINIMUM,
                    }

                    enum class Value {
                        TIERED_WITH_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Value.TIERED_WITH_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Known.TIERED_WITH_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = TieredWithMinimumConfig.Builder::class)
                @NoAutoDetect
                class TieredWithMinimumConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): TieredWithMinimumConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                            apply {
                                additionalProperties(tieredWithMinimumConfig.additionalProperties)
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): TieredWithMinimumConfig =
                            TieredWithMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithMinimumConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "TieredWithMinimumConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredWithMinimumPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.tieredWithMinimumConfig == other.tieredWithMinimumConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredWithMinimumConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionTieredWithMinimumPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredWithMinimumConfig=$tieredWithMinimumConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionUnitWithPercentPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionUnitWithPercentPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val unitWithPercentConfig: JsonField<UnitWithPercentConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun unitWithPercentConfig(): UnitWithPercentConfig =
                    unitWithPercentConfig.getRequired("unit_with_percent_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("unit_with_percent_config")
                @ExcludeMissing
                fun _unitWithPercentConfig() = unitWithPercentConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionUnitWithPercentPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        unitWithPercentConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var unitWithPercentConfig: JsonField<UnitWithPercentConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                    ) = apply {
                        this.metadata = newSubscriptionUnitWithPercentPrice.metadata
                        this.externalPriceId = newSubscriptionUnitWithPercentPrice.externalPriceId
                        this.name = newSubscriptionUnitWithPercentPrice.name
                        this.billableMetricId = newSubscriptionUnitWithPercentPrice.billableMetricId
                        this.itemId = newSubscriptionUnitWithPercentPrice.itemId
                        this.billedInAdvance = newSubscriptionUnitWithPercentPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionUnitWithPercentPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionUnitWithPercentPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionUnitWithPercentPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionUnitWithPercentPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionUnitWithPercentPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionUnitWithPercentPrice.conversionRate
                        this.modelType = newSubscriptionUnitWithPercentPrice.modelType
                        this.unitWithPercentConfig =
                            newSubscriptionUnitWithPercentPrice.unitWithPercentConfig
                        this.currency = newSubscriptionUnitWithPercentPrice.currency
                        this.referenceId = newSubscriptionUnitWithPercentPrice.referenceId
                        additionalProperties(
                            newSubscriptionUnitWithPercentPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun unitWithPercentConfig(unitWithPercentConfig: UnitWithPercentConfig) =
                        unitWithPercentConfig(JsonField.of(unitWithPercentConfig))

                    @JsonProperty("unit_with_percent_config")
                    @ExcludeMissing
                    fun unitWithPercentConfig(
                        unitWithPercentConfig: JsonField<UnitWithPercentConfig>
                    ) = apply { this.unitWithPercentConfig = unitWithPercentConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionUnitWithPercentPrice =
                        NewSubscriptionUnitWithPercentPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            unitWithPercentConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val UNIT_WITH_PERCENT = ModelType(JsonField.of("unit_with_percent"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT_WITH_PERCENT,
                    }

                    enum class Value {
                        UNIT_WITH_PERCENT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PERCENT -> Value.UNIT_WITH_PERCENT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PERCENT -> Known.UNIT_WITH_PERCENT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = UnitWithPercentConfig.Builder::class)
                @NoAutoDetect
                class UnitWithPercentConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): UnitWithPercentConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithPercentConfig: UnitWithPercentConfig) = apply {
                            additionalProperties(unitWithPercentConfig.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): UnitWithPercentConfig =
                            UnitWithPercentConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithPercentConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "UnitWithPercentConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitWithPercentPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.unitWithPercentConfig == other.unitWithPercentConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, unitWithPercentConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionUnitWithPercentPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, unitWithPercentConfig=$unitWithPercentConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionPackageWithAllocationPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionPackageWithAllocationPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val packageWithAllocationConfig: JsonField<PackageWithAllocationConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun packageWithAllocationConfig(): PackageWithAllocationConfig =
                    packageWithAllocationConfig.getRequired("package_with_allocation_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("package_with_allocation_config")
                @ExcludeMissing
                fun _packageWithAllocationConfig() = packageWithAllocationConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionPackageWithAllocationPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        packageWithAllocationConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var packageWithAllocationConfig:
                        JsonField<PackageWithAllocationConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionPackageWithAllocationPrice:
                            NewSubscriptionPackageWithAllocationPrice
                    ) = apply {
                        this.metadata = newSubscriptionPackageWithAllocationPrice.metadata
                        this.externalPriceId =
                            newSubscriptionPackageWithAllocationPrice.externalPriceId
                        this.name = newSubscriptionPackageWithAllocationPrice.name
                        this.billableMetricId =
                            newSubscriptionPackageWithAllocationPrice.billableMetricId
                        this.itemId = newSubscriptionPackageWithAllocationPrice.itemId
                        this.billedInAdvance =
                            newSubscriptionPackageWithAllocationPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionPackageWithAllocationPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionPackageWithAllocationPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionPackageWithAllocationPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionPackageWithAllocationPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionPackageWithAllocationPrice.invoicingCycleConfiguration
                        this.conversionRate =
                            newSubscriptionPackageWithAllocationPrice.conversionRate
                        this.modelType = newSubscriptionPackageWithAllocationPrice.modelType
                        this.packageWithAllocationConfig =
                            newSubscriptionPackageWithAllocationPrice.packageWithAllocationConfig
                        this.currency = newSubscriptionPackageWithAllocationPrice.currency
                        this.referenceId = newSubscriptionPackageWithAllocationPrice.referenceId
                        additionalProperties(
                            newSubscriptionPackageWithAllocationPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: PackageWithAllocationConfig
                    ) = packageWithAllocationConfig(JsonField.of(packageWithAllocationConfig))

                    @JsonProperty("package_with_allocation_config")
                    @ExcludeMissing
                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: JsonField<PackageWithAllocationConfig>
                    ) = apply { this.packageWithAllocationConfig = packageWithAllocationConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionPackageWithAllocationPrice =
                        NewSubscriptionPackageWithAllocationPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            packageWithAllocationConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val PACKAGE_WITH_ALLOCATION =
                            ModelType(JsonField.of("package_with_allocation"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        PACKAGE_WITH_ALLOCATION,
                    }

                    enum class Value {
                        PACKAGE_WITH_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Value.PACKAGE_WITH_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Known.PACKAGE_WITH_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = PackageWithAllocationConfig.Builder::class)
                @NoAutoDetect
                class PackageWithAllocationConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): PackageWithAllocationConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            packageWithAllocationConfig: PackageWithAllocationConfig
                        ) = apply {
                            additionalProperties(packageWithAllocationConfig.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): PackageWithAllocationConfig =
                            PackageWithAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageWithAllocationConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "PackageWithAllocationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionPackageWithAllocationPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.packageWithAllocationConfig == other.packageWithAllocationConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, packageWithAllocationConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionPackageWithAllocationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, packageWithAllocationConfig=$packageWithAllocationConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionTierWithProrationPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionTierWithProrationPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val tieredWithProrationConfig: JsonField<TieredWithProrationConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun tieredWithProrationConfig(): TieredWithProrationConfig =
                    tieredWithProrationConfig.getRequired("tiered_with_proration_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("tiered_with_proration_config")
                @ExcludeMissing
                fun _tieredWithProrationConfig() = tieredWithProrationConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionTierWithProrationPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        tieredWithProrationConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var tieredWithProrationConfig: JsonField<TieredWithProrationConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                    ) = apply {
                        this.metadata = newSubscriptionTierWithProrationPrice.metadata
                        this.externalPriceId = newSubscriptionTierWithProrationPrice.externalPriceId
                        this.name = newSubscriptionTierWithProrationPrice.name
                        this.billableMetricId =
                            newSubscriptionTierWithProrationPrice.billableMetricId
                        this.itemId = newSubscriptionTierWithProrationPrice.itemId
                        this.billedInAdvance = newSubscriptionTierWithProrationPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionTierWithProrationPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionTierWithProrationPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionTierWithProrationPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionTierWithProrationPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionTierWithProrationPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionTierWithProrationPrice.conversionRate
                        this.modelType = newSubscriptionTierWithProrationPrice.modelType
                        this.tieredWithProrationConfig =
                            newSubscriptionTierWithProrationPrice.tieredWithProrationConfig
                        this.currency = newSubscriptionTierWithProrationPrice.currency
                        this.referenceId = newSubscriptionTierWithProrationPrice.referenceId
                        additionalProperties(
                            newSubscriptionTierWithProrationPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: TieredWithProrationConfig
                    ) = tieredWithProrationConfig(JsonField.of(tieredWithProrationConfig))

                    @JsonProperty("tiered_with_proration_config")
                    @ExcludeMissing
                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: JsonField<TieredWithProrationConfig>
                    ) = apply { this.tieredWithProrationConfig = tieredWithProrationConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionTierWithProrationPrice =
                        NewSubscriptionTierWithProrationPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            tieredWithProrationConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val TIERED_WITH_PRORATION = ModelType(JsonField.of("tiered_with_proration"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_WITH_PRORATION,
                    }

                    enum class Value {
                        TIERED_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_PRORATION -> Value.TIERED_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_PRORATION -> Known.TIERED_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = TieredWithProrationConfig.Builder::class)
                @NoAutoDetect
                class TieredWithProrationConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): TieredWithProrationConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithProrationConfig: TieredWithProrationConfig) =
                            apply {
                                additionalProperties(tieredWithProrationConfig.additionalProperties)
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): TieredWithProrationConfig =
                            TieredWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithProrationConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "TieredWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTierWithProrationPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.tieredWithProrationConfig == other.tieredWithProrationConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredWithProrationConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionTierWithProrationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredWithProrationConfig=$tieredWithProrationConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionUnitWithProrationPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionUnitWithProrationPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val unitWithProrationConfig: JsonField<UnitWithProrationConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun unitWithProrationConfig(): UnitWithProrationConfig =
                    unitWithProrationConfig.getRequired("unit_with_proration_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("unit_with_proration_config")
                @ExcludeMissing
                fun _unitWithProrationConfig() = unitWithProrationConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionUnitWithProrationPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        unitWithProrationConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var unitWithProrationConfig: JsonField<UnitWithProrationConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                    ) = apply {
                        this.metadata = newSubscriptionUnitWithProrationPrice.metadata
                        this.externalPriceId = newSubscriptionUnitWithProrationPrice.externalPriceId
                        this.name = newSubscriptionUnitWithProrationPrice.name
                        this.billableMetricId =
                            newSubscriptionUnitWithProrationPrice.billableMetricId
                        this.itemId = newSubscriptionUnitWithProrationPrice.itemId
                        this.billedInAdvance = newSubscriptionUnitWithProrationPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionUnitWithProrationPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionUnitWithProrationPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionUnitWithProrationPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionUnitWithProrationPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionUnitWithProrationPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionUnitWithProrationPrice.conversionRate
                        this.modelType = newSubscriptionUnitWithProrationPrice.modelType
                        this.unitWithProrationConfig =
                            newSubscriptionUnitWithProrationPrice.unitWithProrationConfig
                        this.currency = newSubscriptionUnitWithProrationPrice.currency
                        this.referenceId = newSubscriptionUnitWithProrationPrice.referenceId
                        additionalProperties(
                            newSubscriptionUnitWithProrationPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun unitWithProrationConfig(unitWithProrationConfig: UnitWithProrationConfig) =
                        unitWithProrationConfig(JsonField.of(unitWithProrationConfig))

                    @JsonProperty("unit_with_proration_config")
                    @ExcludeMissing
                    fun unitWithProrationConfig(
                        unitWithProrationConfig: JsonField<UnitWithProrationConfig>
                    ) = apply { this.unitWithProrationConfig = unitWithProrationConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionUnitWithProrationPrice =
                        NewSubscriptionUnitWithProrationPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            unitWithProrationConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val UNIT_WITH_PRORATION = ModelType(JsonField.of("unit_with_proration"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT_WITH_PRORATION,
                    }

                    enum class Value {
                        UNIT_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PRORATION -> Value.UNIT_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PRORATION -> Known.UNIT_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = UnitWithProrationConfig.Builder::class)
                @NoAutoDetect
                class UnitWithProrationConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): UnitWithProrationConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithProrationConfig: UnitWithProrationConfig) =
                            apply {
                                additionalProperties(unitWithProrationConfig.additionalProperties)
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): UnitWithProrationConfig =
                            UnitWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithProrationConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "UnitWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitWithProrationPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.unitWithProrationConfig == other.unitWithProrationConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, unitWithProrationConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionUnitWithProrationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, unitWithProrationConfig=$unitWithProrationConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionGroupedAllocationPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionGroupedAllocationPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val groupedAllocationConfig: JsonField<GroupedAllocationConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun groupedAllocationConfig(): GroupedAllocationConfig =
                    groupedAllocationConfig.getRequired("grouped_allocation_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("grouped_allocation_config")
                @ExcludeMissing
                fun _groupedAllocationConfig() = groupedAllocationConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionGroupedAllocationPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        groupedAllocationConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var groupedAllocationConfig: JsonField<GroupedAllocationConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                    ) = apply {
                        this.metadata = newSubscriptionGroupedAllocationPrice.metadata
                        this.externalPriceId = newSubscriptionGroupedAllocationPrice.externalPriceId
                        this.name = newSubscriptionGroupedAllocationPrice.name
                        this.billableMetricId =
                            newSubscriptionGroupedAllocationPrice.billableMetricId
                        this.itemId = newSubscriptionGroupedAllocationPrice.itemId
                        this.billedInAdvance = newSubscriptionGroupedAllocationPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionGroupedAllocationPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionGroupedAllocationPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionGroupedAllocationPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionGroupedAllocationPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionGroupedAllocationPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionGroupedAllocationPrice.conversionRate
                        this.modelType = newSubscriptionGroupedAllocationPrice.modelType
                        this.groupedAllocationConfig =
                            newSubscriptionGroupedAllocationPrice.groupedAllocationConfig
                        this.currency = newSubscriptionGroupedAllocationPrice.currency
                        this.referenceId = newSubscriptionGroupedAllocationPrice.referenceId
                        additionalProperties(
                            newSubscriptionGroupedAllocationPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun groupedAllocationConfig(groupedAllocationConfig: GroupedAllocationConfig) =
                        groupedAllocationConfig(JsonField.of(groupedAllocationConfig))

                    @JsonProperty("grouped_allocation_config")
                    @ExcludeMissing
                    fun groupedAllocationConfig(
                        groupedAllocationConfig: JsonField<GroupedAllocationConfig>
                    ) = apply { this.groupedAllocationConfig = groupedAllocationConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionGroupedAllocationPrice =
                        NewSubscriptionGroupedAllocationPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            groupedAllocationConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = GroupedAllocationConfig.Builder::class)
                @NoAutoDetect
                class GroupedAllocationConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): GroupedAllocationConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedAllocationConfig: GroupedAllocationConfig) =
                            apply {
                                additionalProperties(groupedAllocationConfig.additionalProperties)
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): GroupedAllocationConfig =
                            GroupedAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedAllocationConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "GroupedAllocationConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val GROUPED_ALLOCATION = ModelType(JsonField.of("grouped_allocation"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_ALLOCATION,
                    }

                    enum class Value {
                        GROUPED_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_ALLOCATION -> Value.GROUPED_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_ALLOCATION -> Known.GROUPED_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionGroupedAllocationPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.groupedAllocationConfig == other.groupedAllocationConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, groupedAllocationConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionGroupedAllocationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, groupedAllocationConfig=$groupedAllocationConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(
                builder = NewSubscriptionGroupedWithProratedMinimumPrice.Builder::class
            )
            @NoAutoDetect
            class NewSubscriptionGroupedWithProratedMinimumPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val groupedWithProratedMinimumConfig:
                    JsonField<GroupedWithProratedMinimumConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun groupedWithProratedMinimumConfig(): GroupedWithProratedMinimumConfig =
                    groupedWithProratedMinimumConfig.getRequired(
                        "grouped_with_prorated_minimum_config"
                    )

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("grouped_with_prorated_minimum_config")
                @ExcludeMissing
                fun _groupedWithProratedMinimumConfig() = groupedWithProratedMinimumConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionGroupedWithProratedMinimumPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        groupedWithProratedMinimumConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var groupedWithProratedMinimumConfig:
                        JsonField<GroupedWithProratedMinimumConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionGroupedWithProratedMinimumPrice:
                            NewSubscriptionGroupedWithProratedMinimumPrice
                    ) = apply {
                        this.metadata = newSubscriptionGroupedWithProratedMinimumPrice.metadata
                        this.externalPriceId =
                            newSubscriptionGroupedWithProratedMinimumPrice.externalPriceId
                        this.name = newSubscriptionGroupedWithProratedMinimumPrice.name
                        this.billableMetricId =
                            newSubscriptionGroupedWithProratedMinimumPrice.billableMetricId
                        this.itemId = newSubscriptionGroupedWithProratedMinimumPrice.itemId
                        this.billedInAdvance =
                            newSubscriptionGroupedWithProratedMinimumPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionGroupedWithProratedMinimumPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionGroupedWithProratedMinimumPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionGroupedWithProratedMinimumPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionGroupedWithProratedMinimumPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionGroupedWithProratedMinimumPrice
                                .invoicingCycleConfiguration
                        this.conversionRate =
                            newSubscriptionGroupedWithProratedMinimumPrice.conversionRate
                        this.modelType = newSubscriptionGroupedWithProratedMinimumPrice.modelType
                        this.groupedWithProratedMinimumConfig =
                            newSubscriptionGroupedWithProratedMinimumPrice
                                .groupedWithProratedMinimumConfig
                        this.currency = newSubscriptionGroupedWithProratedMinimumPrice.currency
                        this.referenceId =
                            newSubscriptionGroupedWithProratedMinimumPrice.referenceId
                        additionalProperties(
                            newSubscriptionGroupedWithProratedMinimumPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                    ) =
                        groupedWithProratedMinimumConfig(
                            JsonField.of(groupedWithProratedMinimumConfig)
                        )

                    @JsonProperty("grouped_with_prorated_minimum_config")
                    @ExcludeMissing
                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig:
                            JsonField<GroupedWithProratedMinimumConfig>
                    ) = apply {
                        this.groupedWithProratedMinimumConfig = groupedWithProratedMinimumConfig
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionGroupedWithProratedMinimumPrice =
                        NewSubscriptionGroupedWithProratedMinimumPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            groupedWithProratedMinimumConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                @JsonDeserialize(builder = GroupedWithProratedMinimumConfig.Builder::class)
                @NoAutoDetect
                class GroupedWithProratedMinimumConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): GroupedWithProratedMinimumConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                        ) = apply {
                            additionalProperties(
                                groupedWithProratedMinimumConfig.additionalProperties
                            )
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): GroupedWithProratedMinimumConfig =
                            GroupedWithProratedMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedWithProratedMinimumConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "GroupedWithProratedMinimumConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val GROUPED_WITH_PRORATED_MINIMUM =
                            ModelType(JsonField.of("grouped_with_prorated_minimum"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_WITH_PRORATED_MINIMUM,
                    }

                    enum class Value {
                        GROUPED_WITH_PRORATED_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Value.GROUPED_WITH_PRORATED_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Known.GROUPED_WITH_PRORATED_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionGroupedWithProratedMinimumPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.groupedWithProratedMinimumConfig == other.groupedWithProratedMinimumConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, groupedWithProratedMinimumConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionGroupedWithProratedMinimumPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, groupedWithProratedMinimumConfig=$groupedWithProratedMinimumConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @JsonDeserialize(builder = NewSubscriptionBulkWithProrationPrice.Builder::class)
            @NoAutoDetect
            class NewSubscriptionBulkWithProrationPrice
            private constructor(
                private val metadata: JsonField<Metadata>,
                private val externalPriceId: JsonField<String>,
                private val name: JsonField<String>,
                private val billableMetricId: JsonField<String>,
                private val itemId: JsonField<String>,
                private val billedInAdvance: JsonField<Boolean>,
                private val fixedPriceQuantity: JsonField<Double>,
                private val invoiceGroupingKey: JsonField<String>,
                private val cadence: JsonField<Cadence>,
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
                private val conversionRate: JsonField<Double>,
                private val modelType: JsonField<ModelType>,
                private val bulkWithProrationConfig: JsonField<BulkWithProrationConfig>,
                private val currency: JsonField<String>,
                private val referenceId: JsonField<String>,
                private val additionalProperties: Map<String, JsonValue>,
            ) {

                private var validated: Boolean = false

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                fun modelType(): ModelType = modelType.getRequired("model_type")

                fun bulkWithProrationConfig(): BulkWithProrationConfig =
                    bulkWithProrationConfig.getRequired("bulk_with_proration_config")

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata") @ExcludeMissing fun _metadata() = metadata

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId() = externalPriceId

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name() = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId() = billableMetricId

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId() = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance() = billedInAdvance

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity() = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey() = invoiceGroupingKey

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") @ExcludeMissing fun _cadence() = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration() = billingCycleConfiguration

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration() = invoicingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate() = conversionRate

                @JsonProperty("model_type") @ExcludeMissing fun _modelType() = modelType

                @JsonProperty("bulk_with_proration_config")
                @ExcludeMissing
                fun _bulkWithProrationConfig() = bulkWithProrationConfig

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency") @ExcludeMissing fun _currency() = currency

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id") @ExcludeMissing fun _referenceId() = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun validate(): NewSubscriptionBulkWithProrationPrice = apply {
                    if (!validated) {
                        metadata().map { it.validate() }
                        externalPriceId()
                        name()
                        billableMetricId()
                        itemId()
                        billedInAdvance()
                        fixedPriceQuantity()
                        invoiceGroupingKey()
                        cadence()
                        billingCycleConfiguration().map { it.validate() }
                        invoicingCycleConfiguration().map { it.validate() }
                        conversionRate()
                        modelType()
                        bulkWithProrationConfig().validate()
                        currency()
                        referenceId()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var name: JsonField<String> = JsonMissing.of()
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var itemId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var cadence: JsonField<Cadence> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var modelType: JsonField<ModelType> = JsonMissing.of()
                    private var bulkWithProrationConfig: JsonField<BulkWithProrationConfig> =
                        JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                    ) = apply {
                        this.metadata = newSubscriptionBulkWithProrationPrice.metadata
                        this.externalPriceId = newSubscriptionBulkWithProrationPrice.externalPriceId
                        this.name = newSubscriptionBulkWithProrationPrice.name
                        this.billableMetricId =
                            newSubscriptionBulkWithProrationPrice.billableMetricId
                        this.itemId = newSubscriptionBulkWithProrationPrice.itemId
                        this.billedInAdvance = newSubscriptionBulkWithProrationPrice.billedInAdvance
                        this.fixedPriceQuantity =
                            newSubscriptionBulkWithProrationPrice.fixedPriceQuantity
                        this.invoiceGroupingKey =
                            newSubscriptionBulkWithProrationPrice.invoiceGroupingKey
                        this.cadence = newSubscriptionBulkWithProrationPrice.cadence
                        this.billingCycleConfiguration =
                            newSubscriptionBulkWithProrationPrice.billingCycleConfiguration
                        this.invoicingCycleConfiguration =
                            newSubscriptionBulkWithProrationPrice.invoicingCycleConfiguration
                        this.conversionRate = newSubscriptionBulkWithProrationPrice.conversionRate
                        this.modelType = newSubscriptionBulkWithProrationPrice.modelType
                        this.bulkWithProrationConfig =
                            newSubscriptionBulkWithProrationPrice.bulkWithProrationConfig
                        this.currency = newSubscriptionBulkWithProrationPrice.currency
                        this.referenceId = newSubscriptionBulkWithProrationPrice.referenceId
                        additionalProperties(
                            newSubscriptionBulkWithProrationPrice.additionalProperties
                        )
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = metadata(JsonField.of(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    @JsonProperty("metadata")
                    @ExcludeMissing
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) =
                        externalPriceId(JsonField.of(externalPriceId))

                    /** An alias for the price. */
                    @JsonProperty("external_price_id")
                    @ExcludeMissing
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    @JsonProperty("name")
                    @ExcludeMissing
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) =
                        billableMetricId(JsonField.of(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    @JsonProperty("billable_metric_id")
                    @ExcludeMissing
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    @JsonProperty("item_id")
                    @ExcludeMissing
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(JsonField.of(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @JsonProperty("billed_in_advance")
                    @ExcludeMissing
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(JsonField.of(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @JsonProperty("fixed_price_quantity")
                    @ExcludeMissing
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) =
                        invoiceGroupingKey(JsonField.of(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    @JsonProperty("invoice_grouping_key")
                    @ExcludeMissing
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    @JsonProperty("cadence")
                    @ExcludeMissing
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = billingCycleConfiguration(JsonField.of(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    @JsonProperty("billing_cycle_configuration")
                    @ExcludeMissing
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = invoicingCycleConfiguration(JsonField.of(invoicingCycleConfiguration))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    @JsonProperty("invoicing_cycle_configuration")
                    @ExcludeMissing
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(JsonField.of(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @JsonProperty("conversion_rate")
                    @ExcludeMissing
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    @JsonProperty("model_type")
                    @ExcludeMissing
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    fun bulkWithProrationConfig(bulkWithProrationConfig: BulkWithProrationConfig) =
                        bulkWithProrationConfig(JsonField.of(bulkWithProrationConfig))

                    @JsonProperty("bulk_with_proration_config")
                    @ExcludeMissing
                    fun bulkWithProrationConfig(
                        bulkWithProrationConfig: JsonField<BulkWithProrationConfig>
                    ) = apply { this.bulkWithProrationConfig = bulkWithProrationConfig }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    @JsonProperty("currency")
                    @ExcludeMissing
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String) = referenceId(JsonField.of(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    @JsonProperty("reference_id")
                    @ExcludeMissing
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        this.additionalProperties.putAll(additionalProperties)
                    }

                    @JsonAnySetter
                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        this.additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun build(): NewSubscriptionBulkWithProrationPrice =
                        NewSubscriptionBulkWithProrationPrice(
                            metadata,
                            externalPriceId,
                            name,
                            billableMetricId,
                            itemId,
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            cadence,
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            modelType,
                            bulkWithProrationConfig,
                            currency,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @JsonDeserialize(builder = BulkWithProrationConfig.Builder::class)
                @NoAutoDetect
                class BulkWithProrationConfig
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BulkWithProrationConfig = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkWithProrationConfig: BulkWithProrationConfig) =
                            apply {
                                additionalProperties(bulkWithProrationConfig.additionalProperties)
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BulkWithProrationConfig =
                            BulkWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkWithProrationConfig && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BulkWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField val ANNUAL = Cadence(JsonField.of("annual"))

                        @JvmField val SEMI_ANNUAL = Cadence(JsonField.of("semi_annual"))

                        @JvmField val MONTHLY = Cadence(JsonField.of("monthly"))

                        @JvmField val QUARTERLY = Cadence(JsonField.of("quarterly"))

                        @JvmField val ONE_TIME = Cadence(JsonField.of("one_time"))

                        @JvmField val CUSTOM = Cadence(JsonField.of("custom"))

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && this.value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()

                    companion object {

                        @JvmField
                        val BULK_WITH_PRORATION = ModelType(JsonField.of("bulk_with_proration"))

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK_WITH_PRORATION,
                    }

                    enum class Value {
                        BULK_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK_WITH_PRORATION -> Value.BULK_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK_WITH_PRORATION -> Known.BULK_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonDeserialize(builder = BillingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class BillingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): BillingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                this.duration = billingCycleConfiguration.duration
                                this.durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties(billingCycleConfiguration.additionalProperties)
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonDeserialize(builder = InvoicingCycleConfiguration.Builder::class)
                @NoAutoDetect
                class InvoicingCycleConfiguration
                private constructor(
                    private val duration: JsonField<Long>,
                    private val durationUnit: JsonField<DurationUnit>,
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration") @ExcludeMissing fun _duration() = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit() = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (!validated) {
                            duration()
                            durationUnit()
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long> = JsonMissing.of()
                        private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            this.duration = invoicingCycleConfiguration.duration
                            this.durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties(invoicingCycleConfiguration.additionalProperties)
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        @JsonProperty("duration")
                        @ExcludeMissing
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        @JsonProperty("duration_unit")
                        @ExcludeMissing
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                duration,
                                durationUnit,
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && this.value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()

                        companion object {

                            @JvmField val DAY = DurationUnit(JsonField.of("day"))

                            @JvmField val MONTH = DurationUnit(JsonField.of("month"))

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && this.duration == other.duration && this.durationUnit == other.durationUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(duration, durationUnit, additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonDeserialize(builder = Metadata.Builder::class)
                @NoAutoDetect
                class Metadata
                private constructor(
                    private val additionalProperties: Map<String, JsonValue>,
                ) {

                    private var validated: Boolean = false

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun validate(): Metadata = apply {
                        if (!validated) {
                            validated = true
                        }
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties(metadata.additionalProperties)
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        @JsonAnySetter
                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            this.additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && this.additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    private var hashCode: Int = 0

                    override fun hashCode(): Int {
                        if (hashCode == 0) {
                            hashCode = /* spotless:off */ Objects.hash(additionalProperties) /* spotless:on */
                        }
                        return hashCode
                    }

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkWithProrationPrice && this.metadata == other.metadata && this.externalPriceId == other.externalPriceId && this.name == other.name && this.billableMetricId == other.billableMetricId && this.itemId == other.itemId && this.billedInAdvance == other.billedInAdvance && this.fixedPriceQuantity == other.fixedPriceQuantity && this.invoiceGroupingKey == other.invoiceGroupingKey && this.cadence == other.cadence && this.billingCycleConfiguration == other.billingCycleConfiguration && this.invoicingCycleConfiguration == other.invoicingCycleConfiguration && this.conversionRate == other.conversionRate && this.modelType == other.modelType && this.bulkWithProrationConfig == other.bulkWithProrationConfig && this.currency == other.currency && this.referenceId == other.referenceId && this.additionalProperties == other.additionalProperties /* spotless:on */
                }

                private var hashCode: Int = 0

                override fun hashCode(): Int {
                    if (hashCode == 0) {
                        hashCode = /* spotless:off */ Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, bulkWithProrationConfig, currency, referenceId, additionalProperties) /* spotless:on */
                    }
                    return hashCode
                }

                override fun toString() =
                    "NewSubscriptionBulkWithProrationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, bulkWithProrationConfig=$bulkWithProrationConfig, currency=$currency, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is ReplacePrice && this.priceId == other.priceId && this.externalPriceId == other.externalPriceId && this.price == other.price && this.fixedPriceQuantity == other.fixedPriceQuantity && this.replacesPriceId == other.replacesPriceId && this.minimumAmount == other.minimumAmount && this.maximumAmount == other.maximumAmount && this.discounts == other.discounts && this.additionalProperties == other.additionalProperties /* spotless:on */
        }

        private var hashCode: Int = 0

        override fun hashCode(): Int {
            if (hashCode == 0) {
                hashCode = /* spotless:off */ Objects.hash(priceId, externalPriceId, price, fixedPriceQuantity, replacesPriceId, minimumAmount, maximumAmount, discounts, additionalProperties) /* spotless:on */
            }
            return hashCode
        }

        override fun toString() =
            "ReplacePrice{priceId=$priceId, externalPriceId=$externalPriceId, price=$price, fixedPriceQuantity=$fixedPriceQuantity, replacesPriceId=$replacesPriceId, minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, discounts=$discounts, additionalProperties=$additionalProperties}"
    }
}
