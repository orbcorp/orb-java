// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.ObjectCodec
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.SerializerProvider
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.BaseDeserializer
import com.withorb.api.core.BaseSerializer
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonValue
import com.withorb.api.core.NoAutoDetect
import com.withorb.api.core.getOrThrow
import com.withorb.api.core.http.Headers
import com.withorb.api.core.http.QueryParams
import com.withorb.api.core.immutableEmptyMap
import com.withorb.api.core.toImmutable
import com.withorb.api.errors.OrbInvalidDataException
import java.time.OffsetDateTime
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

class SubscriptionCreateParams
constructor(
    private val body: SubscriptionCreateBody,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) {

    /**
     * Additional adjustments to be added to the subscription. (Only available for accounts that
     * have migrated off of legacy subscription overrides)
     */
    fun addAdjustments(): Optional<List<AddAdjustment>> = body.addAdjustments()

    /**
     * Additional prices to be added to the subscription. (Only available for accounts that have
     * migrated off of legacy subscription overrides)
     */
    fun addPrices(): Optional<List<AddPrice>> = body.addPrices()

    fun alignBillingWithSubscriptionStartDate(): Optional<Boolean> =
        body.alignBillingWithSubscriptionStartDate()

    /**
     * Determines whether issued invoices for this subscription will automatically be charged with
     * the saved payment method on the due date. If not specified, this defaults to the behavior
     * configured for this customer.
     */
    fun autoCollection(): Optional<Boolean> = body.autoCollection()

    fun awsRegion(): Optional<String> = body.awsRegion()

    fun billingCycleAnchorConfiguration(): Optional<BillingCycleAnchorConfiguration> =
        body.billingCycleAnchorConfiguration()

    /**
     * Redemption code to be used for this subscription. If the coupon cannot be found by its
     * redemption code, or cannot be redeemed, an error response will be returned and the
     * subscription creation or plan change will not be scheduled.
     */
    fun couponRedemptionCode(): Optional<String> = body.couponRedemptionCode()

    fun creditsOverageRate(): Optional<Double> = body.creditsOverageRate()

    fun customerId(): Optional<String> = body.customerId()

    /**
     * Determines the default memo on this subscription's invoices. Note that if this is not
     * provided, it is determined by the plan configuration.
     */
    fun defaultInvoiceMemo(): Optional<String> = body.defaultInvoiceMemo()

    fun endDate(): Optional<OffsetDateTime> = body.endDate()

    fun externalCustomerId(): Optional<String> = body.externalCustomerId()

    fun externalMarketplace(): Optional<ExternalMarketplace> = body.externalMarketplace()

    fun externalMarketplaceReportingId(): Optional<String> = body.externalMarketplaceReportingId()

    /**
     * The external_plan_id of the plan that the given subscription should be switched to. Note that
     * either this property or `plan_id` must be specified.
     */
    fun externalPlanId(): Optional<String> = body.externalPlanId()

    /**
     * An additional filter to apply to usage queries. This filter must be expressed as a boolean
     * [computed property](../guides/extensibility/advanced-metrics#computed-properties). If null,
     * usage queries will not include any additional filter.
     */
    fun filter(): Optional<String> = body.filter()

    /** The phase of the plan to start with */
    fun initialPhaseOrder(): Optional<Long> = body.initialPhaseOrder()

    /**
     * When this subscription's accrued usage reaches this threshold, an invoice will be issued for
     * the subscription. If not specified, invoices will only be issued at the end of the billing
     * period.
     */
    fun invoicingThreshold(): Optional<String> = body.invoicingThreshold()

    /**
     * User-specified key/value pairs for the resource. Individual keys can be removed by setting
     * the value to `null`, and the entire metadata mapping can be cleared by setting `metadata` to
     * `null`.
     */
    fun metadata(): Optional<Metadata> = body.metadata()

    /**
     * The net terms determines the difference between the invoice date and the issue date for the
     * invoice. If you intend the invoice to be due on issue, set this to 0. If not provided, this
     * defaults to the value specified in the plan.
     */
    fun netTerms(): Optional<Long> = body.netTerms()

    fun perCreditOverageAmount(): Optional<Double> = body.perCreditOverageAmount()

    /**
     * The plan that the given subscription should be switched to. Note that either this property or
     * `external_plan_id` must be specified.
     */
    fun planId(): Optional<String> = body.planId()

    /**
     * Specifies which version of the plan to subscribe to. If null, the default version will be
     * used.
     */
    fun planVersionNumber(): Optional<Long> = body.planVersionNumber()

    /** Optionally provide a list of overrides for prices on the plan */
    fun priceOverrides(): Optional<List<JsonValue>> = body.priceOverrides()

    /**
     * Plan adjustments to be removed from the subscription. (Only available for accounts that have
     * migrated off of legacy subscription overrides)
     */
    fun removeAdjustments(): Optional<List<RemoveAdjustment>> = body.removeAdjustments()

    /**
     * Plan prices to be removed from the subscription. (Only available for accounts that have
     * migrated off of legacy subscription overrides)
     */
    fun removePrices(): Optional<List<RemovePrice>> = body.removePrices()

    /**
     * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
     * available for accounts that have migrated off of legacy subscription overrides)
     */
    fun replaceAdjustments(): Optional<List<ReplaceAdjustment>> = body.replaceAdjustments()

    /**
     * Plan prices to be replaced with additional prices on the subscription. (Only available for
     * accounts that have migrated off of legacy subscription overrides)
     */
    fun replacePrices(): Optional<List<ReplacePrice>> = body.replacePrices()

    fun startDate(): Optional<OffsetDateTime> = body.startDate()

    /**
     * The duration of the trial period in days. If not provided, this defaults to the value
     * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
     */
    fun trialDurationDays(): Optional<Long> = body.trialDurationDays()

    fun _additionalHeaders(): Headers = additionalHeaders

    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    @JvmSynthetic internal fun getBody(): SubscriptionCreateBody = body

    @JvmSynthetic internal fun getHeaders(): Headers = additionalHeaders

    @JvmSynthetic internal fun getQueryParams(): QueryParams = additionalQueryParams

    @NoAutoDetect
    class SubscriptionCreateBody
    @JsonCreator
    internal constructor(
        @JsonProperty("add_adjustments") private val addAdjustments: List<AddAdjustment>?,
        @JsonProperty("add_prices") private val addPrices: List<AddPrice>?,
        @JsonProperty("align_billing_with_subscription_start_date")
        private val alignBillingWithSubscriptionStartDate: Boolean?,
        @JsonProperty("auto_collection") private val autoCollection: Boolean?,
        @JsonProperty("aws_region") private val awsRegion: String?,
        @JsonProperty("billing_cycle_anchor_configuration")
        private val billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration?,
        @JsonProperty("coupon_redemption_code") private val couponRedemptionCode: String?,
        @JsonProperty("credits_overage_rate") private val creditsOverageRate: Double?,
        @JsonProperty("customer_id") private val customerId: String?,
        @JsonProperty("default_invoice_memo") private val defaultInvoiceMemo: String?,
        @JsonProperty("end_date") private val endDate: OffsetDateTime?,
        @JsonProperty("external_customer_id") private val externalCustomerId: String?,
        @JsonProperty("external_marketplace") private val externalMarketplace: ExternalMarketplace?,
        @JsonProperty("external_marketplace_reporting_id")
        private val externalMarketplaceReportingId: String?,
        @JsonProperty("external_plan_id") private val externalPlanId: String?,
        @JsonProperty("filter") private val filter: String?,
        @JsonProperty("initial_phase_order") private val initialPhaseOrder: Long?,
        @JsonProperty("invoicing_threshold") private val invoicingThreshold: String?,
        @JsonProperty("metadata") private val metadata: Metadata?,
        @JsonProperty("net_terms") private val netTerms: Long?,
        @JsonProperty("per_credit_overage_amount") private val perCreditOverageAmount: Double?,
        @JsonProperty("plan_id") private val planId: String?,
        @JsonProperty("plan_version_number") private val planVersionNumber: Long?,
        @JsonProperty("price_overrides") private val priceOverrides: List<JsonValue>?,
        @JsonProperty("remove_adjustments") private val removeAdjustments: List<RemoveAdjustment>?,
        @JsonProperty("remove_prices") private val removePrices: List<RemovePrice>?,
        @JsonProperty("replace_adjustments")
        private val replaceAdjustments: List<ReplaceAdjustment>?,
        @JsonProperty("replace_prices") private val replacePrices: List<ReplacePrice>?,
        @JsonProperty("start_date") private val startDate: OffsetDateTime?,
        @JsonProperty("trial_duration_days") private val trialDurationDays: Long?,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /**
         * Additional adjustments to be added to the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        @JsonProperty("add_adjustments")
        fun addAdjustments(): Optional<List<AddAdjustment>> = Optional.ofNullable(addAdjustments)

        /**
         * Additional prices to be added to the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        @JsonProperty("add_prices")
        fun addPrices(): Optional<List<AddPrice>> = Optional.ofNullable(addPrices)

        @JsonProperty("align_billing_with_subscription_start_date")
        fun alignBillingWithSubscriptionStartDate(): Optional<Boolean> =
            Optional.ofNullable(alignBillingWithSubscriptionStartDate)

        /**
         * Determines whether issued invoices for this subscription will automatically be charged
         * with the saved payment method on the due date. If not specified, this defaults to the
         * behavior configured for this customer.
         */
        @JsonProperty("auto_collection")
        fun autoCollection(): Optional<Boolean> = Optional.ofNullable(autoCollection)

        @JsonProperty("aws_region")
        fun awsRegion(): Optional<String> = Optional.ofNullable(awsRegion)

        @JsonProperty("billing_cycle_anchor_configuration")
        fun billingCycleAnchorConfiguration(): Optional<BillingCycleAnchorConfiguration> =
            Optional.ofNullable(billingCycleAnchorConfiguration)

        /**
         * Redemption code to be used for this subscription. If the coupon cannot be found by its
         * redemption code, or cannot be redeemed, an error response will be returned and the
         * subscription creation or plan change will not be scheduled.
         */
        @JsonProperty("coupon_redemption_code")
        fun couponRedemptionCode(): Optional<String> = Optional.ofNullable(couponRedemptionCode)

        @JsonProperty("credits_overage_rate")
        fun creditsOverageRate(): Optional<Double> = Optional.ofNullable(creditsOverageRate)

        @JsonProperty("customer_id")
        fun customerId(): Optional<String> = Optional.ofNullable(customerId)

        /**
         * Determines the default memo on this subscription's invoices. Note that if this is not
         * provided, it is determined by the plan configuration.
         */
        @JsonProperty("default_invoice_memo")
        fun defaultInvoiceMemo(): Optional<String> = Optional.ofNullable(defaultInvoiceMemo)

        @JsonProperty("end_date")
        fun endDate(): Optional<OffsetDateTime> = Optional.ofNullable(endDate)

        @JsonProperty("external_customer_id")
        fun externalCustomerId(): Optional<String> = Optional.ofNullable(externalCustomerId)

        @JsonProperty("external_marketplace")
        fun externalMarketplace(): Optional<ExternalMarketplace> =
            Optional.ofNullable(externalMarketplace)

        @JsonProperty("external_marketplace_reporting_id")
        fun externalMarketplaceReportingId(): Optional<String> =
            Optional.ofNullable(externalMarketplaceReportingId)

        /**
         * The external_plan_id of the plan that the given subscription should be switched to. Note
         * that either this property or `plan_id` must be specified.
         */
        @JsonProperty("external_plan_id")
        fun externalPlanId(): Optional<String> = Optional.ofNullable(externalPlanId)

        /**
         * An additional filter to apply to usage queries. This filter must be expressed as a
         * boolean
         * [computed property](../guides/extensibility/advanced-metrics#computed-properties). If
         * null, usage queries will not include any additional filter.
         */
        @JsonProperty("filter") fun filter(): Optional<String> = Optional.ofNullable(filter)

        /** The phase of the plan to start with */
        @JsonProperty("initial_phase_order")
        fun initialPhaseOrder(): Optional<Long> = Optional.ofNullable(initialPhaseOrder)

        /**
         * When this subscription's accrued usage reaches this threshold, an invoice will be issued
         * for the subscription. If not specified, invoices will only be issued at the end of the
         * billing period.
         */
        @JsonProperty("invoicing_threshold")
        fun invoicingThreshold(): Optional<String> = Optional.ofNullable(invoicingThreshold)

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed by
         * setting the value to `null`, and the entire metadata mapping can be cleared by setting
         * `metadata` to `null`.
         */
        @JsonProperty("metadata") fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0. If not
         * provided, this defaults to the value specified in the plan.
         */
        @JsonProperty("net_terms") fun netTerms(): Optional<Long> = Optional.ofNullable(netTerms)

        @JsonProperty("per_credit_overage_amount")
        fun perCreditOverageAmount(): Optional<Double> = Optional.ofNullable(perCreditOverageAmount)

        /**
         * The plan that the given subscription should be switched to. Note that either this
         * property or `external_plan_id` must be specified.
         */
        @JsonProperty("plan_id") fun planId(): Optional<String> = Optional.ofNullable(planId)

        /**
         * Specifies which version of the plan to subscribe to. If null, the default version will be
         * used.
         */
        @JsonProperty("plan_version_number")
        fun planVersionNumber(): Optional<Long> = Optional.ofNullable(planVersionNumber)

        /** Optionally provide a list of overrides for prices on the plan */
        @JsonProperty("price_overrides")
        fun priceOverrides(): Optional<List<JsonValue>> = Optional.ofNullable(priceOverrides)

        /**
         * Plan adjustments to be removed from the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        @JsonProperty("remove_adjustments")
        fun removeAdjustments(): Optional<List<RemoveAdjustment>> =
            Optional.ofNullable(removeAdjustments)

        /**
         * Plan prices to be removed from the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        @JsonProperty("remove_prices")
        fun removePrices(): Optional<List<RemovePrice>> = Optional.ofNullable(removePrices)

        /**
         * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
         * available for accounts that have migrated off of legacy subscription overrides)
         */
        @JsonProperty("replace_adjustments")
        fun replaceAdjustments(): Optional<List<ReplaceAdjustment>> =
            Optional.ofNullable(replaceAdjustments)

        /**
         * Plan prices to be replaced with additional prices on the subscription. (Only available
         * for accounts that have migrated off of legacy subscription overrides)
         */
        @JsonProperty("replace_prices")
        fun replacePrices(): Optional<List<ReplacePrice>> = Optional.ofNullable(replacePrices)

        @JsonProperty("start_date")
        fun startDate(): Optional<OffsetDateTime> = Optional.ofNullable(startDate)

        /**
         * The duration of the trial period in days. If not provided, this defaults to the value
         * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
         */
        @JsonProperty("trial_duration_days")
        fun trialDurationDays(): Optional<Long> = Optional.ofNullable(trialDurationDays)

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var addAdjustments: MutableList<AddAdjustment>? = null
            private var addPrices: MutableList<AddPrice>? = null
            private var alignBillingWithSubscriptionStartDate: Boolean? = null
            private var autoCollection: Boolean? = null
            private var awsRegion: String? = null
            private var billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration? = null
            private var couponRedemptionCode: String? = null
            private var creditsOverageRate: Double? = null
            private var customerId: String? = null
            private var defaultInvoiceMemo: String? = null
            private var endDate: OffsetDateTime? = null
            private var externalCustomerId: String? = null
            private var externalMarketplace: ExternalMarketplace? = null
            private var externalMarketplaceReportingId: String? = null
            private var externalPlanId: String? = null
            private var filter: String? = null
            private var initialPhaseOrder: Long? = null
            private var invoicingThreshold: String? = null
            private var metadata: Metadata? = null
            private var netTerms: Long? = null
            private var perCreditOverageAmount: Double? = null
            private var planId: String? = null
            private var planVersionNumber: Long? = null
            private var priceOverrides: MutableList<JsonValue>? = null
            private var removeAdjustments: MutableList<RemoveAdjustment>? = null
            private var removePrices: MutableList<RemovePrice>? = null
            private var replaceAdjustments: MutableList<ReplaceAdjustment>? = null
            private var replacePrices: MutableList<ReplacePrice>? = null
            private var startDate: OffsetDateTime? = null
            private var trialDurationDays: Long? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(subscriptionCreateBody: SubscriptionCreateBody) = apply {
                addAdjustments = subscriptionCreateBody.addAdjustments?.toMutableList()
                addPrices = subscriptionCreateBody.addPrices?.toMutableList()
                alignBillingWithSubscriptionStartDate =
                    subscriptionCreateBody.alignBillingWithSubscriptionStartDate
                autoCollection = subscriptionCreateBody.autoCollection
                awsRegion = subscriptionCreateBody.awsRegion
                billingCycleAnchorConfiguration =
                    subscriptionCreateBody.billingCycleAnchorConfiguration
                couponRedemptionCode = subscriptionCreateBody.couponRedemptionCode
                creditsOverageRate = subscriptionCreateBody.creditsOverageRate
                customerId = subscriptionCreateBody.customerId
                defaultInvoiceMemo = subscriptionCreateBody.defaultInvoiceMemo
                endDate = subscriptionCreateBody.endDate
                externalCustomerId = subscriptionCreateBody.externalCustomerId
                externalMarketplace = subscriptionCreateBody.externalMarketplace
                externalMarketplaceReportingId =
                    subscriptionCreateBody.externalMarketplaceReportingId
                externalPlanId = subscriptionCreateBody.externalPlanId
                filter = subscriptionCreateBody.filter
                initialPhaseOrder = subscriptionCreateBody.initialPhaseOrder
                invoicingThreshold = subscriptionCreateBody.invoicingThreshold
                metadata = subscriptionCreateBody.metadata
                netTerms = subscriptionCreateBody.netTerms
                perCreditOverageAmount = subscriptionCreateBody.perCreditOverageAmount
                planId = subscriptionCreateBody.planId
                planVersionNumber = subscriptionCreateBody.planVersionNumber
                priceOverrides = subscriptionCreateBody.priceOverrides?.toMutableList()
                removeAdjustments = subscriptionCreateBody.removeAdjustments?.toMutableList()
                removePrices = subscriptionCreateBody.removePrices?.toMutableList()
                replaceAdjustments = subscriptionCreateBody.replaceAdjustments?.toMutableList()
                replacePrices = subscriptionCreateBody.replacePrices?.toMutableList()
                startDate = subscriptionCreateBody.startDate
                trialDurationDays = subscriptionCreateBody.trialDurationDays
                additionalProperties = subscriptionCreateBody.additionalProperties.toMutableMap()
            }

            /**
             * Additional adjustments to be added to the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun addAdjustments(addAdjustments: List<AddAdjustment>?) = apply {
                this.addAdjustments = addAdjustments?.toMutableList()
            }

            /**
             * Additional adjustments to be added to the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun addAdjustments(addAdjustments: Optional<List<AddAdjustment>>) =
                addAdjustments(addAdjustments.orElse(null))

            /**
             * Additional adjustments to be added to the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun addAddAdjustment(addAdjustment: AddAdjustment) = apply {
                addAdjustments = (addAdjustments ?: mutableListOf()).apply { add(addAdjustment) }
            }

            /**
             * Additional prices to be added to the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun addPrices(addPrices: List<AddPrice>?) = apply {
                this.addPrices = addPrices?.toMutableList()
            }

            /**
             * Additional prices to be added to the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun addPrices(addPrices: Optional<List<AddPrice>>) = addPrices(addPrices.orElse(null))

            /**
             * Additional prices to be added to the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun addAddPrice(addPrice: AddPrice) = apply {
                addPrices = (addPrices ?: mutableListOf()).apply { add(addPrice) }
            }

            fun alignBillingWithSubscriptionStartDate(
                alignBillingWithSubscriptionStartDate: Boolean?
            ) = apply {
                this.alignBillingWithSubscriptionStartDate = alignBillingWithSubscriptionStartDate
            }

            fun alignBillingWithSubscriptionStartDate(
                alignBillingWithSubscriptionStartDate: Boolean
            ) =
                alignBillingWithSubscriptionStartDate(
                    alignBillingWithSubscriptionStartDate as Boolean?
                )

            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun alignBillingWithSubscriptionStartDate(
                alignBillingWithSubscriptionStartDate: Optional<Boolean>
            ) =
                alignBillingWithSubscriptionStartDate(
                    alignBillingWithSubscriptionStartDate.orElse(null) as Boolean?
                )

            /**
             * Determines whether issued invoices for this subscription will automatically be
             * charged with the saved payment method on the due date. If not specified, this
             * defaults to the behavior configured for this customer.
             */
            fun autoCollection(autoCollection: Boolean?) = apply {
                this.autoCollection = autoCollection
            }

            /**
             * Determines whether issued invoices for this subscription will automatically be
             * charged with the saved payment method on the due date. If not specified, this
             * defaults to the behavior configured for this customer.
             */
            fun autoCollection(autoCollection: Boolean) = autoCollection(autoCollection as Boolean?)

            /**
             * Determines whether issued invoices for this subscription will automatically be
             * charged with the saved payment method on the due date. If not specified, this
             * defaults to the behavior configured for this customer.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun autoCollection(autoCollection: Optional<Boolean>) =
                autoCollection(autoCollection.orElse(null) as Boolean?)

            fun awsRegion(awsRegion: String?) = apply { this.awsRegion = awsRegion }

            fun awsRegion(awsRegion: Optional<String>) = awsRegion(awsRegion.orElse(null))

            fun billingCycleAnchorConfiguration(
                billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration?
            ) = apply { this.billingCycleAnchorConfiguration = billingCycleAnchorConfiguration }

            fun billingCycleAnchorConfiguration(
                billingCycleAnchorConfiguration: Optional<BillingCycleAnchorConfiguration>
            ) = billingCycleAnchorConfiguration(billingCycleAnchorConfiguration.orElse(null))

            /**
             * Redemption code to be used for this subscription. If the coupon cannot be found by
             * its redemption code, or cannot be redeemed, an error response will be returned and
             * the subscription creation or plan change will not be scheduled.
             */
            fun couponRedemptionCode(couponRedemptionCode: String?) = apply {
                this.couponRedemptionCode = couponRedemptionCode
            }

            /**
             * Redemption code to be used for this subscription. If the coupon cannot be found by
             * its redemption code, or cannot be redeemed, an error response will be returned and
             * the subscription creation or plan change will not be scheduled.
             */
            fun couponRedemptionCode(couponRedemptionCode: Optional<String>) =
                couponRedemptionCode(couponRedemptionCode.orElse(null))

            fun creditsOverageRate(creditsOverageRate: Double?) = apply {
                this.creditsOverageRate = creditsOverageRate
            }

            fun creditsOverageRate(creditsOverageRate: Double) =
                creditsOverageRate(creditsOverageRate as Double?)

            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun creditsOverageRate(creditsOverageRate: Optional<Double>) =
                creditsOverageRate(creditsOverageRate.orElse(null) as Double?)

            fun customerId(customerId: String?) = apply { this.customerId = customerId }

            fun customerId(customerId: Optional<String>) = customerId(customerId.orElse(null))

            /**
             * Determines the default memo on this subscription's invoices. Note that if this is not
             * provided, it is determined by the plan configuration.
             */
            fun defaultInvoiceMemo(defaultInvoiceMemo: String?) = apply {
                this.defaultInvoiceMemo = defaultInvoiceMemo
            }

            /**
             * Determines the default memo on this subscription's invoices. Note that if this is not
             * provided, it is determined by the plan configuration.
             */
            fun defaultInvoiceMemo(defaultInvoiceMemo: Optional<String>) =
                defaultInvoiceMemo(defaultInvoiceMemo.orElse(null))

            fun endDate(endDate: OffsetDateTime?) = apply { this.endDate = endDate }

            fun endDate(endDate: Optional<OffsetDateTime>) = endDate(endDate.orElse(null))

            fun externalCustomerId(externalCustomerId: String?) = apply {
                this.externalCustomerId = externalCustomerId
            }

            fun externalCustomerId(externalCustomerId: Optional<String>) =
                externalCustomerId(externalCustomerId.orElse(null))

            fun externalMarketplace(externalMarketplace: ExternalMarketplace?) = apply {
                this.externalMarketplace = externalMarketplace
            }

            fun externalMarketplace(externalMarketplace: Optional<ExternalMarketplace>) =
                externalMarketplace(externalMarketplace.orElse(null))

            fun externalMarketplaceReportingId(externalMarketplaceReportingId: String?) = apply {
                this.externalMarketplaceReportingId = externalMarketplaceReportingId
            }

            fun externalMarketplaceReportingId(externalMarketplaceReportingId: Optional<String>) =
                externalMarketplaceReportingId(externalMarketplaceReportingId.orElse(null))

            /**
             * The external_plan_id of the plan that the given subscription should be switched to.
             * Note that either this property or `plan_id` must be specified.
             */
            fun externalPlanId(externalPlanId: String?) = apply {
                this.externalPlanId = externalPlanId
            }

            /**
             * The external_plan_id of the plan that the given subscription should be switched to.
             * Note that either this property or `plan_id` must be specified.
             */
            fun externalPlanId(externalPlanId: Optional<String>) =
                externalPlanId(externalPlanId.orElse(null))

            /**
             * An additional filter to apply to usage queries. This filter must be expressed as a
             * boolean
             * [computed property](../guides/extensibility/advanced-metrics#computed-properties). If
             * null, usage queries will not include any additional filter.
             */
            fun filter(filter: String?) = apply { this.filter = filter }

            /**
             * An additional filter to apply to usage queries. This filter must be expressed as a
             * boolean
             * [computed property](../guides/extensibility/advanced-metrics#computed-properties). If
             * null, usage queries will not include any additional filter.
             */
            fun filter(filter: Optional<String>) = filter(filter.orElse(null))

            /** The phase of the plan to start with */
            fun initialPhaseOrder(initialPhaseOrder: Long?) = apply {
                this.initialPhaseOrder = initialPhaseOrder
            }

            /** The phase of the plan to start with */
            fun initialPhaseOrder(initialPhaseOrder: Long) =
                initialPhaseOrder(initialPhaseOrder as Long?)

            /** The phase of the plan to start with */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun initialPhaseOrder(initialPhaseOrder: Optional<Long>) =
                initialPhaseOrder(initialPhaseOrder.orElse(null) as Long?)

            /**
             * When this subscription's accrued usage reaches this threshold, an invoice will be
             * issued for the subscription. If not specified, invoices will only be issued at the
             * end of the billing period.
             */
            fun invoicingThreshold(invoicingThreshold: String?) = apply {
                this.invoicingThreshold = invoicingThreshold
            }

            /**
             * When this subscription's accrued usage reaches this threshold, an invoice will be
             * issued for the subscription. If not specified, invoices will only be issued at the
             * end of the billing period.
             */
            fun invoicingThreshold(invoicingThreshold: Optional<String>) =
                invoicingThreshold(invoicingThreshold.orElse(null))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0. If not
             * provided, this defaults to the value specified in the plan.
             */
            fun netTerms(netTerms: Long?) = apply { this.netTerms = netTerms }

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0. If not
             * provided, this defaults to the value specified in the plan.
             */
            fun netTerms(netTerms: Long) = netTerms(netTerms as Long?)

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0. If not
             * provided, this defaults to the value specified in the plan.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun netTerms(netTerms: Optional<Long>) = netTerms(netTerms.orElse(null) as Long?)

            fun perCreditOverageAmount(perCreditOverageAmount: Double?) = apply {
                this.perCreditOverageAmount = perCreditOverageAmount
            }

            fun perCreditOverageAmount(perCreditOverageAmount: Double) =
                perCreditOverageAmount(perCreditOverageAmount as Double?)

            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun perCreditOverageAmount(perCreditOverageAmount: Optional<Double>) =
                perCreditOverageAmount(perCreditOverageAmount.orElse(null) as Double?)

            /**
             * The plan that the given subscription should be switched to. Note that either this
             * property or `external_plan_id` must be specified.
             */
            fun planId(planId: String?) = apply { this.planId = planId }

            /**
             * The plan that the given subscription should be switched to. Note that either this
             * property or `external_plan_id` must be specified.
             */
            fun planId(planId: Optional<String>) = planId(planId.orElse(null))

            /**
             * Specifies which version of the plan to subscribe to. If null, the default version
             * will be used.
             */
            fun planVersionNumber(planVersionNumber: Long?) = apply {
                this.planVersionNumber = planVersionNumber
            }

            /**
             * Specifies which version of the plan to subscribe to. If null, the default version
             * will be used.
             */
            fun planVersionNumber(planVersionNumber: Long) =
                planVersionNumber(planVersionNumber as Long?)

            /**
             * Specifies which version of the plan to subscribe to. If null, the default version
             * will be used.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun planVersionNumber(planVersionNumber: Optional<Long>) =
                planVersionNumber(planVersionNumber.orElse(null) as Long?)

            /** Optionally provide a list of overrides for prices on the plan */
            fun priceOverrides(priceOverrides: List<JsonValue>?) = apply {
                this.priceOverrides = priceOverrides?.toMutableList()
            }

            /** Optionally provide a list of overrides for prices on the plan */
            fun priceOverrides(priceOverrides: Optional<List<JsonValue>>) =
                priceOverrides(priceOverrides.orElse(null))

            /** Optionally provide a list of overrides for prices on the plan */
            fun addPriceOverride(priceOverride: JsonValue) = apply {
                priceOverrides = (priceOverrides ?: mutableListOf()).apply { add(priceOverride) }
            }

            /**
             * Plan adjustments to be removed from the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun removeAdjustments(removeAdjustments: List<RemoveAdjustment>?) = apply {
                this.removeAdjustments = removeAdjustments?.toMutableList()
            }

            /**
             * Plan adjustments to be removed from the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun removeAdjustments(removeAdjustments: Optional<List<RemoveAdjustment>>) =
                removeAdjustments(removeAdjustments.orElse(null))

            /**
             * Plan adjustments to be removed from the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun addRemoveAdjustment(removeAdjustment: RemoveAdjustment) = apply {
                removeAdjustments =
                    (removeAdjustments ?: mutableListOf()).apply { add(removeAdjustment) }
            }

            /**
             * Plan prices to be removed from the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun removePrices(removePrices: List<RemovePrice>?) = apply {
                this.removePrices = removePrices?.toMutableList()
            }

            /**
             * Plan prices to be removed from the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun removePrices(removePrices: Optional<List<RemovePrice>>) =
                removePrices(removePrices.orElse(null))

            /**
             * Plan prices to be removed from the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun addRemovePrice(removePrice: RemovePrice) = apply {
                removePrices = (removePrices ?: mutableListOf()).apply { add(removePrice) }
            }

            /**
             * Plan adjustments to be replaced with additional adjustments on the subscription.
             * (Only available for accounts that have migrated off of legacy subscription overrides)
             */
            fun replaceAdjustments(replaceAdjustments: List<ReplaceAdjustment>?) = apply {
                this.replaceAdjustments = replaceAdjustments?.toMutableList()
            }

            /**
             * Plan adjustments to be replaced with additional adjustments on the subscription.
             * (Only available for accounts that have migrated off of legacy subscription overrides)
             */
            fun replaceAdjustments(replaceAdjustments: Optional<List<ReplaceAdjustment>>) =
                replaceAdjustments(replaceAdjustments.orElse(null))

            /**
             * Plan adjustments to be replaced with additional adjustments on the subscription.
             * (Only available for accounts that have migrated off of legacy subscription overrides)
             */
            fun addReplaceAdjustment(replaceAdjustment: ReplaceAdjustment) = apply {
                replaceAdjustments =
                    (replaceAdjustments ?: mutableListOf()).apply { add(replaceAdjustment) }
            }

            /**
             * Plan prices to be replaced with additional prices on the subscription. (Only
             * available for accounts that have migrated off of legacy subscription overrides)
             */
            fun replacePrices(replacePrices: List<ReplacePrice>?) = apply {
                this.replacePrices = replacePrices?.toMutableList()
            }

            /**
             * Plan prices to be replaced with additional prices on the subscription. (Only
             * available for accounts that have migrated off of legacy subscription overrides)
             */
            fun replacePrices(replacePrices: Optional<List<ReplacePrice>>) =
                replacePrices(replacePrices.orElse(null))

            /**
             * Plan prices to be replaced with additional prices on the subscription. (Only
             * available for accounts that have migrated off of legacy subscription overrides)
             */
            fun addReplacePrice(replacePrice: ReplacePrice) = apply {
                replacePrices = (replacePrices ?: mutableListOf()).apply { add(replacePrice) }
            }

            fun startDate(startDate: OffsetDateTime?) = apply { this.startDate = startDate }

            fun startDate(startDate: Optional<OffsetDateTime>) = startDate(startDate.orElse(null))

            /**
             * The duration of the trial period in days. If not provided, this defaults to the value
             * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
             */
            fun trialDurationDays(trialDurationDays: Long?) = apply {
                this.trialDurationDays = trialDurationDays
            }

            /**
             * The duration of the trial period in days. If not provided, this defaults to the value
             * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
             */
            fun trialDurationDays(trialDurationDays: Long) =
                trialDurationDays(trialDurationDays as Long?)

            /**
             * The duration of the trial period in days. If not provided, this defaults to the value
             * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun trialDurationDays(trialDurationDays: Optional<Long>) =
                trialDurationDays(trialDurationDays.orElse(null) as Long?)

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): SubscriptionCreateBody =
                SubscriptionCreateBody(
                    addAdjustments?.toImmutable(),
                    addPrices?.toImmutable(),
                    alignBillingWithSubscriptionStartDate,
                    autoCollection,
                    awsRegion,
                    billingCycleAnchorConfiguration,
                    couponRedemptionCode,
                    creditsOverageRate,
                    customerId,
                    defaultInvoiceMemo,
                    endDate,
                    externalCustomerId,
                    externalMarketplace,
                    externalMarketplaceReportingId,
                    externalPlanId,
                    filter,
                    initialPhaseOrder,
                    invoicingThreshold,
                    metadata,
                    netTerms,
                    perCreditOverageAmount,
                    planId,
                    planVersionNumber,
                    priceOverrides?.toImmutable(),
                    removeAdjustments?.toImmutable(),
                    removePrices?.toImmutable(),
                    replaceAdjustments?.toImmutable(),
                    replacePrices?.toImmutable(),
                    startDate,
                    trialDurationDays,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is SubscriptionCreateBody && addAdjustments == other.addAdjustments && addPrices == other.addPrices && alignBillingWithSubscriptionStartDate == other.alignBillingWithSubscriptionStartDate && autoCollection == other.autoCollection && awsRegion == other.awsRegion && billingCycleAnchorConfiguration == other.billingCycleAnchorConfiguration && couponRedemptionCode == other.couponRedemptionCode && creditsOverageRate == other.creditsOverageRate && customerId == other.customerId && defaultInvoiceMemo == other.defaultInvoiceMemo && endDate == other.endDate && externalCustomerId == other.externalCustomerId && externalMarketplace == other.externalMarketplace && externalMarketplaceReportingId == other.externalMarketplaceReportingId && externalPlanId == other.externalPlanId && filter == other.filter && initialPhaseOrder == other.initialPhaseOrder && invoicingThreshold == other.invoicingThreshold && metadata == other.metadata && netTerms == other.netTerms && perCreditOverageAmount == other.perCreditOverageAmount && planId == other.planId && planVersionNumber == other.planVersionNumber && priceOverrides == other.priceOverrides && removeAdjustments == other.removeAdjustments && removePrices == other.removePrices && replaceAdjustments == other.replaceAdjustments && replacePrices == other.replacePrices && startDate == other.startDate && trialDurationDays == other.trialDurationDays && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(addAdjustments, addPrices, alignBillingWithSubscriptionStartDate, autoCollection, awsRegion, billingCycleAnchorConfiguration, couponRedemptionCode, creditsOverageRate, customerId, defaultInvoiceMemo, endDate, externalCustomerId, externalMarketplace, externalMarketplaceReportingId, externalPlanId, filter, initialPhaseOrder, invoicingThreshold, metadata, netTerms, perCreditOverageAmount, planId, planVersionNumber, priceOverrides, removeAdjustments, removePrices, replaceAdjustments, replacePrices, startDate, trialDurationDays, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "SubscriptionCreateBody{addAdjustments=$addAdjustments, addPrices=$addPrices, alignBillingWithSubscriptionStartDate=$alignBillingWithSubscriptionStartDate, autoCollection=$autoCollection, awsRegion=$awsRegion, billingCycleAnchorConfiguration=$billingCycleAnchorConfiguration, couponRedemptionCode=$couponRedemptionCode, creditsOverageRate=$creditsOverageRate, customerId=$customerId, defaultInvoiceMemo=$defaultInvoiceMemo, endDate=$endDate, externalCustomerId=$externalCustomerId, externalMarketplace=$externalMarketplace, externalMarketplaceReportingId=$externalMarketplaceReportingId, externalPlanId=$externalPlanId, filter=$filter, initialPhaseOrder=$initialPhaseOrder, invoicingThreshold=$invoicingThreshold, metadata=$metadata, netTerms=$netTerms, perCreditOverageAmount=$perCreditOverageAmount, planId=$planId, planVersionNumber=$planVersionNumber, priceOverrides=$priceOverrides, removeAdjustments=$removeAdjustments, removePrices=$removePrices, replaceAdjustments=$replaceAdjustments, replacePrices=$replacePrices, startDate=$startDate, trialDurationDays=$trialDurationDays, additionalProperties=$additionalProperties}"
    }

    fun toBuilder() = Builder().from(this)

    companion object {

        @JvmStatic fun builder() = Builder()
    }

    @NoAutoDetect
    class Builder {

        private var body: SubscriptionCreateBody.Builder = SubscriptionCreateBody.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(subscriptionCreateParams: SubscriptionCreateParams) = apply {
            body = subscriptionCreateParams.body.toBuilder()
            additionalHeaders = subscriptionCreateParams.additionalHeaders.toBuilder()
            additionalQueryParams = subscriptionCreateParams.additionalQueryParams.toBuilder()
        }

        /**
         * Additional adjustments to be added to the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun addAdjustments(addAdjustments: List<AddAdjustment>?) = apply {
            body.addAdjustments(addAdjustments)
        }

        /**
         * Additional adjustments to be added to the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun addAdjustments(addAdjustments: Optional<List<AddAdjustment>>) =
            addAdjustments(addAdjustments.orElse(null))

        /**
         * Additional adjustments to be added to the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun addAddAdjustment(addAdjustment: AddAdjustment) = apply {
            body.addAddAdjustment(addAdjustment)
        }

        /**
         * Additional prices to be added to the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun addPrices(addPrices: List<AddPrice>?) = apply { body.addPrices(addPrices) }

        /**
         * Additional prices to be added to the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun addPrices(addPrices: Optional<List<AddPrice>>) = addPrices(addPrices.orElse(null))

        /**
         * Additional prices to be added to the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun addAddPrice(addPrice: AddPrice) = apply { body.addAddPrice(addPrice) }

        fun alignBillingWithSubscriptionStartDate(alignBillingWithSubscriptionStartDate: Boolean?) =
            apply {
                body.alignBillingWithSubscriptionStartDate(alignBillingWithSubscriptionStartDate)
            }

        fun alignBillingWithSubscriptionStartDate(alignBillingWithSubscriptionStartDate: Boolean) =
            alignBillingWithSubscriptionStartDate(alignBillingWithSubscriptionStartDate as Boolean?)

        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun alignBillingWithSubscriptionStartDate(
            alignBillingWithSubscriptionStartDate: Optional<Boolean>
        ) =
            alignBillingWithSubscriptionStartDate(
                alignBillingWithSubscriptionStartDate.orElse(null) as Boolean?
            )

        /**
         * Determines whether issued invoices for this subscription will automatically be charged
         * with the saved payment method on the due date. If not specified, this defaults to the
         * behavior configured for this customer.
         */
        fun autoCollection(autoCollection: Boolean?) = apply { body.autoCollection(autoCollection) }

        /**
         * Determines whether issued invoices for this subscription will automatically be charged
         * with the saved payment method on the due date. If not specified, this defaults to the
         * behavior configured for this customer.
         */
        fun autoCollection(autoCollection: Boolean) = autoCollection(autoCollection as Boolean?)

        /**
         * Determines whether issued invoices for this subscription will automatically be charged
         * with the saved payment method on the due date. If not specified, this defaults to the
         * behavior configured for this customer.
         */
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun autoCollection(autoCollection: Optional<Boolean>) =
            autoCollection(autoCollection.orElse(null) as Boolean?)

        fun awsRegion(awsRegion: String?) = apply { body.awsRegion(awsRegion) }

        fun awsRegion(awsRegion: Optional<String>) = awsRegion(awsRegion.orElse(null))

        fun billingCycleAnchorConfiguration(
            billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration?
        ) = apply { body.billingCycleAnchorConfiguration(billingCycleAnchorConfiguration) }

        fun billingCycleAnchorConfiguration(
            billingCycleAnchorConfiguration: Optional<BillingCycleAnchorConfiguration>
        ) = billingCycleAnchorConfiguration(billingCycleAnchorConfiguration.orElse(null))

        /**
         * Redemption code to be used for this subscription. If the coupon cannot be found by its
         * redemption code, or cannot be redeemed, an error response will be returned and the
         * subscription creation or plan change will not be scheduled.
         */
        fun couponRedemptionCode(couponRedemptionCode: String?) = apply {
            body.couponRedemptionCode(couponRedemptionCode)
        }

        /**
         * Redemption code to be used for this subscription. If the coupon cannot be found by its
         * redemption code, or cannot be redeemed, an error response will be returned and the
         * subscription creation or plan change will not be scheduled.
         */
        fun couponRedemptionCode(couponRedemptionCode: Optional<String>) =
            couponRedemptionCode(couponRedemptionCode.orElse(null))

        fun creditsOverageRate(creditsOverageRate: Double?) = apply {
            body.creditsOverageRate(creditsOverageRate)
        }

        fun creditsOverageRate(creditsOverageRate: Double) =
            creditsOverageRate(creditsOverageRate as Double?)

        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun creditsOverageRate(creditsOverageRate: Optional<Double>) =
            creditsOverageRate(creditsOverageRate.orElse(null) as Double?)

        fun customerId(customerId: String?) = apply { body.customerId(customerId) }

        fun customerId(customerId: Optional<String>) = customerId(customerId.orElse(null))

        /**
         * Determines the default memo on this subscription's invoices. Note that if this is not
         * provided, it is determined by the plan configuration.
         */
        fun defaultInvoiceMemo(defaultInvoiceMemo: String?) = apply {
            body.defaultInvoiceMemo(defaultInvoiceMemo)
        }

        /**
         * Determines the default memo on this subscription's invoices. Note that if this is not
         * provided, it is determined by the plan configuration.
         */
        fun defaultInvoiceMemo(defaultInvoiceMemo: Optional<String>) =
            defaultInvoiceMemo(defaultInvoiceMemo.orElse(null))

        fun endDate(endDate: OffsetDateTime?) = apply { body.endDate(endDate) }

        fun endDate(endDate: Optional<OffsetDateTime>) = endDate(endDate.orElse(null))

        fun externalCustomerId(externalCustomerId: String?) = apply {
            body.externalCustomerId(externalCustomerId)
        }

        fun externalCustomerId(externalCustomerId: Optional<String>) =
            externalCustomerId(externalCustomerId.orElse(null))

        fun externalMarketplace(externalMarketplace: ExternalMarketplace?) = apply {
            body.externalMarketplace(externalMarketplace)
        }

        fun externalMarketplace(externalMarketplace: Optional<ExternalMarketplace>) =
            externalMarketplace(externalMarketplace.orElse(null))

        fun externalMarketplaceReportingId(externalMarketplaceReportingId: String?) = apply {
            body.externalMarketplaceReportingId(externalMarketplaceReportingId)
        }

        fun externalMarketplaceReportingId(externalMarketplaceReportingId: Optional<String>) =
            externalMarketplaceReportingId(externalMarketplaceReportingId.orElse(null))

        /**
         * The external_plan_id of the plan that the given subscription should be switched to. Note
         * that either this property or `plan_id` must be specified.
         */
        fun externalPlanId(externalPlanId: String?) = apply { body.externalPlanId(externalPlanId) }

        /**
         * The external_plan_id of the plan that the given subscription should be switched to. Note
         * that either this property or `plan_id` must be specified.
         */
        fun externalPlanId(externalPlanId: Optional<String>) =
            externalPlanId(externalPlanId.orElse(null))

        /**
         * An additional filter to apply to usage queries. This filter must be expressed as a
         * boolean
         * [computed property](../guides/extensibility/advanced-metrics#computed-properties). If
         * null, usage queries will not include any additional filter.
         */
        fun filter(filter: String?) = apply { body.filter(filter) }

        /**
         * An additional filter to apply to usage queries. This filter must be expressed as a
         * boolean
         * [computed property](../guides/extensibility/advanced-metrics#computed-properties). If
         * null, usage queries will not include any additional filter.
         */
        fun filter(filter: Optional<String>) = filter(filter.orElse(null))

        /** The phase of the plan to start with */
        fun initialPhaseOrder(initialPhaseOrder: Long?) = apply {
            body.initialPhaseOrder(initialPhaseOrder)
        }

        /** The phase of the plan to start with */
        fun initialPhaseOrder(initialPhaseOrder: Long) =
            initialPhaseOrder(initialPhaseOrder as Long?)

        /** The phase of the plan to start with */
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun initialPhaseOrder(initialPhaseOrder: Optional<Long>) =
            initialPhaseOrder(initialPhaseOrder.orElse(null) as Long?)

        /**
         * When this subscription's accrued usage reaches this threshold, an invoice will be issued
         * for the subscription. If not specified, invoices will only be issued at the end of the
         * billing period.
         */
        fun invoicingThreshold(invoicingThreshold: String?) = apply {
            body.invoicingThreshold(invoicingThreshold)
        }

        /**
         * When this subscription's accrued usage reaches this threshold, an invoice will be issued
         * for the subscription. If not specified, invoices will only be issued at the end of the
         * billing period.
         */
        fun invoicingThreshold(invoicingThreshold: Optional<String>) =
            invoicingThreshold(invoicingThreshold.orElse(null))

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed by
         * setting the value to `null`, and the entire metadata mapping can be cleared by setting
         * `metadata` to `null`.
         */
        fun metadata(metadata: Metadata?) = apply { body.metadata(metadata) }

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed by
         * setting the value to `null`, and the entire metadata mapping can be cleared by setting
         * `metadata` to `null`.
         */
        fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0. If not
         * provided, this defaults to the value specified in the plan.
         */
        fun netTerms(netTerms: Long?) = apply { body.netTerms(netTerms) }

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0. If not
         * provided, this defaults to the value specified in the plan.
         */
        fun netTerms(netTerms: Long) = netTerms(netTerms as Long?)

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0. If not
         * provided, this defaults to the value specified in the plan.
         */
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun netTerms(netTerms: Optional<Long>) = netTerms(netTerms.orElse(null) as Long?)

        fun perCreditOverageAmount(perCreditOverageAmount: Double?) = apply {
            body.perCreditOverageAmount(perCreditOverageAmount)
        }

        fun perCreditOverageAmount(perCreditOverageAmount: Double) =
            perCreditOverageAmount(perCreditOverageAmount as Double?)

        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun perCreditOverageAmount(perCreditOverageAmount: Optional<Double>) =
            perCreditOverageAmount(perCreditOverageAmount.orElse(null) as Double?)

        /**
         * The plan that the given subscription should be switched to. Note that either this
         * property or `external_plan_id` must be specified.
         */
        fun planId(planId: String?) = apply { body.planId(planId) }

        /**
         * The plan that the given subscription should be switched to. Note that either this
         * property or `external_plan_id` must be specified.
         */
        fun planId(planId: Optional<String>) = planId(planId.orElse(null))

        /**
         * Specifies which version of the plan to subscribe to. If null, the default version will be
         * used.
         */
        fun planVersionNumber(planVersionNumber: Long?) = apply {
            body.planVersionNumber(planVersionNumber)
        }

        /**
         * Specifies which version of the plan to subscribe to. If null, the default version will be
         * used.
         */
        fun planVersionNumber(planVersionNumber: Long) =
            planVersionNumber(planVersionNumber as Long?)

        /**
         * Specifies which version of the plan to subscribe to. If null, the default version will be
         * used.
         */
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun planVersionNumber(planVersionNumber: Optional<Long>) =
            planVersionNumber(planVersionNumber.orElse(null) as Long?)

        /** Optionally provide a list of overrides for prices on the plan */
        fun priceOverrides(priceOverrides: List<JsonValue>?) = apply {
            body.priceOverrides(priceOverrides)
        }

        /** Optionally provide a list of overrides for prices on the plan */
        fun priceOverrides(priceOverrides: Optional<List<JsonValue>>) =
            priceOverrides(priceOverrides.orElse(null))

        /** Optionally provide a list of overrides for prices on the plan */
        fun addPriceOverride(priceOverride: JsonValue) = apply {
            body.addPriceOverride(priceOverride)
        }

        /**
         * Plan adjustments to be removed from the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun removeAdjustments(removeAdjustments: List<RemoveAdjustment>?) = apply {
            body.removeAdjustments(removeAdjustments)
        }

        /**
         * Plan adjustments to be removed from the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun removeAdjustments(removeAdjustments: Optional<List<RemoveAdjustment>>) =
            removeAdjustments(removeAdjustments.orElse(null))

        /**
         * Plan adjustments to be removed from the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun addRemoveAdjustment(removeAdjustment: RemoveAdjustment) = apply {
            body.addRemoveAdjustment(removeAdjustment)
        }

        /**
         * Plan prices to be removed from the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun removePrices(removePrices: List<RemovePrice>?) = apply {
            body.removePrices(removePrices)
        }

        /**
         * Plan prices to be removed from the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun removePrices(removePrices: Optional<List<RemovePrice>>) =
            removePrices(removePrices.orElse(null))

        /**
         * Plan prices to be removed from the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun addRemovePrice(removePrice: RemovePrice) = apply { body.addRemovePrice(removePrice) }

        /**
         * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
         * available for accounts that have migrated off of legacy subscription overrides)
         */
        fun replaceAdjustments(replaceAdjustments: List<ReplaceAdjustment>?) = apply {
            body.replaceAdjustments(replaceAdjustments)
        }

        /**
         * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
         * available for accounts that have migrated off of legacy subscription overrides)
         */
        fun replaceAdjustments(replaceAdjustments: Optional<List<ReplaceAdjustment>>) =
            replaceAdjustments(replaceAdjustments.orElse(null))

        /**
         * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
         * available for accounts that have migrated off of legacy subscription overrides)
         */
        fun addReplaceAdjustment(replaceAdjustment: ReplaceAdjustment) = apply {
            body.addReplaceAdjustment(replaceAdjustment)
        }

        /**
         * Plan prices to be replaced with additional prices on the subscription. (Only available
         * for accounts that have migrated off of legacy subscription overrides)
         */
        fun replacePrices(replacePrices: List<ReplacePrice>?) = apply {
            body.replacePrices(replacePrices)
        }

        /**
         * Plan prices to be replaced with additional prices on the subscription. (Only available
         * for accounts that have migrated off of legacy subscription overrides)
         */
        fun replacePrices(replacePrices: Optional<List<ReplacePrice>>) =
            replacePrices(replacePrices.orElse(null))

        /**
         * Plan prices to be replaced with additional prices on the subscription. (Only available
         * for accounts that have migrated off of legacy subscription overrides)
         */
        fun addReplacePrice(replacePrice: ReplacePrice) = apply {
            body.addReplacePrice(replacePrice)
        }

        fun startDate(startDate: OffsetDateTime?) = apply { body.startDate(startDate) }

        fun startDate(startDate: Optional<OffsetDateTime>) = startDate(startDate.orElse(null))

        /**
         * The duration of the trial period in days. If not provided, this defaults to the value
         * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
         */
        fun trialDurationDays(trialDurationDays: Long?) = apply {
            body.trialDurationDays(trialDurationDays)
        }

        /**
         * The duration of the trial period in days. If not provided, this defaults to the value
         * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
         */
        fun trialDurationDays(trialDurationDays: Long) =
            trialDurationDays(trialDurationDays as Long?)

        /**
         * The duration of the trial period in days. If not provided, this defaults to the value
         * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
         */
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun trialDurationDays(trialDurationDays: Optional<Long>) =
            trialDurationDays(trialDurationDays.orElse(null) as Long?)

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceAdditionalHeaders(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeAdditionalHeaders(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAllAdditionalHeaders(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAllAdditionalQueryParams(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            body.additionalProperties(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            body.putAdditionalProperty(key, value)
        }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAllAdditionalProperties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) = apply { body.removeAdditionalProperty(key) }

        fun removeAllAdditionalBodyProperties(keys: Set<String>) = apply {
            body.removeAllAdditionalProperties(keys)
        }

        fun build(): SubscriptionCreateParams =
            SubscriptionCreateParams(
                body.build(),
                additionalHeaders.build(),
                additionalQueryParams.build(),
            )
    }

    @NoAutoDetect
    class AddAdjustment
    @JsonCreator
    private constructor(
        @JsonProperty("adjustment") private val adjustment: Adjustment,
        @JsonProperty("end_date") private val endDate: OffsetDateTime?,
        @JsonProperty("plan_phase_order") private val planPhaseOrder: Long?,
        @JsonProperty("start_date") private val startDate: OffsetDateTime?,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonProperty("adjustment") fun adjustment(): Adjustment = adjustment

        /**
         * The end date of the adjustment interval. This is the date that the adjustment will stop
         * affecting prices on the subscription. If null, the adjustment will start when the phase
         * or subscription starts.
         */
        @JsonProperty("end_date")
        fun endDate(): Optional<OffsetDateTime> = Optional.ofNullable(endDate)

        /** The phase to add this adjustment to. */
        @JsonProperty("plan_phase_order")
        fun planPhaseOrder(): Optional<Long> = Optional.ofNullable(planPhaseOrder)

        /**
         * The start date of the adjustment interval. This is the date that the adjustment will
         * start affecting prices on the subscription. If null, the adjustment will start when the
         * phase or subscription starts.
         */
        @JsonProperty("start_date")
        fun startDate(): Optional<OffsetDateTime> = Optional.ofNullable(startDate)

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var adjustment: Adjustment? = null
            private var endDate: OffsetDateTime? = null
            private var planPhaseOrder: Long? = null
            private var startDate: OffsetDateTime? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(addAdjustment: AddAdjustment) = apply {
                adjustment = addAdjustment.adjustment
                endDate = addAdjustment.endDate
                planPhaseOrder = addAdjustment.planPhaseOrder
                startDate = addAdjustment.startDate
                additionalProperties = addAdjustment.additionalProperties.toMutableMap()
            }

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(adjustment: Adjustment) = apply { this.adjustment = adjustment }

            fun adjustment(newPercentageDiscount: Adjustment.NewPercentageDiscount) = apply {
                this.adjustment = Adjustment.ofNewPercentageDiscount(newPercentageDiscount)
            }

            fun adjustment(newUsageDiscount: Adjustment.NewUsageDiscount) = apply {
                this.adjustment = Adjustment.ofNewUsageDiscount(newUsageDiscount)
            }

            fun adjustment(newAmountDiscount: Adjustment.NewAmountDiscount) = apply {
                this.adjustment = Adjustment.ofNewAmountDiscount(newAmountDiscount)
            }

            fun adjustment(newMinimum: Adjustment.NewMinimum) = apply {
                this.adjustment = Adjustment.ofNewMinimum(newMinimum)
            }

            fun adjustment(newMaximum: Adjustment.NewMaximum) = apply {
                this.adjustment = Adjustment.ofNewMaximum(newMaximum)
            }

            /**
             * The end date of the adjustment interval. This is the date that the adjustment will
             * stop affecting prices on the subscription. If null, the adjustment will start when
             * the phase or subscription starts.
             */
            fun endDate(endDate: OffsetDateTime?) = apply { this.endDate = endDate }

            /**
             * The end date of the adjustment interval. This is the date that the adjustment will
             * stop affecting prices on the subscription. If null, the adjustment will start when
             * the phase or subscription starts.
             */
            fun endDate(endDate: Optional<OffsetDateTime>) = endDate(endDate.orElse(null))

            /** The phase to add this adjustment to. */
            fun planPhaseOrder(planPhaseOrder: Long?) = apply {
                this.planPhaseOrder = planPhaseOrder
            }

            /** The phase to add this adjustment to. */
            fun planPhaseOrder(planPhaseOrder: Long) = planPhaseOrder(planPhaseOrder as Long?)

            /** The phase to add this adjustment to. */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun planPhaseOrder(planPhaseOrder: Optional<Long>) =
                planPhaseOrder(planPhaseOrder.orElse(null) as Long?)

            /**
             * The start date of the adjustment interval. This is the date that the adjustment will
             * start affecting prices on the subscription. If null, the adjustment will start when
             * the phase or subscription starts.
             */
            fun startDate(startDate: OffsetDateTime?) = apply { this.startDate = startDate }

            /**
             * The start date of the adjustment interval. This is the date that the adjustment will
             * start affecting prices on the subscription. If null, the adjustment will start when
             * the phase or subscription starts.
             */
            fun startDate(startDate: Optional<OffsetDateTime>) = startDate(startDate.orElse(null))

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): AddAdjustment =
                AddAdjustment(
                    checkNotNull(adjustment) { "`adjustment` is required but was not set" },
                    endDate,
                    planPhaseOrder,
                    startDate,
                    additionalProperties.toImmutable(),
                )
        }

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonDeserialize(using = Adjustment.Deserializer::class)
        @JsonSerialize(using = Adjustment.Serializer::class)
        class Adjustment
        private constructor(
            private val newPercentageDiscount: NewPercentageDiscount? = null,
            private val newUsageDiscount: NewUsageDiscount? = null,
            private val newAmountDiscount: NewAmountDiscount? = null,
            private val newMinimum: NewMinimum? = null,
            private val newMaximum: NewMaximum? = null,
            private val _json: JsonValue? = null,
        ) {

            fun newPercentageDiscount(): Optional<NewPercentageDiscount> =
                Optional.ofNullable(newPercentageDiscount)

            fun newUsageDiscount(): Optional<NewUsageDiscount> =
                Optional.ofNullable(newUsageDiscount)

            fun newAmountDiscount(): Optional<NewAmountDiscount> =
                Optional.ofNullable(newAmountDiscount)

            fun newMinimum(): Optional<NewMinimum> = Optional.ofNullable(newMinimum)

            fun newMaximum(): Optional<NewMaximum> = Optional.ofNullable(newMaximum)

            fun isNewPercentageDiscount(): Boolean = newPercentageDiscount != null

            fun isNewUsageDiscount(): Boolean = newUsageDiscount != null

            fun isNewAmountDiscount(): Boolean = newAmountDiscount != null

            fun isNewMinimum(): Boolean = newMinimum != null

            fun isNewMaximum(): Boolean = newMaximum != null

            fun asNewPercentageDiscount(): NewPercentageDiscount =
                newPercentageDiscount.getOrThrow("newPercentageDiscount")

            fun asNewUsageDiscount(): NewUsageDiscount =
                newUsageDiscount.getOrThrow("newUsageDiscount")

            fun asNewAmountDiscount(): NewAmountDiscount =
                newAmountDiscount.getOrThrow("newAmountDiscount")

            fun asNewMinimum(): NewMinimum = newMinimum.getOrThrow("newMinimum")

            fun asNewMaximum(): NewMaximum = newMaximum.getOrThrow("newMaximum")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newPercentageDiscount != null ->
                        visitor.visitNewPercentageDiscount(newPercentageDiscount)
                    newUsageDiscount != null -> visitor.visitNewUsageDiscount(newUsageDiscount)
                    newAmountDiscount != null -> visitor.visitNewAmountDiscount(newAmountDiscount)
                    newMinimum != null -> visitor.visitNewMinimum(newMinimum)
                    newMaximum != null -> visitor.visitNewMaximum(newMaximum)
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Adjustment && newPercentageDiscount == other.newPercentageDiscount && newUsageDiscount == other.newUsageDiscount && newAmountDiscount == other.newAmountDiscount && newMinimum == other.newMinimum && newMaximum == other.newMaximum /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newPercentageDiscount, newUsageDiscount, newAmountDiscount, newMinimum, newMaximum) /* spotless:on */

            override fun toString(): String =
                when {
                    newPercentageDiscount != null ->
                        "Adjustment{newPercentageDiscount=$newPercentageDiscount}"
                    newUsageDiscount != null -> "Adjustment{newUsageDiscount=$newUsageDiscount}"
                    newAmountDiscount != null -> "Adjustment{newAmountDiscount=$newAmountDiscount}"
                    newMinimum != null -> "Adjustment{newMinimum=$newMinimum}"
                    newMaximum != null -> "Adjustment{newMaximum=$newMaximum}"
                    _json != null -> "Adjustment{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Adjustment")
                }

            companion object {

                @JvmStatic
                fun ofNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount) =
                    Adjustment(newPercentageDiscount = newPercentageDiscount)

                @JvmStatic
                fun ofNewUsageDiscount(newUsageDiscount: NewUsageDiscount) =
                    Adjustment(newUsageDiscount = newUsageDiscount)

                @JvmStatic
                fun ofNewAmountDiscount(newAmountDiscount: NewAmountDiscount) =
                    Adjustment(newAmountDiscount = newAmountDiscount)

                @JvmStatic
                fun ofNewMinimum(newMinimum: NewMinimum) = Adjustment(newMinimum = newMinimum)

                @JvmStatic
                fun ofNewMaximum(newMaximum: NewMaximum) = Adjustment(newMaximum = newMaximum)
            }

            interface Visitor<out T> {

                fun visitNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount): T

                fun visitNewUsageDiscount(newUsageDiscount: NewUsageDiscount): T

                fun visitNewAmountDiscount(newAmountDiscount: NewAmountDiscount): T

                fun visitNewMinimum(newMinimum: NewMinimum): T

                fun visitNewMaximum(newMaximum: NewMaximum): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Adjustment: $json")
                }
            }

            class Deserializer : BaseDeserializer<Adjustment>(Adjustment::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Adjustment {
                    val json = JsonValue.fromJsonNode(node)
                    val adjustmentType =
                        json.asObject().getOrNull()?.get("adjustment_type")?.asString()?.getOrNull()

                    when (adjustmentType) {
                        "percentage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewPercentageDiscount>())?.let {
                                return Adjustment(newPercentageDiscount = it, _json = json)
                            }
                        }
                        "usage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewUsageDiscount>())?.let {
                                return Adjustment(newUsageDiscount = it, _json = json)
                            }
                        }
                        "amount_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewAmountDiscount>())?.let {
                                return Adjustment(newAmountDiscount = it, _json = json)
                            }
                        }
                        "minimum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMinimum>())?.let {
                                return Adjustment(newMinimum = it, _json = json)
                            }
                        }
                        "maximum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMaximum>())?.let {
                                return Adjustment(newMaximum = it, _json = json)
                            }
                        }
                    }

                    return Adjustment(_json = json)
                }
            }

            class Serializer : BaseSerializer<Adjustment>(Adjustment::class) {

                override fun serialize(
                    value: Adjustment,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.newPercentageDiscount != null ->
                            generator.writeObject(value.newPercentageDiscount)
                        value.newUsageDiscount != null ->
                            generator.writeObject(value.newUsageDiscount)
                        value.newAmountDiscount != null ->
                            generator.writeObject(value.newAmountDiscount)
                        value.newMinimum != null -> generator.writeObject(value.newMinimum)
                        value.newMaximum != null -> generator.writeObject(value.newMaximum)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Adjustment")
                    }
                }
            }

            @NoAutoDetect
            class NewPercentageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("percentage_discount") private val percentageDiscount: Double,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                @JsonProperty("percentage_discount")
                fun percentageDiscount(): Double = percentageDiscount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: AdjustmentType? = null
                    private var appliesToPriceIds: MutableList<String>? = null
                    private var percentageDiscount: Double? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newPercentageDiscount: NewPercentageDiscount) = apply {
                        adjustmentType = newPercentageDiscount.adjustmentType
                        appliesToPriceIds = newPercentageDiscount.appliesToPriceIds.toMutableList()
                        percentageDiscount = newPercentageDiscount.percentageDiscount
                        isInvoiceLevel = newPercentageDiscount.isInvoiceLevel
                        additionalProperties =
                            newPercentageDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.toMutableList()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: mutableListOf()).apply { add(appliesToPriceId) }
                    }

                    fun percentageDiscount(percentageDiscount: Double) = apply {
                        this.percentageDiscount = percentageDiscount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean?) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(isInvoiceLevel as Boolean?)

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun isInvoiceLevel(isInvoiceLevel: Optional<Boolean>) =
                        isInvoiceLevel(isInvoiceLevel.orElse(null) as Boolean?)

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewPercentageDiscount =
                        NewPercentageDiscount(
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            checkNotNull(percentageDiscount) {
                                "`percentageDiscount` is required but was not set"
                            },
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PERCENTAGE_DISCOUNT = of("percentage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        PERCENTAGE_DISCOUNT,
                    }

                    enum class Value {
                        PERCENTAGE_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Value.PERCENTAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Known.PERCENTAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewPercentageDiscount && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && percentageDiscount == other.percentageDiscount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, percentageDiscount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewPercentageDiscount{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, percentageDiscount=$percentageDiscount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewUsageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("usage_discount") private val usageDiscount: Double,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                @JsonProperty("usage_discount") fun usageDiscount(): Double = usageDiscount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: AdjustmentType? = null
                    private var appliesToPriceIds: MutableList<String>? = null
                    private var usageDiscount: Double? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newUsageDiscount: NewUsageDiscount) = apply {
                        adjustmentType = newUsageDiscount.adjustmentType
                        appliesToPriceIds = newUsageDiscount.appliesToPriceIds.toMutableList()
                        usageDiscount = newUsageDiscount.usageDiscount
                        isInvoiceLevel = newUsageDiscount.isInvoiceLevel
                        additionalProperties = newUsageDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.toMutableList()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: mutableListOf()).apply { add(appliesToPriceId) }
                    }

                    fun usageDiscount(usageDiscount: Double) = apply {
                        this.usageDiscount = usageDiscount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean?) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(isInvoiceLevel as Boolean?)

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun isInvoiceLevel(isInvoiceLevel: Optional<Boolean>) =
                        isInvoiceLevel(isInvoiceLevel.orElse(null) as Boolean?)

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewUsageDiscount =
                        NewUsageDiscount(
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            checkNotNull(usageDiscount) {
                                "`usageDiscount` is required but was not set"
                            },
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val USAGE_DISCOUNT = of("usage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        USAGE_DISCOUNT,
                    }

                    enum class Value {
                        USAGE_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            USAGE_DISCOUNT -> Value.USAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            USAGE_DISCOUNT -> Known.USAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewUsageDiscount && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && usageDiscount == other.usageDiscount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, usageDiscount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewUsageDiscount{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, usageDiscount=$usageDiscount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewAmountDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("amount_discount") private val amountDiscount: String,
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                @JsonProperty("amount_discount") fun amountDiscount(): String = amountDiscount

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: AdjustmentType? = null
                    private var amountDiscount: String? = null
                    private var appliesToPriceIds: MutableList<String>? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newAmountDiscount: NewAmountDiscount) = apply {
                        adjustmentType = newAmountDiscount.adjustmentType
                        amountDiscount = newAmountDiscount.amountDiscount
                        appliesToPriceIds = newAmountDiscount.appliesToPriceIds.toMutableList()
                        isInvoiceLevel = newAmountDiscount.isInvoiceLevel
                        additionalProperties = newAmountDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun amountDiscount(amountDiscount: String) = apply {
                        this.amountDiscount = amountDiscount
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.toMutableList()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: mutableListOf()).apply { add(appliesToPriceId) }
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean?) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(isInvoiceLevel as Boolean?)

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun isInvoiceLevel(isInvoiceLevel: Optional<Boolean>) =
                        isInvoiceLevel(isInvoiceLevel.orElse(null) as Boolean?)

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewAmountDiscount =
                        NewAmountDiscount(
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(amountDiscount) {
                                "`amountDiscount` is required but was not set"
                            },
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val AMOUNT_DISCOUNT = of("amount_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        AMOUNT_DISCOUNT,
                    }

                    enum class Value {
                        AMOUNT_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            AMOUNT_DISCOUNT -> Value.AMOUNT_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            AMOUNT_DISCOUNT -> Known.AMOUNT_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewAmountDiscount && adjustmentType == other.adjustmentType && amountDiscount == other.amountDiscount && appliesToPriceIds == other.appliesToPriceIds && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, amountDiscount, appliesToPriceIds, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewAmountDiscount{adjustmentType=$adjustmentType, amountDiscount=$amountDiscount, appliesToPriceIds=$appliesToPriceIds, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMinimum
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("minimum_amount") private val minimumAmount: String,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                /** The item ID that revenue from this minimum will be attributed to. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("minimum_amount") fun minimumAmount(): String = minimumAmount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: AdjustmentType? = null
                    private var appliesToPriceIds: MutableList<String>? = null
                    private var itemId: String? = null
                    private var minimumAmount: String? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMinimum: NewMinimum) = apply {
                        adjustmentType = newMinimum.adjustmentType
                        appliesToPriceIds = newMinimum.appliesToPriceIds.toMutableList()
                        itemId = newMinimum.itemId
                        minimumAmount = newMinimum.minimumAmount
                        isInvoiceLevel = newMinimum.isInvoiceLevel
                        additionalProperties = newMinimum.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.toMutableList()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: mutableListOf()).apply { add(appliesToPriceId) }
                    }

                    /** The item ID that revenue from this minimum will be attributed to. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun minimumAmount(minimumAmount: String) = apply {
                        this.minimumAmount = minimumAmount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean?) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(isInvoiceLevel as Boolean?)

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun isInvoiceLevel(isInvoiceLevel: Optional<Boolean>) =
                        isInvoiceLevel(isInvoiceLevel.orElse(null) as Boolean?)

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMinimum =
                        NewMinimum(
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(minimumAmount) {
                                "`minimumAmount` is required but was not set"
                            },
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MINIMUM = of("minimum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        MINIMUM,
                    }

                    enum class Value {
                        MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MINIMUM -> Value.MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MINIMUM -> Known.MINIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMinimum && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && itemId == other.itemId && minimumAmount == other.minimumAmount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, itemId, minimumAmount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMinimum{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, itemId=$itemId, minimumAmount=$minimumAmount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMaximum
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("maximum_amount") private val maximumAmount: String,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                @JsonProperty("maximum_amount") fun maximumAmount(): String = maximumAmount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: AdjustmentType? = null
                    private var appliesToPriceIds: MutableList<String>? = null
                    private var maximumAmount: String? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMaximum: NewMaximum) = apply {
                        adjustmentType = newMaximum.adjustmentType
                        appliesToPriceIds = newMaximum.appliesToPriceIds.toMutableList()
                        maximumAmount = newMaximum.maximumAmount
                        isInvoiceLevel = newMaximum.isInvoiceLevel
                        additionalProperties = newMaximum.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.toMutableList()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: mutableListOf()).apply { add(appliesToPriceId) }
                    }

                    fun maximumAmount(maximumAmount: String) = apply {
                        this.maximumAmount = maximumAmount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean?) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(isInvoiceLevel as Boolean?)

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun isInvoiceLevel(isInvoiceLevel: Optional<Boolean>) =
                        isInvoiceLevel(isInvoiceLevel.orElse(null) as Boolean?)

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMaximum =
                        NewMaximum(
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            checkNotNull(maximumAmount) {
                                "`maximumAmount` is required but was not set"
                            },
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MAXIMUM = of("maximum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        MAXIMUM,
                    }

                    enum class Value {
                        MAXIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MAXIMUM -> Value.MAXIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MAXIMUM -> Known.MAXIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMaximum && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && maximumAmount == other.maximumAmount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, maximumAmount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMaximum{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, maximumAmount=$maximumAmount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is AddAdjustment && adjustment == other.adjustment && endDate == other.endDate && planPhaseOrder == other.planPhaseOrder && startDate == other.startDate && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(adjustment, endDate, planPhaseOrder, startDate, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "AddAdjustment{adjustment=$adjustment, endDate=$endDate, planPhaseOrder=$planPhaseOrder, startDate=$startDate, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class AddPrice
    @JsonCreator
    private constructor(
        @JsonProperty("discounts") private val discounts: List<Discount>?,
        @JsonProperty("end_date") private val endDate: OffsetDateTime?,
        @JsonProperty("external_price_id") private val externalPriceId: String?,
        @JsonProperty("maximum_amount") private val maximumAmount: String?,
        @JsonProperty("minimum_amount") private val minimumAmount: String?,
        @JsonProperty("plan_phase_order") private val planPhaseOrder: Long?,
        @JsonProperty("price") private val price: Price?,
        @JsonProperty("price_id") private val priceId: String?,
        @JsonProperty("start_date") private val startDate: OffsetDateTime?,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for this price.
         */
        @JsonProperty("discounts")
        fun discounts(): Optional<List<Discount>> = Optional.ofNullable(discounts)

        /**
         * The end date of the price interval. This is the date that the price will stop billing on
         * the subscription. If null, billing will end when the phase or subscription ends.
         */
        @JsonProperty("end_date")
        fun endDate(): Optional<OffsetDateTime> = Optional.ofNullable(endDate)

        /** The external price id of the price to add to the subscription. */
        @JsonProperty("external_price_id")
        fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for this
         * price.
         */
        @JsonProperty("maximum_amount")
        fun maximumAmount(): Optional<String> = Optional.ofNullable(maximumAmount)

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for this
         * price.
         */
        @JsonProperty("minimum_amount")
        fun minimumAmount(): Optional<String> = Optional.ofNullable(minimumAmount)

        /** The phase to add this price to. */
        @JsonProperty("plan_phase_order")
        fun planPhaseOrder(): Optional<Long> = Optional.ofNullable(planPhaseOrder)

        /** The definition of a new price to create and add to the subscription. */
        @JsonProperty("price") fun price(): Optional<Price> = Optional.ofNullable(price)

        /** The id of the price to add to the subscription. */
        @JsonProperty("price_id") fun priceId(): Optional<String> = Optional.ofNullable(priceId)

        /**
         * The start date of the price interval. This is the date that the price will start billing
         * on the subscription. If null, billing will start when the phase or subscription starts.
         */
        @JsonProperty("start_date")
        fun startDate(): Optional<OffsetDateTime> = Optional.ofNullable(startDate)

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var discounts: MutableList<Discount>? = null
            private var endDate: OffsetDateTime? = null
            private var externalPriceId: String? = null
            private var maximumAmount: String? = null
            private var minimumAmount: String? = null
            private var planPhaseOrder: Long? = null
            private var price: Price? = null
            private var priceId: String? = null
            private var startDate: OffsetDateTime? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(addPrice: AddPrice) = apply {
                discounts = addPrice.discounts?.toMutableList()
                endDate = addPrice.endDate
                externalPriceId = addPrice.externalPriceId
                maximumAmount = addPrice.maximumAmount
                minimumAmount = addPrice.minimumAmount
                planPhaseOrder = addPrice.planPhaseOrder
                price = addPrice.price
                priceId = addPrice.priceId
                startDate = addPrice.startDate
                additionalProperties = addPrice.additionalProperties.toMutableMap()
            }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for this
             * price.
             */
            fun discounts(discounts: List<Discount>?) = apply {
                this.discounts = discounts?.toMutableList()
            }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for this
             * price.
             */
            fun discounts(discounts: Optional<List<Discount>>) = discounts(discounts.orElse(null))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for this
             * price.
             */
            fun addDiscount(discount: Discount) = apply {
                discounts = (discounts ?: mutableListOf()).apply { add(discount) }
            }

            /**
             * The end date of the price interval. This is the date that the price will stop billing
             * on the subscription. If null, billing will end when the phase or subscription ends.
             */
            fun endDate(endDate: OffsetDateTime?) = apply { this.endDate = endDate }

            /**
             * The end date of the price interval. This is the date that the price will stop billing
             * on the subscription. If null, billing will end when the phase or subscription ends.
             */
            fun endDate(endDate: Optional<OffsetDateTime>) = endDate(endDate.orElse(null))

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: String?) = apply {
                this.externalPriceId = externalPriceId
            }

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: Optional<String>) =
                externalPriceId(externalPriceId.orElse(null))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for this
             * price.
             */
            fun maximumAmount(maximumAmount: String?) = apply { this.maximumAmount = maximumAmount }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for this
             * price.
             */
            fun maximumAmount(maximumAmount: Optional<String>) =
                maximumAmount(maximumAmount.orElse(null))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for this
             * price.
             */
            fun minimumAmount(minimumAmount: String?) = apply { this.minimumAmount = minimumAmount }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for this
             * price.
             */
            fun minimumAmount(minimumAmount: Optional<String>) =
                minimumAmount(minimumAmount.orElse(null))

            /** The phase to add this price to. */
            fun planPhaseOrder(planPhaseOrder: Long?) = apply {
                this.planPhaseOrder = planPhaseOrder
            }

            /** The phase to add this price to. */
            fun planPhaseOrder(planPhaseOrder: Long) = planPhaseOrder(planPhaseOrder as Long?)

            /** The phase to add this price to. */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun planPhaseOrder(planPhaseOrder: Optional<Long>) =
                planPhaseOrder(planPhaseOrder.orElse(null) as Long?)

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: Price?) = apply { this.price = price }

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: Optional<Price>) = price(price.orElse(null))

            fun price(newSubscriptionUnitPrice: Price.NewSubscriptionUnitPrice) = apply {
                this.price = Price.ofNewSubscriptionUnitPrice(newSubscriptionUnitPrice)
            }

            fun price(newSubscriptionPackagePrice: Price.NewSubscriptionPackagePrice) = apply {
                this.price = Price.ofNewSubscriptionPackagePrice(newSubscriptionPackagePrice)
            }

            fun price(newSubscriptionMatrixPrice: Price.NewSubscriptionMatrixPrice) = apply {
                this.price = Price.ofNewSubscriptionMatrixPrice(newSubscriptionMatrixPrice)
            }

            fun price(newSubscriptionTieredPrice: Price.NewSubscriptionTieredPrice) = apply {
                this.price = Price.ofNewSubscriptionTieredPrice(newSubscriptionTieredPrice)
            }

            fun price(newSubscriptionTieredBpsPrice: Price.NewSubscriptionTieredBpsPrice) = apply {
                this.price = Price.ofNewSubscriptionTieredBpsPrice(newSubscriptionTieredBpsPrice)
            }

            fun price(newSubscriptionBpsPrice: Price.NewSubscriptionBpsPrice) = apply {
                this.price = Price.ofNewSubscriptionBpsPrice(newSubscriptionBpsPrice)
            }

            fun price(newSubscriptionBulkBpsPrice: Price.NewSubscriptionBulkBpsPrice) = apply {
                this.price = Price.ofNewSubscriptionBulkBpsPrice(newSubscriptionBulkBpsPrice)
            }

            fun price(newSubscriptionBulkPrice: Price.NewSubscriptionBulkPrice) = apply {
                this.price = Price.ofNewSubscriptionBulkPrice(newSubscriptionBulkPrice)
            }

            fun price(
                newSubscriptionThresholdTotalAmountPrice:
                    Price.NewSubscriptionThresholdTotalAmountPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionThresholdTotalAmountPrice(
                        newSubscriptionThresholdTotalAmountPrice
                    )
            }

            fun price(newSubscriptionTieredPackagePrice: Price.NewSubscriptionTieredPackagePrice) =
                apply {
                    this.price =
                        Price.ofNewSubscriptionTieredPackagePrice(newSubscriptionTieredPackagePrice)
                }

            fun price(
                newSubscriptionTieredWithMinimumPrice: Price.NewSubscriptionTieredWithMinimumPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionTieredWithMinimumPrice(
                        newSubscriptionTieredWithMinimumPrice
                    )
            }

            fun price(
                newSubscriptionUnitWithPercentPrice: Price.NewSubscriptionUnitWithPercentPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionUnitWithPercentPrice(newSubscriptionUnitWithPercentPrice)
            }

            fun price(
                newSubscriptionPackageWithAllocationPrice:
                    Price.NewSubscriptionPackageWithAllocationPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionPackageWithAllocationPrice(
                        newSubscriptionPackageWithAllocationPrice
                    )
            }

            fun price(
                newSubscriptionTierWithProrationPrice: Price.NewSubscriptionTierWithProrationPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionTierWithProrationPrice(
                        newSubscriptionTierWithProrationPrice
                    )
            }

            fun price(
                newSubscriptionUnitWithProrationPrice: Price.NewSubscriptionUnitWithProrationPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionUnitWithProrationPrice(
                        newSubscriptionUnitWithProrationPrice
                    )
            }

            fun price(
                newSubscriptionGroupedAllocationPrice: Price.NewSubscriptionGroupedAllocationPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionGroupedAllocationPrice(
                        newSubscriptionGroupedAllocationPrice
                    )
            }

            fun price(
                newSubscriptionGroupedWithProratedMinimumPrice:
                    Price.NewSubscriptionGroupedWithProratedMinimumPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionGroupedWithProratedMinimumPrice(
                        newSubscriptionGroupedWithProratedMinimumPrice
                    )
            }

            fun price(
                newSubscriptionBulkWithProrationPrice: Price.NewSubscriptionBulkWithProrationPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionBulkWithProrationPrice(
                        newSubscriptionBulkWithProrationPrice
                    )
            }

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: String?) = apply { this.priceId = priceId }

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: Optional<String>) = priceId(priceId.orElse(null))

            /**
             * The start date of the price interval. This is the date that the price will start
             * billing on the subscription. If null, billing will start when the phase or
             * subscription starts.
             */
            fun startDate(startDate: OffsetDateTime?) = apply { this.startDate = startDate }

            /**
             * The start date of the price interval. This is the date that the price will start
             * billing on the subscription. If null, billing will start when the phase or
             * subscription starts.
             */
            fun startDate(startDate: Optional<OffsetDateTime>) = startDate(startDate.orElse(null))

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): AddPrice =
                AddPrice(
                    discounts?.toImmutable(),
                    endDate,
                    externalPriceId,
                    maximumAmount,
                    minimumAmount,
                    planPhaseOrder,
                    price,
                    priceId,
                    startDate,
                    additionalProperties.toImmutable(),
                )
        }

        @NoAutoDetect
        class Discount
        @JsonCreator
        private constructor(
            @JsonProperty("discount_type") private val discountType: DiscountType,
            @JsonProperty("amount_discount") private val amountDiscount: String?,
            @JsonProperty("percentage_discount") private val percentageDiscount: Double?,
            @JsonProperty("usage_discount") private val usageDiscount: Double?,
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            @JsonProperty("discount_type") fun discountType(): DiscountType = discountType

            /** Only available if discount_type is `amount`. */
            @JsonProperty("amount_discount")
            fun amountDiscount(): Optional<String> = Optional.ofNullable(amountDiscount)

            /**
             * Only available if discount_type is `percentage`. This is a number between 0 and 1.
             */
            @JsonProperty("percentage_discount")
            fun percentageDiscount(): Optional<Double> = Optional.ofNullable(percentageDiscount)

            /**
             * Only available if discount_type is `usage`. Number of usage units that this discount
             * is for
             */
            @JsonProperty("usage_discount")
            fun usageDiscount(): Optional<Double> = Optional.ofNullable(usageDiscount)

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            class Builder {

                private var discountType: DiscountType? = null
                private var amountDiscount: String? = null
                private var percentageDiscount: Double? = null
                private var usageDiscount: Double? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(discount: Discount) = apply {
                    discountType = discount.discountType
                    amountDiscount = discount.amountDiscount
                    percentageDiscount = discount.percentageDiscount
                    usageDiscount = discount.usageDiscount
                    additionalProperties = discount.additionalProperties.toMutableMap()
                }

                fun discountType(discountType: DiscountType) = apply {
                    this.discountType = discountType
                }

                /** Only available if discount_type is `amount`. */
                fun amountDiscount(amountDiscount: String?) = apply {
                    this.amountDiscount = amountDiscount
                }

                /** Only available if discount_type is `amount`. */
                fun amountDiscount(amountDiscount: Optional<String>) =
                    amountDiscount(amountDiscount.orElse(null))

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                fun percentageDiscount(percentageDiscount: Double?) = apply {
                    this.percentageDiscount = percentageDiscount
                }

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                fun percentageDiscount(percentageDiscount: Double) =
                    percentageDiscount(percentageDiscount as Double?)

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                fun percentageDiscount(percentageDiscount: Optional<Double>) =
                    percentageDiscount(percentageDiscount.orElse(null) as Double?)

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                fun usageDiscount(usageDiscount: Double?) = apply {
                    this.usageDiscount = usageDiscount
                }

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                fun usageDiscount(usageDiscount: Double) = usageDiscount(usageDiscount as Double?)

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                fun usageDiscount(usageDiscount: Optional<Double>) =
                    usageDiscount(usageDiscount.orElse(null) as Double?)

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): Discount =
                    Discount(
                        checkNotNull(discountType) { "`discountType` is required but was not set" },
                        amountDiscount,
                        percentageDiscount,
                        usageDiscount,
                        additionalProperties.toImmutable(),
                    )
            }

            class DiscountType
            @JsonCreator
            private constructor(
                private val value: JsonField<String>,
            ) : Enum {

                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val PERCENTAGE = of("percentage")

                    @JvmField val USAGE = of("usage")

                    @JvmField val AMOUNT = of("amount")

                    @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                }

                enum class Known {
                    PERCENTAGE,
                    USAGE,
                    AMOUNT,
                }

                enum class Value {
                    PERCENTAGE,
                    USAGE,
                    AMOUNT,
                    _UNKNOWN,
                }

                fun value(): Value =
                    when (this) {
                        PERCENTAGE -> Value.PERCENTAGE
                        USAGE -> Value.USAGE
                        AMOUNT -> Value.AMOUNT
                        else -> Value._UNKNOWN
                    }

                fun known(): Known =
                    when (this) {
                        PERCENTAGE -> Known.PERCENTAGE
                        USAGE -> Known.USAGE
                        AMOUNT -> Known.AMOUNT
                        else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                    }

                fun asString(): String = _value().asStringOrThrow()

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is DiscountType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Discount && discountType == other.discountType && amountDiscount == other.amountDiscount && percentageDiscount == other.percentageDiscount && usageDiscount == other.usageDiscount && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(discountType, amountDiscount, percentageDiscount, usageDiscount, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "Discount{discountType=$discountType, amountDiscount=$amountDiscount, percentageDiscount=$percentageDiscount, usageDiscount=$usageDiscount, additionalProperties=$additionalProperties}"
        }

        /** The definition of a new price to create and add to the subscription. */
        @JsonDeserialize(using = Price.Deserializer::class)
        @JsonSerialize(using = Price.Serializer::class)
        class Price
        private constructor(
            private val newSubscriptionUnitPrice: NewSubscriptionUnitPrice? = null,
            private val newSubscriptionPackagePrice: NewSubscriptionPackagePrice? = null,
            private val newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice? = null,
            private val newSubscriptionTieredPrice: NewSubscriptionTieredPrice? = null,
            private val newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice? = null,
            private val newSubscriptionBpsPrice: NewSubscriptionBpsPrice? = null,
            private val newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice? = null,
            private val newSubscriptionBulkPrice: NewSubscriptionBulkPrice? = null,
            private val newSubscriptionThresholdTotalAmountPrice:
                NewSubscriptionThresholdTotalAmountPrice? =
                null,
            private val newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice? =
                null,
            private val newSubscriptionTieredWithMinimumPrice:
                NewSubscriptionTieredWithMinimumPrice? =
                null,
            private val newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice? =
                null,
            private val newSubscriptionPackageWithAllocationPrice:
                NewSubscriptionPackageWithAllocationPrice? =
                null,
            private val newSubscriptionTierWithProrationPrice:
                NewSubscriptionTierWithProrationPrice? =
                null,
            private val newSubscriptionUnitWithProrationPrice:
                NewSubscriptionUnitWithProrationPrice? =
                null,
            private val newSubscriptionGroupedAllocationPrice:
                NewSubscriptionGroupedAllocationPrice? =
                null,
            private val newSubscriptionGroupedWithProratedMinimumPrice:
                NewSubscriptionGroupedWithProratedMinimumPrice? =
                null,
            private val newSubscriptionBulkWithProrationPrice:
                NewSubscriptionBulkWithProrationPrice? =
                null,
            private val _json: JsonValue? = null,
        ) {

            fun newSubscriptionUnitPrice(): Optional<NewSubscriptionUnitPrice> =
                Optional.ofNullable(newSubscriptionUnitPrice)

            fun newSubscriptionPackagePrice(): Optional<NewSubscriptionPackagePrice> =
                Optional.ofNullable(newSubscriptionPackagePrice)

            fun newSubscriptionMatrixPrice(): Optional<NewSubscriptionMatrixPrice> =
                Optional.ofNullable(newSubscriptionMatrixPrice)

            fun newSubscriptionTieredPrice(): Optional<NewSubscriptionTieredPrice> =
                Optional.ofNullable(newSubscriptionTieredPrice)

            fun newSubscriptionTieredBpsPrice(): Optional<NewSubscriptionTieredBpsPrice> =
                Optional.ofNullable(newSubscriptionTieredBpsPrice)

            fun newSubscriptionBpsPrice(): Optional<NewSubscriptionBpsPrice> =
                Optional.ofNullable(newSubscriptionBpsPrice)

            fun newSubscriptionBulkBpsPrice(): Optional<NewSubscriptionBulkBpsPrice> =
                Optional.ofNullable(newSubscriptionBulkBpsPrice)

            fun newSubscriptionBulkPrice(): Optional<NewSubscriptionBulkPrice> =
                Optional.ofNullable(newSubscriptionBulkPrice)

            fun newSubscriptionThresholdTotalAmountPrice():
                Optional<NewSubscriptionThresholdTotalAmountPrice> =
                Optional.ofNullable(newSubscriptionThresholdTotalAmountPrice)

            fun newSubscriptionTieredPackagePrice(): Optional<NewSubscriptionTieredPackagePrice> =
                Optional.ofNullable(newSubscriptionTieredPackagePrice)

            fun newSubscriptionTieredWithMinimumPrice():
                Optional<NewSubscriptionTieredWithMinimumPrice> =
                Optional.ofNullable(newSubscriptionTieredWithMinimumPrice)

            fun newSubscriptionUnitWithPercentPrice():
                Optional<NewSubscriptionUnitWithPercentPrice> =
                Optional.ofNullable(newSubscriptionUnitWithPercentPrice)

            fun newSubscriptionPackageWithAllocationPrice():
                Optional<NewSubscriptionPackageWithAllocationPrice> =
                Optional.ofNullable(newSubscriptionPackageWithAllocationPrice)

            fun newSubscriptionTierWithProrationPrice():
                Optional<NewSubscriptionTierWithProrationPrice> =
                Optional.ofNullable(newSubscriptionTierWithProrationPrice)

            fun newSubscriptionUnitWithProrationPrice():
                Optional<NewSubscriptionUnitWithProrationPrice> =
                Optional.ofNullable(newSubscriptionUnitWithProrationPrice)

            fun newSubscriptionGroupedAllocationPrice():
                Optional<NewSubscriptionGroupedAllocationPrice> =
                Optional.ofNullable(newSubscriptionGroupedAllocationPrice)

            fun newSubscriptionGroupedWithProratedMinimumPrice():
                Optional<NewSubscriptionGroupedWithProratedMinimumPrice> =
                Optional.ofNullable(newSubscriptionGroupedWithProratedMinimumPrice)

            fun newSubscriptionBulkWithProrationPrice():
                Optional<NewSubscriptionBulkWithProrationPrice> =
                Optional.ofNullable(newSubscriptionBulkWithProrationPrice)

            fun isNewSubscriptionUnitPrice(): Boolean = newSubscriptionUnitPrice != null

            fun isNewSubscriptionPackagePrice(): Boolean = newSubscriptionPackagePrice != null

            fun isNewSubscriptionMatrixPrice(): Boolean = newSubscriptionMatrixPrice != null

            fun isNewSubscriptionTieredPrice(): Boolean = newSubscriptionTieredPrice != null

            fun isNewSubscriptionTieredBpsPrice(): Boolean = newSubscriptionTieredBpsPrice != null

            fun isNewSubscriptionBpsPrice(): Boolean = newSubscriptionBpsPrice != null

            fun isNewSubscriptionBulkBpsPrice(): Boolean = newSubscriptionBulkBpsPrice != null

            fun isNewSubscriptionBulkPrice(): Boolean = newSubscriptionBulkPrice != null

            fun isNewSubscriptionThresholdTotalAmountPrice(): Boolean =
                newSubscriptionThresholdTotalAmountPrice != null

            fun isNewSubscriptionTieredPackagePrice(): Boolean =
                newSubscriptionTieredPackagePrice != null

            fun isNewSubscriptionTieredWithMinimumPrice(): Boolean =
                newSubscriptionTieredWithMinimumPrice != null

            fun isNewSubscriptionUnitWithPercentPrice(): Boolean =
                newSubscriptionUnitWithPercentPrice != null

            fun isNewSubscriptionPackageWithAllocationPrice(): Boolean =
                newSubscriptionPackageWithAllocationPrice != null

            fun isNewSubscriptionTierWithProrationPrice(): Boolean =
                newSubscriptionTierWithProrationPrice != null

            fun isNewSubscriptionUnitWithProrationPrice(): Boolean =
                newSubscriptionUnitWithProrationPrice != null

            fun isNewSubscriptionGroupedAllocationPrice(): Boolean =
                newSubscriptionGroupedAllocationPrice != null

            fun isNewSubscriptionGroupedWithProratedMinimumPrice(): Boolean =
                newSubscriptionGroupedWithProratedMinimumPrice != null

            fun isNewSubscriptionBulkWithProrationPrice(): Boolean =
                newSubscriptionBulkWithProrationPrice != null

            fun asNewSubscriptionUnitPrice(): NewSubscriptionUnitPrice =
                newSubscriptionUnitPrice.getOrThrow("newSubscriptionUnitPrice")

            fun asNewSubscriptionPackagePrice(): NewSubscriptionPackagePrice =
                newSubscriptionPackagePrice.getOrThrow("newSubscriptionPackagePrice")

            fun asNewSubscriptionMatrixPrice(): NewSubscriptionMatrixPrice =
                newSubscriptionMatrixPrice.getOrThrow("newSubscriptionMatrixPrice")

            fun asNewSubscriptionTieredPrice(): NewSubscriptionTieredPrice =
                newSubscriptionTieredPrice.getOrThrow("newSubscriptionTieredPrice")

            fun asNewSubscriptionTieredBpsPrice(): NewSubscriptionTieredBpsPrice =
                newSubscriptionTieredBpsPrice.getOrThrow("newSubscriptionTieredBpsPrice")

            fun asNewSubscriptionBpsPrice(): NewSubscriptionBpsPrice =
                newSubscriptionBpsPrice.getOrThrow("newSubscriptionBpsPrice")

            fun asNewSubscriptionBulkBpsPrice(): NewSubscriptionBulkBpsPrice =
                newSubscriptionBulkBpsPrice.getOrThrow("newSubscriptionBulkBpsPrice")

            fun asNewSubscriptionBulkPrice(): NewSubscriptionBulkPrice =
                newSubscriptionBulkPrice.getOrThrow("newSubscriptionBulkPrice")

            fun asNewSubscriptionThresholdTotalAmountPrice():
                NewSubscriptionThresholdTotalAmountPrice =
                newSubscriptionThresholdTotalAmountPrice.getOrThrow(
                    "newSubscriptionThresholdTotalAmountPrice"
                )

            fun asNewSubscriptionTieredPackagePrice(): NewSubscriptionTieredPackagePrice =
                newSubscriptionTieredPackagePrice.getOrThrow("newSubscriptionTieredPackagePrice")

            fun asNewSubscriptionTieredWithMinimumPrice(): NewSubscriptionTieredWithMinimumPrice =
                newSubscriptionTieredWithMinimumPrice.getOrThrow(
                    "newSubscriptionTieredWithMinimumPrice"
                )

            fun asNewSubscriptionUnitWithPercentPrice(): NewSubscriptionUnitWithPercentPrice =
                newSubscriptionUnitWithPercentPrice.getOrThrow(
                    "newSubscriptionUnitWithPercentPrice"
                )

            fun asNewSubscriptionPackageWithAllocationPrice():
                NewSubscriptionPackageWithAllocationPrice =
                newSubscriptionPackageWithAllocationPrice.getOrThrow(
                    "newSubscriptionPackageWithAllocationPrice"
                )

            fun asNewSubscriptionTierWithProrationPrice(): NewSubscriptionTierWithProrationPrice =
                newSubscriptionTierWithProrationPrice.getOrThrow(
                    "newSubscriptionTierWithProrationPrice"
                )

            fun asNewSubscriptionUnitWithProrationPrice(): NewSubscriptionUnitWithProrationPrice =
                newSubscriptionUnitWithProrationPrice.getOrThrow(
                    "newSubscriptionUnitWithProrationPrice"
                )

            fun asNewSubscriptionGroupedAllocationPrice(): NewSubscriptionGroupedAllocationPrice =
                newSubscriptionGroupedAllocationPrice.getOrThrow(
                    "newSubscriptionGroupedAllocationPrice"
                )

            fun asNewSubscriptionGroupedWithProratedMinimumPrice():
                NewSubscriptionGroupedWithProratedMinimumPrice =
                newSubscriptionGroupedWithProratedMinimumPrice.getOrThrow(
                    "newSubscriptionGroupedWithProratedMinimumPrice"
                )

            fun asNewSubscriptionBulkWithProrationPrice(): NewSubscriptionBulkWithProrationPrice =
                newSubscriptionBulkWithProrationPrice.getOrThrow(
                    "newSubscriptionBulkWithProrationPrice"
                )

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newSubscriptionUnitPrice != null ->
                        visitor.visitNewSubscriptionUnitPrice(newSubscriptionUnitPrice)
                    newSubscriptionPackagePrice != null ->
                        visitor.visitNewSubscriptionPackagePrice(newSubscriptionPackagePrice)
                    newSubscriptionMatrixPrice != null ->
                        visitor.visitNewSubscriptionMatrixPrice(newSubscriptionMatrixPrice)
                    newSubscriptionTieredPrice != null ->
                        visitor.visitNewSubscriptionTieredPrice(newSubscriptionTieredPrice)
                    newSubscriptionTieredBpsPrice != null ->
                        visitor.visitNewSubscriptionTieredBpsPrice(newSubscriptionTieredBpsPrice)
                    newSubscriptionBpsPrice != null ->
                        visitor.visitNewSubscriptionBpsPrice(newSubscriptionBpsPrice)
                    newSubscriptionBulkBpsPrice != null ->
                        visitor.visitNewSubscriptionBulkBpsPrice(newSubscriptionBulkBpsPrice)
                    newSubscriptionBulkPrice != null ->
                        visitor.visitNewSubscriptionBulkPrice(newSubscriptionBulkPrice)
                    newSubscriptionThresholdTotalAmountPrice != null ->
                        visitor.visitNewSubscriptionThresholdTotalAmountPrice(
                            newSubscriptionThresholdTotalAmountPrice
                        )
                    newSubscriptionTieredPackagePrice != null ->
                        visitor.visitNewSubscriptionTieredPackagePrice(
                            newSubscriptionTieredPackagePrice
                        )
                    newSubscriptionTieredWithMinimumPrice != null ->
                        visitor.visitNewSubscriptionTieredWithMinimumPrice(
                            newSubscriptionTieredWithMinimumPrice
                        )
                    newSubscriptionUnitWithPercentPrice != null ->
                        visitor.visitNewSubscriptionUnitWithPercentPrice(
                            newSubscriptionUnitWithPercentPrice
                        )
                    newSubscriptionPackageWithAllocationPrice != null ->
                        visitor.visitNewSubscriptionPackageWithAllocationPrice(
                            newSubscriptionPackageWithAllocationPrice
                        )
                    newSubscriptionTierWithProrationPrice != null ->
                        visitor.visitNewSubscriptionTierWithProrationPrice(
                            newSubscriptionTierWithProrationPrice
                        )
                    newSubscriptionUnitWithProrationPrice != null ->
                        visitor.visitNewSubscriptionUnitWithProrationPrice(
                            newSubscriptionUnitWithProrationPrice
                        )
                    newSubscriptionGroupedAllocationPrice != null ->
                        visitor.visitNewSubscriptionGroupedAllocationPrice(
                            newSubscriptionGroupedAllocationPrice
                        )
                    newSubscriptionGroupedWithProratedMinimumPrice != null ->
                        visitor.visitNewSubscriptionGroupedWithProratedMinimumPrice(
                            newSubscriptionGroupedWithProratedMinimumPrice
                        )
                    newSubscriptionBulkWithProrationPrice != null ->
                        visitor.visitNewSubscriptionBulkWithProrationPrice(
                            newSubscriptionBulkWithProrationPrice
                        )
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Price && newSubscriptionUnitPrice == other.newSubscriptionUnitPrice && newSubscriptionPackagePrice == other.newSubscriptionPackagePrice && newSubscriptionMatrixPrice == other.newSubscriptionMatrixPrice && newSubscriptionTieredPrice == other.newSubscriptionTieredPrice && newSubscriptionTieredBpsPrice == other.newSubscriptionTieredBpsPrice && newSubscriptionBpsPrice == other.newSubscriptionBpsPrice && newSubscriptionBulkBpsPrice == other.newSubscriptionBulkBpsPrice && newSubscriptionBulkPrice == other.newSubscriptionBulkPrice && newSubscriptionThresholdTotalAmountPrice == other.newSubscriptionThresholdTotalAmountPrice && newSubscriptionTieredPackagePrice == other.newSubscriptionTieredPackagePrice && newSubscriptionTieredWithMinimumPrice == other.newSubscriptionTieredWithMinimumPrice && newSubscriptionUnitWithPercentPrice == other.newSubscriptionUnitWithPercentPrice && newSubscriptionPackageWithAllocationPrice == other.newSubscriptionPackageWithAllocationPrice && newSubscriptionTierWithProrationPrice == other.newSubscriptionTierWithProrationPrice && newSubscriptionUnitWithProrationPrice == other.newSubscriptionUnitWithProrationPrice && newSubscriptionGroupedAllocationPrice == other.newSubscriptionGroupedAllocationPrice && newSubscriptionGroupedWithProratedMinimumPrice == other.newSubscriptionGroupedWithProratedMinimumPrice && newSubscriptionBulkWithProrationPrice == other.newSubscriptionBulkWithProrationPrice /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newSubscriptionUnitPrice, newSubscriptionPackagePrice, newSubscriptionMatrixPrice, newSubscriptionTieredPrice, newSubscriptionTieredBpsPrice, newSubscriptionBpsPrice, newSubscriptionBulkBpsPrice, newSubscriptionBulkPrice, newSubscriptionThresholdTotalAmountPrice, newSubscriptionTieredPackagePrice, newSubscriptionTieredWithMinimumPrice, newSubscriptionUnitWithPercentPrice, newSubscriptionPackageWithAllocationPrice, newSubscriptionTierWithProrationPrice, newSubscriptionUnitWithProrationPrice, newSubscriptionGroupedAllocationPrice, newSubscriptionGroupedWithProratedMinimumPrice, newSubscriptionBulkWithProrationPrice) /* spotless:on */

            override fun toString(): String =
                when {
                    newSubscriptionUnitPrice != null ->
                        "Price{newSubscriptionUnitPrice=$newSubscriptionUnitPrice}"
                    newSubscriptionPackagePrice != null ->
                        "Price{newSubscriptionPackagePrice=$newSubscriptionPackagePrice}"
                    newSubscriptionMatrixPrice != null ->
                        "Price{newSubscriptionMatrixPrice=$newSubscriptionMatrixPrice}"
                    newSubscriptionTieredPrice != null ->
                        "Price{newSubscriptionTieredPrice=$newSubscriptionTieredPrice}"
                    newSubscriptionTieredBpsPrice != null ->
                        "Price{newSubscriptionTieredBpsPrice=$newSubscriptionTieredBpsPrice}"
                    newSubscriptionBpsPrice != null ->
                        "Price{newSubscriptionBpsPrice=$newSubscriptionBpsPrice}"
                    newSubscriptionBulkBpsPrice != null ->
                        "Price{newSubscriptionBulkBpsPrice=$newSubscriptionBulkBpsPrice}"
                    newSubscriptionBulkPrice != null ->
                        "Price{newSubscriptionBulkPrice=$newSubscriptionBulkPrice}"
                    newSubscriptionThresholdTotalAmountPrice != null ->
                        "Price{newSubscriptionThresholdTotalAmountPrice=$newSubscriptionThresholdTotalAmountPrice}"
                    newSubscriptionTieredPackagePrice != null ->
                        "Price{newSubscriptionTieredPackagePrice=$newSubscriptionTieredPackagePrice}"
                    newSubscriptionTieredWithMinimumPrice != null ->
                        "Price{newSubscriptionTieredWithMinimumPrice=$newSubscriptionTieredWithMinimumPrice}"
                    newSubscriptionUnitWithPercentPrice != null ->
                        "Price{newSubscriptionUnitWithPercentPrice=$newSubscriptionUnitWithPercentPrice}"
                    newSubscriptionPackageWithAllocationPrice != null ->
                        "Price{newSubscriptionPackageWithAllocationPrice=$newSubscriptionPackageWithAllocationPrice}"
                    newSubscriptionTierWithProrationPrice != null ->
                        "Price{newSubscriptionTierWithProrationPrice=$newSubscriptionTierWithProrationPrice}"
                    newSubscriptionUnitWithProrationPrice != null ->
                        "Price{newSubscriptionUnitWithProrationPrice=$newSubscriptionUnitWithProrationPrice}"
                    newSubscriptionGroupedAllocationPrice != null ->
                        "Price{newSubscriptionGroupedAllocationPrice=$newSubscriptionGroupedAllocationPrice}"
                    newSubscriptionGroupedWithProratedMinimumPrice != null ->
                        "Price{newSubscriptionGroupedWithProratedMinimumPrice=$newSubscriptionGroupedWithProratedMinimumPrice}"
                    newSubscriptionBulkWithProrationPrice != null ->
                        "Price{newSubscriptionBulkWithProrationPrice=$newSubscriptionBulkWithProrationPrice}"
                    _json != null -> "Price{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Price")
                }

            companion object {

                @JvmStatic
                fun ofNewSubscriptionUnitPrice(newSubscriptionUnitPrice: NewSubscriptionUnitPrice) =
                    Price(newSubscriptionUnitPrice = newSubscriptionUnitPrice)

                @JvmStatic
                fun ofNewSubscriptionPackagePrice(
                    newSubscriptionPackagePrice: NewSubscriptionPackagePrice
                ) = Price(newSubscriptionPackagePrice = newSubscriptionPackagePrice)

                @JvmStatic
                fun ofNewSubscriptionMatrixPrice(
                    newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice
                ) = Price(newSubscriptionMatrixPrice = newSubscriptionMatrixPrice)

                @JvmStatic
                fun ofNewSubscriptionTieredPrice(
                    newSubscriptionTieredPrice: NewSubscriptionTieredPrice
                ) = Price(newSubscriptionTieredPrice = newSubscriptionTieredPrice)

                @JvmStatic
                fun ofNewSubscriptionTieredBpsPrice(
                    newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                ) = Price(newSubscriptionTieredBpsPrice = newSubscriptionTieredBpsPrice)

                @JvmStatic
                fun ofNewSubscriptionBpsPrice(newSubscriptionBpsPrice: NewSubscriptionBpsPrice) =
                    Price(newSubscriptionBpsPrice = newSubscriptionBpsPrice)

                @JvmStatic
                fun ofNewSubscriptionBulkBpsPrice(
                    newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice
                ) = Price(newSubscriptionBulkBpsPrice = newSubscriptionBulkBpsPrice)

                @JvmStatic
                fun ofNewSubscriptionBulkPrice(newSubscriptionBulkPrice: NewSubscriptionBulkPrice) =
                    Price(newSubscriptionBulkPrice = newSubscriptionBulkPrice)

                @JvmStatic
                fun ofNewSubscriptionThresholdTotalAmountPrice(
                    newSubscriptionThresholdTotalAmountPrice:
                        NewSubscriptionThresholdTotalAmountPrice
                ) =
                    Price(
                        newSubscriptionThresholdTotalAmountPrice =
                            newSubscriptionThresholdTotalAmountPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionTieredPackagePrice(
                    newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                ) = Price(newSubscriptionTieredPackagePrice = newSubscriptionTieredPackagePrice)

                @JvmStatic
                fun ofNewSubscriptionTieredWithMinimumPrice(
                    newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                ) =
                    Price(
                        newSubscriptionTieredWithMinimumPrice =
                            newSubscriptionTieredWithMinimumPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionUnitWithPercentPrice(
                    newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                ) = Price(newSubscriptionUnitWithPercentPrice = newSubscriptionUnitWithPercentPrice)

                @JvmStatic
                fun ofNewSubscriptionPackageWithAllocationPrice(
                    newSubscriptionPackageWithAllocationPrice:
                        NewSubscriptionPackageWithAllocationPrice
                ) =
                    Price(
                        newSubscriptionPackageWithAllocationPrice =
                            newSubscriptionPackageWithAllocationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionTierWithProrationPrice(
                    newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                ) =
                    Price(
                        newSubscriptionTierWithProrationPrice =
                            newSubscriptionTierWithProrationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionUnitWithProrationPrice(
                    newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                ) =
                    Price(
                        newSubscriptionUnitWithProrationPrice =
                            newSubscriptionUnitWithProrationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionGroupedAllocationPrice(
                    newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                ) =
                    Price(
                        newSubscriptionGroupedAllocationPrice =
                            newSubscriptionGroupedAllocationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionGroupedWithProratedMinimumPrice(
                    newSubscriptionGroupedWithProratedMinimumPrice:
                        NewSubscriptionGroupedWithProratedMinimumPrice
                ) =
                    Price(
                        newSubscriptionGroupedWithProratedMinimumPrice =
                            newSubscriptionGroupedWithProratedMinimumPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionBulkWithProrationPrice(
                    newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                ) =
                    Price(
                        newSubscriptionBulkWithProrationPrice =
                            newSubscriptionBulkWithProrationPrice
                    )
            }

            interface Visitor<out T> {

                fun visitNewSubscriptionUnitPrice(
                    newSubscriptionUnitPrice: NewSubscriptionUnitPrice
                ): T

                fun visitNewSubscriptionPackagePrice(
                    newSubscriptionPackagePrice: NewSubscriptionPackagePrice
                ): T

                fun visitNewSubscriptionMatrixPrice(
                    newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice
                ): T

                fun visitNewSubscriptionTieredPrice(
                    newSubscriptionTieredPrice: NewSubscriptionTieredPrice
                ): T

                fun visitNewSubscriptionTieredBpsPrice(
                    newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                ): T

                fun visitNewSubscriptionBpsPrice(
                    newSubscriptionBpsPrice: NewSubscriptionBpsPrice
                ): T

                fun visitNewSubscriptionBulkBpsPrice(
                    newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice
                ): T

                fun visitNewSubscriptionBulkPrice(
                    newSubscriptionBulkPrice: NewSubscriptionBulkPrice
                ): T

                fun visitNewSubscriptionThresholdTotalAmountPrice(
                    newSubscriptionThresholdTotalAmountPrice:
                        NewSubscriptionThresholdTotalAmountPrice
                ): T

                fun visitNewSubscriptionTieredPackagePrice(
                    newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                ): T

                fun visitNewSubscriptionTieredWithMinimumPrice(
                    newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                ): T

                fun visitNewSubscriptionUnitWithPercentPrice(
                    newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                ): T

                fun visitNewSubscriptionPackageWithAllocationPrice(
                    newSubscriptionPackageWithAllocationPrice:
                        NewSubscriptionPackageWithAllocationPrice
                ): T

                fun visitNewSubscriptionTierWithProrationPrice(
                    newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                ): T

                fun visitNewSubscriptionUnitWithProrationPrice(
                    newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                ): T

                fun visitNewSubscriptionGroupedAllocationPrice(
                    newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                ): T

                fun visitNewSubscriptionGroupedWithProratedMinimumPrice(
                    newSubscriptionGroupedWithProratedMinimumPrice:
                        NewSubscriptionGroupedWithProratedMinimumPrice
                ): T

                fun visitNewSubscriptionBulkWithProrationPrice(
                    newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Price: $json")
                }
            }

            class Deserializer : BaseDeserializer<Price>(Price::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Price {
                    val json = JsonValue.fromJsonNode(node)
                    val modelType =
                        json.asObject().getOrNull()?.get("model_type")?.asString()?.getOrNull()

                    when (modelType) {
                        "unit" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionUnitPrice>())?.let {
                                return Price(newSubscriptionUnitPrice = it, _json = json)
                            }
                        }
                        "package" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionPackagePrice>())
                                ?.let {
                                    return Price(newSubscriptionPackagePrice = it, _json = json)
                                }
                        }
                        "matrix" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionMatrixPrice>())
                                ?.let {
                                    return Price(newSubscriptionMatrixPrice = it, _json = json)
                                }
                        }
                        "tiered" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionTieredPrice>())
                                ?.let {
                                    return Price(newSubscriptionTieredPrice = it, _json = json)
                                }
                        }
                        "tiered_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionTieredBpsPrice>())
                                ?.let {
                                    return Price(newSubscriptionTieredBpsPrice = it, _json = json)
                                }
                        }
                        "bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBpsPrice>())?.let {
                                return Price(newSubscriptionBpsPrice = it, _json = json)
                            }
                        }
                        "bulk_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBulkBpsPrice>())
                                ?.let {
                                    return Price(newSubscriptionBulkBpsPrice = it, _json = json)
                                }
                        }
                        "bulk" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBulkPrice>())?.let {
                                return Price(newSubscriptionBulkPrice = it, _json = json)
                            }
                        }
                        "threshold_total_amount" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionThresholdTotalAmountPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionThresholdTotalAmountPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_package" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTieredPackagePrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionTieredPackagePrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_with_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTieredWithMinimumPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionTieredWithMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "unit_with_percent" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionUnitWithPercentPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionUnitWithPercentPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "package_with_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionPackageWithAllocationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionPackageWithAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTierWithProrationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionTierWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "unit_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionUnitWithProrationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionUnitWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionGroupedAllocationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionGroupedAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_with_prorated_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionGroupedWithProratedMinimumPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionGroupedWithProratedMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "bulk_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionBulkWithProrationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionBulkWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                    }

                    return Price(_json = json)
                }
            }

            class Serializer : BaseSerializer<Price>(Price::class) {

                override fun serialize(
                    value: Price,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.newSubscriptionUnitPrice != null ->
                            generator.writeObject(value.newSubscriptionUnitPrice)
                        value.newSubscriptionPackagePrice != null ->
                            generator.writeObject(value.newSubscriptionPackagePrice)
                        value.newSubscriptionMatrixPrice != null ->
                            generator.writeObject(value.newSubscriptionMatrixPrice)
                        value.newSubscriptionTieredPrice != null ->
                            generator.writeObject(value.newSubscriptionTieredPrice)
                        value.newSubscriptionTieredBpsPrice != null ->
                            generator.writeObject(value.newSubscriptionTieredBpsPrice)
                        value.newSubscriptionBpsPrice != null ->
                            generator.writeObject(value.newSubscriptionBpsPrice)
                        value.newSubscriptionBulkBpsPrice != null ->
                            generator.writeObject(value.newSubscriptionBulkBpsPrice)
                        value.newSubscriptionBulkPrice != null ->
                            generator.writeObject(value.newSubscriptionBulkPrice)
                        value.newSubscriptionThresholdTotalAmountPrice != null ->
                            generator.writeObject(value.newSubscriptionThresholdTotalAmountPrice)
                        value.newSubscriptionTieredPackagePrice != null ->
                            generator.writeObject(value.newSubscriptionTieredPackagePrice)
                        value.newSubscriptionTieredWithMinimumPrice != null ->
                            generator.writeObject(value.newSubscriptionTieredWithMinimumPrice)
                        value.newSubscriptionUnitWithPercentPrice != null ->
                            generator.writeObject(value.newSubscriptionUnitWithPercentPrice)
                        value.newSubscriptionPackageWithAllocationPrice != null ->
                            generator.writeObject(value.newSubscriptionPackageWithAllocationPrice)
                        value.newSubscriptionTierWithProrationPrice != null ->
                            generator.writeObject(value.newSubscriptionTierWithProrationPrice)
                        value.newSubscriptionUnitWithProrationPrice != null ->
                            generator.writeObject(value.newSubscriptionUnitWithProrationPrice)
                        value.newSubscriptionGroupedAllocationPrice != null ->
                            generator.writeObject(value.newSubscriptionGroupedAllocationPrice)
                        value.newSubscriptionGroupedWithProratedMinimumPrice != null ->
                            generator.writeObject(
                                value.newSubscriptionGroupedWithProratedMinimumPrice
                            )
                        value.newSubscriptionBulkWithProrationPrice != null ->
                            generator.writeObject(value.newSubscriptionBulkWithProrationPrice)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Price")
                    }
                }
            }

            @NoAutoDetect
            class NewSubscriptionUnitPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("unit_config") private val unitConfig: UnitConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("unit_config") fun unitConfig(): UnitConfig = unitConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var unitConfig: UnitConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionUnitPrice: NewSubscriptionUnitPrice) = apply {
                        cadence = newSubscriptionUnitPrice.cadence
                        itemId = newSubscriptionUnitPrice.itemId
                        modelType = newSubscriptionUnitPrice.modelType
                        name = newSubscriptionUnitPrice.name
                        unitConfig = newSubscriptionUnitPrice.unitConfig
                        billableMetricId = newSubscriptionUnitPrice.billableMetricId
                        billedInAdvance = newSubscriptionUnitPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionUnitPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionUnitPrice.conversionRate
                        currency = newSubscriptionUnitPrice.currency
                        externalPriceId = newSubscriptionUnitPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionUnitPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionUnitPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionUnitPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionUnitPrice.metadata
                        referenceId = newSubscriptionUnitPrice.referenceId
                        additionalProperties =
                            newSubscriptionUnitPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun unitConfig(unitConfig: UnitConfig) = apply { this.unitConfig = unitConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionUnitPrice =
                        NewSubscriptionUnitPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(unitConfig) { "`unitConfig` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT = of("unit")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT,
                    }

                    enum class Value {
                        UNIT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT -> Value.UNIT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT -> Known.UNIT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("unit_amount") private val unitAmount: String,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Rate per unit of usage */
                    @JsonProperty("unit_amount") fun unitAmount(): String = unitAmount

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var unitAmount: String? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitConfig: UnitConfig) = apply {
                            unitAmount = unitConfig.unitAmount
                            additionalProperties = unitConfig.additionalProperties.toMutableMap()
                        }

                        /** Rate per unit of usage */
                        fun unitAmount(unitAmount: String) = apply { this.unitAmount = unitAmount }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitConfig =
                            UnitConfig(
                                checkNotNull(unitAmount) {
                                    "`unitAmount` is required but was not set"
                                },
                                additionalProperties.toImmutable()
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitConfig && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(unitAmount, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitConfig{unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitConfig == other.unitConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionUnitPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitConfig=$unitConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("package_config") private val packageConfig: PackageConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("package_config") fun packageConfig(): PackageConfig = packageConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var packageConfig: PackageConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionPackagePrice: NewSubscriptionPackagePrice) =
                        apply {
                            cadence = newSubscriptionPackagePrice.cadence
                            itemId = newSubscriptionPackagePrice.itemId
                            modelType = newSubscriptionPackagePrice.modelType
                            name = newSubscriptionPackagePrice.name
                            packageConfig = newSubscriptionPackagePrice.packageConfig
                            billableMetricId = newSubscriptionPackagePrice.billableMetricId
                            billedInAdvance = newSubscriptionPackagePrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionPackagePrice.billingCycleConfiguration
                            conversionRate = newSubscriptionPackagePrice.conversionRate
                            currency = newSubscriptionPackagePrice.currency
                            externalPriceId = newSubscriptionPackagePrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionPackagePrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionPackagePrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionPackagePrice.invoicingCycleConfiguration
                            metadata = newSubscriptionPackagePrice.metadata
                            referenceId = newSubscriptionPackagePrice.referenceId
                            additionalProperties =
                                newSubscriptionPackagePrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun packageConfig(packageConfig: PackageConfig) = apply {
                        this.packageConfig = packageConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionPackagePrice =
                        NewSubscriptionPackagePrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(packageConfig) {
                                "`packageConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE = of("package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        PACKAGE,
                    }

                    enum class Value {
                        PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PACKAGE -> Value.PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PACKAGE -> Known.PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("package_amount") private val packageAmount: String,
                    @JsonProperty("package_size") private val packageSize: Long,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** A currency amount to rate usage by */
                    @JsonProperty("package_amount") fun packageAmount(): String = packageAmount

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    @JsonProperty("package_size") fun packageSize(): Long = packageSize

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var packageAmount: String? = null
                        private var packageSize: Long? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(packageConfig: PackageConfig) = apply {
                            packageAmount = packageConfig.packageAmount
                            packageSize = packageConfig.packageSize
                            additionalProperties = packageConfig.additionalProperties.toMutableMap()
                        }

                        /** A currency amount to rate usage by */
                        fun packageAmount(packageAmount: String) = apply {
                            this.packageAmount = packageAmount
                        }

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        fun packageSize(packageSize: Long) = apply {
                            this.packageSize = packageSize
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageConfig =
                            PackageConfig(
                                checkNotNull(packageAmount) {
                                    "`packageAmount` is required but was not set"
                                },
                                checkNotNull(packageSize) {
                                    "`packageSize` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageConfig && packageAmount == other.packageAmount && packageSize == other.packageSize && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(packageAmount, packageSize, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageConfig{packageAmount=$packageAmount, packageSize=$packageSize, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionPackagePrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && packageConfig == other.packageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, packageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionPackagePrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, packageConfig=$packageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionMatrixPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("matrix_config") private val matrixConfig: MatrixConfig,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("matrix_config") fun matrixConfig(): MatrixConfig = matrixConfig

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var matrixConfig: MatrixConfig? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice) =
                        apply {
                            cadence = newSubscriptionMatrixPrice.cadence
                            itemId = newSubscriptionMatrixPrice.itemId
                            matrixConfig = newSubscriptionMatrixPrice.matrixConfig
                            modelType = newSubscriptionMatrixPrice.modelType
                            name = newSubscriptionMatrixPrice.name
                            billableMetricId = newSubscriptionMatrixPrice.billableMetricId
                            billedInAdvance = newSubscriptionMatrixPrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionMatrixPrice.billingCycleConfiguration
                            conversionRate = newSubscriptionMatrixPrice.conversionRate
                            currency = newSubscriptionMatrixPrice.currency
                            externalPriceId = newSubscriptionMatrixPrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionMatrixPrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionMatrixPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionMatrixPrice.invoicingCycleConfiguration
                            metadata = newSubscriptionMatrixPrice.metadata
                            referenceId = newSubscriptionMatrixPrice.referenceId
                            additionalProperties =
                                newSubscriptionMatrixPrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun matrixConfig(matrixConfig: MatrixConfig) = apply {
                        this.matrixConfig = matrixConfig
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionMatrixPrice =
                        NewSubscriptionMatrixPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(matrixConfig) {
                                "`matrixConfig` is required but was not set"
                            },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MatrixConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("default_unit_amount") private val defaultUnitAmount: String,
                    @JsonProperty("dimensions") private val dimensions: List<String?>,
                    @JsonProperty("matrix_values") private val matrixValues: List<MatrixValue>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    @JsonProperty("default_unit_amount")
                    fun defaultUnitAmount(): String = defaultUnitAmount

                    /** One or two event property values to evaluate matrix groups by */
                    @JsonProperty("dimensions") fun dimensions(): List<String?> = dimensions

                    /** Matrix values for specified matrix grouping keys */
                    @JsonProperty("matrix_values")
                    fun matrixValues(): List<MatrixValue> = matrixValues

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var defaultUnitAmount: String? = null
                        private var dimensions: MutableList<String?>? = null
                        private var matrixValues: MutableList<MatrixValue>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixConfig: MatrixConfig) = apply {
                            defaultUnitAmount = matrixConfig.defaultUnitAmount
                            dimensions = matrixConfig.dimensions.toMutableList()
                            matrixValues = matrixConfig.matrixValues.toMutableList()
                            additionalProperties = matrixConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: String) = apply {
                            this.defaultUnitAmount = defaultUnitAmount
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: List<String?>) = apply {
                            this.dimensions = dimensions.toMutableList()
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun addDimension(dimension: String) = apply {
                            dimensions = (dimensions ?: mutableListOf()).apply { add(dimension) }
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: List<MatrixValue>) = apply {
                            this.matrixValues = matrixValues.toMutableList()
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun addMatrixValue(matrixValue: MatrixValue) = apply {
                            matrixValues =
                                (matrixValues ?: mutableListOf()).apply { add(matrixValue) }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MatrixConfig =
                            MatrixConfig(
                                checkNotNull(defaultUnitAmount) {
                                    "`defaultUnitAmount` is required but was not set"
                                },
                                checkNotNull(dimensions) {
                                        "`dimensions` is required but was not set"
                                    }
                                    .toImmutable(),
                                checkNotNull(matrixValues) {
                                        "`matrixValues` is required but was not set"
                                    }
                                    .toImmutable(),
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class MatrixValue
                    @JsonCreator
                    private constructor(
                        @JsonProperty("dimension_values")
                        private val dimensionValues: List<String?>,
                        @JsonProperty("unit_amount") private val unitAmount: String,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        @JsonProperty("dimension_values")
                        fun dimensionValues(): List<String?> = dimensionValues

                        /** Unit price for the specified dimension_values */
                        @JsonProperty("unit_amount") fun unitAmount(): String = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var dimensionValues: MutableList<String?>? = null
                            private var unitAmount: String? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(matrixValue: MatrixValue) = apply {
                                dimensionValues = matrixValue.dimensionValues.toMutableList()
                                unitAmount = matrixValue.unitAmount
                                additionalProperties =
                                    matrixValue.additionalProperties.toMutableMap()
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: List<String?>) = apply {
                                this.dimensionValues = dimensionValues.toMutableList()
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun addDimensionValue(dimensionValue: String) = apply {
                                dimensionValues =
                                    (dimensionValues ?: mutableListOf()).apply {
                                        add(dimensionValue)
                                    }
                            }

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: String) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): MatrixValue =
                                MatrixValue(
                                    checkNotNull(dimensionValues) {
                                            "`dimensionValues` is required but was not set"
                                        }
                                        .toImmutable(),
                                    checkNotNull(unitAmount) {
                                        "`unitAmount` is required but was not set"
                                    },
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is MatrixValue && dimensionValues == other.dimensionValues && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(dimensionValues, unitAmount, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "MatrixValue{dimensionValues=$dimensionValues, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixConfig && defaultUnitAmount == other.defaultUnitAmount && dimensions == other.dimensions && matrixValues == other.matrixValues && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(defaultUnitAmount, dimensions, matrixValues, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixConfig{defaultUnitAmount=$defaultUnitAmount, dimensions=$dimensions, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MATRIX = of("matrix")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        MATRIX,
                    }

                    enum class Value {
                        MATRIX,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MATRIX -> Value.MATRIX
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MATRIX -> Known.MATRIX
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionMatrixPrice && cadence == other.cadence && itemId == other.itemId && matrixConfig == other.matrixConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, matrixConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionMatrixPrice{cadence=$cadence, itemId=$itemId, matrixConfig=$matrixConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("tiered_config") private val tieredConfig: TieredConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("tiered_config") fun tieredConfig(): TieredConfig = tieredConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var tieredConfig: TieredConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionTieredPrice: NewSubscriptionTieredPrice) =
                        apply {
                            cadence = newSubscriptionTieredPrice.cadence
                            itemId = newSubscriptionTieredPrice.itemId
                            modelType = newSubscriptionTieredPrice.modelType
                            name = newSubscriptionTieredPrice.name
                            tieredConfig = newSubscriptionTieredPrice.tieredConfig
                            billableMetricId = newSubscriptionTieredPrice.billableMetricId
                            billedInAdvance = newSubscriptionTieredPrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionTieredPrice.billingCycleConfiguration
                            conversionRate = newSubscriptionTieredPrice.conversionRate
                            currency = newSubscriptionTieredPrice.currency
                            externalPriceId = newSubscriptionTieredPrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionTieredPrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionTieredPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionTieredPrice.invoicingCycleConfiguration
                            metadata = newSubscriptionTieredPrice.metadata
                            referenceId = newSubscriptionTieredPrice.referenceId
                            additionalProperties =
                                newSubscriptionTieredPrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun tieredConfig(tieredConfig: TieredConfig) = apply {
                        this.tieredConfig = tieredConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredPrice =
                        NewSubscriptionTieredPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(tieredConfig) {
                                "`tieredConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED = of("tiered")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED,
                    }

                    enum class Value {
                        TIERED,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED -> Value.TIERED
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED -> Known.TIERED
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers") private val tiers: List<Tier>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    @JsonProperty("tiers") fun tiers(): List<Tier> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: MutableList<Tier>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredConfig: TieredConfig) = apply {
                            tiers = tieredConfig.tiers.toMutableList()
                            additionalProperties = tieredConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun tiers(tiers: List<Tier>) = apply { this.tiers = tiers.toMutableList() }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers = (tiers ?: mutableListOf()).apply { add(tier) }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredConfig =
                            TieredConfig(
                                checkNotNull(tiers) { "`tiers` is required but was not set" }
                                    .toImmutable(),
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("first_unit") private val firstUnit: Double,
                        @JsonProperty("unit_amount") private val unitAmount: String,
                        @JsonProperty("last_unit") private val lastUnit: Double?,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Inclusive tier starting value */
                        @JsonProperty("first_unit") fun firstUnit(): Double = firstUnit

                        /** Amount per unit */
                        @JsonProperty("unit_amount") fun unitAmount(): String = unitAmount

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         */
                        @JsonProperty("last_unit")
                        fun lastUnit(): Optional<Double> = Optional.ofNullable(lastUnit)

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var firstUnit: Double? = null
                            private var unitAmount: String? = null
                            private var lastUnit: Double? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                firstUnit = tier.firstUnit
                                unitAmount = tier.unitAmount
                                lastUnit = tier.lastUnit
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Inclusive tier starting value */
                            fun firstUnit(firstUnit: Double) = apply { this.firstUnit = firstUnit }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) = apply {
                                this.unitAmount = unitAmount
                            }

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double?) = apply { this.lastUnit = lastUnit }

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double) = lastUnit(lastUnit as Double?)

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            @Suppress(
                                "USELESS_CAST"
                            ) // See https://youtrack.jetbrains.com/issue/KT-74228
                            fun lastUnit(lastUnit: Optional<Double>) =
                                lastUnit(lastUnit.orElse(null) as Double?)

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkNotNull(firstUnit) {
                                        "`firstUnit` is required but was not set"
                                    },
                                    checkNotNull(unitAmount) {
                                        "`unitAmount` is required but was not set"
                                    },
                                    lastUnit,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && firstUnit == other.firstUnit && unitAmount == other.unitAmount && lastUnit == other.lastUnit && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(firstUnit, unitAmount, lastUnit, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{firstUnit=$firstUnit, unitAmount=$unitAmount, lastUnit=$lastUnit, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredConfig == other.tieredConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredConfig=$tieredConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("tiered_bps_config") private val tieredBpsConfig: TieredBpsConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("tiered_bps_config")
                fun tieredBpsConfig(): TieredBpsConfig = tieredBpsConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var tieredBpsConfig: TieredBpsConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                    ) = apply {
                        cadence = newSubscriptionTieredBpsPrice.cadence
                        itemId = newSubscriptionTieredBpsPrice.itemId
                        modelType = newSubscriptionTieredBpsPrice.modelType
                        name = newSubscriptionTieredBpsPrice.name
                        tieredBpsConfig = newSubscriptionTieredBpsPrice.tieredBpsConfig
                        billableMetricId = newSubscriptionTieredBpsPrice.billableMetricId
                        billedInAdvance = newSubscriptionTieredBpsPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTieredBpsPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTieredBpsPrice.conversionRate
                        currency = newSubscriptionTieredBpsPrice.currency
                        externalPriceId = newSubscriptionTieredBpsPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionTieredBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionTieredBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTieredBpsPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTieredBpsPrice.metadata
                        referenceId = newSubscriptionTieredBpsPrice.referenceId
                        additionalProperties =
                            newSubscriptionTieredBpsPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun tieredBpsConfig(tieredBpsConfig: TieredBpsConfig) = apply {
                        this.tieredBpsConfig = tieredBpsConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredBpsPrice =
                        NewSubscriptionTieredBpsPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(tieredBpsConfig) {
                                "`tieredBpsConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_BPS = of("tiered_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_BPS,
                    }

                    enum class Value {
                        TIERED_BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_BPS -> Value.TIERED_BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_BPS -> Known.TIERED_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers") private val tiers: List<Tier>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    @JsonProperty("tiers") fun tiers(): List<Tier> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: MutableList<Tier>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredBpsConfig: TieredBpsConfig) = apply {
                            tiers = tieredBpsConfig.tiers.toMutableList()
                            additionalProperties =
                                tieredBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun tiers(tiers: List<Tier>) = apply { this.tiers = tiers.toMutableList() }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers = (tiers ?: mutableListOf()).apply { add(tier) }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredBpsConfig =
                            TieredBpsConfig(
                                checkNotNull(tiers) { "`tiers` is required but was not set" }
                                    .toImmutable(),
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps") private val bps: Double,
                        @JsonProperty("minimum_amount") private val minimumAmount: String,
                        @JsonProperty("maximum_amount") private val maximumAmount: String?,
                        @JsonProperty("per_unit_maximum") private val perUnitMaximum: String?,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Per-event basis point rate */
                        @JsonProperty("bps") fun bps(): Double = bps

                        /** Inclusive tier starting value */
                        @JsonProperty("minimum_amount") fun minimumAmount(): String = minimumAmount

                        /** Exclusive tier ending value */
                        @JsonProperty("maximum_amount")
                        fun maximumAmount(): Optional<String> = Optional.ofNullable(maximumAmount)

                        /** Per unit maximum to charge */
                        @JsonProperty("per_unit_maximum")
                        fun perUnitMaximum(): Optional<String> = Optional.ofNullable(perUnitMaximum)

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var bps: Double? = null
                            private var minimumAmount: String? = null
                            private var maximumAmount: String? = null
                            private var perUnitMaximum: String? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                bps = tier.bps
                                minimumAmount = tier.minimumAmount
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Per-event basis point rate */
                            fun bps(bps: Double) = apply { this.bps = bps }

                            /** Inclusive tier starting value */
                            fun minimumAmount(minimumAmount: String) = apply {
                                this.minimumAmount = minimumAmount
                            }

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: String?) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: Optional<String>) =
                                maximumAmount(maximumAmount.orElse(null))

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: String?) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                                perUnitMaximum(perUnitMaximum.orElse(null))

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkNotNull(bps) { "`bps` is required but was not set" },
                                    checkNotNull(minimumAmount) {
                                        "`minimumAmount` is required but was not set"
                                    },
                                    maximumAmount,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && bps == other.bps && minimumAmount == other.minimumAmount && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(bps, minimumAmount, maximumAmount, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{bps=$bps, minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredBpsPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredBpsConfig == other.tieredBpsConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredBpsConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredBpsPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredBpsConfig=$tieredBpsConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bps_config") private val bpsConfig: BpsConfig,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("bps_config") fun bpsConfig(): BpsConfig = bpsConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var bpsConfig: BpsConfig? = null
                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBpsPrice: NewSubscriptionBpsPrice) = apply {
                        bpsConfig = newSubscriptionBpsPrice.bpsConfig
                        cadence = newSubscriptionBpsPrice.cadence
                        itemId = newSubscriptionBpsPrice.itemId
                        modelType = newSubscriptionBpsPrice.modelType
                        name = newSubscriptionBpsPrice.name
                        billableMetricId = newSubscriptionBpsPrice.billableMetricId
                        billedInAdvance = newSubscriptionBpsPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionBpsPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionBpsPrice.conversionRate
                        currency = newSubscriptionBpsPrice.currency
                        externalPriceId = newSubscriptionBpsPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionBpsPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionBpsPrice.metadata
                        referenceId = newSubscriptionBpsPrice.referenceId
                        additionalProperties =
                            newSubscriptionBpsPrice.additionalProperties.toMutableMap()
                    }

                    fun bpsConfig(bpsConfig: BpsConfig) = apply { this.bpsConfig = bpsConfig }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBpsPrice =
                        NewSubscriptionBpsPrice(
                            checkNotNull(bpsConfig) { "`bpsConfig` is required but was not set" },
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("bps") private val bps: Double,
                    @JsonProperty("per_unit_maximum") private val perUnitMaximum: String?,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Basis point take rate per event */
                    @JsonProperty("bps") fun bps(): Double = bps

                    /** Optional currency amount maximum to cap spend per event */
                    @JsonProperty("per_unit_maximum")
                    fun perUnitMaximum(): Optional<String> = Optional.ofNullable(perUnitMaximum)

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var bps: Double? = null
                        private var perUnitMaximum: String? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bpsConfig: BpsConfig) = apply {
                            bps = bpsConfig.bps
                            perUnitMaximum = bpsConfig.perUnitMaximum
                            additionalProperties = bpsConfig.additionalProperties.toMutableMap()
                        }

                        /** Basis point take rate per event */
                        fun bps(bps: Double) = apply { this.bps = bps }

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: String?) = apply {
                            this.perUnitMaximum = perUnitMaximum
                        }

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                            perUnitMaximum(perUnitMaximum.orElse(null))

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BpsConfig =
                            BpsConfig(
                                checkNotNull(bps) { "`bps` is required but was not set" },
                                perUnitMaximum,
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BpsConfig && bps == other.bps && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(bps, perUnitMaximum, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BpsConfig{bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BPS = of("bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BPS,
                    }

                    enum class Value {
                        BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BPS -> Value.BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BPS -> Known.BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBpsPrice && bpsConfig == other.bpsConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bpsConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBpsPrice{bpsConfig=$bpsConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBulkBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_bps_config") private val bulkBpsConfig: BulkBpsConfig,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("bulk_bps_config") fun bulkBpsConfig(): BulkBpsConfig = bulkBpsConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var bulkBpsConfig: BulkBpsConfig? = null
                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice) =
                        apply {
                            bulkBpsConfig = newSubscriptionBulkBpsPrice.bulkBpsConfig
                            cadence = newSubscriptionBulkBpsPrice.cadence
                            itemId = newSubscriptionBulkBpsPrice.itemId
                            modelType = newSubscriptionBulkBpsPrice.modelType
                            name = newSubscriptionBulkBpsPrice.name
                            billableMetricId = newSubscriptionBulkBpsPrice.billableMetricId
                            billedInAdvance = newSubscriptionBulkBpsPrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionBulkBpsPrice.billingCycleConfiguration
                            conversionRate = newSubscriptionBulkBpsPrice.conversionRate
                            currency = newSubscriptionBulkBpsPrice.currency
                            externalPriceId = newSubscriptionBulkBpsPrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionBulkBpsPrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionBulkBpsPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionBulkBpsPrice.invoicingCycleConfiguration
                            metadata = newSubscriptionBulkBpsPrice.metadata
                            referenceId = newSubscriptionBulkBpsPrice.referenceId
                            additionalProperties =
                                newSubscriptionBulkBpsPrice.additionalProperties.toMutableMap()
                        }

                    fun bulkBpsConfig(bulkBpsConfig: BulkBpsConfig) = apply {
                        this.bulkBpsConfig = bulkBpsConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBulkBpsPrice =
                        NewSubscriptionBulkBpsPrice(
                            checkNotNull(bulkBpsConfig) {
                                "`bulkBpsConfig` is required but was not set"
                            },
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers") private val tiers: List<Tier>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    @JsonProperty("tiers") fun tiers(): List<Tier> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: MutableList<Tier>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkBpsConfig: BulkBpsConfig) = apply {
                            tiers = bulkBpsConfig.tiers.toMutableList()
                            additionalProperties = bulkBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun tiers(tiers: List<Tier>) = apply { this.tiers = tiers.toMutableList() }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers = (tiers ?: mutableListOf()).apply { add(tier) }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkBpsConfig =
                            BulkBpsConfig(
                                checkNotNull(tiers) { "`tiers` is required but was not set" }
                                    .toImmutable(),
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps") private val bps: Double,
                        @JsonProperty("maximum_amount") private val maximumAmount: String?,
                        @JsonProperty("per_unit_maximum") private val perUnitMaximum: String?,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Basis points to rate on */
                        @JsonProperty("bps") fun bps(): Double = bps

                        /** Upper bound for tier */
                        @JsonProperty("maximum_amount")
                        fun maximumAmount(): Optional<String> = Optional.ofNullable(maximumAmount)

                        /** The maximum amount to charge for any one event */
                        @JsonProperty("per_unit_maximum")
                        fun perUnitMaximum(): Optional<String> = Optional.ofNullable(perUnitMaximum)

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var bps: Double? = null
                            private var maximumAmount: String? = null
                            private var perUnitMaximum: String? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                bps = tier.bps
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Basis points to rate on */
                            fun bps(bps: Double) = apply { this.bps = bps }

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: String?) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: Optional<String>) =
                                maximumAmount(maximumAmount.orElse(null))

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: String?) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                                perUnitMaximum(perUnitMaximum.orElse(null))

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkNotNull(bps) { "`bps` is required but was not set" },
                                    maximumAmount,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && bps == other.bps && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(bps, maximumAmount, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{bps=$bps, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_BPS = of("bulk_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK_BPS,
                    }

                    enum class Value {
                        BULK_BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK_BPS -> Value.BULK_BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK_BPS -> Known.BULK_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkBpsPrice && bulkBpsConfig == other.bulkBpsConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkBpsConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBulkBpsPrice{bulkBpsConfig=$bulkBpsConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBulkPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_config") private val bulkConfig: BulkConfig,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("bulk_config") fun bulkConfig(): BulkConfig = bulkConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var bulkConfig: BulkConfig? = null
                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBulkPrice: NewSubscriptionBulkPrice) = apply {
                        bulkConfig = newSubscriptionBulkPrice.bulkConfig
                        cadence = newSubscriptionBulkPrice.cadence
                        itemId = newSubscriptionBulkPrice.itemId
                        modelType = newSubscriptionBulkPrice.modelType
                        name = newSubscriptionBulkPrice.name
                        billableMetricId = newSubscriptionBulkPrice.billableMetricId
                        billedInAdvance = newSubscriptionBulkPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionBulkPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionBulkPrice.conversionRate
                        currency = newSubscriptionBulkPrice.currency
                        externalPriceId = newSubscriptionBulkPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionBulkPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionBulkPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionBulkPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionBulkPrice.metadata
                        referenceId = newSubscriptionBulkPrice.referenceId
                        additionalProperties =
                            newSubscriptionBulkPrice.additionalProperties.toMutableMap()
                    }

                    fun bulkConfig(bulkConfig: BulkConfig) = apply { this.bulkConfig = bulkConfig }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBulkPrice =
                        NewSubscriptionBulkPrice(
                            checkNotNull(bulkConfig) { "`bulkConfig` is required but was not set" },
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers") private val tiers: List<Tier>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Bulk tiers for rating based on total usage volume */
                    @JsonProperty("tiers") fun tiers(): List<Tier> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: MutableList<Tier>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkConfig: BulkConfig) = apply {
                            tiers = bulkConfig.tiers.toMutableList()
                            additionalProperties = bulkConfig.additionalProperties.toMutableMap()
                        }

                        /** Bulk tiers for rating based on total usage volume */
                        fun tiers(tiers: List<Tier>) = apply { this.tiers = tiers.toMutableList() }

                        /** Bulk tiers for rating based on total usage volume */
                        fun addTier(tier: Tier) = apply {
                            tiers = (tiers ?: mutableListOf()).apply { add(tier) }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkConfig =
                            BulkConfig(
                                checkNotNull(tiers) { "`tiers` is required but was not set" }
                                    .toImmutable(),
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("unit_amount") private val unitAmount: String,
                        @JsonProperty("maximum_units") private val maximumUnits: Double?,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Amount per unit */
                        @JsonProperty("unit_amount") fun unitAmount(): String = unitAmount

                        /** Upper bound for this tier */
                        @JsonProperty("maximum_units")
                        fun maximumUnits(): Optional<Double> = Optional.ofNullable(maximumUnits)

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var unitAmount: String? = null
                            private var maximumUnits: Double? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                unitAmount = tier.unitAmount
                                maximumUnits = tier.maximumUnits
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) = apply {
                                this.unitAmount = unitAmount
                            }

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double?) = apply {
                                this.maximumUnits = maximumUnits
                            }

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double) =
                                maximumUnits(maximumUnits as Double?)

                            /** Upper bound for this tier */
                            @Suppress(
                                "USELESS_CAST"
                            ) // See https://youtrack.jetbrains.com/issue/KT-74228
                            fun maximumUnits(maximumUnits: Optional<Double>) =
                                maximumUnits(maximumUnits.orElse(null) as Double?)

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkNotNull(unitAmount) {
                                        "`unitAmount` is required but was not set"
                                    },
                                    maximumUnits,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && unitAmount == other.unitAmount && maximumUnits == other.maximumUnits && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(unitAmount, maximumUnits, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{unitAmount=$unitAmount, maximumUnits=$maximumUnits, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK = of("bulk")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK,
                    }

                    enum class Value {
                        BULK,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK -> Value.BULK
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK -> Known.BULK
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkPrice && bulkConfig == other.bulkConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBulkPrice{bulkConfig=$bulkConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionThresholdTotalAmountPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("threshold_total_amount_config")
                private val thresholdTotalAmountConfig: ThresholdTotalAmountConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("threshold_total_amount_config")
                fun thresholdTotalAmountConfig(): ThresholdTotalAmountConfig =
                    thresholdTotalAmountConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var thresholdTotalAmountConfig: ThresholdTotalAmountConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionThresholdTotalAmountPrice:
                            NewSubscriptionThresholdTotalAmountPrice
                    ) = apply {
                        cadence = newSubscriptionThresholdTotalAmountPrice.cadence
                        itemId = newSubscriptionThresholdTotalAmountPrice.itemId
                        modelType = newSubscriptionThresholdTotalAmountPrice.modelType
                        name = newSubscriptionThresholdTotalAmountPrice.name
                        thresholdTotalAmountConfig =
                            newSubscriptionThresholdTotalAmountPrice.thresholdTotalAmountConfig
                        billableMetricId = newSubscriptionThresholdTotalAmountPrice.billableMetricId
                        billedInAdvance = newSubscriptionThresholdTotalAmountPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionThresholdTotalAmountPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionThresholdTotalAmountPrice.conversionRate
                        currency = newSubscriptionThresholdTotalAmountPrice.currency
                        externalPriceId = newSubscriptionThresholdTotalAmountPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionThresholdTotalAmountPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionThresholdTotalAmountPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionThresholdTotalAmountPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionThresholdTotalAmountPrice.metadata
                        referenceId = newSubscriptionThresholdTotalAmountPrice.referenceId
                        additionalProperties =
                            newSubscriptionThresholdTotalAmountPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: ThresholdTotalAmountConfig
                    ) = apply { this.thresholdTotalAmountConfig = thresholdTotalAmountConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionThresholdTotalAmountPrice =
                        NewSubscriptionThresholdTotalAmountPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(thresholdTotalAmountConfig) {
                                "`thresholdTotalAmountConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val THRESHOLD_TOTAL_AMOUNT = of("threshold_total_amount")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        THRESHOLD_TOTAL_AMOUNT,
                    }

                    enum class Value {
                        THRESHOLD_TOTAL_AMOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Value.THRESHOLD_TOTAL_AMOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Known.THRESHOLD_TOTAL_AMOUNT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class ThresholdTotalAmountConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(thresholdTotalAmountConfig: ThresholdTotalAmountConfig) =
                            apply {
                                additionalProperties =
                                    thresholdTotalAmountConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): ThresholdTotalAmountConfig =
                            ThresholdTotalAmountConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ThresholdTotalAmountConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "ThresholdTotalAmountConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionThresholdTotalAmountPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && thresholdTotalAmountConfig == other.thresholdTotalAmountConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, thresholdTotalAmountConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionThresholdTotalAmountPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, thresholdTotalAmountConfig=$thresholdTotalAmountConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("tiered_package_config")
                private val tieredPackageConfig: TieredPackageConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("tiered_package_config")
                fun tieredPackageConfig(): TieredPackageConfig = tieredPackageConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var tieredPackageConfig: TieredPackageConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                    ) = apply {
                        cadence = newSubscriptionTieredPackagePrice.cadence
                        itemId = newSubscriptionTieredPackagePrice.itemId
                        modelType = newSubscriptionTieredPackagePrice.modelType
                        name = newSubscriptionTieredPackagePrice.name
                        tieredPackageConfig = newSubscriptionTieredPackagePrice.tieredPackageConfig
                        billableMetricId = newSubscriptionTieredPackagePrice.billableMetricId
                        billedInAdvance = newSubscriptionTieredPackagePrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTieredPackagePrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTieredPackagePrice.conversionRate
                        currency = newSubscriptionTieredPackagePrice.currency
                        externalPriceId = newSubscriptionTieredPackagePrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionTieredPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTieredPackagePrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTieredPackagePrice.metadata
                        referenceId = newSubscriptionTieredPackagePrice.referenceId
                        additionalProperties =
                            newSubscriptionTieredPackagePrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun tieredPackageConfig(tieredPackageConfig: TieredPackageConfig) = apply {
                        this.tieredPackageConfig = tieredPackageConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredPackagePrice =
                        NewSubscriptionTieredPackagePrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(tieredPackageConfig) {
                                "`tieredPackageConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_PACKAGE = of("tiered_package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_PACKAGE,
                    }

                    enum class Value {
                        TIERED_PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_PACKAGE -> Value.TIERED_PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_PACKAGE -> Known.TIERED_PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredPackageConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredPackageConfig: TieredPackageConfig) = apply {
                            additionalProperties =
                                tieredPackageConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredPackageConfig =
                            TieredPackageConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredPackageConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredPackagePrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredPackageConfig == other.tieredPackageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredPackageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredPackagePrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredPackageConfig=$tieredPackageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredWithMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("tiered_with_minimum_config")
                private val tieredWithMinimumConfig: TieredWithMinimumConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("tiered_with_minimum_config")
                fun tieredWithMinimumConfig(): TieredWithMinimumConfig = tieredWithMinimumConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var tieredWithMinimumConfig: TieredWithMinimumConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                    ) = apply {
                        cadence = newSubscriptionTieredWithMinimumPrice.cadence
                        itemId = newSubscriptionTieredWithMinimumPrice.itemId
                        modelType = newSubscriptionTieredWithMinimumPrice.modelType
                        name = newSubscriptionTieredWithMinimumPrice.name
                        tieredWithMinimumConfig =
                            newSubscriptionTieredWithMinimumPrice.tieredWithMinimumConfig
                        billableMetricId = newSubscriptionTieredWithMinimumPrice.billableMetricId
                        billedInAdvance = newSubscriptionTieredWithMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTieredWithMinimumPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTieredWithMinimumPrice.conversionRate
                        currency = newSubscriptionTieredWithMinimumPrice.currency
                        externalPriceId = newSubscriptionTieredWithMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionTieredWithMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionTieredWithMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTieredWithMinimumPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTieredWithMinimumPrice.metadata
                        referenceId = newSubscriptionTieredWithMinimumPrice.referenceId
                        additionalProperties =
                            newSubscriptionTieredWithMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun tieredWithMinimumConfig(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                        apply {
                            this.tieredWithMinimumConfig = tieredWithMinimumConfig
                        }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredWithMinimumPrice =
                        NewSubscriptionTieredWithMinimumPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(tieredWithMinimumConfig) {
                                "`tieredWithMinimumConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_MINIMUM = of("tiered_with_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_WITH_MINIMUM,
                    }

                    enum class Value {
                        TIERED_WITH_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Value.TIERED_WITH_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Known.TIERED_WITH_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithMinimumConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithMinimumConfig =
                            TieredWithMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithMinimumConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredWithMinimumPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithMinimumConfig == other.tieredWithMinimumConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredWithMinimumConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredWithMinimumPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredWithMinimumConfig=$tieredWithMinimumConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionUnitWithPercentPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("unit_with_percent_config")
                private val unitWithPercentConfig: UnitWithPercentConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("unit_with_percent_config")
                fun unitWithPercentConfig(): UnitWithPercentConfig = unitWithPercentConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var unitWithPercentConfig: UnitWithPercentConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                    ) = apply {
                        cadence = newSubscriptionUnitWithPercentPrice.cadence
                        itemId = newSubscriptionUnitWithPercentPrice.itemId
                        modelType = newSubscriptionUnitWithPercentPrice.modelType
                        name = newSubscriptionUnitWithPercentPrice.name
                        unitWithPercentConfig =
                            newSubscriptionUnitWithPercentPrice.unitWithPercentConfig
                        billableMetricId = newSubscriptionUnitWithPercentPrice.billableMetricId
                        billedInAdvance = newSubscriptionUnitWithPercentPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionUnitWithPercentPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionUnitWithPercentPrice.conversionRate
                        currency = newSubscriptionUnitWithPercentPrice.currency
                        externalPriceId = newSubscriptionUnitWithPercentPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionUnitWithPercentPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionUnitWithPercentPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionUnitWithPercentPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionUnitWithPercentPrice.metadata
                        referenceId = newSubscriptionUnitWithPercentPrice.referenceId
                        additionalProperties =
                            newSubscriptionUnitWithPercentPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun unitWithPercentConfig(unitWithPercentConfig: UnitWithPercentConfig) =
                        apply {
                            this.unitWithPercentConfig = unitWithPercentConfig
                        }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionUnitWithPercentPrice =
                        NewSubscriptionUnitWithPercentPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(unitWithPercentConfig) {
                                "`unitWithPercentConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PERCENT = of("unit_with_percent")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT_WITH_PERCENT,
                    }

                    enum class Value {
                        UNIT_WITH_PERCENT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PERCENT -> Value.UNIT_WITH_PERCENT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PERCENT -> Known.UNIT_WITH_PERCENT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithPercentConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithPercentConfig: UnitWithPercentConfig) = apply {
                            additionalProperties =
                                unitWithPercentConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithPercentConfig =
                            UnitWithPercentConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithPercentConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithPercentConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitWithPercentPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithPercentConfig == other.unitWithPercentConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitWithPercentConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionUnitWithPercentPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitWithPercentConfig=$unitWithPercentConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionPackageWithAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("package_with_allocation_config")
                private val packageWithAllocationConfig: PackageWithAllocationConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("package_with_allocation_config")
                fun packageWithAllocationConfig(): PackageWithAllocationConfig =
                    packageWithAllocationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var packageWithAllocationConfig: PackageWithAllocationConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionPackageWithAllocationPrice:
                            NewSubscriptionPackageWithAllocationPrice
                    ) = apply {
                        cadence = newSubscriptionPackageWithAllocationPrice.cadence
                        itemId = newSubscriptionPackageWithAllocationPrice.itemId
                        modelType = newSubscriptionPackageWithAllocationPrice.modelType
                        name = newSubscriptionPackageWithAllocationPrice.name
                        packageWithAllocationConfig =
                            newSubscriptionPackageWithAllocationPrice.packageWithAllocationConfig
                        billableMetricId =
                            newSubscriptionPackageWithAllocationPrice.billableMetricId
                        billedInAdvance = newSubscriptionPackageWithAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionPackageWithAllocationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionPackageWithAllocationPrice.conversionRate
                        currency = newSubscriptionPackageWithAllocationPrice.currency
                        externalPriceId = newSubscriptionPackageWithAllocationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionPackageWithAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionPackageWithAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionPackageWithAllocationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionPackageWithAllocationPrice.metadata
                        referenceId = newSubscriptionPackageWithAllocationPrice.referenceId
                        additionalProperties =
                            newSubscriptionPackageWithAllocationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: PackageWithAllocationConfig
                    ) = apply { this.packageWithAllocationConfig = packageWithAllocationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionPackageWithAllocationPrice =
                        NewSubscriptionPackageWithAllocationPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(packageWithAllocationConfig) {
                                "`packageWithAllocationConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE_WITH_ALLOCATION = of("package_with_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        PACKAGE_WITH_ALLOCATION,
                    }

                    enum class Value {
                        PACKAGE_WITH_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Value.PACKAGE_WITH_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Known.PACKAGE_WITH_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageWithAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            packageWithAllocationConfig: PackageWithAllocationConfig
                        ) = apply {
                            additionalProperties =
                                packageWithAllocationConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageWithAllocationConfig =
                            PackageWithAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageWithAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageWithAllocationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionPackageWithAllocationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && packageWithAllocationConfig == other.packageWithAllocationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, packageWithAllocationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionPackageWithAllocationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, packageWithAllocationConfig=$packageWithAllocationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTierWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("tiered_with_proration_config")
                private val tieredWithProrationConfig: TieredWithProrationConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("tiered_with_proration_config")
                fun tieredWithProrationConfig(): TieredWithProrationConfig =
                    tieredWithProrationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var tieredWithProrationConfig: TieredWithProrationConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                    ) = apply {
                        cadence = newSubscriptionTierWithProrationPrice.cadence
                        itemId = newSubscriptionTierWithProrationPrice.itemId
                        modelType = newSubscriptionTierWithProrationPrice.modelType
                        name = newSubscriptionTierWithProrationPrice.name
                        tieredWithProrationConfig =
                            newSubscriptionTierWithProrationPrice.tieredWithProrationConfig
                        billableMetricId = newSubscriptionTierWithProrationPrice.billableMetricId
                        billedInAdvance = newSubscriptionTierWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTierWithProrationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTierWithProrationPrice.conversionRate
                        currency = newSubscriptionTierWithProrationPrice.currency
                        externalPriceId = newSubscriptionTierWithProrationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionTierWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionTierWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTierWithProrationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTierWithProrationPrice.metadata
                        referenceId = newSubscriptionTierWithProrationPrice.referenceId
                        additionalProperties =
                            newSubscriptionTierWithProrationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: TieredWithProrationConfig
                    ) = apply { this.tieredWithProrationConfig = tieredWithProrationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTierWithProrationPrice =
                        NewSubscriptionTierWithProrationPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(tieredWithProrationConfig) {
                                "`tieredWithProrationConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_PRORATION = of("tiered_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_WITH_PRORATION,
                    }

                    enum class Value {
                        TIERED_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_PRORATION -> Value.TIERED_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_PRORATION -> Known.TIERED_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithProrationConfig: TieredWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithProrationConfig =
                            TieredWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTierWithProrationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithProrationConfig == other.tieredWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTierWithProrationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredWithProrationConfig=$tieredWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionUnitWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("unit_with_proration_config")
                private val unitWithProrationConfig: UnitWithProrationConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("unit_with_proration_config")
                fun unitWithProrationConfig(): UnitWithProrationConfig = unitWithProrationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var unitWithProrationConfig: UnitWithProrationConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                    ) = apply {
                        cadence = newSubscriptionUnitWithProrationPrice.cadence
                        itemId = newSubscriptionUnitWithProrationPrice.itemId
                        modelType = newSubscriptionUnitWithProrationPrice.modelType
                        name = newSubscriptionUnitWithProrationPrice.name
                        unitWithProrationConfig =
                            newSubscriptionUnitWithProrationPrice.unitWithProrationConfig
                        billableMetricId = newSubscriptionUnitWithProrationPrice.billableMetricId
                        billedInAdvance = newSubscriptionUnitWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionUnitWithProrationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionUnitWithProrationPrice.conversionRate
                        currency = newSubscriptionUnitWithProrationPrice.currency
                        externalPriceId = newSubscriptionUnitWithProrationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionUnitWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionUnitWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionUnitWithProrationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionUnitWithProrationPrice.metadata
                        referenceId = newSubscriptionUnitWithProrationPrice.referenceId
                        additionalProperties =
                            newSubscriptionUnitWithProrationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun unitWithProrationConfig(unitWithProrationConfig: UnitWithProrationConfig) =
                        apply {
                            this.unitWithProrationConfig = unitWithProrationConfig
                        }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionUnitWithProrationPrice =
                        NewSubscriptionUnitWithProrationPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(unitWithProrationConfig) {
                                "`unitWithProrationConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PRORATION = of("unit_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT_WITH_PRORATION,
                    }

                    enum class Value {
                        UNIT_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PRORATION -> Value.UNIT_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PRORATION -> Known.UNIT_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithProrationConfig: UnitWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    unitWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithProrationConfig =
                            UnitWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitWithProrationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithProrationConfig == other.unitWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionUnitWithProrationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitWithProrationConfig=$unitWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionGroupedAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("grouped_allocation_config")
                private val groupedAllocationConfig: GroupedAllocationConfig,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                @JsonProperty("grouped_allocation_config")
                fun groupedAllocationConfig(): GroupedAllocationConfig = groupedAllocationConfig

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var groupedAllocationConfig: GroupedAllocationConfig? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                    ) = apply {
                        cadence = newSubscriptionGroupedAllocationPrice.cadence
                        groupedAllocationConfig =
                            newSubscriptionGroupedAllocationPrice.groupedAllocationConfig
                        itemId = newSubscriptionGroupedAllocationPrice.itemId
                        modelType = newSubscriptionGroupedAllocationPrice.modelType
                        name = newSubscriptionGroupedAllocationPrice.name
                        billableMetricId = newSubscriptionGroupedAllocationPrice.billableMetricId
                        billedInAdvance = newSubscriptionGroupedAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionGroupedAllocationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionGroupedAllocationPrice.conversionRate
                        currency = newSubscriptionGroupedAllocationPrice.currency
                        externalPriceId = newSubscriptionGroupedAllocationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionGroupedAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionGroupedAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionGroupedAllocationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionGroupedAllocationPrice.metadata
                        referenceId = newSubscriptionGroupedAllocationPrice.referenceId
                        additionalProperties =
                            newSubscriptionGroupedAllocationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    fun groupedAllocationConfig(groupedAllocationConfig: GroupedAllocationConfig) =
                        apply {
                            this.groupedAllocationConfig = groupedAllocationConfig
                        }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionGroupedAllocationPrice =
                        NewSubscriptionGroupedAllocationPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(groupedAllocationConfig) {
                                "`groupedAllocationConfig` is required but was not set"
                            },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedAllocationConfig: GroupedAllocationConfig) =
                            apply {
                                additionalProperties =
                                    groupedAllocationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedAllocationConfig =
                            GroupedAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedAllocationConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val GROUPED_ALLOCATION = of("grouped_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_ALLOCATION,
                    }

                    enum class Value {
                        GROUPED_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_ALLOCATION -> Value.GROUPED_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_ALLOCATION -> Known.GROUPED_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionGroupedAllocationPrice && cadence == other.cadence && groupedAllocationConfig == other.groupedAllocationConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, groupedAllocationConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionGroupedAllocationPrice{cadence=$cadence, groupedAllocationConfig=$groupedAllocationConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionGroupedWithProratedMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("grouped_with_prorated_minimum_config")
                private val groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                @JsonProperty("grouped_with_prorated_minimum_config")
                fun groupedWithProratedMinimumConfig(): GroupedWithProratedMinimumConfig =
                    groupedWithProratedMinimumConfig

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var groupedWithProratedMinimumConfig:
                        GroupedWithProratedMinimumConfig? =
                        null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionGroupedWithProratedMinimumPrice:
                            NewSubscriptionGroupedWithProratedMinimumPrice
                    ) = apply {
                        cadence = newSubscriptionGroupedWithProratedMinimumPrice.cadence
                        groupedWithProratedMinimumConfig =
                            newSubscriptionGroupedWithProratedMinimumPrice
                                .groupedWithProratedMinimumConfig
                        itemId = newSubscriptionGroupedWithProratedMinimumPrice.itemId
                        modelType = newSubscriptionGroupedWithProratedMinimumPrice.modelType
                        name = newSubscriptionGroupedWithProratedMinimumPrice.name
                        billableMetricId =
                            newSubscriptionGroupedWithProratedMinimumPrice.billableMetricId
                        billedInAdvance =
                            newSubscriptionGroupedWithProratedMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionGroupedWithProratedMinimumPrice.billingCycleConfiguration
                        conversionRate =
                            newSubscriptionGroupedWithProratedMinimumPrice.conversionRate
                        currency = newSubscriptionGroupedWithProratedMinimumPrice.currency
                        externalPriceId =
                            newSubscriptionGroupedWithProratedMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionGroupedWithProratedMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionGroupedWithProratedMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionGroupedWithProratedMinimumPrice
                                .invoicingCycleConfiguration
                        metadata = newSubscriptionGroupedWithProratedMinimumPrice.metadata
                        referenceId = newSubscriptionGroupedWithProratedMinimumPrice.referenceId
                        additionalProperties =
                            newSubscriptionGroupedWithProratedMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                    ) = apply {
                        this.groupedWithProratedMinimumConfig = groupedWithProratedMinimumConfig
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionGroupedWithProratedMinimumPrice =
                        NewSubscriptionGroupedWithProratedMinimumPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(groupedWithProratedMinimumConfig) {
                                "`groupedWithProratedMinimumConfig` is required but was not set"
                            },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedWithProratedMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                        ) = apply {
                            additionalProperties =
                                groupedWithProratedMinimumConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedWithProratedMinimumConfig =
                            GroupedWithProratedMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedWithProratedMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedWithProratedMinimumConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val GROUPED_WITH_PRORATED_MINIMUM = of("grouped_with_prorated_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_WITH_PRORATED_MINIMUM,
                    }

                    enum class Value {
                        GROUPED_WITH_PRORATED_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Value.GROUPED_WITH_PRORATED_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Known.GROUPED_WITH_PRORATED_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionGroupedWithProratedMinimumPrice && cadence == other.cadence && groupedWithProratedMinimumConfig == other.groupedWithProratedMinimumConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, groupedWithProratedMinimumConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionGroupedWithProratedMinimumPrice{cadence=$cadence, groupedWithProratedMinimumConfig=$groupedWithProratedMinimumConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBulkWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_with_proration_config")
                private val bulkWithProrationConfig: BulkWithProrationConfig,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("bulk_with_proration_config")
                fun bulkWithProrationConfig(): BulkWithProrationConfig = bulkWithProrationConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var bulkWithProrationConfig: BulkWithProrationConfig? = null
                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                    ) = apply {
                        bulkWithProrationConfig =
                            newSubscriptionBulkWithProrationPrice.bulkWithProrationConfig
                        cadence = newSubscriptionBulkWithProrationPrice.cadence
                        itemId = newSubscriptionBulkWithProrationPrice.itemId
                        modelType = newSubscriptionBulkWithProrationPrice.modelType
                        name = newSubscriptionBulkWithProrationPrice.name
                        billableMetricId = newSubscriptionBulkWithProrationPrice.billableMetricId
                        billedInAdvance = newSubscriptionBulkWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionBulkWithProrationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionBulkWithProrationPrice.conversionRate
                        currency = newSubscriptionBulkWithProrationPrice.currency
                        externalPriceId = newSubscriptionBulkWithProrationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionBulkWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionBulkWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionBulkWithProrationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionBulkWithProrationPrice.metadata
                        referenceId = newSubscriptionBulkWithProrationPrice.referenceId
                        additionalProperties =
                            newSubscriptionBulkWithProrationPrice.additionalProperties
                                .toMutableMap()
                    }

                    fun bulkWithProrationConfig(bulkWithProrationConfig: BulkWithProrationConfig) =
                        apply {
                            this.bulkWithProrationConfig = bulkWithProrationConfig
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBulkWithProrationPrice =
                        NewSubscriptionBulkWithProrationPrice(
                            checkNotNull(bulkWithProrationConfig) {
                                "`bulkWithProrationConfig` is required but was not set"
                            },
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkWithProrationConfig: BulkWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    bulkWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkWithProrationConfig =
                            BulkWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_WITH_PRORATION = of("bulk_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK_WITH_PRORATION,
                    }

                    enum class Value {
                        BULK_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK_WITH_PRORATION -> Value.BULK_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK_WITH_PRORATION -> Known.BULK_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkWithProrationPrice && bulkWithProrationConfig == other.bulkWithProrationConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkWithProrationConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBulkWithProrationPrice{bulkWithProrationConfig=$bulkWithProrationConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is AddPrice && discounts == other.discounts && endDate == other.endDate && externalPriceId == other.externalPriceId && maximumAmount == other.maximumAmount && minimumAmount == other.minimumAmount && planPhaseOrder == other.planPhaseOrder && price == other.price && priceId == other.priceId && startDate == other.startDate && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(discounts, endDate, externalPriceId, maximumAmount, minimumAmount, planPhaseOrder, price, priceId, startDate, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "AddPrice{discounts=$discounts, endDate=$endDate, externalPriceId=$externalPriceId, maximumAmount=$maximumAmount, minimumAmount=$minimumAmount, planPhaseOrder=$planPhaseOrder, price=$price, priceId=$priceId, startDate=$startDate, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class BillingCycleAnchorConfiguration
    @JsonCreator
    private constructor(
        @JsonProperty("day") private val day: Long,
        @JsonProperty("month") private val month: Long?,
        @JsonProperty("year") private val year: Long?,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /**
         * The day of the month on which the billing cycle is anchored. If the maximum number of
         * days in a month is greater than this value, the last day of the month is the billing
         * cycle day (e.g. billing_cycle_day=31 for April means the billing period begins on the
         * 30th.
         */
        @JsonProperty("day") fun day(): Long = day

        /**
         * The month on which the billing cycle is anchored (e.g. a quarterly price anchored in
         * February would have cycles starting February, May, August, and November).
         */
        @JsonProperty("month") fun month(): Optional<Long> = Optional.ofNullable(month)

        /**
         * The year on which the billing cycle is anchored (e.g. a 2 year billing cycle anchored on
         * 2021 would have cycles starting on 2021, 2023, 2025, etc.).
         */
        @JsonProperty("year") fun year(): Optional<Long> = Optional.ofNullable(year)

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var day: Long? = null
            private var month: Long? = null
            private var year: Long? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration) =
                apply {
                    day = billingCycleAnchorConfiguration.day
                    month = billingCycleAnchorConfiguration.month
                    year = billingCycleAnchorConfiguration.year
                    additionalProperties =
                        billingCycleAnchorConfiguration.additionalProperties.toMutableMap()
                }

            /**
             * The day of the month on which the billing cycle is anchored. If the maximum number of
             * days in a month is greater than this value, the last day of the month is the billing
             * cycle day (e.g. billing_cycle_day=31 for April means the billing period begins on the
             * 30th.
             */
            fun day(day: Long) = apply { this.day = day }

            /**
             * The month on which the billing cycle is anchored (e.g. a quarterly price anchored in
             * February would have cycles starting February, May, August, and November).
             */
            fun month(month: Long?) = apply { this.month = month }

            /**
             * The month on which the billing cycle is anchored (e.g. a quarterly price anchored in
             * February would have cycles starting February, May, August, and November).
             */
            fun month(month: Long) = month(month as Long?)

            /**
             * The month on which the billing cycle is anchored (e.g. a quarterly price anchored in
             * February would have cycles starting February, May, August, and November).
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun month(month: Optional<Long>) = month(month.orElse(null) as Long?)

            /**
             * The year on which the billing cycle is anchored (e.g. a 2 year billing cycle anchored
             * on 2021 would have cycles starting on 2021, 2023, 2025, etc.).
             */
            fun year(year: Long?) = apply { this.year = year }

            /**
             * The year on which the billing cycle is anchored (e.g. a 2 year billing cycle anchored
             * on 2021 would have cycles starting on 2021, 2023, 2025, etc.).
             */
            fun year(year: Long) = year(year as Long?)

            /**
             * The year on which the billing cycle is anchored (e.g. a 2 year billing cycle anchored
             * on 2021 would have cycles starting on 2021, 2023, 2025, etc.).
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun year(year: Optional<Long>) = year(year.orElse(null) as Long?)

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): BillingCycleAnchorConfiguration =
                BillingCycleAnchorConfiguration(
                    checkNotNull(day) { "`day` is required but was not set" },
                    month,
                    year,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is BillingCycleAnchorConfiguration && day == other.day && month == other.month && year == other.year && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(day, month, year, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "BillingCycleAnchorConfiguration{day=$day, month=$month, year=$year, additionalProperties=$additionalProperties}"
    }

    class ExternalMarketplace
    @JsonCreator
    private constructor(
        private val value: JsonField<String>,
    ) : Enum {

        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val GOOGLE = of("google")

            @JvmField val AWS = of("aws")

            @JvmField val AZURE = of("azure")

            @JvmStatic fun of(value: String) = ExternalMarketplace(JsonField.of(value))
        }

        enum class Known {
            GOOGLE,
            AWS,
            AZURE,
        }

        enum class Value {
            GOOGLE,
            AWS,
            AZURE,
            _UNKNOWN,
        }

        fun value(): Value =
            when (this) {
                GOOGLE -> Value.GOOGLE
                AWS -> Value.AWS
                AZURE -> Value.AZURE
                else -> Value._UNKNOWN
            }

        fun known(): Known =
            when (this) {
                GOOGLE -> Known.GOOGLE
                AWS -> Known.AWS
                AZURE -> Known.AZURE
                else -> throw OrbInvalidDataException("Unknown ExternalMarketplace: $value")
            }

        fun asString(): String = _value().asStringOrThrow()

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is ExternalMarketplace && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    /**
     * User-specified key/value pairs for the resource. Individual keys can be removed by setting
     * the value to `null`, and the entire metadata mapping can be cleared by setting `metadata` to
     * `null`.
     */
    @NoAutoDetect
    class Metadata
    @JsonCreator
    private constructor(
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(metadata: Metadata) = apply {
                additionalProperties = metadata.additionalProperties.toMutableMap()
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): Metadata = Metadata(additionalProperties.toImmutable())
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class RemoveAdjustment
    @JsonCreator
    private constructor(
        @JsonProperty("adjustment_id") private val adjustmentId: String,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The id of the adjustment to remove on the subscription. */
        @JsonProperty("adjustment_id") fun adjustmentId(): String = adjustmentId

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var adjustmentId: String? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(removeAdjustment: RemoveAdjustment) = apply {
                adjustmentId = removeAdjustment.adjustmentId
                additionalProperties = removeAdjustment.additionalProperties.toMutableMap()
            }

            /** The id of the adjustment to remove on the subscription. */
            fun adjustmentId(adjustmentId: String) = apply { this.adjustmentId = adjustmentId }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): RemoveAdjustment =
                RemoveAdjustment(
                    checkNotNull(adjustmentId) { "`adjustmentId` is required but was not set" },
                    additionalProperties.toImmutable()
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is RemoveAdjustment && adjustmentId == other.adjustmentId && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(adjustmentId, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "RemoveAdjustment{adjustmentId=$adjustmentId, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class RemovePrice
    @JsonCreator
    private constructor(
        @JsonProperty("external_price_id") private val externalPriceId: String?,
        @JsonProperty("price_id") private val priceId: String?,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The external price id of the price to remove on the subscription. */
        @JsonProperty("external_price_id")
        fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

        /** The id of the price to remove on the subscription. */
        @JsonProperty("price_id") fun priceId(): Optional<String> = Optional.ofNullable(priceId)

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var externalPriceId: String? = null
            private var priceId: String? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(removePrice: RemovePrice) = apply {
                externalPriceId = removePrice.externalPriceId
                priceId = removePrice.priceId
                additionalProperties = removePrice.additionalProperties.toMutableMap()
            }

            /** The external price id of the price to remove on the subscription. */
            fun externalPriceId(externalPriceId: String?) = apply {
                this.externalPriceId = externalPriceId
            }

            /** The external price id of the price to remove on the subscription. */
            fun externalPriceId(externalPriceId: Optional<String>) =
                externalPriceId(externalPriceId.orElse(null))

            /** The id of the price to remove on the subscription. */
            fun priceId(priceId: String?) = apply { this.priceId = priceId }

            /** The id of the price to remove on the subscription. */
            fun priceId(priceId: Optional<String>) = priceId(priceId.orElse(null))

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): RemovePrice =
                RemovePrice(
                    externalPriceId,
                    priceId,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is RemovePrice && externalPriceId == other.externalPriceId && priceId == other.priceId && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(externalPriceId, priceId, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "RemovePrice{externalPriceId=$externalPriceId, priceId=$priceId, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class ReplaceAdjustment
    @JsonCreator
    private constructor(
        @JsonProperty("adjustment") private val adjustment: Adjustment,
        @JsonProperty("replaces_adjustment_id") private val replacesAdjustmentId: String,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonProperty("adjustment") fun adjustment(): Adjustment = adjustment

        /** The id of the adjustment on the plan to replace in the subscription. */
        @JsonProperty("replaces_adjustment_id")
        fun replacesAdjustmentId(): String = replacesAdjustmentId

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var adjustment: Adjustment? = null
            private var replacesAdjustmentId: String? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(replaceAdjustment: ReplaceAdjustment) = apply {
                adjustment = replaceAdjustment.adjustment
                replacesAdjustmentId = replaceAdjustment.replacesAdjustmentId
                additionalProperties = replaceAdjustment.additionalProperties.toMutableMap()
            }

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(adjustment: Adjustment) = apply { this.adjustment = adjustment }

            fun adjustment(newPercentageDiscount: Adjustment.NewPercentageDiscount) = apply {
                this.adjustment = Adjustment.ofNewPercentageDiscount(newPercentageDiscount)
            }

            fun adjustment(newUsageDiscount: Adjustment.NewUsageDiscount) = apply {
                this.adjustment = Adjustment.ofNewUsageDiscount(newUsageDiscount)
            }

            fun adjustment(newAmountDiscount: Adjustment.NewAmountDiscount) = apply {
                this.adjustment = Adjustment.ofNewAmountDiscount(newAmountDiscount)
            }

            fun adjustment(newMinimum: Adjustment.NewMinimum) = apply {
                this.adjustment = Adjustment.ofNewMinimum(newMinimum)
            }

            fun adjustment(newMaximum: Adjustment.NewMaximum) = apply {
                this.adjustment = Adjustment.ofNewMaximum(newMaximum)
            }

            /** The id of the adjustment on the plan to replace in the subscription. */
            fun replacesAdjustmentId(replacesAdjustmentId: String) = apply {
                this.replacesAdjustmentId = replacesAdjustmentId
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): ReplaceAdjustment =
                ReplaceAdjustment(
                    checkNotNull(adjustment) { "`adjustment` is required but was not set" },
                    checkNotNull(replacesAdjustmentId) {
                        "`replacesAdjustmentId` is required but was not set"
                    },
                    additionalProperties.toImmutable(),
                )
        }

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonDeserialize(using = Adjustment.Deserializer::class)
        @JsonSerialize(using = Adjustment.Serializer::class)
        class Adjustment
        private constructor(
            private val newPercentageDiscount: NewPercentageDiscount? = null,
            private val newUsageDiscount: NewUsageDiscount? = null,
            private val newAmountDiscount: NewAmountDiscount? = null,
            private val newMinimum: NewMinimum? = null,
            private val newMaximum: NewMaximum? = null,
            private val _json: JsonValue? = null,
        ) {

            fun newPercentageDiscount(): Optional<NewPercentageDiscount> =
                Optional.ofNullable(newPercentageDiscount)

            fun newUsageDiscount(): Optional<NewUsageDiscount> =
                Optional.ofNullable(newUsageDiscount)

            fun newAmountDiscount(): Optional<NewAmountDiscount> =
                Optional.ofNullable(newAmountDiscount)

            fun newMinimum(): Optional<NewMinimum> = Optional.ofNullable(newMinimum)

            fun newMaximum(): Optional<NewMaximum> = Optional.ofNullable(newMaximum)

            fun isNewPercentageDiscount(): Boolean = newPercentageDiscount != null

            fun isNewUsageDiscount(): Boolean = newUsageDiscount != null

            fun isNewAmountDiscount(): Boolean = newAmountDiscount != null

            fun isNewMinimum(): Boolean = newMinimum != null

            fun isNewMaximum(): Boolean = newMaximum != null

            fun asNewPercentageDiscount(): NewPercentageDiscount =
                newPercentageDiscount.getOrThrow("newPercentageDiscount")

            fun asNewUsageDiscount(): NewUsageDiscount =
                newUsageDiscount.getOrThrow("newUsageDiscount")

            fun asNewAmountDiscount(): NewAmountDiscount =
                newAmountDiscount.getOrThrow("newAmountDiscount")

            fun asNewMinimum(): NewMinimum = newMinimum.getOrThrow("newMinimum")

            fun asNewMaximum(): NewMaximum = newMaximum.getOrThrow("newMaximum")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newPercentageDiscount != null ->
                        visitor.visitNewPercentageDiscount(newPercentageDiscount)
                    newUsageDiscount != null -> visitor.visitNewUsageDiscount(newUsageDiscount)
                    newAmountDiscount != null -> visitor.visitNewAmountDiscount(newAmountDiscount)
                    newMinimum != null -> visitor.visitNewMinimum(newMinimum)
                    newMaximum != null -> visitor.visitNewMaximum(newMaximum)
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Adjustment && newPercentageDiscount == other.newPercentageDiscount && newUsageDiscount == other.newUsageDiscount && newAmountDiscount == other.newAmountDiscount && newMinimum == other.newMinimum && newMaximum == other.newMaximum /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newPercentageDiscount, newUsageDiscount, newAmountDiscount, newMinimum, newMaximum) /* spotless:on */

            override fun toString(): String =
                when {
                    newPercentageDiscount != null ->
                        "Adjustment{newPercentageDiscount=$newPercentageDiscount}"
                    newUsageDiscount != null -> "Adjustment{newUsageDiscount=$newUsageDiscount}"
                    newAmountDiscount != null -> "Adjustment{newAmountDiscount=$newAmountDiscount}"
                    newMinimum != null -> "Adjustment{newMinimum=$newMinimum}"
                    newMaximum != null -> "Adjustment{newMaximum=$newMaximum}"
                    _json != null -> "Adjustment{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Adjustment")
                }

            companion object {

                @JvmStatic
                fun ofNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount) =
                    Adjustment(newPercentageDiscount = newPercentageDiscount)

                @JvmStatic
                fun ofNewUsageDiscount(newUsageDiscount: NewUsageDiscount) =
                    Adjustment(newUsageDiscount = newUsageDiscount)

                @JvmStatic
                fun ofNewAmountDiscount(newAmountDiscount: NewAmountDiscount) =
                    Adjustment(newAmountDiscount = newAmountDiscount)

                @JvmStatic
                fun ofNewMinimum(newMinimum: NewMinimum) = Adjustment(newMinimum = newMinimum)

                @JvmStatic
                fun ofNewMaximum(newMaximum: NewMaximum) = Adjustment(newMaximum = newMaximum)
            }

            interface Visitor<out T> {

                fun visitNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount): T

                fun visitNewUsageDiscount(newUsageDiscount: NewUsageDiscount): T

                fun visitNewAmountDiscount(newAmountDiscount: NewAmountDiscount): T

                fun visitNewMinimum(newMinimum: NewMinimum): T

                fun visitNewMaximum(newMaximum: NewMaximum): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Adjustment: $json")
                }
            }

            class Deserializer : BaseDeserializer<Adjustment>(Adjustment::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Adjustment {
                    val json = JsonValue.fromJsonNode(node)
                    val adjustmentType =
                        json.asObject().getOrNull()?.get("adjustment_type")?.asString()?.getOrNull()

                    when (adjustmentType) {
                        "percentage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewPercentageDiscount>())?.let {
                                return Adjustment(newPercentageDiscount = it, _json = json)
                            }
                        }
                        "usage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewUsageDiscount>())?.let {
                                return Adjustment(newUsageDiscount = it, _json = json)
                            }
                        }
                        "amount_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewAmountDiscount>())?.let {
                                return Adjustment(newAmountDiscount = it, _json = json)
                            }
                        }
                        "minimum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMinimum>())?.let {
                                return Adjustment(newMinimum = it, _json = json)
                            }
                        }
                        "maximum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMaximum>())?.let {
                                return Adjustment(newMaximum = it, _json = json)
                            }
                        }
                    }

                    return Adjustment(_json = json)
                }
            }

            class Serializer : BaseSerializer<Adjustment>(Adjustment::class) {

                override fun serialize(
                    value: Adjustment,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.newPercentageDiscount != null ->
                            generator.writeObject(value.newPercentageDiscount)
                        value.newUsageDiscount != null ->
                            generator.writeObject(value.newUsageDiscount)
                        value.newAmountDiscount != null ->
                            generator.writeObject(value.newAmountDiscount)
                        value.newMinimum != null -> generator.writeObject(value.newMinimum)
                        value.newMaximum != null -> generator.writeObject(value.newMaximum)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Adjustment")
                    }
                }
            }

            @NoAutoDetect
            class NewPercentageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("percentage_discount") private val percentageDiscount: Double,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                @JsonProperty("percentage_discount")
                fun percentageDiscount(): Double = percentageDiscount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: AdjustmentType? = null
                    private var appliesToPriceIds: MutableList<String>? = null
                    private var percentageDiscount: Double? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newPercentageDiscount: NewPercentageDiscount) = apply {
                        adjustmentType = newPercentageDiscount.adjustmentType
                        appliesToPriceIds = newPercentageDiscount.appliesToPriceIds.toMutableList()
                        percentageDiscount = newPercentageDiscount.percentageDiscount
                        isInvoiceLevel = newPercentageDiscount.isInvoiceLevel
                        additionalProperties =
                            newPercentageDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.toMutableList()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: mutableListOf()).apply { add(appliesToPriceId) }
                    }

                    fun percentageDiscount(percentageDiscount: Double) = apply {
                        this.percentageDiscount = percentageDiscount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean?) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(isInvoiceLevel as Boolean?)

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun isInvoiceLevel(isInvoiceLevel: Optional<Boolean>) =
                        isInvoiceLevel(isInvoiceLevel.orElse(null) as Boolean?)

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewPercentageDiscount =
                        NewPercentageDiscount(
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            checkNotNull(percentageDiscount) {
                                "`percentageDiscount` is required but was not set"
                            },
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PERCENTAGE_DISCOUNT = of("percentage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        PERCENTAGE_DISCOUNT,
                    }

                    enum class Value {
                        PERCENTAGE_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Value.PERCENTAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Known.PERCENTAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewPercentageDiscount && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && percentageDiscount == other.percentageDiscount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, percentageDiscount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewPercentageDiscount{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, percentageDiscount=$percentageDiscount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewUsageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("usage_discount") private val usageDiscount: Double,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                @JsonProperty("usage_discount") fun usageDiscount(): Double = usageDiscount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: AdjustmentType? = null
                    private var appliesToPriceIds: MutableList<String>? = null
                    private var usageDiscount: Double? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newUsageDiscount: NewUsageDiscount) = apply {
                        adjustmentType = newUsageDiscount.adjustmentType
                        appliesToPriceIds = newUsageDiscount.appliesToPriceIds.toMutableList()
                        usageDiscount = newUsageDiscount.usageDiscount
                        isInvoiceLevel = newUsageDiscount.isInvoiceLevel
                        additionalProperties = newUsageDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.toMutableList()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: mutableListOf()).apply { add(appliesToPriceId) }
                    }

                    fun usageDiscount(usageDiscount: Double) = apply {
                        this.usageDiscount = usageDiscount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean?) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(isInvoiceLevel as Boolean?)

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun isInvoiceLevel(isInvoiceLevel: Optional<Boolean>) =
                        isInvoiceLevel(isInvoiceLevel.orElse(null) as Boolean?)

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewUsageDiscount =
                        NewUsageDiscount(
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            checkNotNull(usageDiscount) {
                                "`usageDiscount` is required but was not set"
                            },
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val USAGE_DISCOUNT = of("usage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        USAGE_DISCOUNT,
                    }

                    enum class Value {
                        USAGE_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            USAGE_DISCOUNT -> Value.USAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            USAGE_DISCOUNT -> Known.USAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewUsageDiscount && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && usageDiscount == other.usageDiscount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, usageDiscount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewUsageDiscount{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, usageDiscount=$usageDiscount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewAmountDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("amount_discount") private val amountDiscount: String,
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                @JsonProperty("amount_discount") fun amountDiscount(): String = amountDiscount

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: AdjustmentType? = null
                    private var amountDiscount: String? = null
                    private var appliesToPriceIds: MutableList<String>? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newAmountDiscount: NewAmountDiscount) = apply {
                        adjustmentType = newAmountDiscount.adjustmentType
                        amountDiscount = newAmountDiscount.amountDiscount
                        appliesToPriceIds = newAmountDiscount.appliesToPriceIds.toMutableList()
                        isInvoiceLevel = newAmountDiscount.isInvoiceLevel
                        additionalProperties = newAmountDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun amountDiscount(amountDiscount: String) = apply {
                        this.amountDiscount = amountDiscount
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.toMutableList()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: mutableListOf()).apply { add(appliesToPriceId) }
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean?) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(isInvoiceLevel as Boolean?)

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun isInvoiceLevel(isInvoiceLevel: Optional<Boolean>) =
                        isInvoiceLevel(isInvoiceLevel.orElse(null) as Boolean?)

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewAmountDiscount =
                        NewAmountDiscount(
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(amountDiscount) {
                                "`amountDiscount` is required but was not set"
                            },
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val AMOUNT_DISCOUNT = of("amount_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        AMOUNT_DISCOUNT,
                    }

                    enum class Value {
                        AMOUNT_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            AMOUNT_DISCOUNT -> Value.AMOUNT_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            AMOUNT_DISCOUNT -> Known.AMOUNT_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewAmountDiscount && adjustmentType == other.adjustmentType && amountDiscount == other.amountDiscount && appliesToPriceIds == other.appliesToPriceIds && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, amountDiscount, appliesToPriceIds, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewAmountDiscount{adjustmentType=$adjustmentType, amountDiscount=$amountDiscount, appliesToPriceIds=$appliesToPriceIds, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMinimum
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("minimum_amount") private val minimumAmount: String,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                /** The item ID that revenue from this minimum will be attributed to. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("minimum_amount") fun minimumAmount(): String = minimumAmount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: AdjustmentType? = null
                    private var appliesToPriceIds: MutableList<String>? = null
                    private var itemId: String? = null
                    private var minimumAmount: String? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMinimum: NewMinimum) = apply {
                        adjustmentType = newMinimum.adjustmentType
                        appliesToPriceIds = newMinimum.appliesToPriceIds.toMutableList()
                        itemId = newMinimum.itemId
                        minimumAmount = newMinimum.minimumAmount
                        isInvoiceLevel = newMinimum.isInvoiceLevel
                        additionalProperties = newMinimum.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.toMutableList()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: mutableListOf()).apply { add(appliesToPriceId) }
                    }

                    /** The item ID that revenue from this minimum will be attributed to. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun minimumAmount(minimumAmount: String) = apply {
                        this.minimumAmount = minimumAmount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean?) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(isInvoiceLevel as Boolean?)

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun isInvoiceLevel(isInvoiceLevel: Optional<Boolean>) =
                        isInvoiceLevel(isInvoiceLevel.orElse(null) as Boolean?)

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMinimum =
                        NewMinimum(
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(minimumAmount) {
                                "`minimumAmount` is required but was not set"
                            },
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MINIMUM = of("minimum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        MINIMUM,
                    }

                    enum class Value {
                        MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MINIMUM -> Value.MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MINIMUM -> Known.MINIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMinimum && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && itemId == other.itemId && minimumAmount == other.minimumAmount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, itemId, minimumAmount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMinimum{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, itemId=$itemId, minimumAmount=$minimumAmount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMaximum
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("maximum_amount") private val maximumAmount: String,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                @JsonProperty("maximum_amount") fun maximumAmount(): String = maximumAmount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: AdjustmentType? = null
                    private var appliesToPriceIds: MutableList<String>? = null
                    private var maximumAmount: String? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMaximum: NewMaximum) = apply {
                        adjustmentType = newMaximum.adjustmentType
                        appliesToPriceIds = newMaximum.appliesToPriceIds.toMutableList()
                        maximumAmount = newMaximum.maximumAmount
                        isInvoiceLevel = newMaximum.isInvoiceLevel
                        additionalProperties = newMaximum.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.toMutableList()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: mutableListOf()).apply { add(appliesToPriceId) }
                    }

                    fun maximumAmount(maximumAmount: String) = apply {
                        this.maximumAmount = maximumAmount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean?) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(isInvoiceLevel as Boolean?)

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun isInvoiceLevel(isInvoiceLevel: Optional<Boolean>) =
                        isInvoiceLevel(isInvoiceLevel.orElse(null) as Boolean?)

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMaximum =
                        NewMaximum(
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            checkNotNull(maximumAmount) {
                                "`maximumAmount` is required but was not set"
                            },
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MAXIMUM = of("maximum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        MAXIMUM,
                    }

                    enum class Value {
                        MAXIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MAXIMUM -> Value.MAXIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MAXIMUM -> Known.MAXIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMaximum && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && maximumAmount == other.maximumAmount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, maximumAmount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMaximum{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, maximumAmount=$maximumAmount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is ReplaceAdjustment && adjustment == other.adjustment && replacesAdjustmentId == other.replacesAdjustmentId && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(adjustment, replacesAdjustmentId, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "ReplaceAdjustment{adjustment=$adjustment, replacesAdjustmentId=$replacesAdjustmentId, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class ReplacePrice
    @JsonCreator
    private constructor(
        @JsonProperty("replaces_price_id") private val replacesPriceId: String,
        @JsonProperty("discounts") private val discounts: List<Discount>?,
        @JsonProperty("external_price_id") private val externalPriceId: String?,
        @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
        @JsonProperty("maximum_amount") private val maximumAmount: String?,
        @JsonProperty("minimum_amount") private val minimumAmount: String?,
        @JsonProperty("price") private val price: Price?,
        @JsonProperty("price_id") private val priceId: String?,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The id of the price on the plan to replace in the subscription. */
        @JsonProperty("replaces_price_id") fun replacesPriceId(): String = replacesPriceId

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for the
         * replacement price.
         */
        @JsonProperty("discounts")
        fun discounts(): Optional<List<Discount>> = Optional.ofNullable(discounts)

        /** The external price id of the price to add to the subscription. */
        @JsonProperty("external_price_id")
        fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

        /** The new quantity of the price, if the price is a fixed price. */
        @JsonProperty("fixed_price_quantity")
        fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for the
         * replacement price.
         */
        @JsonProperty("maximum_amount")
        fun maximumAmount(): Optional<String> = Optional.ofNullable(maximumAmount)

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for the
         * replacement price.
         */
        @JsonProperty("minimum_amount")
        fun minimumAmount(): Optional<String> = Optional.ofNullable(minimumAmount)

        /** The definition of a new price to create and add to the subscription. */
        @JsonProperty("price") fun price(): Optional<Price> = Optional.ofNullable(price)

        /** The id of the price to add to the subscription. */
        @JsonProperty("price_id") fun priceId(): Optional<String> = Optional.ofNullable(priceId)

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var replacesPriceId: String? = null
            private var discounts: MutableList<Discount>? = null
            private var externalPriceId: String? = null
            private var fixedPriceQuantity: Double? = null
            private var maximumAmount: String? = null
            private var minimumAmount: String? = null
            private var price: Price? = null
            private var priceId: String? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(replacePrice: ReplacePrice) = apply {
                replacesPriceId = replacePrice.replacesPriceId
                discounts = replacePrice.discounts?.toMutableList()
                externalPriceId = replacePrice.externalPriceId
                fixedPriceQuantity = replacePrice.fixedPriceQuantity
                maximumAmount = replacePrice.maximumAmount
                minimumAmount = replacePrice.minimumAmount
                price = replacePrice.price
                priceId = replacePrice.priceId
                additionalProperties = replacePrice.additionalProperties.toMutableMap()
            }

            /** The id of the price on the plan to replace in the subscription. */
            fun replacesPriceId(replacesPriceId: String) = apply {
                this.replacesPriceId = replacesPriceId
            }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for the
             * replacement price.
             */
            fun discounts(discounts: List<Discount>?) = apply {
                this.discounts = discounts?.toMutableList()
            }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for the
             * replacement price.
             */
            fun discounts(discounts: Optional<List<Discount>>) = discounts(discounts.orElse(null))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for the
             * replacement price.
             */
            fun addDiscount(discount: Discount) = apply {
                discounts = (discounts ?: mutableListOf()).apply { add(discount) }
            }

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: String?) = apply {
                this.externalPriceId = externalPriceId
            }

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: Optional<String>) =
                externalPriceId(externalPriceId.orElse(null))

            /** The new quantity of the price, if the price is a fixed price. */
            fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                this.fixedPriceQuantity = fixedPriceQuantity
            }

            /** The new quantity of the price, if the price is a fixed price. */
            fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                fixedPriceQuantity(fixedPriceQuantity as Double?)

            /** The new quantity of the price, if the price is a fixed price. */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for the
             * replacement price.
             */
            fun maximumAmount(maximumAmount: String?) = apply { this.maximumAmount = maximumAmount }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for the
             * replacement price.
             */
            fun maximumAmount(maximumAmount: Optional<String>) =
                maximumAmount(maximumAmount.orElse(null))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for the
             * replacement price.
             */
            fun minimumAmount(minimumAmount: String?) = apply { this.minimumAmount = minimumAmount }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for the
             * replacement price.
             */
            fun minimumAmount(minimumAmount: Optional<String>) =
                minimumAmount(minimumAmount.orElse(null))

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: Price?) = apply { this.price = price }

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: Optional<Price>) = price(price.orElse(null))

            fun price(newSubscriptionUnitPrice: Price.NewSubscriptionUnitPrice) = apply {
                this.price = Price.ofNewSubscriptionUnitPrice(newSubscriptionUnitPrice)
            }

            fun price(newSubscriptionPackagePrice: Price.NewSubscriptionPackagePrice) = apply {
                this.price = Price.ofNewSubscriptionPackagePrice(newSubscriptionPackagePrice)
            }

            fun price(newSubscriptionMatrixPrice: Price.NewSubscriptionMatrixPrice) = apply {
                this.price = Price.ofNewSubscriptionMatrixPrice(newSubscriptionMatrixPrice)
            }

            fun price(newSubscriptionTieredPrice: Price.NewSubscriptionTieredPrice) = apply {
                this.price = Price.ofNewSubscriptionTieredPrice(newSubscriptionTieredPrice)
            }

            fun price(newSubscriptionTieredBpsPrice: Price.NewSubscriptionTieredBpsPrice) = apply {
                this.price = Price.ofNewSubscriptionTieredBpsPrice(newSubscriptionTieredBpsPrice)
            }

            fun price(newSubscriptionBpsPrice: Price.NewSubscriptionBpsPrice) = apply {
                this.price = Price.ofNewSubscriptionBpsPrice(newSubscriptionBpsPrice)
            }

            fun price(newSubscriptionBulkBpsPrice: Price.NewSubscriptionBulkBpsPrice) = apply {
                this.price = Price.ofNewSubscriptionBulkBpsPrice(newSubscriptionBulkBpsPrice)
            }

            fun price(newSubscriptionBulkPrice: Price.NewSubscriptionBulkPrice) = apply {
                this.price = Price.ofNewSubscriptionBulkPrice(newSubscriptionBulkPrice)
            }

            fun price(
                newSubscriptionThresholdTotalAmountPrice:
                    Price.NewSubscriptionThresholdTotalAmountPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionThresholdTotalAmountPrice(
                        newSubscriptionThresholdTotalAmountPrice
                    )
            }

            fun price(newSubscriptionTieredPackagePrice: Price.NewSubscriptionTieredPackagePrice) =
                apply {
                    this.price =
                        Price.ofNewSubscriptionTieredPackagePrice(newSubscriptionTieredPackagePrice)
                }

            fun price(
                newSubscriptionTieredWithMinimumPrice: Price.NewSubscriptionTieredWithMinimumPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionTieredWithMinimumPrice(
                        newSubscriptionTieredWithMinimumPrice
                    )
            }

            fun price(
                newSubscriptionUnitWithPercentPrice: Price.NewSubscriptionUnitWithPercentPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionUnitWithPercentPrice(newSubscriptionUnitWithPercentPrice)
            }

            fun price(
                newSubscriptionPackageWithAllocationPrice:
                    Price.NewSubscriptionPackageWithAllocationPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionPackageWithAllocationPrice(
                        newSubscriptionPackageWithAllocationPrice
                    )
            }

            fun price(
                newSubscriptionTierWithProrationPrice: Price.NewSubscriptionTierWithProrationPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionTierWithProrationPrice(
                        newSubscriptionTierWithProrationPrice
                    )
            }

            fun price(
                newSubscriptionUnitWithProrationPrice: Price.NewSubscriptionUnitWithProrationPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionUnitWithProrationPrice(
                        newSubscriptionUnitWithProrationPrice
                    )
            }

            fun price(
                newSubscriptionGroupedAllocationPrice: Price.NewSubscriptionGroupedAllocationPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionGroupedAllocationPrice(
                        newSubscriptionGroupedAllocationPrice
                    )
            }

            fun price(
                newSubscriptionGroupedWithProratedMinimumPrice:
                    Price.NewSubscriptionGroupedWithProratedMinimumPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionGroupedWithProratedMinimumPrice(
                        newSubscriptionGroupedWithProratedMinimumPrice
                    )
            }

            fun price(
                newSubscriptionBulkWithProrationPrice: Price.NewSubscriptionBulkWithProrationPrice
            ) = apply {
                this.price =
                    Price.ofNewSubscriptionBulkWithProrationPrice(
                        newSubscriptionBulkWithProrationPrice
                    )
            }

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: String?) = apply { this.priceId = priceId }

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: Optional<String>) = priceId(priceId.orElse(null))

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): ReplacePrice =
                ReplacePrice(
                    checkNotNull(replacesPriceId) {
                        "`replacesPriceId` is required but was not set"
                    },
                    discounts?.toImmutable(),
                    externalPriceId,
                    fixedPriceQuantity,
                    maximumAmount,
                    minimumAmount,
                    price,
                    priceId,
                    additionalProperties.toImmutable(),
                )
        }

        @NoAutoDetect
        class Discount
        @JsonCreator
        private constructor(
            @JsonProperty("discount_type") private val discountType: DiscountType,
            @JsonProperty("amount_discount") private val amountDiscount: String?,
            @JsonProperty("percentage_discount") private val percentageDiscount: Double?,
            @JsonProperty("usage_discount") private val usageDiscount: Double?,
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            @JsonProperty("discount_type") fun discountType(): DiscountType = discountType

            /** Only available if discount_type is `amount`. */
            @JsonProperty("amount_discount")
            fun amountDiscount(): Optional<String> = Optional.ofNullable(amountDiscount)

            /**
             * Only available if discount_type is `percentage`. This is a number between 0 and 1.
             */
            @JsonProperty("percentage_discount")
            fun percentageDiscount(): Optional<Double> = Optional.ofNullable(percentageDiscount)

            /**
             * Only available if discount_type is `usage`. Number of usage units that this discount
             * is for
             */
            @JsonProperty("usage_discount")
            fun usageDiscount(): Optional<Double> = Optional.ofNullable(usageDiscount)

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            class Builder {

                private var discountType: DiscountType? = null
                private var amountDiscount: String? = null
                private var percentageDiscount: Double? = null
                private var usageDiscount: Double? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(discount: Discount) = apply {
                    discountType = discount.discountType
                    amountDiscount = discount.amountDiscount
                    percentageDiscount = discount.percentageDiscount
                    usageDiscount = discount.usageDiscount
                    additionalProperties = discount.additionalProperties.toMutableMap()
                }

                fun discountType(discountType: DiscountType) = apply {
                    this.discountType = discountType
                }

                /** Only available if discount_type is `amount`. */
                fun amountDiscount(amountDiscount: String?) = apply {
                    this.amountDiscount = amountDiscount
                }

                /** Only available if discount_type is `amount`. */
                fun amountDiscount(amountDiscount: Optional<String>) =
                    amountDiscount(amountDiscount.orElse(null))

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                fun percentageDiscount(percentageDiscount: Double?) = apply {
                    this.percentageDiscount = percentageDiscount
                }

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                fun percentageDiscount(percentageDiscount: Double) =
                    percentageDiscount(percentageDiscount as Double?)

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                fun percentageDiscount(percentageDiscount: Optional<Double>) =
                    percentageDiscount(percentageDiscount.orElse(null) as Double?)

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                fun usageDiscount(usageDiscount: Double?) = apply {
                    this.usageDiscount = usageDiscount
                }

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                fun usageDiscount(usageDiscount: Double) = usageDiscount(usageDiscount as Double?)

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                fun usageDiscount(usageDiscount: Optional<Double>) =
                    usageDiscount(usageDiscount.orElse(null) as Double?)

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): Discount =
                    Discount(
                        checkNotNull(discountType) { "`discountType` is required but was not set" },
                        amountDiscount,
                        percentageDiscount,
                        usageDiscount,
                        additionalProperties.toImmutable(),
                    )
            }

            class DiscountType
            @JsonCreator
            private constructor(
                private val value: JsonField<String>,
            ) : Enum {

                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val PERCENTAGE = of("percentage")

                    @JvmField val USAGE = of("usage")

                    @JvmField val AMOUNT = of("amount")

                    @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                }

                enum class Known {
                    PERCENTAGE,
                    USAGE,
                    AMOUNT,
                }

                enum class Value {
                    PERCENTAGE,
                    USAGE,
                    AMOUNT,
                    _UNKNOWN,
                }

                fun value(): Value =
                    when (this) {
                        PERCENTAGE -> Value.PERCENTAGE
                        USAGE -> Value.USAGE
                        AMOUNT -> Value.AMOUNT
                        else -> Value._UNKNOWN
                    }

                fun known(): Known =
                    when (this) {
                        PERCENTAGE -> Known.PERCENTAGE
                        USAGE -> Known.USAGE
                        AMOUNT -> Known.AMOUNT
                        else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                    }

                fun asString(): String = _value().asStringOrThrow()

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is DiscountType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Discount && discountType == other.discountType && amountDiscount == other.amountDiscount && percentageDiscount == other.percentageDiscount && usageDiscount == other.usageDiscount && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(discountType, amountDiscount, percentageDiscount, usageDiscount, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "Discount{discountType=$discountType, amountDiscount=$amountDiscount, percentageDiscount=$percentageDiscount, usageDiscount=$usageDiscount, additionalProperties=$additionalProperties}"
        }

        /** The definition of a new price to create and add to the subscription. */
        @JsonDeserialize(using = Price.Deserializer::class)
        @JsonSerialize(using = Price.Serializer::class)
        class Price
        private constructor(
            private val newSubscriptionUnitPrice: NewSubscriptionUnitPrice? = null,
            private val newSubscriptionPackagePrice: NewSubscriptionPackagePrice? = null,
            private val newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice? = null,
            private val newSubscriptionTieredPrice: NewSubscriptionTieredPrice? = null,
            private val newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice? = null,
            private val newSubscriptionBpsPrice: NewSubscriptionBpsPrice? = null,
            private val newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice? = null,
            private val newSubscriptionBulkPrice: NewSubscriptionBulkPrice? = null,
            private val newSubscriptionThresholdTotalAmountPrice:
                NewSubscriptionThresholdTotalAmountPrice? =
                null,
            private val newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice? =
                null,
            private val newSubscriptionTieredWithMinimumPrice:
                NewSubscriptionTieredWithMinimumPrice? =
                null,
            private val newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice? =
                null,
            private val newSubscriptionPackageWithAllocationPrice:
                NewSubscriptionPackageWithAllocationPrice? =
                null,
            private val newSubscriptionTierWithProrationPrice:
                NewSubscriptionTierWithProrationPrice? =
                null,
            private val newSubscriptionUnitWithProrationPrice:
                NewSubscriptionUnitWithProrationPrice? =
                null,
            private val newSubscriptionGroupedAllocationPrice:
                NewSubscriptionGroupedAllocationPrice? =
                null,
            private val newSubscriptionGroupedWithProratedMinimumPrice:
                NewSubscriptionGroupedWithProratedMinimumPrice? =
                null,
            private val newSubscriptionBulkWithProrationPrice:
                NewSubscriptionBulkWithProrationPrice? =
                null,
            private val _json: JsonValue? = null,
        ) {

            fun newSubscriptionUnitPrice(): Optional<NewSubscriptionUnitPrice> =
                Optional.ofNullable(newSubscriptionUnitPrice)

            fun newSubscriptionPackagePrice(): Optional<NewSubscriptionPackagePrice> =
                Optional.ofNullable(newSubscriptionPackagePrice)

            fun newSubscriptionMatrixPrice(): Optional<NewSubscriptionMatrixPrice> =
                Optional.ofNullable(newSubscriptionMatrixPrice)

            fun newSubscriptionTieredPrice(): Optional<NewSubscriptionTieredPrice> =
                Optional.ofNullable(newSubscriptionTieredPrice)

            fun newSubscriptionTieredBpsPrice(): Optional<NewSubscriptionTieredBpsPrice> =
                Optional.ofNullable(newSubscriptionTieredBpsPrice)

            fun newSubscriptionBpsPrice(): Optional<NewSubscriptionBpsPrice> =
                Optional.ofNullable(newSubscriptionBpsPrice)

            fun newSubscriptionBulkBpsPrice(): Optional<NewSubscriptionBulkBpsPrice> =
                Optional.ofNullable(newSubscriptionBulkBpsPrice)

            fun newSubscriptionBulkPrice(): Optional<NewSubscriptionBulkPrice> =
                Optional.ofNullable(newSubscriptionBulkPrice)

            fun newSubscriptionThresholdTotalAmountPrice():
                Optional<NewSubscriptionThresholdTotalAmountPrice> =
                Optional.ofNullable(newSubscriptionThresholdTotalAmountPrice)

            fun newSubscriptionTieredPackagePrice(): Optional<NewSubscriptionTieredPackagePrice> =
                Optional.ofNullable(newSubscriptionTieredPackagePrice)

            fun newSubscriptionTieredWithMinimumPrice():
                Optional<NewSubscriptionTieredWithMinimumPrice> =
                Optional.ofNullable(newSubscriptionTieredWithMinimumPrice)

            fun newSubscriptionUnitWithPercentPrice():
                Optional<NewSubscriptionUnitWithPercentPrice> =
                Optional.ofNullable(newSubscriptionUnitWithPercentPrice)

            fun newSubscriptionPackageWithAllocationPrice():
                Optional<NewSubscriptionPackageWithAllocationPrice> =
                Optional.ofNullable(newSubscriptionPackageWithAllocationPrice)

            fun newSubscriptionTierWithProrationPrice():
                Optional<NewSubscriptionTierWithProrationPrice> =
                Optional.ofNullable(newSubscriptionTierWithProrationPrice)

            fun newSubscriptionUnitWithProrationPrice():
                Optional<NewSubscriptionUnitWithProrationPrice> =
                Optional.ofNullable(newSubscriptionUnitWithProrationPrice)

            fun newSubscriptionGroupedAllocationPrice():
                Optional<NewSubscriptionGroupedAllocationPrice> =
                Optional.ofNullable(newSubscriptionGroupedAllocationPrice)

            fun newSubscriptionGroupedWithProratedMinimumPrice():
                Optional<NewSubscriptionGroupedWithProratedMinimumPrice> =
                Optional.ofNullable(newSubscriptionGroupedWithProratedMinimumPrice)

            fun newSubscriptionBulkWithProrationPrice():
                Optional<NewSubscriptionBulkWithProrationPrice> =
                Optional.ofNullable(newSubscriptionBulkWithProrationPrice)

            fun isNewSubscriptionUnitPrice(): Boolean = newSubscriptionUnitPrice != null

            fun isNewSubscriptionPackagePrice(): Boolean = newSubscriptionPackagePrice != null

            fun isNewSubscriptionMatrixPrice(): Boolean = newSubscriptionMatrixPrice != null

            fun isNewSubscriptionTieredPrice(): Boolean = newSubscriptionTieredPrice != null

            fun isNewSubscriptionTieredBpsPrice(): Boolean = newSubscriptionTieredBpsPrice != null

            fun isNewSubscriptionBpsPrice(): Boolean = newSubscriptionBpsPrice != null

            fun isNewSubscriptionBulkBpsPrice(): Boolean = newSubscriptionBulkBpsPrice != null

            fun isNewSubscriptionBulkPrice(): Boolean = newSubscriptionBulkPrice != null

            fun isNewSubscriptionThresholdTotalAmountPrice(): Boolean =
                newSubscriptionThresholdTotalAmountPrice != null

            fun isNewSubscriptionTieredPackagePrice(): Boolean =
                newSubscriptionTieredPackagePrice != null

            fun isNewSubscriptionTieredWithMinimumPrice(): Boolean =
                newSubscriptionTieredWithMinimumPrice != null

            fun isNewSubscriptionUnitWithPercentPrice(): Boolean =
                newSubscriptionUnitWithPercentPrice != null

            fun isNewSubscriptionPackageWithAllocationPrice(): Boolean =
                newSubscriptionPackageWithAllocationPrice != null

            fun isNewSubscriptionTierWithProrationPrice(): Boolean =
                newSubscriptionTierWithProrationPrice != null

            fun isNewSubscriptionUnitWithProrationPrice(): Boolean =
                newSubscriptionUnitWithProrationPrice != null

            fun isNewSubscriptionGroupedAllocationPrice(): Boolean =
                newSubscriptionGroupedAllocationPrice != null

            fun isNewSubscriptionGroupedWithProratedMinimumPrice(): Boolean =
                newSubscriptionGroupedWithProratedMinimumPrice != null

            fun isNewSubscriptionBulkWithProrationPrice(): Boolean =
                newSubscriptionBulkWithProrationPrice != null

            fun asNewSubscriptionUnitPrice(): NewSubscriptionUnitPrice =
                newSubscriptionUnitPrice.getOrThrow("newSubscriptionUnitPrice")

            fun asNewSubscriptionPackagePrice(): NewSubscriptionPackagePrice =
                newSubscriptionPackagePrice.getOrThrow("newSubscriptionPackagePrice")

            fun asNewSubscriptionMatrixPrice(): NewSubscriptionMatrixPrice =
                newSubscriptionMatrixPrice.getOrThrow("newSubscriptionMatrixPrice")

            fun asNewSubscriptionTieredPrice(): NewSubscriptionTieredPrice =
                newSubscriptionTieredPrice.getOrThrow("newSubscriptionTieredPrice")

            fun asNewSubscriptionTieredBpsPrice(): NewSubscriptionTieredBpsPrice =
                newSubscriptionTieredBpsPrice.getOrThrow("newSubscriptionTieredBpsPrice")

            fun asNewSubscriptionBpsPrice(): NewSubscriptionBpsPrice =
                newSubscriptionBpsPrice.getOrThrow("newSubscriptionBpsPrice")

            fun asNewSubscriptionBulkBpsPrice(): NewSubscriptionBulkBpsPrice =
                newSubscriptionBulkBpsPrice.getOrThrow("newSubscriptionBulkBpsPrice")

            fun asNewSubscriptionBulkPrice(): NewSubscriptionBulkPrice =
                newSubscriptionBulkPrice.getOrThrow("newSubscriptionBulkPrice")

            fun asNewSubscriptionThresholdTotalAmountPrice():
                NewSubscriptionThresholdTotalAmountPrice =
                newSubscriptionThresholdTotalAmountPrice.getOrThrow(
                    "newSubscriptionThresholdTotalAmountPrice"
                )

            fun asNewSubscriptionTieredPackagePrice(): NewSubscriptionTieredPackagePrice =
                newSubscriptionTieredPackagePrice.getOrThrow("newSubscriptionTieredPackagePrice")

            fun asNewSubscriptionTieredWithMinimumPrice(): NewSubscriptionTieredWithMinimumPrice =
                newSubscriptionTieredWithMinimumPrice.getOrThrow(
                    "newSubscriptionTieredWithMinimumPrice"
                )

            fun asNewSubscriptionUnitWithPercentPrice(): NewSubscriptionUnitWithPercentPrice =
                newSubscriptionUnitWithPercentPrice.getOrThrow(
                    "newSubscriptionUnitWithPercentPrice"
                )

            fun asNewSubscriptionPackageWithAllocationPrice():
                NewSubscriptionPackageWithAllocationPrice =
                newSubscriptionPackageWithAllocationPrice.getOrThrow(
                    "newSubscriptionPackageWithAllocationPrice"
                )

            fun asNewSubscriptionTierWithProrationPrice(): NewSubscriptionTierWithProrationPrice =
                newSubscriptionTierWithProrationPrice.getOrThrow(
                    "newSubscriptionTierWithProrationPrice"
                )

            fun asNewSubscriptionUnitWithProrationPrice(): NewSubscriptionUnitWithProrationPrice =
                newSubscriptionUnitWithProrationPrice.getOrThrow(
                    "newSubscriptionUnitWithProrationPrice"
                )

            fun asNewSubscriptionGroupedAllocationPrice(): NewSubscriptionGroupedAllocationPrice =
                newSubscriptionGroupedAllocationPrice.getOrThrow(
                    "newSubscriptionGroupedAllocationPrice"
                )

            fun asNewSubscriptionGroupedWithProratedMinimumPrice():
                NewSubscriptionGroupedWithProratedMinimumPrice =
                newSubscriptionGroupedWithProratedMinimumPrice.getOrThrow(
                    "newSubscriptionGroupedWithProratedMinimumPrice"
                )

            fun asNewSubscriptionBulkWithProrationPrice(): NewSubscriptionBulkWithProrationPrice =
                newSubscriptionBulkWithProrationPrice.getOrThrow(
                    "newSubscriptionBulkWithProrationPrice"
                )

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newSubscriptionUnitPrice != null ->
                        visitor.visitNewSubscriptionUnitPrice(newSubscriptionUnitPrice)
                    newSubscriptionPackagePrice != null ->
                        visitor.visitNewSubscriptionPackagePrice(newSubscriptionPackagePrice)
                    newSubscriptionMatrixPrice != null ->
                        visitor.visitNewSubscriptionMatrixPrice(newSubscriptionMatrixPrice)
                    newSubscriptionTieredPrice != null ->
                        visitor.visitNewSubscriptionTieredPrice(newSubscriptionTieredPrice)
                    newSubscriptionTieredBpsPrice != null ->
                        visitor.visitNewSubscriptionTieredBpsPrice(newSubscriptionTieredBpsPrice)
                    newSubscriptionBpsPrice != null ->
                        visitor.visitNewSubscriptionBpsPrice(newSubscriptionBpsPrice)
                    newSubscriptionBulkBpsPrice != null ->
                        visitor.visitNewSubscriptionBulkBpsPrice(newSubscriptionBulkBpsPrice)
                    newSubscriptionBulkPrice != null ->
                        visitor.visitNewSubscriptionBulkPrice(newSubscriptionBulkPrice)
                    newSubscriptionThresholdTotalAmountPrice != null ->
                        visitor.visitNewSubscriptionThresholdTotalAmountPrice(
                            newSubscriptionThresholdTotalAmountPrice
                        )
                    newSubscriptionTieredPackagePrice != null ->
                        visitor.visitNewSubscriptionTieredPackagePrice(
                            newSubscriptionTieredPackagePrice
                        )
                    newSubscriptionTieredWithMinimumPrice != null ->
                        visitor.visitNewSubscriptionTieredWithMinimumPrice(
                            newSubscriptionTieredWithMinimumPrice
                        )
                    newSubscriptionUnitWithPercentPrice != null ->
                        visitor.visitNewSubscriptionUnitWithPercentPrice(
                            newSubscriptionUnitWithPercentPrice
                        )
                    newSubscriptionPackageWithAllocationPrice != null ->
                        visitor.visitNewSubscriptionPackageWithAllocationPrice(
                            newSubscriptionPackageWithAllocationPrice
                        )
                    newSubscriptionTierWithProrationPrice != null ->
                        visitor.visitNewSubscriptionTierWithProrationPrice(
                            newSubscriptionTierWithProrationPrice
                        )
                    newSubscriptionUnitWithProrationPrice != null ->
                        visitor.visitNewSubscriptionUnitWithProrationPrice(
                            newSubscriptionUnitWithProrationPrice
                        )
                    newSubscriptionGroupedAllocationPrice != null ->
                        visitor.visitNewSubscriptionGroupedAllocationPrice(
                            newSubscriptionGroupedAllocationPrice
                        )
                    newSubscriptionGroupedWithProratedMinimumPrice != null ->
                        visitor.visitNewSubscriptionGroupedWithProratedMinimumPrice(
                            newSubscriptionGroupedWithProratedMinimumPrice
                        )
                    newSubscriptionBulkWithProrationPrice != null ->
                        visitor.visitNewSubscriptionBulkWithProrationPrice(
                            newSubscriptionBulkWithProrationPrice
                        )
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Price && newSubscriptionUnitPrice == other.newSubscriptionUnitPrice && newSubscriptionPackagePrice == other.newSubscriptionPackagePrice && newSubscriptionMatrixPrice == other.newSubscriptionMatrixPrice && newSubscriptionTieredPrice == other.newSubscriptionTieredPrice && newSubscriptionTieredBpsPrice == other.newSubscriptionTieredBpsPrice && newSubscriptionBpsPrice == other.newSubscriptionBpsPrice && newSubscriptionBulkBpsPrice == other.newSubscriptionBulkBpsPrice && newSubscriptionBulkPrice == other.newSubscriptionBulkPrice && newSubscriptionThresholdTotalAmountPrice == other.newSubscriptionThresholdTotalAmountPrice && newSubscriptionTieredPackagePrice == other.newSubscriptionTieredPackagePrice && newSubscriptionTieredWithMinimumPrice == other.newSubscriptionTieredWithMinimumPrice && newSubscriptionUnitWithPercentPrice == other.newSubscriptionUnitWithPercentPrice && newSubscriptionPackageWithAllocationPrice == other.newSubscriptionPackageWithAllocationPrice && newSubscriptionTierWithProrationPrice == other.newSubscriptionTierWithProrationPrice && newSubscriptionUnitWithProrationPrice == other.newSubscriptionUnitWithProrationPrice && newSubscriptionGroupedAllocationPrice == other.newSubscriptionGroupedAllocationPrice && newSubscriptionGroupedWithProratedMinimumPrice == other.newSubscriptionGroupedWithProratedMinimumPrice && newSubscriptionBulkWithProrationPrice == other.newSubscriptionBulkWithProrationPrice /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newSubscriptionUnitPrice, newSubscriptionPackagePrice, newSubscriptionMatrixPrice, newSubscriptionTieredPrice, newSubscriptionTieredBpsPrice, newSubscriptionBpsPrice, newSubscriptionBulkBpsPrice, newSubscriptionBulkPrice, newSubscriptionThresholdTotalAmountPrice, newSubscriptionTieredPackagePrice, newSubscriptionTieredWithMinimumPrice, newSubscriptionUnitWithPercentPrice, newSubscriptionPackageWithAllocationPrice, newSubscriptionTierWithProrationPrice, newSubscriptionUnitWithProrationPrice, newSubscriptionGroupedAllocationPrice, newSubscriptionGroupedWithProratedMinimumPrice, newSubscriptionBulkWithProrationPrice) /* spotless:on */

            override fun toString(): String =
                when {
                    newSubscriptionUnitPrice != null ->
                        "Price{newSubscriptionUnitPrice=$newSubscriptionUnitPrice}"
                    newSubscriptionPackagePrice != null ->
                        "Price{newSubscriptionPackagePrice=$newSubscriptionPackagePrice}"
                    newSubscriptionMatrixPrice != null ->
                        "Price{newSubscriptionMatrixPrice=$newSubscriptionMatrixPrice}"
                    newSubscriptionTieredPrice != null ->
                        "Price{newSubscriptionTieredPrice=$newSubscriptionTieredPrice}"
                    newSubscriptionTieredBpsPrice != null ->
                        "Price{newSubscriptionTieredBpsPrice=$newSubscriptionTieredBpsPrice}"
                    newSubscriptionBpsPrice != null ->
                        "Price{newSubscriptionBpsPrice=$newSubscriptionBpsPrice}"
                    newSubscriptionBulkBpsPrice != null ->
                        "Price{newSubscriptionBulkBpsPrice=$newSubscriptionBulkBpsPrice}"
                    newSubscriptionBulkPrice != null ->
                        "Price{newSubscriptionBulkPrice=$newSubscriptionBulkPrice}"
                    newSubscriptionThresholdTotalAmountPrice != null ->
                        "Price{newSubscriptionThresholdTotalAmountPrice=$newSubscriptionThresholdTotalAmountPrice}"
                    newSubscriptionTieredPackagePrice != null ->
                        "Price{newSubscriptionTieredPackagePrice=$newSubscriptionTieredPackagePrice}"
                    newSubscriptionTieredWithMinimumPrice != null ->
                        "Price{newSubscriptionTieredWithMinimumPrice=$newSubscriptionTieredWithMinimumPrice}"
                    newSubscriptionUnitWithPercentPrice != null ->
                        "Price{newSubscriptionUnitWithPercentPrice=$newSubscriptionUnitWithPercentPrice}"
                    newSubscriptionPackageWithAllocationPrice != null ->
                        "Price{newSubscriptionPackageWithAllocationPrice=$newSubscriptionPackageWithAllocationPrice}"
                    newSubscriptionTierWithProrationPrice != null ->
                        "Price{newSubscriptionTierWithProrationPrice=$newSubscriptionTierWithProrationPrice}"
                    newSubscriptionUnitWithProrationPrice != null ->
                        "Price{newSubscriptionUnitWithProrationPrice=$newSubscriptionUnitWithProrationPrice}"
                    newSubscriptionGroupedAllocationPrice != null ->
                        "Price{newSubscriptionGroupedAllocationPrice=$newSubscriptionGroupedAllocationPrice}"
                    newSubscriptionGroupedWithProratedMinimumPrice != null ->
                        "Price{newSubscriptionGroupedWithProratedMinimumPrice=$newSubscriptionGroupedWithProratedMinimumPrice}"
                    newSubscriptionBulkWithProrationPrice != null ->
                        "Price{newSubscriptionBulkWithProrationPrice=$newSubscriptionBulkWithProrationPrice}"
                    _json != null -> "Price{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Price")
                }

            companion object {

                @JvmStatic
                fun ofNewSubscriptionUnitPrice(newSubscriptionUnitPrice: NewSubscriptionUnitPrice) =
                    Price(newSubscriptionUnitPrice = newSubscriptionUnitPrice)

                @JvmStatic
                fun ofNewSubscriptionPackagePrice(
                    newSubscriptionPackagePrice: NewSubscriptionPackagePrice
                ) = Price(newSubscriptionPackagePrice = newSubscriptionPackagePrice)

                @JvmStatic
                fun ofNewSubscriptionMatrixPrice(
                    newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice
                ) = Price(newSubscriptionMatrixPrice = newSubscriptionMatrixPrice)

                @JvmStatic
                fun ofNewSubscriptionTieredPrice(
                    newSubscriptionTieredPrice: NewSubscriptionTieredPrice
                ) = Price(newSubscriptionTieredPrice = newSubscriptionTieredPrice)

                @JvmStatic
                fun ofNewSubscriptionTieredBpsPrice(
                    newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                ) = Price(newSubscriptionTieredBpsPrice = newSubscriptionTieredBpsPrice)

                @JvmStatic
                fun ofNewSubscriptionBpsPrice(newSubscriptionBpsPrice: NewSubscriptionBpsPrice) =
                    Price(newSubscriptionBpsPrice = newSubscriptionBpsPrice)

                @JvmStatic
                fun ofNewSubscriptionBulkBpsPrice(
                    newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice
                ) = Price(newSubscriptionBulkBpsPrice = newSubscriptionBulkBpsPrice)

                @JvmStatic
                fun ofNewSubscriptionBulkPrice(newSubscriptionBulkPrice: NewSubscriptionBulkPrice) =
                    Price(newSubscriptionBulkPrice = newSubscriptionBulkPrice)

                @JvmStatic
                fun ofNewSubscriptionThresholdTotalAmountPrice(
                    newSubscriptionThresholdTotalAmountPrice:
                        NewSubscriptionThresholdTotalAmountPrice
                ) =
                    Price(
                        newSubscriptionThresholdTotalAmountPrice =
                            newSubscriptionThresholdTotalAmountPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionTieredPackagePrice(
                    newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                ) = Price(newSubscriptionTieredPackagePrice = newSubscriptionTieredPackagePrice)

                @JvmStatic
                fun ofNewSubscriptionTieredWithMinimumPrice(
                    newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                ) =
                    Price(
                        newSubscriptionTieredWithMinimumPrice =
                            newSubscriptionTieredWithMinimumPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionUnitWithPercentPrice(
                    newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                ) = Price(newSubscriptionUnitWithPercentPrice = newSubscriptionUnitWithPercentPrice)

                @JvmStatic
                fun ofNewSubscriptionPackageWithAllocationPrice(
                    newSubscriptionPackageWithAllocationPrice:
                        NewSubscriptionPackageWithAllocationPrice
                ) =
                    Price(
                        newSubscriptionPackageWithAllocationPrice =
                            newSubscriptionPackageWithAllocationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionTierWithProrationPrice(
                    newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                ) =
                    Price(
                        newSubscriptionTierWithProrationPrice =
                            newSubscriptionTierWithProrationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionUnitWithProrationPrice(
                    newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                ) =
                    Price(
                        newSubscriptionUnitWithProrationPrice =
                            newSubscriptionUnitWithProrationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionGroupedAllocationPrice(
                    newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                ) =
                    Price(
                        newSubscriptionGroupedAllocationPrice =
                            newSubscriptionGroupedAllocationPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionGroupedWithProratedMinimumPrice(
                    newSubscriptionGroupedWithProratedMinimumPrice:
                        NewSubscriptionGroupedWithProratedMinimumPrice
                ) =
                    Price(
                        newSubscriptionGroupedWithProratedMinimumPrice =
                            newSubscriptionGroupedWithProratedMinimumPrice
                    )

                @JvmStatic
                fun ofNewSubscriptionBulkWithProrationPrice(
                    newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                ) =
                    Price(
                        newSubscriptionBulkWithProrationPrice =
                            newSubscriptionBulkWithProrationPrice
                    )
            }

            interface Visitor<out T> {

                fun visitNewSubscriptionUnitPrice(
                    newSubscriptionUnitPrice: NewSubscriptionUnitPrice
                ): T

                fun visitNewSubscriptionPackagePrice(
                    newSubscriptionPackagePrice: NewSubscriptionPackagePrice
                ): T

                fun visitNewSubscriptionMatrixPrice(
                    newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice
                ): T

                fun visitNewSubscriptionTieredPrice(
                    newSubscriptionTieredPrice: NewSubscriptionTieredPrice
                ): T

                fun visitNewSubscriptionTieredBpsPrice(
                    newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                ): T

                fun visitNewSubscriptionBpsPrice(
                    newSubscriptionBpsPrice: NewSubscriptionBpsPrice
                ): T

                fun visitNewSubscriptionBulkBpsPrice(
                    newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice
                ): T

                fun visitNewSubscriptionBulkPrice(
                    newSubscriptionBulkPrice: NewSubscriptionBulkPrice
                ): T

                fun visitNewSubscriptionThresholdTotalAmountPrice(
                    newSubscriptionThresholdTotalAmountPrice:
                        NewSubscriptionThresholdTotalAmountPrice
                ): T

                fun visitNewSubscriptionTieredPackagePrice(
                    newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                ): T

                fun visitNewSubscriptionTieredWithMinimumPrice(
                    newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                ): T

                fun visitNewSubscriptionUnitWithPercentPrice(
                    newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                ): T

                fun visitNewSubscriptionPackageWithAllocationPrice(
                    newSubscriptionPackageWithAllocationPrice:
                        NewSubscriptionPackageWithAllocationPrice
                ): T

                fun visitNewSubscriptionTierWithProrationPrice(
                    newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                ): T

                fun visitNewSubscriptionUnitWithProrationPrice(
                    newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                ): T

                fun visitNewSubscriptionGroupedAllocationPrice(
                    newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                ): T

                fun visitNewSubscriptionGroupedWithProratedMinimumPrice(
                    newSubscriptionGroupedWithProratedMinimumPrice:
                        NewSubscriptionGroupedWithProratedMinimumPrice
                ): T

                fun visitNewSubscriptionBulkWithProrationPrice(
                    newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Price: $json")
                }
            }

            class Deserializer : BaseDeserializer<Price>(Price::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Price {
                    val json = JsonValue.fromJsonNode(node)
                    val modelType =
                        json.asObject().getOrNull()?.get("model_type")?.asString()?.getOrNull()

                    when (modelType) {
                        "unit" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionUnitPrice>())?.let {
                                return Price(newSubscriptionUnitPrice = it, _json = json)
                            }
                        }
                        "package" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionPackagePrice>())
                                ?.let {
                                    return Price(newSubscriptionPackagePrice = it, _json = json)
                                }
                        }
                        "matrix" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionMatrixPrice>())
                                ?.let {
                                    return Price(newSubscriptionMatrixPrice = it, _json = json)
                                }
                        }
                        "tiered" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionTieredPrice>())
                                ?.let {
                                    return Price(newSubscriptionTieredPrice = it, _json = json)
                                }
                        }
                        "tiered_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionTieredBpsPrice>())
                                ?.let {
                                    return Price(newSubscriptionTieredBpsPrice = it, _json = json)
                                }
                        }
                        "bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBpsPrice>())?.let {
                                return Price(newSubscriptionBpsPrice = it, _json = json)
                            }
                        }
                        "bulk_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBulkBpsPrice>())
                                ?.let {
                                    return Price(newSubscriptionBulkBpsPrice = it, _json = json)
                                }
                        }
                        "bulk" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBulkPrice>())?.let {
                                return Price(newSubscriptionBulkPrice = it, _json = json)
                            }
                        }
                        "threshold_total_amount" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionThresholdTotalAmountPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionThresholdTotalAmountPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_package" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTieredPackagePrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionTieredPackagePrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_with_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTieredWithMinimumPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionTieredWithMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "unit_with_percent" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionUnitWithPercentPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionUnitWithPercentPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "package_with_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionPackageWithAllocationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionPackageWithAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTierWithProrationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionTierWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "unit_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionUnitWithProrationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionUnitWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionGroupedAllocationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionGroupedAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_with_prorated_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionGroupedWithProratedMinimumPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionGroupedWithProratedMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "bulk_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionBulkWithProrationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newSubscriptionBulkWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                    }

                    return Price(_json = json)
                }
            }

            class Serializer : BaseSerializer<Price>(Price::class) {

                override fun serialize(
                    value: Price,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.newSubscriptionUnitPrice != null ->
                            generator.writeObject(value.newSubscriptionUnitPrice)
                        value.newSubscriptionPackagePrice != null ->
                            generator.writeObject(value.newSubscriptionPackagePrice)
                        value.newSubscriptionMatrixPrice != null ->
                            generator.writeObject(value.newSubscriptionMatrixPrice)
                        value.newSubscriptionTieredPrice != null ->
                            generator.writeObject(value.newSubscriptionTieredPrice)
                        value.newSubscriptionTieredBpsPrice != null ->
                            generator.writeObject(value.newSubscriptionTieredBpsPrice)
                        value.newSubscriptionBpsPrice != null ->
                            generator.writeObject(value.newSubscriptionBpsPrice)
                        value.newSubscriptionBulkBpsPrice != null ->
                            generator.writeObject(value.newSubscriptionBulkBpsPrice)
                        value.newSubscriptionBulkPrice != null ->
                            generator.writeObject(value.newSubscriptionBulkPrice)
                        value.newSubscriptionThresholdTotalAmountPrice != null ->
                            generator.writeObject(value.newSubscriptionThresholdTotalAmountPrice)
                        value.newSubscriptionTieredPackagePrice != null ->
                            generator.writeObject(value.newSubscriptionTieredPackagePrice)
                        value.newSubscriptionTieredWithMinimumPrice != null ->
                            generator.writeObject(value.newSubscriptionTieredWithMinimumPrice)
                        value.newSubscriptionUnitWithPercentPrice != null ->
                            generator.writeObject(value.newSubscriptionUnitWithPercentPrice)
                        value.newSubscriptionPackageWithAllocationPrice != null ->
                            generator.writeObject(value.newSubscriptionPackageWithAllocationPrice)
                        value.newSubscriptionTierWithProrationPrice != null ->
                            generator.writeObject(value.newSubscriptionTierWithProrationPrice)
                        value.newSubscriptionUnitWithProrationPrice != null ->
                            generator.writeObject(value.newSubscriptionUnitWithProrationPrice)
                        value.newSubscriptionGroupedAllocationPrice != null ->
                            generator.writeObject(value.newSubscriptionGroupedAllocationPrice)
                        value.newSubscriptionGroupedWithProratedMinimumPrice != null ->
                            generator.writeObject(
                                value.newSubscriptionGroupedWithProratedMinimumPrice
                            )
                        value.newSubscriptionBulkWithProrationPrice != null ->
                            generator.writeObject(value.newSubscriptionBulkWithProrationPrice)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Price")
                    }
                }
            }

            @NoAutoDetect
            class NewSubscriptionUnitPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("unit_config") private val unitConfig: UnitConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("unit_config") fun unitConfig(): UnitConfig = unitConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var unitConfig: UnitConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionUnitPrice: NewSubscriptionUnitPrice) = apply {
                        cadence = newSubscriptionUnitPrice.cadence
                        itemId = newSubscriptionUnitPrice.itemId
                        modelType = newSubscriptionUnitPrice.modelType
                        name = newSubscriptionUnitPrice.name
                        unitConfig = newSubscriptionUnitPrice.unitConfig
                        billableMetricId = newSubscriptionUnitPrice.billableMetricId
                        billedInAdvance = newSubscriptionUnitPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionUnitPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionUnitPrice.conversionRate
                        currency = newSubscriptionUnitPrice.currency
                        externalPriceId = newSubscriptionUnitPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionUnitPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionUnitPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionUnitPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionUnitPrice.metadata
                        referenceId = newSubscriptionUnitPrice.referenceId
                        additionalProperties =
                            newSubscriptionUnitPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun unitConfig(unitConfig: UnitConfig) = apply { this.unitConfig = unitConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionUnitPrice =
                        NewSubscriptionUnitPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(unitConfig) { "`unitConfig` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT = of("unit")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT,
                    }

                    enum class Value {
                        UNIT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT -> Value.UNIT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT -> Known.UNIT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("unit_amount") private val unitAmount: String,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Rate per unit of usage */
                    @JsonProperty("unit_amount") fun unitAmount(): String = unitAmount

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var unitAmount: String? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitConfig: UnitConfig) = apply {
                            unitAmount = unitConfig.unitAmount
                            additionalProperties = unitConfig.additionalProperties.toMutableMap()
                        }

                        /** Rate per unit of usage */
                        fun unitAmount(unitAmount: String) = apply { this.unitAmount = unitAmount }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitConfig =
                            UnitConfig(
                                checkNotNull(unitAmount) {
                                    "`unitAmount` is required but was not set"
                                },
                                additionalProperties.toImmutable()
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitConfig && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(unitAmount, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitConfig{unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitConfig == other.unitConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionUnitPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitConfig=$unitConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("package_config") private val packageConfig: PackageConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("package_config") fun packageConfig(): PackageConfig = packageConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var packageConfig: PackageConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionPackagePrice: NewSubscriptionPackagePrice) =
                        apply {
                            cadence = newSubscriptionPackagePrice.cadence
                            itemId = newSubscriptionPackagePrice.itemId
                            modelType = newSubscriptionPackagePrice.modelType
                            name = newSubscriptionPackagePrice.name
                            packageConfig = newSubscriptionPackagePrice.packageConfig
                            billableMetricId = newSubscriptionPackagePrice.billableMetricId
                            billedInAdvance = newSubscriptionPackagePrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionPackagePrice.billingCycleConfiguration
                            conversionRate = newSubscriptionPackagePrice.conversionRate
                            currency = newSubscriptionPackagePrice.currency
                            externalPriceId = newSubscriptionPackagePrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionPackagePrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionPackagePrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionPackagePrice.invoicingCycleConfiguration
                            metadata = newSubscriptionPackagePrice.metadata
                            referenceId = newSubscriptionPackagePrice.referenceId
                            additionalProperties =
                                newSubscriptionPackagePrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun packageConfig(packageConfig: PackageConfig) = apply {
                        this.packageConfig = packageConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionPackagePrice =
                        NewSubscriptionPackagePrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(packageConfig) {
                                "`packageConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE = of("package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        PACKAGE,
                    }

                    enum class Value {
                        PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PACKAGE -> Value.PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PACKAGE -> Known.PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("package_amount") private val packageAmount: String,
                    @JsonProperty("package_size") private val packageSize: Long,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** A currency amount to rate usage by */
                    @JsonProperty("package_amount") fun packageAmount(): String = packageAmount

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    @JsonProperty("package_size") fun packageSize(): Long = packageSize

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var packageAmount: String? = null
                        private var packageSize: Long? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(packageConfig: PackageConfig) = apply {
                            packageAmount = packageConfig.packageAmount
                            packageSize = packageConfig.packageSize
                            additionalProperties = packageConfig.additionalProperties.toMutableMap()
                        }

                        /** A currency amount to rate usage by */
                        fun packageAmount(packageAmount: String) = apply {
                            this.packageAmount = packageAmount
                        }

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        fun packageSize(packageSize: Long) = apply {
                            this.packageSize = packageSize
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageConfig =
                            PackageConfig(
                                checkNotNull(packageAmount) {
                                    "`packageAmount` is required but was not set"
                                },
                                checkNotNull(packageSize) {
                                    "`packageSize` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageConfig && packageAmount == other.packageAmount && packageSize == other.packageSize && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(packageAmount, packageSize, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageConfig{packageAmount=$packageAmount, packageSize=$packageSize, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionPackagePrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && packageConfig == other.packageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, packageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionPackagePrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, packageConfig=$packageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionMatrixPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("matrix_config") private val matrixConfig: MatrixConfig,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("matrix_config") fun matrixConfig(): MatrixConfig = matrixConfig

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var matrixConfig: MatrixConfig? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice) =
                        apply {
                            cadence = newSubscriptionMatrixPrice.cadence
                            itemId = newSubscriptionMatrixPrice.itemId
                            matrixConfig = newSubscriptionMatrixPrice.matrixConfig
                            modelType = newSubscriptionMatrixPrice.modelType
                            name = newSubscriptionMatrixPrice.name
                            billableMetricId = newSubscriptionMatrixPrice.billableMetricId
                            billedInAdvance = newSubscriptionMatrixPrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionMatrixPrice.billingCycleConfiguration
                            conversionRate = newSubscriptionMatrixPrice.conversionRate
                            currency = newSubscriptionMatrixPrice.currency
                            externalPriceId = newSubscriptionMatrixPrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionMatrixPrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionMatrixPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionMatrixPrice.invoicingCycleConfiguration
                            metadata = newSubscriptionMatrixPrice.metadata
                            referenceId = newSubscriptionMatrixPrice.referenceId
                            additionalProperties =
                                newSubscriptionMatrixPrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun matrixConfig(matrixConfig: MatrixConfig) = apply {
                        this.matrixConfig = matrixConfig
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionMatrixPrice =
                        NewSubscriptionMatrixPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(matrixConfig) {
                                "`matrixConfig` is required but was not set"
                            },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MatrixConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("default_unit_amount") private val defaultUnitAmount: String,
                    @JsonProperty("dimensions") private val dimensions: List<String?>,
                    @JsonProperty("matrix_values") private val matrixValues: List<MatrixValue>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    @JsonProperty("default_unit_amount")
                    fun defaultUnitAmount(): String = defaultUnitAmount

                    /** One or two event property values to evaluate matrix groups by */
                    @JsonProperty("dimensions") fun dimensions(): List<String?> = dimensions

                    /** Matrix values for specified matrix grouping keys */
                    @JsonProperty("matrix_values")
                    fun matrixValues(): List<MatrixValue> = matrixValues

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var defaultUnitAmount: String? = null
                        private var dimensions: MutableList<String?>? = null
                        private var matrixValues: MutableList<MatrixValue>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixConfig: MatrixConfig) = apply {
                            defaultUnitAmount = matrixConfig.defaultUnitAmount
                            dimensions = matrixConfig.dimensions.toMutableList()
                            matrixValues = matrixConfig.matrixValues.toMutableList()
                            additionalProperties = matrixConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: String) = apply {
                            this.defaultUnitAmount = defaultUnitAmount
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: List<String?>) = apply {
                            this.dimensions = dimensions.toMutableList()
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun addDimension(dimension: String) = apply {
                            dimensions = (dimensions ?: mutableListOf()).apply { add(dimension) }
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: List<MatrixValue>) = apply {
                            this.matrixValues = matrixValues.toMutableList()
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun addMatrixValue(matrixValue: MatrixValue) = apply {
                            matrixValues =
                                (matrixValues ?: mutableListOf()).apply { add(matrixValue) }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MatrixConfig =
                            MatrixConfig(
                                checkNotNull(defaultUnitAmount) {
                                    "`defaultUnitAmount` is required but was not set"
                                },
                                checkNotNull(dimensions) {
                                        "`dimensions` is required but was not set"
                                    }
                                    .toImmutable(),
                                checkNotNull(matrixValues) {
                                        "`matrixValues` is required but was not set"
                                    }
                                    .toImmutable(),
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class MatrixValue
                    @JsonCreator
                    private constructor(
                        @JsonProperty("dimension_values")
                        private val dimensionValues: List<String?>,
                        @JsonProperty("unit_amount") private val unitAmount: String,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        @JsonProperty("dimension_values")
                        fun dimensionValues(): List<String?> = dimensionValues

                        /** Unit price for the specified dimension_values */
                        @JsonProperty("unit_amount") fun unitAmount(): String = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var dimensionValues: MutableList<String?>? = null
                            private var unitAmount: String? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(matrixValue: MatrixValue) = apply {
                                dimensionValues = matrixValue.dimensionValues.toMutableList()
                                unitAmount = matrixValue.unitAmount
                                additionalProperties =
                                    matrixValue.additionalProperties.toMutableMap()
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: List<String?>) = apply {
                                this.dimensionValues = dimensionValues.toMutableList()
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun addDimensionValue(dimensionValue: String) = apply {
                                dimensionValues =
                                    (dimensionValues ?: mutableListOf()).apply {
                                        add(dimensionValue)
                                    }
                            }

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: String) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): MatrixValue =
                                MatrixValue(
                                    checkNotNull(dimensionValues) {
                                            "`dimensionValues` is required but was not set"
                                        }
                                        .toImmutable(),
                                    checkNotNull(unitAmount) {
                                        "`unitAmount` is required but was not set"
                                    },
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is MatrixValue && dimensionValues == other.dimensionValues && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(dimensionValues, unitAmount, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "MatrixValue{dimensionValues=$dimensionValues, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixConfig && defaultUnitAmount == other.defaultUnitAmount && dimensions == other.dimensions && matrixValues == other.matrixValues && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(defaultUnitAmount, dimensions, matrixValues, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixConfig{defaultUnitAmount=$defaultUnitAmount, dimensions=$dimensions, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MATRIX = of("matrix")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        MATRIX,
                    }

                    enum class Value {
                        MATRIX,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MATRIX -> Value.MATRIX
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MATRIX -> Known.MATRIX
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionMatrixPrice && cadence == other.cadence && itemId == other.itemId && matrixConfig == other.matrixConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, matrixConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionMatrixPrice{cadence=$cadence, itemId=$itemId, matrixConfig=$matrixConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("tiered_config") private val tieredConfig: TieredConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("tiered_config") fun tieredConfig(): TieredConfig = tieredConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var tieredConfig: TieredConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionTieredPrice: NewSubscriptionTieredPrice) =
                        apply {
                            cadence = newSubscriptionTieredPrice.cadence
                            itemId = newSubscriptionTieredPrice.itemId
                            modelType = newSubscriptionTieredPrice.modelType
                            name = newSubscriptionTieredPrice.name
                            tieredConfig = newSubscriptionTieredPrice.tieredConfig
                            billableMetricId = newSubscriptionTieredPrice.billableMetricId
                            billedInAdvance = newSubscriptionTieredPrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionTieredPrice.billingCycleConfiguration
                            conversionRate = newSubscriptionTieredPrice.conversionRate
                            currency = newSubscriptionTieredPrice.currency
                            externalPriceId = newSubscriptionTieredPrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionTieredPrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionTieredPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionTieredPrice.invoicingCycleConfiguration
                            metadata = newSubscriptionTieredPrice.metadata
                            referenceId = newSubscriptionTieredPrice.referenceId
                            additionalProperties =
                                newSubscriptionTieredPrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun tieredConfig(tieredConfig: TieredConfig) = apply {
                        this.tieredConfig = tieredConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredPrice =
                        NewSubscriptionTieredPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(tieredConfig) {
                                "`tieredConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED = of("tiered")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED,
                    }

                    enum class Value {
                        TIERED,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED -> Value.TIERED
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED -> Known.TIERED
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers") private val tiers: List<Tier>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    @JsonProperty("tiers") fun tiers(): List<Tier> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: MutableList<Tier>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredConfig: TieredConfig) = apply {
                            tiers = tieredConfig.tiers.toMutableList()
                            additionalProperties = tieredConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun tiers(tiers: List<Tier>) = apply { this.tiers = tiers.toMutableList() }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers = (tiers ?: mutableListOf()).apply { add(tier) }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredConfig =
                            TieredConfig(
                                checkNotNull(tiers) { "`tiers` is required but was not set" }
                                    .toImmutable(),
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("first_unit") private val firstUnit: Double,
                        @JsonProperty("unit_amount") private val unitAmount: String,
                        @JsonProperty("last_unit") private val lastUnit: Double?,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Inclusive tier starting value */
                        @JsonProperty("first_unit") fun firstUnit(): Double = firstUnit

                        /** Amount per unit */
                        @JsonProperty("unit_amount") fun unitAmount(): String = unitAmount

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         */
                        @JsonProperty("last_unit")
                        fun lastUnit(): Optional<Double> = Optional.ofNullable(lastUnit)

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var firstUnit: Double? = null
                            private var unitAmount: String? = null
                            private var lastUnit: Double? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                firstUnit = tier.firstUnit
                                unitAmount = tier.unitAmount
                                lastUnit = tier.lastUnit
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Inclusive tier starting value */
                            fun firstUnit(firstUnit: Double) = apply { this.firstUnit = firstUnit }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) = apply {
                                this.unitAmount = unitAmount
                            }

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double?) = apply { this.lastUnit = lastUnit }

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double) = lastUnit(lastUnit as Double?)

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            @Suppress(
                                "USELESS_CAST"
                            ) // See https://youtrack.jetbrains.com/issue/KT-74228
                            fun lastUnit(lastUnit: Optional<Double>) =
                                lastUnit(lastUnit.orElse(null) as Double?)

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkNotNull(firstUnit) {
                                        "`firstUnit` is required but was not set"
                                    },
                                    checkNotNull(unitAmount) {
                                        "`unitAmount` is required but was not set"
                                    },
                                    lastUnit,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && firstUnit == other.firstUnit && unitAmount == other.unitAmount && lastUnit == other.lastUnit && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(firstUnit, unitAmount, lastUnit, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{firstUnit=$firstUnit, unitAmount=$unitAmount, lastUnit=$lastUnit, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredConfig == other.tieredConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredConfig=$tieredConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("tiered_bps_config") private val tieredBpsConfig: TieredBpsConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("tiered_bps_config")
                fun tieredBpsConfig(): TieredBpsConfig = tieredBpsConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var tieredBpsConfig: TieredBpsConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                    ) = apply {
                        cadence = newSubscriptionTieredBpsPrice.cadence
                        itemId = newSubscriptionTieredBpsPrice.itemId
                        modelType = newSubscriptionTieredBpsPrice.modelType
                        name = newSubscriptionTieredBpsPrice.name
                        tieredBpsConfig = newSubscriptionTieredBpsPrice.tieredBpsConfig
                        billableMetricId = newSubscriptionTieredBpsPrice.billableMetricId
                        billedInAdvance = newSubscriptionTieredBpsPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTieredBpsPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTieredBpsPrice.conversionRate
                        currency = newSubscriptionTieredBpsPrice.currency
                        externalPriceId = newSubscriptionTieredBpsPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionTieredBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionTieredBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTieredBpsPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTieredBpsPrice.metadata
                        referenceId = newSubscriptionTieredBpsPrice.referenceId
                        additionalProperties =
                            newSubscriptionTieredBpsPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun tieredBpsConfig(tieredBpsConfig: TieredBpsConfig) = apply {
                        this.tieredBpsConfig = tieredBpsConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredBpsPrice =
                        NewSubscriptionTieredBpsPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(tieredBpsConfig) {
                                "`tieredBpsConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_BPS = of("tiered_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_BPS,
                    }

                    enum class Value {
                        TIERED_BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_BPS -> Value.TIERED_BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_BPS -> Known.TIERED_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers") private val tiers: List<Tier>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    @JsonProperty("tiers") fun tiers(): List<Tier> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: MutableList<Tier>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredBpsConfig: TieredBpsConfig) = apply {
                            tiers = tieredBpsConfig.tiers.toMutableList()
                            additionalProperties =
                                tieredBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun tiers(tiers: List<Tier>) = apply { this.tiers = tiers.toMutableList() }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers = (tiers ?: mutableListOf()).apply { add(tier) }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredBpsConfig =
                            TieredBpsConfig(
                                checkNotNull(tiers) { "`tiers` is required but was not set" }
                                    .toImmutable(),
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps") private val bps: Double,
                        @JsonProperty("minimum_amount") private val minimumAmount: String,
                        @JsonProperty("maximum_amount") private val maximumAmount: String?,
                        @JsonProperty("per_unit_maximum") private val perUnitMaximum: String?,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Per-event basis point rate */
                        @JsonProperty("bps") fun bps(): Double = bps

                        /** Inclusive tier starting value */
                        @JsonProperty("minimum_amount") fun minimumAmount(): String = minimumAmount

                        /** Exclusive tier ending value */
                        @JsonProperty("maximum_amount")
                        fun maximumAmount(): Optional<String> = Optional.ofNullable(maximumAmount)

                        /** Per unit maximum to charge */
                        @JsonProperty("per_unit_maximum")
                        fun perUnitMaximum(): Optional<String> = Optional.ofNullable(perUnitMaximum)

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var bps: Double? = null
                            private var minimumAmount: String? = null
                            private var maximumAmount: String? = null
                            private var perUnitMaximum: String? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                bps = tier.bps
                                minimumAmount = tier.minimumAmount
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Per-event basis point rate */
                            fun bps(bps: Double) = apply { this.bps = bps }

                            /** Inclusive tier starting value */
                            fun minimumAmount(minimumAmount: String) = apply {
                                this.minimumAmount = minimumAmount
                            }

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: String?) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: Optional<String>) =
                                maximumAmount(maximumAmount.orElse(null))

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: String?) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                                perUnitMaximum(perUnitMaximum.orElse(null))

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkNotNull(bps) { "`bps` is required but was not set" },
                                    checkNotNull(minimumAmount) {
                                        "`minimumAmount` is required but was not set"
                                    },
                                    maximumAmount,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && bps == other.bps && minimumAmount == other.minimumAmount && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(bps, minimumAmount, maximumAmount, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{bps=$bps, minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredBpsPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredBpsConfig == other.tieredBpsConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredBpsConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredBpsPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredBpsConfig=$tieredBpsConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bps_config") private val bpsConfig: BpsConfig,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("bps_config") fun bpsConfig(): BpsConfig = bpsConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var bpsConfig: BpsConfig? = null
                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBpsPrice: NewSubscriptionBpsPrice) = apply {
                        bpsConfig = newSubscriptionBpsPrice.bpsConfig
                        cadence = newSubscriptionBpsPrice.cadence
                        itemId = newSubscriptionBpsPrice.itemId
                        modelType = newSubscriptionBpsPrice.modelType
                        name = newSubscriptionBpsPrice.name
                        billableMetricId = newSubscriptionBpsPrice.billableMetricId
                        billedInAdvance = newSubscriptionBpsPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionBpsPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionBpsPrice.conversionRate
                        currency = newSubscriptionBpsPrice.currency
                        externalPriceId = newSubscriptionBpsPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionBpsPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionBpsPrice.metadata
                        referenceId = newSubscriptionBpsPrice.referenceId
                        additionalProperties =
                            newSubscriptionBpsPrice.additionalProperties.toMutableMap()
                    }

                    fun bpsConfig(bpsConfig: BpsConfig) = apply { this.bpsConfig = bpsConfig }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBpsPrice =
                        NewSubscriptionBpsPrice(
                            checkNotNull(bpsConfig) { "`bpsConfig` is required but was not set" },
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("bps") private val bps: Double,
                    @JsonProperty("per_unit_maximum") private val perUnitMaximum: String?,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Basis point take rate per event */
                    @JsonProperty("bps") fun bps(): Double = bps

                    /** Optional currency amount maximum to cap spend per event */
                    @JsonProperty("per_unit_maximum")
                    fun perUnitMaximum(): Optional<String> = Optional.ofNullable(perUnitMaximum)

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var bps: Double? = null
                        private var perUnitMaximum: String? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bpsConfig: BpsConfig) = apply {
                            bps = bpsConfig.bps
                            perUnitMaximum = bpsConfig.perUnitMaximum
                            additionalProperties = bpsConfig.additionalProperties.toMutableMap()
                        }

                        /** Basis point take rate per event */
                        fun bps(bps: Double) = apply { this.bps = bps }

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: String?) = apply {
                            this.perUnitMaximum = perUnitMaximum
                        }

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                            perUnitMaximum(perUnitMaximum.orElse(null))

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BpsConfig =
                            BpsConfig(
                                checkNotNull(bps) { "`bps` is required but was not set" },
                                perUnitMaximum,
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BpsConfig && bps == other.bps && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(bps, perUnitMaximum, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BpsConfig{bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BPS = of("bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BPS,
                    }

                    enum class Value {
                        BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BPS -> Value.BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BPS -> Known.BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBpsPrice && bpsConfig == other.bpsConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bpsConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBpsPrice{bpsConfig=$bpsConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBulkBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_bps_config") private val bulkBpsConfig: BulkBpsConfig,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("bulk_bps_config") fun bulkBpsConfig(): BulkBpsConfig = bulkBpsConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var bulkBpsConfig: BulkBpsConfig? = null
                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice) =
                        apply {
                            bulkBpsConfig = newSubscriptionBulkBpsPrice.bulkBpsConfig
                            cadence = newSubscriptionBulkBpsPrice.cadence
                            itemId = newSubscriptionBulkBpsPrice.itemId
                            modelType = newSubscriptionBulkBpsPrice.modelType
                            name = newSubscriptionBulkBpsPrice.name
                            billableMetricId = newSubscriptionBulkBpsPrice.billableMetricId
                            billedInAdvance = newSubscriptionBulkBpsPrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionBulkBpsPrice.billingCycleConfiguration
                            conversionRate = newSubscriptionBulkBpsPrice.conversionRate
                            currency = newSubscriptionBulkBpsPrice.currency
                            externalPriceId = newSubscriptionBulkBpsPrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionBulkBpsPrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionBulkBpsPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionBulkBpsPrice.invoicingCycleConfiguration
                            metadata = newSubscriptionBulkBpsPrice.metadata
                            referenceId = newSubscriptionBulkBpsPrice.referenceId
                            additionalProperties =
                                newSubscriptionBulkBpsPrice.additionalProperties.toMutableMap()
                        }

                    fun bulkBpsConfig(bulkBpsConfig: BulkBpsConfig) = apply {
                        this.bulkBpsConfig = bulkBpsConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBulkBpsPrice =
                        NewSubscriptionBulkBpsPrice(
                            checkNotNull(bulkBpsConfig) {
                                "`bulkBpsConfig` is required but was not set"
                            },
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers") private val tiers: List<Tier>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    @JsonProperty("tiers") fun tiers(): List<Tier> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: MutableList<Tier>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkBpsConfig: BulkBpsConfig) = apply {
                            tiers = bulkBpsConfig.tiers.toMutableList()
                            additionalProperties = bulkBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun tiers(tiers: List<Tier>) = apply { this.tiers = tiers.toMutableList() }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers = (tiers ?: mutableListOf()).apply { add(tier) }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkBpsConfig =
                            BulkBpsConfig(
                                checkNotNull(tiers) { "`tiers` is required but was not set" }
                                    .toImmutable(),
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps") private val bps: Double,
                        @JsonProperty("maximum_amount") private val maximumAmount: String?,
                        @JsonProperty("per_unit_maximum") private val perUnitMaximum: String?,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Basis points to rate on */
                        @JsonProperty("bps") fun bps(): Double = bps

                        /** Upper bound for tier */
                        @JsonProperty("maximum_amount")
                        fun maximumAmount(): Optional<String> = Optional.ofNullable(maximumAmount)

                        /** The maximum amount to charge for any one event */
                        @JsonProperty("per_unit_maximum")
                        fun perUnitMaximum(): Optional<String> = Optional.ofNullable(perUnitMaximum)

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var bps: Double? = null
                            private var maximumAmount: String? = null
                            private var perUnitMaximum: String? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                bps = tier.bps
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Basis points to rate on */
                            fun bps(bps: Double) = apply { this.bps = bps }

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: String?) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: Optional<String>) =
                                maximumAmount(maximumAmount.orElse(null))

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: String?) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                                perUnitMaximum(perUnitMaximum.orElse(null))

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkNotNull(bps) { "`bps` is required but was not set" },
                                    maximumAmount,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && bps == other.bps && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(bps, maximumAmount, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{bps=$bps, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_BPS = of("bulk_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK_BPS,
                    }

                    enum class Value {
                        BULK_BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK_BPS -> Value.BULK_BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK_BPS -> Known.BULK_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkBpsPrice && bulkBpsConfig == other.bulkBpsConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkBpsConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBulkBpsPrice{bulkBpsConfig=$bulkBpsConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBulkPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_config") private val bulkConfig: BulkConfig,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("bulk_config") fun bulkConfig(): BulkConfig = bulkConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var bulkConfig: BulkConfig? = null
                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBulkPrice: NewSubscriptionBulkPrice) = apply {
                        bulkConfig = newSubscriptionBulkPrice.bulkConfig
                        cadence = newSubscriptionBulkPrice.cadence
                        itemId = newSubscriptionBulkPrice.itemId
                        modelType = newSubscriptionBulkPrice.modelType
                        name = newSubscriptionBulkPrice.name
                        billableMetricId = newSubscriptionBulkPrice.billableMetricId
                        billedInAdvance = newSubscriptionBulkPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionBulkPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionBulkPrice.conversionRate
                        currency = newSubscriptionBulkPrice.currency
                        externalPriceId = newSubscriptionBulkPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionBulkPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionBulkPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionBulkPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionBulkPrice.metadata
                        referenceId = newSubscriptionBulkPrice.referenceId
                        additionalProperties =
                            newSubscriptionBulkPrice.additionalProperties.toMutableMap()
                    }

                    fun bulkConfig(bulkConfig: BulkConfig) = apply { this.bulkConfig = bulkConfig }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBulkPrice =
                        NewSubscriptionBulkPrice(
                            checkNotNull(bulkConfig) { "`bulkConfig` is required but was not set" },
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers") private val tiers: List<Tier>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Bulk tiers for rating based on total usage volume */
                    @JsonProperty("tiers") fun tiers(): List<Tier> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: MutableList<Tier>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkConfig: BulkConfig) = apply {
                            tiers = bulkConfig.tiers.toMutableList()
                            additionalProperties = bulkConfig.additionalProperties.toMutableMap()
                        }

                        /** Bulk tiers for rating based on total usage volume */
                        fun tiers(tiers: List<Tier>) = apply { this.tiers = tiers.toMutableList() }

                        /** Bulk tiers for rating based on total usage volume */
                        fun addTier(tier: Tier) = apply {
                            tiers = (tiers ?: mutableListOf()).apply { add(tier) }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkConfig =
                            BulkConfig(
                                checkNotNull(tiers) { "`tiers` is required but was not set" }
                                    .toImmutable(),
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("unit_amount") private val unitAmount: String,
                        @JsonProperty("maximum_units") private val maximumUnits: Double?,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Amount per unit */
                        @JsonProperty("unit_amount") fun unitAmount(): String = unitAmount

                        /** Upper bound for this tier */
                        @JsonProperty("maximum_units")
                        fun maximumUnits(): Optional<Double> = Optional.ofNullable(maximumUnits)

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var unitAmount: String? = null
                            private var maximumUnits: Double? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                unitAmount = tier.unitAmount
                                maximumUnits = tier.maximumUnits
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) = apply {
                                this.unitAmount = unitAmount
                            }

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double?) = apply {
                                this.maximumUnits = maximumUnits
                            }

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double) =
                                maximumUnits(maximumUnits as Double?)

                            /** Upper bound for this tier */
                            @Suppress(
                                "USELESS_CAST"
                            ) // See https://youtrack.jetbrains.com/issue/KT-74228
                            fun maximumUnits(maximumUnits: Optional<Double>) =
                                maximumUnits(maximumUnits.orElse(null) as Double?)

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkNotNull(unitAmount) {
                                        "`unitAmount` is required but was not set"
                                    },
                                    maximumUnits,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && unitAmount == other.unitAmount && maximumUnits == other.maximumUnits && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(unitAmount, maximumUnits, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{unitAmount=$unitAmount, maximumUnits=$maximumUnits, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK = of("bulk")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK,
                    }

                    enum class Value {
                        BULK,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK -> Value.BULK
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK -> Known.BULK
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkPrice && bulkConfig == other.bulkConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBulkPrice{bulkConfig=$bulkConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionThresholdTotalAmountPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("threshold_total_amount_config")
                private val thresholdTotalAmountConfig: ThresholdTotalAmountConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("threshold_total_amount_config")
                fun thresholdTotalAmountConfig(): ThresholdTotalAmountConfig =
                    thresholdTotalAmountConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var thresholdTotalAmountConfig: ThresholdTotalAmountConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionThresholdTotalAmountPrice:
                            NewSubscriptionThresholdTotalAmountPrice
                    ) = apply {
                        cadence = newSubscriptionThresholdTotalAmountPrice.cadence
                        itemId = newSubscriptionThresholdTotalAmountPrice.itemId
                        modelType = newSubscriptionThresholdTotalAmountPrice.modelType
                        name = newSubscriptionThresholdTotalAmountPrice.name
                        thresholdTotalAmountConfig =
                            newSubscriptionThresholdTotalAmountPrice.thresholdTotalAmountConfig
                        billableMetricId = newSubscriptionThresholdTotalAmountPrice.billableMetricId
                        billedInAdvance = newSubscriptionThresholdTotalAmountPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionThresholdTotalAmountPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionThresholdTotalAmountPrice.conversionRate
                        currency = newSubscriptionThresholdTotalAmountPrice.currency
                        externalPriceId = newSubscriptionThresholdTotalAmountPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionThresholdTotalAmountPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionThresholdTotalAmountPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionThresholdTotalAmountPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionThresholdTotalAmountPrice.metadata
                        referenceId = newSubscriptionThresholdTotalAmountPrice.referenceId
                        additionalProperties =
                            newSubscriptionThresholdTotalAmountPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: ThresholdTotalAmountConfig
                    ) = apply { this.thresholdTotalAmountConfig = thresholdTotalAmountConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionThresholdTotalAmountPrice =
                        NewSubscriptionThresholdTotalAmountPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(thresholdTotalAmountConfig) {
                                "`thresholdTotalAmountConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val THRESHOLD_TOTAL_AMOUNT = of("threshold_total_amount")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        THRESHOLD_TOTAL_AMOUNT,
                    }

                    enum class Value {
                        THRESHOLD_TOTAL_AMOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Value.THRESHOLD_TOTAL_AMOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Known.THRESHOLD_TOTAL_AMOUNT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class ThresholdTotalAmountConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(thresholdTotalAmountConfig: ThresholdTotalAmountConfig) =
                            apply {
                                additionalProperties =
                                    thresholdTotalAmountConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): ThresholdTotalAmountConfig =
                            ThresholdTotalAmountConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ThresholdTotalAmountConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "ThresholdTotalAmountConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionThresholdTotalAmountPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && thresholdTotalAmountConfig == other.thresholdTotalAmountConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, thresholdTotalAmountConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionThresholdTotalAmountPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, thresholdTotalAmountConfig=$thresholdTotalAmountConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("tiered_package_config")
                private val tieredPackageConfig: TieredPackageConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("tiered_package_config")
                fun tieredPackageConfig(): TieredPackageConfig = tieredPackageConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var tieredPackageConfig: TieredPackageConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                    ) = apply {
                        cadence = newSubscriptionTieredPackagePrice.cadence
                        itemId = newSubscriptionTieredPackagePrice.itemId
                        modelType = newSubscriptionTieredPackagePrice.modelType
                        name = newSubscriptionTieredPackagePrice.name
                        tieredPackageConfig = newSubscriptionTieredPackagePrice.tieredPackageConfig
                        billableMetricId = newSubscriptionTieredPackagePrice.billableMetricId
                        billedInAdvance = newSubscriptionTieredPackagePrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTieredPackagePrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTieredPackagePrice.conversionRate
                        currency = newSubscriptionTieredPackagePrice.currency
                        externalPriceId = newSubscriptionTieredPackagePrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionTieredPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTieredPackagePrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTieredPackagePrice.metadata
                        referenceId = newSubscriptionTieredPackagePrice.referenceId
                        additionalProperties =
                            newSubscriptionTieredPackagePrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun tieredPackageConfig(tieredPackageConfig: TieredPackageConfig) = apply {
                        this.tieredPackageConfig = tieredPackageConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredPackagePrice =
                        NewSubscriptionTieredPackagePrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(tieredPackageConfig) {
                                "`tieredPackageConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_PACKAGE = of("tiered_package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_PACKAGE,
                    }

                    enum class Value {
                        TIERED_PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_PACKAGE -> Value.TIERED_PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_PACKAGE -> Known.TIERED_PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredPackageConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredPackageConfig: TieredPackageConfig) = apply {
                            additionalProperties =
                                tieredPackageConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredPackageConfig =
                            TieredPackageConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredPackageConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredPackagePrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredPackageConfig == other.tieredPackageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredPackageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredPackagePrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredPackageConfig=$tieredPackageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredWithMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("tiered_with_minimum_config")
                private val tieredWithMinimumConfig: TieredWithMinimumConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("tiered_with_minimum_config")
                fun tieredWithMinimumConfig(): TieredWithMinimumConfig = tieredWithMinimumConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var tieredWithMinimumConfig: TieredWithMinimumConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                    ) = apply {
                        cadence = newSubscriptionTieredWithMinimumPrice.cadence
                        itemId = newSubscriptionTieredWithMinimumPrice.itemId
                        modelType = newSubscriptionTieredWithMinimumPrice.modelType
                        name = newSubscriptionTieredWithMinimumPrice.name
                        tieredWithMinimumConfig =
                            newSubscriptionTieredWithMinimumPrice.tieredWithMinimumConfig
                        billableMetricId = newSubscriptionTieredWithMinimumPrice.billableMetricId
                        billedInAdvance = newSubscriptionTieredWithMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTieredWithMinimumPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTieredWithMinimumPrice.conversionRate
                        currency = newSubscriptionTieredWithMinimumPrice.currency
                        externalPriceId = newSubscriptionTieredWithMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionTieredWithMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionTieredWithMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTieredWithMinimumPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTieredWithMinimumPrice.metadata
                        referenceId = newSubscriptionTieredWithMinimumPrice.referenceId
                        additionalProperties =
                            newSubscriptionTieredWithMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun tieredWithMinimumConfig(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                        apply {
                            this.tieredWithMinimumConfig = tieredWithMinimumConfig
                        }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredWithMinimumPrice =
                        NewSubscriptionTieredWithMinimumPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(tieredWithMinimumConfig) {
                                "`tieredWithMinimumConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_MINIMUM = of("tiered_with_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_WITH_MINIMUM,
                    }

                    enum class Value {
                        TIERED_WITH_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Value.TIERED_WITH_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Known.TIERED_WITH_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithMinimumConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithMinimumConfig =
                            TieredWithMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithMinimumConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredWithMinimumPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithMinimumConfig == other.tieredWithMinimumConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredWithMinimumConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredWithMinimumPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredWithMinimumConfig=$tieredWithMinimumConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionUnitWithPercentPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("unit_with_percent_config")
                private val unitWithPercentConfig: UnitWithPercentConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("unit_with_percent_config")
                fun unitWithPercentConfig(): UnitWithPercentConfig = unitWithPercentConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var unitWithPercentConfig: UnitWithPercentConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                    ) = apply {
                        cadence = newSubscriptionUnitWithPercentPrice.cadence
                        itemId = newSubscriptionUnitWithPercentPrice.itemId
                        modelType = newSubscriptionUnitWithPercentPrice.modelType
                        name = newSubscriptionUnitWithPercentPrice.name
                        unitWithPercentConfig =
                            newSubscriptionUnitWithPercentPrice.unitWithPercentConfig
                        billableMetricId = newSubscriptionUnitWithPercentPrice.billableMetricId
                        billedInAdvance = newSubscriptionUnitWithPercentPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionUnitWithPercentPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionUnitWithPercentPrice.conversionRate
                        currency = newSubscriptionUnitWithPercentPrice.currency
                        externalPriceId = newSubscriptionUnitWithPercentPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionUnitWithPercentPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionUnitWithPercentPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionUnitWithPercentPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionUnitWithPercentPrice.metadata
                        referenceId = newSubscriptionUnitWithPercentPrice.referenceId
                        additionalProperties =
                            newSubscriptionUnitWithPercentPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun unitWithPercentConfig(unitWithPercentConfig: UnitWithPercentConfig) =
                        apply {
                            this.unitWithPercentConfig = unitWithPercentConfig
                        }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionUnitWithPercentPrice =
                        NewSubscriptionUnitWithPercentPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(unitWithPercentConfig) {
                                "`unitWithPercentConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PERCENT = of("unit_with_percent")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT_WITH_PERCENT,
                    }

                    enum class Value {
                        UNIT_WITH_PERCENT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PERCENT -> Value.UNIT_WITH_PERCENT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PERCENT -> Known.UNIT_WITH_PERCENT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithPercentConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithPercentConfig: UnitWithPercentConfig) = apply {
                            additionalProperties =
                                unitWithPercentConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithPercentConfig =
                            UnitWithPercentConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithPercentConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithPercentConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitWithPercentPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithPercentConfig == other.unitWithPercentConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitWithPercentConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionUnitWithPercentPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitWithPercentConfig=$unitWithPercentConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionPackageWithAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("package_with_allocation_config")
                private val packageWithAllocationConfig: PackageWithAllocationConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("package_with_allocation_config")
                fun packageWithAllocationConfig(): PackageWithAllocationConfig =
                    packageWithAllocationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var packageWithAllocationConfig: PackageWithAllocationConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionPackageWithAllocationPrice:
                            NewSubscriptionPackageWithAllocationPrice
                    ) = apply {
                        cadence = newSubscriptionPackageWithAllocationPrice.cadence
                        itemId = newSubscriptionPackageWithAllocationPrice.itemId
                        modelType = newSubscriptionPackageWithAllocationPrice.modelType
                        name = newSubscriptionPackageWithAllocationPrice.name
                        packageWithAllocationConfig =
                            newSubscriptionPackageWithAllocationPrice.packageWithAllocationConfig
                        billableMetricId =
                            newSubscriptionPackageWithAllocationPrice.billableMetricId
                        billedInAdvance = newSubscriptionPackageWithAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionPackageWithAllocationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionPackageWithAllocationPrice.conversionRate
                        currency = newSubscriptionPackageWithAllocationPrice.currency
                        externalPriceId = newSubscriptionPackageWithAllocationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionPackageWithAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionPackageWithAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionPackageWithAllocationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionPackageWithAllocationPrice.metadata
                        referenceId = newSubscriptionPackageWithAllocationPrice.referenceId
                        additionalProperties =
                            newSubscriptionPackageWithAllocationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: PackageWithAllocationConfig
                    ) = apply { this.packageWithAllocationConfig = packageWithAllocationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionPackageWithAllocationPrice =
                        NewSubscriptionPackageWithAllocationPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(packageWithAllocationConfig) {
                                "`packageWithAllocationConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE_WITH_ALLOCATION = of("package_with_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        PACKAGE_WITH_ALLOCATION,
                    }

                    enum class Value {
                        PACKAGE_WITH_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Value.PACKAGE_WITH_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Known.PACKAGE_WITH_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageWithAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            packageWithAllocationConfig: PackageWithAllocationConfig
                        ) = apply {
                            additionalProperties =
                                packageWithAllocationConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageWithAllocationConfig =
                            PackageWithAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageWithAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageWithAllocationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionPackageWithAllocationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && packageWithAllocationConfig == other.packageWithAllocationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, packageWithAllocationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionPackageWithAllocationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, packageWithAllocationConfig=$packageWithAllocationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTierWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("tiered_with_proration_config")
                private val tieredWithProrationConfig: TieredWithProrationConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("tiered_with_proration_config")
                fun tieredWithProrationConfig(): TieredWithProrationConfig =
                    tieredWithProrationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var tieredWithProrationConfig: TieredWithProrationConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                    ) = apply {
                        cadence = newSubscriptionTierWithProrationPrice.cadence
                        itemId = newSubscriptionTierWithProrationPrice.itemId
                        modelType = newSubscriptionTierWithProrationPrice.modelType
                        name = newSubscriptionTierWithProrationPrice.name
                        tieredWithProrationConfig =
                            newSubscriptionTierWithProrationPrice.tieredWithProrationConfig
                        billableMetricId = newSubscriptionTierWithProrationPrice.billableMetricId
                        billedInAdvance = newSubscriptionTierWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTierWithProrationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTierWithProrationPrice.conversionRate
                        currency = newSubscriptionTierWithProrationPrice.currency
                        externalPriceId = newSubscriptionTierWithProrationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionTierWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionTierWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTierWithProrationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTierWithProrationPrice.metadata
                        referenceId = newSubscriptionTierWithProrationPrice.referenceId
                        additionalProperties =
                            newSubscriptionTierWithProrationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: TieredWithProrationConfig
                    ) = apply { this.tieredWithProrationConfig = tieredWithProrationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTierWithProrationPrice =
                        NewSubscriptionTierWithProrationPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(tieredWithProrationConfig) {
                                "`tieredWithProrationConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_PRORATION = of("tiered_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_WITH_PRORATION,
                    }

                    enum class Value {
                        TIERED_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_PRORATION -> Value.TIERED_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_PRORATION -> Known.TIERED_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithProrationConfig: TieredWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithProrationConfig =
                            TieredWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTierWithProrationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithProrationConfig == other.tieredWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTierWithProrationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredWithProrationConfig=$tieredWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionUnitWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("unit_with_proration_config")
                private val unitWithProrationConfig: UnitWithProrationConfig,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                @JsonProperty("unit_with_proration_config")
                fun unitWithProrationConfig(): UnitWithProrationConfig = unitWithProrationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var unitWithProrationConfig: UnitWithProrationConfig? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                    ) = apply {
                        cadence = newSubscriptionUnitWithProrationPrice.cadence
                        itemId = newSubscriptionUnitWithProrationPrice.itemId
                        modelType = newSubscriptionUnitWithProrationPrice.modelType
                        name = newSubscriptionUnitWithProrationPrice.name
                        unitWithProrationConfig =
                            newSubscriptionUnitWithProrationPrice.unitWithProrationConfig
                        billableMetricId = newSubscriptionUnitWithProrationPrice.billableMetricId
                        billedInAdvance = newSubscriptionUnitWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionUnitWithProrationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionUnitWithProrationPrice.conversionRate
                        currency = newSubscriptionUnitWithProrationPrice.currency
                        externalPriceId = newSubscriptionUnitWithProrationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionUnitWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionUnitWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionUnitWithProrationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionUnitWithProrationPrice.metadata
                        referenceId = newSubscriptionUnitWithProrationPrice.referenceId
                        additionalProperties =
                            newSubscriptionUnitWithProrationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    fun unitWithProrationConfig(unitWithProrationConfig: UnitWithProrationConfig) =
                        apply {
                            this.unitWithProrationConfig = unitWithProrationConfig
                        }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionUnitWithProrationPrice =
                        NewSubscriptionUnitWithProrationPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            checkNotNull(unitWithProrationConfig) {
                                "`unitWithProrationConfig` is required but was not set"
                            },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PRORATION = of("unit_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT_WITH_PRORATION,
                    }

                    enum class Value {
                        UNIT_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PRORATION -> Value.UNIT_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PRORATION -> Known.UNIT_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithProrationConfig: UnitWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    unitWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithProrationConfig =
                            UnitWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitWithProrationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithProrationConfig == other.unitWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionUnitWithProrationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitWithProrationConfig=$unitWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionGroupedAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("grouped_allocation_config")
                private val groupedAllocationConfig: GroupedAllocationConfig,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                @JsonProperty("grouped_allocation_config")
                fun groupedAllocationConfig(): GroupedAllocationConfig = groupedAllocationConfig

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var groupedAllocationConfig: GroupedAllocationConfig? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                    ) = apply {
                        cadence = newSubscriptionGroupedAllocationPrice.cadence
                        groupedAllocationConfig =
                            newSubscriptionGroupedAllocationPrice.groupedAllocationConfig
                        itemId = newSubscriptionGroupedAllocationPrice.itemId
                        modelType = newSubscriptionGroupedAllocationPrice.modelType
                        name = newSubscriptionGroupedAllocationPrice.name
                        billableMetricId = newSubscriptionGroupedAllocationPrice.billableMetricId
                        billedInAdvance = newSubscriptionGroupedAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionGroupedAllocationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionGroupedAllocationPrice.conversionRate
                        currency = newSubscriptionGroupedAllocationPrice.currency
                        externalPriceId = newSubscriptionGroupedAllocationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionGroupedAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionGroupedAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionGroupedAllocationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionGroupedAllocationPrice.metadata
                        referenceId = newSubscriptionGroupedAllocationPrice.referenceId
                        additionalProperties =
                            newSubscriptionGroupedAllocationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    fun groupedAllocationConfig(groupedAllocationConfig: GroupedAllocationConfig) =
                        apply {
                            this.groupedAllocationConfig = groupedAllocationConfig
                        }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionGroupedAllocationPrice =
                        NewSubscriptionGroupedAllocationPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(groupedAllocationConfig) {
                                "`groupedAllocationConfig` is required but was not set"
                            },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedAllocationConfig: GroupedAllocationConfig) =
                            apply {
                                additionalProperties =
                                    groupedAllocationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedAllocationConfig =
                            GroupedAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedAllocationConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val GROUPED_ALLOCATION = of("grouped_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_ALLOCATION,
                    }

                    enum class Value {
                        GROUPED_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_ALLOCATION -> Value.GROUPED_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_ALLOCATION -> Known.GROUPED_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionGroupedAllocationPrice && cadence == other.cadence && groupedAllocationConfig == other.groupedAllocationConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, groupedAllocationConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionGroupedAllocationPrice{cadence=$cadence, groupedAllocationConfig=$groupedAllocationConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionGroupedWithProratedMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("grouped_with_prorated_minimum_config")
                private val groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                @JsonProperty("grouped_with_prorated_minimum_config")
                fun groupedWithProratedMinimumConfig(): GroupedWithProratedMinimumConfig =
                    groupedWithProratedMinimumConfig

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: Cadence? = null
                    private var groupedWithProratedMinimumConfig:
                        GroupedWithProratedMinimumConfig? =
                        null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionGroupedWithProratedMinimumPrice:
                            NewSubscriptionGroupedWithProratedMinimumPrice
                    ) = apply {
                        cadence = newSubscriptionGroupedWithProratedMinimumPrice.cadence
                        groupedWithProratedMinimumConfig =
                            newSubscriptionGroupedWithProratedMinimumPrice
                                .groupedWithProratedMinimumConfig
                        itemId = newSubscriptionGroupedWithProratedMinimumPrice.itemId
                        modelType = newSubscriptionGroupedWithProratedMinimumPrice.modelType
                        name = newSubscriptionGroupedWithProratedMinimumPrice.name
                        billableMetricId =
                            newSubscriptionGroupedWithProratedMinimumPrice.billableMetricId
                        billedInAdvance =
                            newSubscriptionGroupedWithProratedMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionGroupedWithProratedMinimumPrice.billingCycleConfiguration
                        conversionRate =
                            newSubscriptionGroupedWithProratedMinimumPrice.conversionRate
                        currency = newSubscriptionGroupedWithProratedMinimumPrice.currency
                        externalPriceId =
                            newSubscriptionGroupedWithProratedMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionGroupedWithProratedMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionGroupedWithProratedMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionGroupedWithProratedMinimumPrice
                                .invoicingCycleConfiguration
                        metadata = newSubscriptionGroupedWithProratedMinimumPrice.metadata
                        referenceId = newSubscriptionGroupedWithProratedMinimumPrice.referenceId
                        additionalProperties =
                            newSubscriptionGroupedWithProratedMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                    ) = apply {
                        this.groupedWithProratedMinimumConfig = groupedWithProratedMinimumConfig
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionGroupedWithProratedMinimumPrice =
                        NewSubscriptionGroupedWithProratedMinimumPrice(
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(groupedWithProratedMinimumConfig) {
                                "`groupedWithProratedMinimumConfig` is required but was not set"
                            },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedWithProratedMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                        ) = apply {
                            additionalProperties =
                                groupedWithProratedMinimumConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedWithProratedMinimumConfig =
                            GroupedWithProratedMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedWithProratedMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedWithProratedMinimumConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val GROUPED_WITH_PRORATED_MINIMUM = of("grouped_with_prorated_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_WITH_PRORATED_MINIMUM,
                    }

                    enum class Value {
                        GROUPED_WITH_PRORATED_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Value.GROUPED_WITH_PRORATED_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Known.GROUPED_WITH_PRORATED_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionGroupedWithProratedMinimumPrice && cadence == other.cadence && groupedWithProratedMinimumConfig == other.groupedWithProratedMinimumConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, groupedWithProratedMinimumConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionGroupedWithProratedMinimumPrice{cadence=$cadence, groupedWithProratedMinimumConfig=$groupedWithProratedMinimumConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBulkWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_with_proration_config")
                private val bulkWithProrationConfig: BulkWithProrationConfig,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("currency") private val currency: String?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("reference_id") private val referenceId: String?,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("bulk_with_proration_config")
                fun bulkWithProrationConfig(): BulkWithProrationConfig = bulkWithProrationConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                fun currency(): Optional<String> = Optional.ofNullable(currency)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                fun referenceId(): Optional<String> = Optional.ofNullable(referenceId)

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var bulkWithProrationConfig: BulkWithProrationConfig? = null
                    private var cadence: Cadence? = null
                    private var itemId: String? = null
                    private var modelType: ModelType? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var currency: String? = null
                    private var externalPriceId: String? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var metadata: Metadata? = null
                    private var referenceId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                    ) = apply {
                        bulkWithProrationConfig =
                            newSubscriptionBulkWithProrationPrice.bulkWithProrationConfig
                        cadence = newSubscriptionBulkWithProrationPrice.cadence
                        itemId = newSubscriptionBulkWithProrationPrice.itemId
                        modelType = newSubscriptionBulkWithProrationPrice.modelType
                        name = newSubscriptionBulkWithProrationPrice.name
                        billableMetricId = newSubscriptionBulkWithProrationPrice.billableMetricId
                        billedInAdvance = newSubscriptionBulkWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionBulkWithProrationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionBulkWithProrationPrice.conversionRate
                        currency = newSubscriptionBulkWithProrationPrice.currency
                        externalPriceId = newSubscriptionBulkWithProrationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionBulkWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionBulkWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionBulkWithProrationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionBulkWithProrationPrice.metadata
                        referenceId = newSubscriptionBulkWithProrationPrice.referenceId
                        additionalProperties =
                            newSubscriptionBulkWithProrationPrice.additionalProperties
                                .toMutableMap()
                    }

                    fun bulkWithProrationConfig(bulkWithProrationConfig: BulkWithProrationConfig) =
                        apply {
                            this.bulkWithProrationConfig = bulkWithProrationConfig
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = apply { this.currency = currency }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = apply { this.metadata = metadata }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) = apply { this.referenceId = referenceId }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBulkWithProrationPrice =
                        NewSubscriptionBulkWithProrationPrice(
                            checkNotNull(bulkWithProrationConfig) {
                                "`bulkWithProrationConfig` is required but was not set"
                            },
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkWithProrationConfig: BulkWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    bulkWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkWithProrationConfig =
                            BulkWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_WITH_PRORATION = of("bulk_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK_WITH_PRORATION,
                    }

                    enum class Value {
                        BULK_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK_WITH_PRORATION -> Value.BULK_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK_WITH_PRORATION -> Known.BULK_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkWithProrationPrice && bulkWithProrationConfig == other.bulkWithProrationConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkWithProrationConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBulkWithProrationPrice{bulkWithProrationConfig=$bulkWithProrationConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is ReplacePrice && replacesPriceId == other.replacesPriceId && discounts == other.discounts && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && maximumAmount == other.maximumAmount && minimumAmount == other.minimumAmount && price == other.price && priceId == other.priceId && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(replacesPriceId, discounts, externalPriceId, fixedPriceQuantity, maximumAmount, minimumAmount, price, priceId, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "ReplacePrice{replacesPriceId=$replacesPriceId, discounts=$discounts, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, maximumAmount=$maximumAmount, minimumAmount=$minimumAmount, price=$price, priceId=$priceId, additionalProperties=$additionalProperties}"
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is SubscriptionCreateParams && body == other.body && additionalHeaders == other.additionalHeaders && additionalQueryParams == other.additionalQueryParams /* spotless:on */
    }

    override fun hashCode(): Int = /* spotless:off */ Objects.hash(body, additionalHeaders, additionalQueryParams) /* spotless:on */

    override fun toString() =
        "SubscriptionCreateParams{body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
