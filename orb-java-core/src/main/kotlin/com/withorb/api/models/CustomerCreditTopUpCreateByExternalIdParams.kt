// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonValue
import com.withorb.api.core.NoAutoDetect
import com.withorb.api.core.http.Headers
import com.withorb.api.core.http.QueryParams
import com.withorb.api.core.immutableEmptyMap
import com.withorb.api.core.toImmutable
import com.withorb.api.errors.OrbInvalidDataException
import java.util.Objects
import java.util.Optional

/**
 * This endpoint allows you to create a new top-up for a specified customer's balance. While this
 * top-up is active, the customer's balance will added in increments of the specified amount
 * whenever the balance reaches the specified threshold.
 *
 * If a top-up already exists for this customer in the same currency, the existing top-up will be
 * replaced.
 */
class CustomerCreditTopUpCreateByExternalIdParams
constructor(
    private val externalCustomerId: String,
    private val body: CustomerCreditTopUpCreateByExternalIdBody,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) {

    fun externalCustomerId(): String = externalCustomerId

    /** The amount to increment when the threshold is reached. */
    fun amount(): String = body.amount()

    /**
     * The currency or custom pricing unit to use for this top-up. If this is a real-world currency,
     * it must match the customer's invoicing currency.
     */
    fun currency(): String = body.currency()

    /** Settings for invoices generated by triggered top-ups. */
    fun invoiceSettings(): InvoiceSettings = body.invoiceSettings()

    /** How much, in the customer's currency, to charge for each unit. */
    fun perUnitCostBasis(): String = body.perUnitCostBasis()

    /**
     * The threshold at which to trigger the top-up. If the balance is at or below this threshold,
     * the top-up will be triggered.
     */
    fun threshold(): String = body.threshold()

    /**
     * The number of days or months after which the top-up expires. If unspecified, it does not
     * expire.
     */
    fun expiresAfter(): Optional<Long> = body.expiresAfter()

    /** The unit of expires_after. */
    fun expiresAfterUnit(): Optional<ExpiresAfterUnit> = body.expiresAfterUnit()

    fun _additionalHeaders(): Headers = additionalHeaders

    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    @JvmSynthetic internal fun getBody(): CustomerCreditTopUpCreateByExternalIdBody = body

    @JvmSynthetic internal fun getHeaders(): Headers = additionalHeaders

    @JvmSynthetic internal fun getQueryParams(): QueryParams = additionalQueryParams

    fun getPathParam(index: Int): String {
        return when (index) {
            0 -> externalCustomerId
            else -> ""
        }
    }

    @NoAutoDetect
    class CustomerCreditTopUpCreateByExternalIdBody
    @JsonCreator
    internal constructor(
        @JsonProperty("amount") private val amount: String,
        @JsonProperty("currency") private val currency: String,
        @JsonProperty("invoice_settings") private val invoiceSettings: InvoiceSettings,
        @JsonProperty("per_unit_cost_basis") private val perUnitCostBasis: String,
        @JsonProperty("threshold") private val threshold: String,
        @JsonProperty("expires_after") private val expiresAfter: Long?,
        @JsonProperty("expires_after_unit") private val expiresAfterUnit: ExpiresAfterUnit?,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The amount to increment when the threshold is reached. */
        @JsonProperty("amount") fun amount(): String = amount

        /**
         * The currency or custom pricing unit to use for this top-up. If this is a real-world
         * currency, it must match the customer's invoicing currency.
         */
        @JsonProperty("currency") fun currency(): String = currency

        /** Settings for invoices generated by triggered top-ups. */
        @JsonProperty("invoice_settings") fun invoiceSettings(): InvoiceSettings = invoiceSettings

        /** How much, in the customer's currency, to charge for each unit. */
        @JsonProperty("per_unit_cost_basis") fun perUnitCostBasis(): String = perUnitCostBasis

        /**
         * The threshold at which to trigger the top-up. If the balance is at or below this
         * threshold, the top-up will be triggered.
         */
        @JsonProperty("threshold") fun threshold(): String = threshold

        /**
         * The number of days or months after which the top-up expires. If unspecified, it does not
         * expire.
         */
        @JsonProperty("expires_after")
        fun expiresAfter(): Optional<Long> = Optional.ofNullable(expiresAfter)

        /** The unit of expires_after. */
        @JsonProperty("expires_after_unit")
        fun expiresAfterUnit(): Optional<ExpiresAfterUnit> = Optional.ofNullable(expiresAfterUnit)

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var amount: String? = null
            private var currency: String? = null
            private var invoiceSettings: InvoiceSettings? = null
            private var perUnitCostBasis: String? = null
            private var threshold: String? = null
            private var expiresAfter: Long? = null
            private var expiresAfterUnit: ExpiresAfterUnit? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(
                customerCreditTopUpCreateByExternalIdBody: CustomerCreditTopUpCreateByExternalIdBody
            ) = apply {
                amount = customerCreditTopUpCreateByExternalIdBody.amount
                currency = customerCreditTopUpCreateByExternalIdBody.currency
                invoiceSettings = customerCreditTopUpCreateByExternalIdBody.invoiceSettings
                perUnitCostBasis = customerCreditTopUpCreateByExternalIdBody.perUnitCostBasis
                threshold = customerCreditTopUpCreateByExternalIdBody.threshold
                expiresAfter = customerCreditTopUpCreateByExternalIdBody.expiresAfter
                expiresAfterUnit = customerCreditTopUpCreateByExternalIdBody.expiresAfterUnit
                additionalProperties =
                    customerCreditTopUpCreateByExternalIdBody.additionalProperties.toMutableMap()
            }

            /** The amount to increment when the threshold is reached. */
            fun amount(amount: String) = apply { this.amount = amount }

            /**
             * The currency or custom pricing unit to use for this top-up. If this is a real-world
             * currency, it must match the customer's invoicing currency.
             */
            fun currency(currency: String) = apply { this.currency = currency }

            /** Settings for invoices generated by triggered top-ups. */
            fun invoiceSettings(invoiceSettings: InvoiceSettings) = apply {
                this.invoiceSettings = invoiceSettings
            }

            /** How much, in the customer's currency, to charge for each unit. */
            fun perUnitCostBasis(perUnitCostBasis: String) = apply {
                this.perUnitCostBasis = perUnitCostBasis
            }

            /**
             * The threshold at which to trigger the top-up. If the balance is at or below this
             * threshold, the top-up will be triggered.
             */
            fun threshold(threshold: String) = apply { this.threshold = threshold }

            /**
             * The number of days or months after which the top-up expires. If unspecified, it does
             * not expire.
             */
            fun expiresAfter(expiresAfter: Long?) = apply { this.expiresAfter = expiresAfter }

            /**
             * The number of days or months after which the top-up expires. If unspecified, it does
             * not expire.
             */
            fun expiresAfter(expiresAfter: Long) = expiresAfter(expiresAfter as Long?)

            /**
             * The number of days or months after which the top-up expires. If unspecified, it does
             * not expire.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun expiresAfter(expiresAfter: Optional<Long>) =
                expiresAfter(expiresAfter.orElse(null) as Long?)

            /** The unit of expires_after. */
            fun expiresAfterUnit(expiresAfterUnit: ExpiresAfterUnit?) = apply {
                this.expiresAfterUnit = expiresAfterUnit
            }

            /** The unit of expires_after. */
            fun expiresAfterUnit(expiresAfterUnit: Optional<ExpiresAfterUnit>) =
                expiresAfterUnit(expiresAfterUnit.orElse(null))

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): CustomerCreditTopUpCreateByExternalIdBody =
                CustomerCreditTopUpCreateByExternalIdBody(
                    checkNotNull(amount) { "`amount` is required but was not set" },
                    checkNotNull(currency) { "`currency` is required but was not set" },
                    checkNotNull(invoiceSettings) {
                        "`invoiceSettings` is required but was not set"
                    },
                    checkNotNull(perUnitCostBasis) {
                        "`perUnitCostBasis` is required but was not set"
                    },
                    checkNotNull(threshold) { "`threshold` is required but was not set" },
                    expiresAfter,
                    expiresAfterUnit,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is CustomerCreditTopUpCreateByExternalIdBody && amount == other.amount && currency == other.currency && invoiceSettings == other.invoiceSettings && perUnitCostBasis == other.perUnitCostBasis && threshold == other.threshold && expiresAfter == other.expiresAfter && expiresAfterUnit == other.expiresAfterUnit && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(amount, currency, invoiceSettings, perUnitCostBasis, threshold, expiresAfter, expiresAfterUnit, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "CustomerCreditTopUpCreateByExternalIdBody{amount=$amount, currency=$currency, invoiceSettings=$invoiceSettings, perUnitCostBasis=$perUnitCostBasis, threshold=$threshold, expiresAfter=$expiresAfter, expiresAfterUnit=$expiresAfterUnit, additionalProperties=$additionalProperties}"
    }

    fun toBuilder() = Builder().from(this)

    companion object {

        @JvmStatic fun builder() = Builder()
    }

    @NoAutoDetect
    class Builder {

        private var externalCustomerId: String? = null
        private var body: CustomerCreditTopUpCreateByExternalIdBody.Builder =
            CustomerCreditTopUpCreateByExternalIdBody.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(
            customerCreditTopUpCreateByExternalIdParams: CustomerCreditTopUpCreateByExternalIdParams
        ) = apply {
            externalCustomerId = customerCreditTopUpCreateByExternalIdParams.externalCustomerId
            body = customerCreditTopUpCreateByExternalIdParams.body.toBuilder()
            additionalHeaders =
                customerCreditTopUpCreateByExternalIdParams.additionalHeaders.toBuilder()
            additionalQueryParams =
                customerCreditTopUpCreateByExternalIdParams.additionalQueryParams.toBuilder()
        }

        fun externalCustomerId(externalCustomerId: String) = apply {
            this.externalCustomerId = externalCustomerId
        }

        /** The amount to increment when the threshold is reached. */
        fun amount(amount: String) = apply { body.amount(amount) }

        /**
         * The currency or custom pricing unit to use for this top-up. If this is a real-world
         * currency, it must match the customer's invoicing currency.
         */
        fun currency(currency: String) = apply { body.currency(currency) }

        /** Settings for invoices generated by triggered top-ups. */
        fun invoiceSettings(invoiceSettings: InvoiceSettings) = apply {
            body.invoiceSettings(invoiceSettings)
        }

        /** How much, in the customer's currency, to charge for each unit. */
        fun perUnitCostBasis(perUnitCostBasis: String) = apply {
            body.perUnitCostBasis(perUnitCostBasis)
        }

        /**
         * The threshold at which to trigger the top-up. If the balance is at or below this
         * threshold, the top-up will be triggered.
         */
        fun threshold(threshold: String) = apply { body.threshold(threshold) }

        /**
         * The number of days or months after which the top-up expires. If unspecified, it does not
         * expire.
         */
        fun expiresAfter(expiresAfter: Long?) = apply { body.expiresAfter(expiresAfter) }

        /**
         * The number of days or months after which the top-up expires. If unspecified, it does not
         * expire.
         */
        fun expiresAfter(expiresAfter: Long) = expiresAfter(expiresAfter as Long?)

        /**
         * The number of days or months after which the top-up expires. If unspecified, it does not
         * expire.
         */
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun expiresAfter(expiresAfter: Optional<Long>) =
            expiresAfter(expiresAfter.orElse(null) as Long?)

        /** The unit of expires_after. */
        fun expiresAfterUnit(expiresAfterUnit: ExpiresAfterUnit?) = apply {
            body.expiresAfterUnit(expiresAfterUnit)
        }

        /** The unit of expires_after. */
        fun expiresAfterUnit(expiresAfterUnit: Optional<ExpiresAfterUnit>) =
            expiresAfterUnit(expiresAfterUnit.orElse(null))

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceAdditionalHeaders(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeAdditionalHeaders(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAllAdditionalHeaders(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAllAdditionalQueryParams(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            body.additionalProperties(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            body.putAdditionalProperty(key, value)
        }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAllAdditionalProperties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) = apply { body.removeAdditionalProperty(key) }

        fun removeAllAdditionalBodyProperties(keys: Set<String>) = apply {
            body.removeAllAdditionalProperties(keys)
        }

        fun build(): CustomerCreditTopUpCreateByExternalIdParams =
            CustomerCreditTopUpCreateByExternalIdParams(
                checkNotNull(externalCustomerId) {
                    "`externalCustomerId` is required but was not set"
                },
                body.build(),
                additionalHeaders.build(),
                additionalQueryParams.build(),
            )
    }

    /** Settings for invoices generated by triggered top-ups. */
    @NoAutoDetect
    class InvoiceSettings
    @JsonCreator
    private constructor(
        @JsonProperty("auto_collection") private val autoCollection: Boolean,
        @JsonProperty("net_terms") private val netTerms: Long,
        @JsonProperty("memo") private val memo: String?,
        @JsonProperty("require_successful_payment") private val requireSuccessfulPayment: Boolean?,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /**
         * Whether the credits purchase invoice should auto collect with the customer's saved
         * payment method.
         */
        @JsonProperty("auto_collection") fun autoCollection(): Boolean = autoCollection

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0.
         */
        @JsonProperty("net_terms") fun netTerms(): Long = netTerms

        /** An optional memo to display on the invoice. */
        @JsonProperty("memo") fun memo(): Optional<String> = Optional.ofNullable(memo)

        /**
         * If true, new credit blocks created by this top-up will require that the corresponding
         * invoice is paid before they can be drawn down from.
         */
        @JsonProperty("require_successful_payment")
        fun requireSuccessfulPayment(): Optional<Boolean> =
            Optional.ofNullable(requireSuccessfulPayment)

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var autoCollection: Boolean? = null
            private var netTerms: Long? = null
            private var memo: String? = null
            private var requireSuccessfulPayment: Boolean? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(invoiceSettings: InvoiceSettings) = apply {
                autoCollection = invoiceSettings.autoCollection
                netTerms = invoiceSettings.netTerms
                memo = invoiceSettings.memo
                requireSuccessfulPayment = invoiceSettings.requireSuccessfulPayment
                additionalProperties = invoiceSettings.additionalProperties.toMutableMap()
            }

            /**
             * Whether the credits purchase invoice should auto collect with the customer's saved
             * payment method.
             */
            fun autoCollection(autoCollection: Boolean) = apply {
                this.autoCollection = autoCollection
            }

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0.
             */
            fun netTerms(netTerms: Long) = apply { this.netTerms = netTerms }

            /** An optional memo to display on the invoice. */
            fun memo(memo: String?) = apply { this.memo = memo }

            /** An optional memo to display on the invoice. */
            fun memo(memo: Optional<String>) = memo(memo.orElse(null))

            /**
             * If true, new credit blocks created by this top-up will require that the corresponding
             * invoice is paid before they can be drawn down from.
             */
            fun requireSuccessfulPayment(requireSuccessfulPayment: Boolean?) = apply {
                this.requireSuccessfulPayment = requireSuccessfulPayment
            }

            /**
             * If true, new credit blocks created by this top-up will require that the corresponding
             * invoice is paid before they can be drawn down from.
             */
            fun requireSuccessfulPayment(requireSuccessfulPayment: Boolean) =
                requireSuccessfulPayment(requireSuccessfulPayment as Boolean?)

            /**
             * If true, new credit blocks created by this top-up will require that the corresponding
             * invoice is paid before they can be drawn down from.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun requireSuccessfulPayment(requireSuccessfulPayment: Optional<Boolean>) =
                requireSuccessfulPayment(requireSuccessfulPayment.orElse(null) as Boolean?)

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): InvoiceSettings =
                InvoiceSettings(
                    checkNotNull(autoCollection) { "`autoCollection` is required but was not set" },
                    checkNotNull(netTerms) { "`netTerms` is required but was not set" },
                    memo,
                    requireSuccessfulPayment,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is InvoiceSettings && autoCollection == other.autoCollection && netTerms == other.netTerms && memo == other.memo && requireSuccessfulPayment == other.requireSuccessfulPayment && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(autoCollection, netTerms, memo, requireSuccessfulPayment, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "InvoiceSettings{autoCollection=$autoCollection, netTerms=$netTerms, memo=$memo, requireSuccessfulPayment=$requireSuccessfulPayment, additionalProperties=$additionalProperties}"
    }

    class ExpiresAfterUnit
    @JsonCreator
    private constructor(
        private val value: JsonField<String>,
    ) : Enum {

        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val DAY = of("day")

            @JvmField val MONTH = of("month")

            @JvmStatic fun of(value: String) = ExpiresAfterUnit(JsonField.of(value))
        }

        enum class Known {
            DAY,
            MONTH,
        }

        enum class Value {
            DAY,
            MONTH,
            _UNKNOWN,
        }

        fun value(): Value =
            when (this) {
                DAY -> Value.DAY
                MONTH -> Value.MONTH
                else -> Value._UNKNOWN
            }

        fun known(): Known =
            when (this) {
                DAY -> Known.DAY
                MONTH -> Known.MONTH
                else -> throw OrbInvalidDataException("Unknown ExpiresAfterUnit: $value")
            }

        fun asString(): String = _value().asStringOrThrow()

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is ExpiresAfterUnit && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is CustomerCreditTopUpCreateByExternalIdParams && externalCustomerId == other.externalCustomerId && body == other.body && additionalHeaders == other.additionalHeaders && additionalQueryParams == other.additionalQueryParams /* spotless:on */
    }

    override fun hashCode(): Int = /* spotless:off */ Objects.hash(externalCustomerId, body, additionalHeaders, additionalQueryParams) /* spotless:on */

    override fun toString() =
        "CustomerCreditTopUpCreateByExternalIdParams{externalCustomerId=$externalCustomerId, body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
