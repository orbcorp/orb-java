// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.ObjectCodec
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.SerializerProvider
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.BaseDeserializer
import com.withorb.api.core.BaseSerializer
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonMissing
import com.withorb.api.core.JsonValue
import com.withorb.api.core.Params
import com.withorb.api.core.checkKnown
import com.withorb.api.core.checkRequired
import com.withorb.api.core.getOrThrow
import com.withorb.api.core.http.Headers
import com.withorb.api.core.http.QueryParams
import com.withorb.api.core.toImmutable
import com.withorb.api.errors.OrbInvalidDataException
import java.util.Collections
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

/**
 * This endpoint is used to create a [price](/product-catalog/price-configuration). A price created
 * using this endpoint is always an add-on, meaning that itâ€™s not associated with a specific plan
 * and can instead be individually added to subscriptions, including subscriptions on different
 * plans.
 *
 * An `external_price_id` can be optionally specified as an alias to allow ergonomic interaction
 * with prices in the Orb API.
 *
 * See the [Price resource](/product-catalog/price-configuration) for the specification of different
 * price model configurations possible in this endpoint.
 */
class PriceCreateParams
private constructor(
    private val body: Body,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) : Params {

    fun body(): Body = body

    fun _additionalHeaders(): Headers = additionalHeaders

    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of [PriceCreateParams].
         *
         * The following fields are required:
         * ```java
         * .body()
         * ```
         */
        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [PriceCreateParams]. */
    class Builder internal constructor() {

        private var body: Body? = null
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(priceCreateParams: PriceCreateParams) = apply {
            body = priceCreateParams.body
            additionalHeaders = priceCreateParams.additionalHeaders.toBuilder()
            additionalQueryParams = priceCreateParams.additionalQueryParams.toBuilder()
        }

        fun body(body: Body) = apply { this.body = body }

        /** Alias for calling [body] with `Body.ofUnit(unit)`. */
        fun body(unit: Body.Unit) = body(Body.ofUnit(unit))

        /** Alias for calling [body] with `Body.ofPackage(package_)`. */
        fun body(package_: Body.Package) = body(Body.ofPackage(package_))

        /** Alias for calling [body] with `Body.ofMatrix(matrix)`. */
        fun body(matrix: Body.Matrix) = body(Body.ofMatrix(matrix))

        /** Alias for calling [body] with `Body.ofMatrixWithAllocation(matrixWithAllocation)`. */
        fun body(matrixWithAllocation: Body.MatrixWithAllocation) =
            body(Body.ofMatrixWithAllocation(matrixWithAllocation))

        /** Alias for calling [body] with `Body.ofTiered(tiered)`. */
        fun body(tiered: Body.Tiered) = body(Body.ofTiered(tiered))

        /** Alias for calling [body] with `Body.ofTieredBps(tieredBps)`. */
        fun body(tieredBps: Body.TieredBps) = body(Body.ofTieredBps(tieredBps))

        /** Alias for calling [body] with `Body.ofBps(bps)`. */
        fun body(bps: Body.Bps) = body(Body.ofBps(bps))

        /** Alias for calling [body] with `Body.ofBulkBps(bulkBps)`. */
        fun body(bulkBps: Body.BulkBps) = body(Body.ofBulkBps(bulkBps))

        /** Alias for calling [body] with `Body.ofBulk(bulk)`. */
        fun body(bulk: Body.Bulk) = body(Body.ofBulk(bulk))

        /** Alias for calling [body] with `Body.ofThresholdTotalAmount(thresholdTotalAmount)`. */
        fun body(thresholdTotalAmount: Body.ThresholdTotalAmount) =
            body(Body.ofThresholdTotalAmount(thresholdTotalAmount))

        /** Alias for calling [body] with `Body.ofTieredPackage(tieredPackage)`. */
        fun body(tieredPackage: Body.TieredPackage) = body(Body.ofTieredPackage(tieredPackage))

        /** Alias for calling [body] with `Body.ofGroupedTiered(groupedTiered)`. */
        fun body(groupedTiered: Body.GroupedTiered) = body(Body.ofGroupedTiered(groupedTiered))

        /** Alias for calling [body] with `Body.ofMaxGroupTieredPackage(maxGroupTieredPackage)`. */
        fun body(maxGroupTieredPackage: Body.MaxGroupTieredPackage) =
            body(Body.ofMaxGroupTieredPackage(maxGroupTieredPackage))

        /** Alias for calling [body] with `Body.ofTieredWithMinimum(tieredWithMinimum)`. */
        fun body(tieredWithMinimum: Body.TieredWithMinimum) =
            body(Body.ofTieredWithMinimum(tieredWithMinimum))

        /** Alias for calling [body] with `Body.ofPackageWithAllocation(packageWithAllocation)`. */
        fun body(packageWithAllocation: Body.PackageWithAllocation) =
            body(Body.ofPackageWithAllocation(packageWithAllocation))

        /**
         * Alias for calling [body] with
         * `Body.ofTieredPackageWithMinimum(tieredPackageWithMinimum)`.
         */
        fun body(tieredPackageWithMinimum: Body.TieredPackageWithMinimum) =
            body(Body.ofTieredPackageWithMinimum(tieredPackageWithMinimum))

        /** Alias for calling [body] with `Body.ofUnitWithPercent(unitWithPercent)`. */
        fun body(unitWithPercent: Body.UnitWithPercent) =
            body(Body.ofUnitWithPercent(unitWithPercent))

        /** Alias for calling [body] with `Body.ofTieredWithProration(tieredWithProration)`. */
        fun body(tieredWithProration: Body.TieredWithProration) =
            body(Body.ofTieredWithProration(tieredWithProration))

        /** Alias for calling [body] with `Body.ofUnitWithProration(unitWithProration)`. */
        fun body(unitWithProration: Body.UnitWithProration) =
            body(Body.ofUnitWithProration(unitWithProration))

        /** Alias for calling [body] with `Body.ofGroupedAllocation(groupedAllocation)`. */
        fun body(groupedAllocation: Body.GroupedAllocation) =
            body(Body.ofGroupedAllocation(groupedAllocation))

        /**
         * Alias for calling [body] with
         * `Body.ofGroupedWithProratedMinimum(groupedWithProratedMinimum)`.
         */
        fun body(groupedWithProratedMinimum: Body.GroupedWithProratedMinimum) =
            body(Body.ofGroupedWithProratedMinimum(groupedWithProratedMinimum))

        /**
         * Alias for calling [body] with
         * `Body.ofGroupedWithMeteredMinimum(groupedWithMeteredMinimum)`.
         */
        fun body(groupedWithMeteredMinimum: Body.GroupedWithMeteredMinimum) =
            body(Body.ofGroupedWithMeteredMinimum(groupedWithMeteredMinimum))

        /** Alias for calling [body] with `Body.ofMatrixWithDisplayName(matrixWithDisplayName)`. */
        fun body(matrixWithDisplayName: Body.MatrixWithDisplayName) =
            body(Body.ofMatrixWithDisplayName(matrixWithDisplayName))

        /** Alias for calling [body] with `Body.ofBulkWithProration(bulkWithProration)`. */
        fun body(bulkWithProration: Body.BulkWithProration) =
            body(Body.ofBulkWithProration(bulkWithProration))

        /** Alias for calling [body] with `Body.ofGroupedTieredPackage(groupedTieredPackage)`. */
        fun body(groupedTieredPackage: Body.GroupedTieredPackage) =
            body(Body.ofGroupedTieredPackage(groupedTieredPackage))

        /**
         * Alias for calling [body] with
         * `Body.ofScalableMatrixWithUnitPricing(scalableMatrixWithUnitPricing)`.
         */
        fun body(scalableMatrixWithUnitPricing: Body.ScalableMatrixWithUnitPricing) =
            body(Body.ofScalableMatrixWithUnitPricing(scalableMatrixWithUnitPricing))

        /**
         * Alias for calling [body] with
         * `Body.ofScalableMatrixWithTieredPricing(scalableMatrixWithTieredPricing)`.
         */
        fun body(scalableMatrixWithTieredPricing: Body.ScalableMatrixWithTieredPricing) =
            body(Body.ofScalableMatrixWithTieredPricing(scalableMatrixWithTieredPricing))

        /** Alias for calling [body] with `Body.ofCumulativeGroupedBulk(cumulativeGroupedBulk)`. */
        fun body(cumulativeGroupedBulk: Body.CumulativeGroupedBulk) =
            body(Body.ofCumulativeGroupedBulk(cumulativeGroupedBulk))

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceAdditionalHeaders(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeAdditionalHeaders(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAllAdditionalHeaders(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAllAdditionalQueryParams(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        /**
         * Returns an immutable instance of [PriceCreateParams].
         *
         * Further updates to this [Builder] will not mutate the returned instance.
         *
         * The following fields are required:
         * ```java
         * .body()
         * ```
         *
         * @throws IllegalStateException if any required field is unset.
         */
        fun build(): PriceCreateParams =
            PriceCreateParams(
                checkRequired("body", body),
                additionalHeaders.build(),
                additionalQueryParams.build(),
            )
    }

    fun _body(): Body = body

    override fun _headers(): Headers = additionalHeaders

    override fun _queryParams(): QueryParams = additionalQueryParams

    @JsonDeserialize(using = Body.Deserializer::class)
    @JsonSerialize(using = Body.Serializer::class)
    class Body
    private constructor(
        private val unit: Unit? = null,
        private val package_: Package? = null,
        private val matrix: Matrix? = null,
        private val matrixWithAllocation: MatrixWithAllocation? = null,
        private val tiered: Tiered? = null,
        private val tieredBps: TieredBps? = null,
        private val bps: Bps? = null,
        private val bulkBps: BulkBps? = null,
        private val bulk: Bulk? = null,
        private val thresholdTotalAmount: ThresholdTotalAmount? = null,
        private val tieredPackage: TieredPackage? = null,
        private val groupedTiered: GroupedTiered? = null,
        private val maxGroupTieredPackage: MaxGroupTieredPackage? = null,
        private val tieredWithMinimum: TieredWithMinimum? = null,
        private val packageWithAllocation: PackageWithAllocation? = null,
        private val tieredPackageWithMinimum: TieredPackageWithMinimum? = null,
        private val unitWithPercent: UnitWithPercent? = null,
        private val tieredWithProration: TieredWithProration? = null,
        private val unitWithProration: UnitWithProration? = null,
        private val groupedAllocation: GroupedAllocation? = null,
        private val groupedWithProratedMinimum: GroupedWithProratedMinimum? = null,
        private val groupedWithMeteredMinimum: GroupedWithMeteredMinimum? = null,
        private val matrixWithDisplayName: MatrixWithDisplayName? = null,
        private val bulkWithProration: BulkWithProration? = null,
        private val groupedTieredPackage: GroupedTieredPackage? = null,
        private val scalableMatrixWithUnitPricing: ScalableMatrixWithUnitPricing? = null,
        private val scalableMatrixWithTieredPricing: ScalableMatrixWithTieredPricing? = null,
        private val cumulativeGroupedBulk: CumulativeGroupedBulk? = null,
        private val _json: JsonValue? = null,
    ) {

        fun unit(): Optional<Unit> = Optional.ofNullable(unit)

        fun package_(): Optional<Package> = Optional.ofNullable(package_)

        fun matrix(): Optional<Matrix> = Optional.ofNullable(matrix)

        fun matrixWithAllocation(): Optional<MatrixWithAllocation> =
            Optional.ofNullable(matrixWithAllocation)

        fun tiered(): Optional<Tiered> = Optional.ofNullable(tiered)

        fun tieredBps(): Optional<TieredBps> = Optional.ofNullable(tieredBps)

        fun bps(): Optional<Bps> = Optional.ofNullable(bps)

        fun bulkBps(): Optional<BulkBps> = Optional.ofNullable(bulkBps)

        fun bulk(): Optional<Bulk> = Optional.ofNullable(bulk)

        fun thresholdTotalAmount(): Optional<ThresholdTotalAmount> =
            Optional.ofNullable(thresholdTotalAmount)

        fun tieredPackage(): Optional<TieredPackage> = Optional.ofNullable(tieredPackage)

        fun groupedTiered(): Optional<GroupedTiered> = Optional.ofNullable(groupedTiered)

        fun maxGroupTieredPackage(): Optional<MaxGroupTieredPackage> =
            Optional.ofNullable(maxGroupTieredPackage)

        fun tieredWithMinimum(): Optional<TieredWithMinimum> =
            Optional.ofNullable(tieredWithMinimum)

        fun packageWithAllocation(): Optional<PackageWithAllocation> =
            Optional.ofNullable(packageWithAllocation)

        fun tieredPackageWithMinimum(): Optional<TieredPackageWithMinimum> =
            Optional.ofNullable(tieredPackageWithMinimum)

        fun unitWithPercent(): Optional<UnitWithPercent> = Optional.ofNullable(unitWithPercent)

        fun tieredWithProration(): Optional<TieredWithProration> =
            Optional.ofNullable(tieredWithProration)

        fun unitWithProration(): Optional<UnitWithProration> =
            Optional.ofNullable(unitWithProration)

        fun groupedAllocation(): Optional<GroupedAllocation> =
            Optional.ofNullable(groupedAllocation)

        fun groupedWithProratedMinimum(): Optional<GroupedWithProratedMinimum> =
            Optional.ofNullable(groupedWithProratedMinimum)

        fun groupedWithMeteredMinimum(): Optional<GroupedWithMeteredMinimum> =
            Optional.ofNullable(groupedWithMeteredMinimum)

        fun matrixWithDisplayName(): Optional<MatrixWithDisplayName> =
            Optional.ofNullable(matrixWithDisplayName)

        fun bulkWithProration(): Optional<BulkWithProration> =
            Optional.ofNullable(bulkWithProration)

        fun groupedTieredPackage(): Optional<GroupedTieredPackage> =
            Optional.ofNullable(groupedTieredPackage)

        fun scalableMatrixWithUnitPricing(): Optional<ScalableMatrixWithUnitPricing> =
            Optional.ofNullable(scalableMatrixWithUnitPricing)

        fun scalableMatrixWithTieredPricing(): Optional<ScalableMatrixWithTieredPricing> =
            Optional.ofNullable(scalableMatrixWithTieredPricing)

        fun cumulativeGroupedBulk(): Optional<CumulativeGroupedBulk> =
            Optional.ofNullable(cumulativeGroupedBulk)

        fun isUnit(): Boolean = unit != null

        fun isPackage(): Boolean = package_ != null

        fun isMatrix(): Boolean = matrix != null

        fun isMatrixWithAllocation(): Boolean = matrixWithAllocation != null

        fun isTiered(): Boolean = tiered != null

        fun isTieredBps(): Boolean = tieredBps != null

        fun isBps(): Boolean = bps != null

        fun isBulkBps(): Boolean = bulkBps != null

        fun isBulk(): Boolean = bulk != null

        fun isThresholdTotalAmount(): Boolean = thresholdTotalAmount != null

        fun isTieredPackage(): Boolean = tieredPackage != null

        fun isGroupedTiered(): Boolean = groupedTiered != null

        fun isMaxGroupTieredPackage(): Boolean = maxGroupTieredPackage != null

        fun isTieredWithMinimum(): Boolean = tieredWithMinimum != null

        fun isPackageWithAllocation(): Boolean = packageWithAllocation != null

        fun isTieredPackageWithMinimum(): Boolean = tieredPackageWithMinimum != null

        fun isUnitWithPercent(): Boolean = unitWithPercent != null

        fun isTieredWithProration(): Boolean = tieredWithProration != null

        fun isUnitWithProration(): Boolean = unitWithProration != null

        fun isGroupedAllocation(): Boolean = groupedAllocation != null

        fun isGroupedWithProratedMinimum(): Boolean = groupedWithProratedMinimum != null

        fun isGroupedWithMeteredMinimum(): Boolean = groupedWithMeteredMinimum != null

        fun isMatrixWithDisplayName(): Boolean = matrixWithDisplayName != null

        fun isBulkWithProration(): Boolean = bulkWithProration != null

        fun isGroupedTieredPackage(): Boolean = groupedTieredPackage != null

        fun isScalableMatrixWithUnitPricing(): Boolean = scalableMatrixWithUnitPricing != null

        fun isScalableMatrixWithTieredPricing(): Boolean = scalableMatrixWithTieredPricing != null

        fun isCumulativeGroupedBulk(): Boolean = cumulativeGroupedBulk != null

        fun asUnit(): Unit = unit.getOrThrow("unit")

        fun asPackage(): Package = package_.getOrThrow("package_")

        fun asMatrix(): Matrix = matrix.getOrThrow("matrix")

        fun asMatrixWithAllocation(): MatrixWithAllocation =
            matrixWithAllocation.getOrThrow("matrixWithAllocation")

        fun asTiered(): Tiered = tiered.getOrThrow("tiered")

        fun asTieredBps(): TieredBps = tieredBps.getOrThrow("tieredBps")

        fun asBps(): Bps = bps.getOrThrow("bps")

        fun asBulkBps(): BulkBps = bulkBps.getOrThrow("bulkBps")

        fun asBulk(): Bulk = bulk.getOrThrow("bulk")

        fun asThresholdTotalAmount(): ThresholdTotalAmount =
            thresholdTotalAmount.getOrThrow("thresholdTotalAmount")

        fun asTieredPackage(): TieredPackage = tieredPackage.getOrThrow("tieredPackage")

        fun asGroupedTiered(): GroupedTiered = groupedTiered.getOrThrow("groupedTiered")

        fun asMaxGroupTieredPackage(): MaxGroupTieredPackage =
            maxGroupTieredPackage.getOrThrow("maxGroupTieredPackage")

        fun asTieredWithMinimum(): TieredWithMinimum =
            tieredWithMinimum.getOrThrow("tieredWithMinimum")

        fun asPackageWithAllocation(): PackageWithAllocation =
            packageWithAllocation.getOrThrow("packageWithAllocation")

        fun asTieredPackageWithMinimum(): TieredPackageWithMinimum =
            tieredPackageWithMinimum.getOrThrow("tieredPackageWithMinimum")

        fun asUnitWithPercent(): UnitWithPercent = unitWithPercent.getOrThrow("unitWithPercent")

        fun asTieredWithProration(): TieredWithProration =
            tieredWithProration.getOrThrow("tieredWithProration")

        fun asUnitWithProration(): UnitWithProration =
            unitWithProration.getOrThrow("unitWithProration")

        fun asGroupedAllocation(): GroupedAllocation =
            groupedAllocation.getOrThrow("groupedAllocation")

        fun asGroupedWithProratedMinimum(): GroupedWithProratedMinimum =
            groupedWithProratedMinimum.getOrThrow("groupedWithProratedMinimum")

        fun asGroupedWithMeteredMinimum(): GroupedWithMeteredMinimum =
            groupedWithMeteredMinimum.getOrThrow("groupedWithMeteredMinimum")

        fun asMatrixWithDisplayName(): MatrixWithDisplayName =
            matrixWithDisplayName.getOrThrow("matrixWithDisplayName")

        fun asBulkWithProration(): BulkWithProration =
            bulkWithProration.getOrThrow("bulkWithProration")

        fun asGroupedTieredPackage(): GroupedTieredPackage =
            groupedTieredPackage.getOrThrow("groupedTieredPackage")

        fun asScalableMatrixWithUnitPricing(): ScalableMatrixWithUnitPricing =
            scalableMatrixWithUnitPricing.getOrThrow("scalableMatrixWithUnitPricing")

        fun asScalableMatrixWithTieredPricing(): ScalableMatrixWithTieredPricing =
            scalableMatrixWithTieredPricing.getOrThrow("scalableMatrixWithTieredPricing")

        fun asCumulativeGroupedBulk(): CumulativeGroupedBulk =
            cumulativeGroupedBulk.getOrThrow("cumulativeGroupedBulk")

        fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

        fun <T> accept(visitor: Visitor<T>): T =
            when {
                unit != null -> visitor.visitUnit(unit)
                package_ != null -> visitor.visitPackage(package_)
                matrix != null -> visitor.visitMatrix(matrix)
                matrixWithAllocation != null ->
                    visitor.visitMatrixWithAllocation(matrixWithAllocation)
                tiered != null -> visitor.visitTiered(tiered)
                tieredBps != null -> visitor.visitTieredBps(tieredBps)
                bps != null -> visitor.visitBps(bps)
                bulkBps != null -> visitor.visitBulkBps(bulkBps)
                bulk != null -> visitor.visitBulk(bulk)
                thresholdTotalAmount != null ->
                    visitor.visitThresholdTotalAmount(thresholdTotalAmount)
                tieredPackage != null -> visitor.visitTieredPackage(tieredPackage)
                groupedTiered != null -> visitor.visitGroupedTiered(groupedTiered)
                maxGroupTieredPackage != null ->
                    visitor.visitMaxGroupTieredPackage(maxGroupTieredPackage)
                tieredWithMinimum != null -> visitor.visitTieredWithMinimum(tieredWithMinimum)
                packageWithAllocation != null ->
                    visitor.visitPackageWithAllocation(packageWithAllocation)
                tieredPackageWithMinimum != null ->
                    visitor.visitTieredPackageWithMinimum(tieredPackageWithMinimum)
                unitWithPercent != null -> visitor.visitUnitWithPercent(unitWithPercent)
                tieredWithProration != null -> visitor.visitTieredWithProration(tieredWithProration)
                unitWithProration != null -> visitor.visitUnitWithProration(unitWithProration)
                groupedAllocation != null -> visitor.visitGroupedAllocation(groupedAllocation)
                groupedWithProratedMinimum != null ->
                    visitor.visitGroupedWithProratedMinimum(groupedWithProratedMinimum)
                groupedWithMeteredMinimum != null ->
                    visitor.visitGroupedWithMeteredMinimum(groupedWithMeteredMinimum)
                matrixWithDisplayName != null ->
                    visitor.visitMatrixWithDisplayName(matrixWithDisplayName)
                bulkWithProration != null -> visitor.visitBulkWithProration(bulkWithProration)
                groupedTieredPackage != null ->
                    visitor.visitGroupedTieredPackage(groupedTieredPackage)
                scalableMatrixWithUnitPricing != null ->
                    visitor.visitScalableMatrixWithUnitPricing(scalableMatrixWithUnitPricing)
                scalableMatrixWithTieredPricing != null ->
                    visitor.visitScalableMatrixWithTieredPricing(scalableMatrixWithTieredPricing)
                cumulativeGroupedBulk != null ->
                    visitor.visitCumulativeGroupedBulk(cumulativeGroupedBulk)
                else -> visitor.unknown(_json)
            }

        private var validated: Boolean = false

        fun validate(): Body = apply {
            if (validated) {
                return@apply
            }

            accept(
                object : Visitor<Unit> {
                    override fun visitUnit(unit: Unit) {
                        unit.validate()
                    }

                    override fun visitPackage(package_: Package) {
                        package_.validate()
                    }

                    override fun visitMatrix(matrix: Matrix) {
                        matrix.validate()
                    }

                    override fun visitMatrixWithAllocation(
                        matrixWithAllocation: MatrixWithAllocation
                    ) {
                        matrixWithAllocation.validate()
                    }

                    override fun visitTiered(tiered: Tiered) {
                        tiered.validate()
                    }

                    override fun visitTieredBps(tieredBps: TieredBps) {
                        tieredBps.validate()
                    }

                    override fun visitBps(bps: Bps) {
                        bps.validate()
                    }

                    override fun visitBulkBps(bulkBps: BulkBps) {
                        bulkBps.validate()
                    }

                    override fun visitBulk(bulk: Bulk) {
                        bulk.validate()
                    }

                    override fun visitThresholdTotalAmount(
                        thresholdTotalAmount: ThresholdTotalAmount
                    ) {
                        thresholdTotalAmount.validate()
                    }

                    override fun visitTieredPackage(tieredPackage: TieredPackage) {
                        tieredPackage.validate()
                    }

                    override fun visitGroupedTiered(groupedTiered: GroupedTiered) {
                        groupedTiered.validate()
                    }

                    override fun visitMaxGroupTieredPackage(
                        maxGroupTieredPackage: MaxGroupTieredPackage
                    ) {
                        maxGroupTieredPackage.validate()
                    }

                    override fun visitTieredWithMinimum(tieredWithMinimum: TieredWithMinimum) {
                        tieredWithMinimum.validate()
                    }

                    override fun visitPackageWithAllocation(
                        packageWithAllocation: PackageWithAllocation
                    ) {
                        packageWithAllocation.validate()
                    }

                    override fun visitTieredPackageWithMinimum(
                        tieredPackageWithMinimum: TieredPackageWithMinimum
                    ) {
                        tieredPackageWithMinimum.validate()
                    }

                    override fun visitUnitWithPercent(unitWithPercent: UnitWithPercent) {
                        unitWithPercent.validate()
                    }

                    override fun visitTieredWithProration(
                        tieredWithProration: TieredWithProration
                    ) {
                        tieredWithProration.validate()
                    }

                    override fun visitUnitWithProration(unitWithProration: UnitWithProration) {
                        unitWithProration.validate()
                    }

                    override fun visitGroupedAllocation(groupedAllocation: GroupedAllocation) {
                        groupedAllocation.validate()
                    }

                    override fun visitGroupedWithProratedMinimum(
                        groupedWithProratedMinimum: GroupedWithProratedMinimum
                    ) {
                        groupedWithProratedMinimum.validate()
                    }

                    override fun visitGroupedWithMeteredMinimum(
                        groupedWithMeteredMinimum: GroupedWithMeteredMinimum
                    ) {
                        groupedWithMeteredMinimum.validate()
                    }

                    override fun visitMatrixWithDisplayName(
                        matrixWithDisplayName: MatrixWithDisplayName
                    ) {
                        matrixWithDisplayName.validate()
                    }

                    override fun visitBulkWithProration(bulkWithProration: BulkWithProration) {
                        bulkWithProration.validate()
                    }

                    override fun visitGroupedTieredPackage(
                        groupedTieredPackage: GroupedTieredPackage
                    ) {
                        groupedTieredPackage.validate()
                    }

                    override fun visitScalableMatrixWithUnitPricing(
                        scalableMatrixWithUnitPricing: ScalableMatrixWithUnitPricing
                    ) {
                        scalableMatrixWithUnitPricing.validate()
                    }

                    override fun visitScalableMatrixWithTieredPricing(
                        scalableMatrixWithTieredPricing: ScalableMatrixWithTieredPricing
                    ) {
                        scalableMatrixWithTieredPricing.validate()
                    }

                    override fun visitCumulativeGroupedBulk(
                        cumulativeGroupedBulk: CumulativeGroupedBulk
                    ) {
                        cumulativeGroupedBulk.validate()
                    }
                }
            )
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: OrbInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            accept(
                object : Visitor<Int> {
                    override fun visitUnit(unit: Unit) = unit.validity()

                    override fun visitPackage(package_: Package) = package_.validity()

                    override fun visitMatrix(matrix: Matrix) = matrix.validity()

                    override fun visitMatrixWithAllocation(
                        matrixWithAllocation: MatrixWithAllocation
                    ) = matrixWithAllocation.validity()

                    override fun visitTiered(tiered: Tiered) = tiered.validity()

                    override fun visitTieredBps(tieredBps: TieredBps) = tieredBps.validity()

                    override fun visitBps(bps: Bps) = bps.validity()

                    override fun visitBulkBps(bulkBps: BulkBps) = bulkBps.validity()

                    override fun visitBulk(bulk: Bulk) = bulk.validity()

                    override fun visitThresholdTotalAmount(
                        thresholdTotalAmount: ThresholdTotalAmount
                    ) = thresholdTotalAmount.validity()

                    override fun visitTieredPackage(tieredPackage: TieredPackage) =
                        tieredPackage.validity()

                    override fun visitGroupedTiered(groupedTiered: GroupedTiered) =
                        groupedTiered.validity()

                    override fun visitMaxGroupTieredPackage(
                        maxGroupTieredPackage: MaxGroupTieredPackage
                    ) = maxGroupTieredPackage.validity()

                    override fun visitTieredWithMinimum(tieredWithMinimum: TieredWithMinimum) =
                        tieredWithMinimum.validity()

                    override fun visitPackageWithAllocation(
                        packageWithAllocation: PackageWithAllocation
                    ) = packageWithAllocation.validity()

                    override fun visitTieredPackageWithMinimum(
                        tieredPackageWithMinimum: TieredPackageWithMinimum
                    ) = tieredPackageWithMinimum.validity()

                    override fun visitUnitWithPercent(unitWithPercent: UnitWithPercent) =
                        unitWithPercent.validity()

                    override fun visitTieredWithProration(
                        tieredWithProration: TieredWithProration
                    ) = tieredWithProration.validity()

                    override fun visitUnitWithProration(unitWithProration: UnitWithProration) =
                        unitWithProration.validity()

                    override fun visitGroupedAllocation(groupedAllocation: GroupedAllocation) =
                        groupedAllocation.validity()

                    override fun visitGroupedWithProratedMinimum(
                        groupedWithProratedMinimum: GroupedWithProratedMinimum
                    ) = groupedWithProratedMinimum.validity()

                    override fun visitGroupedWithMeteredMinimum(
                        groupedWithMeteredMinimum: GroupedWithMeteredMinimum
                    ) = groupedWithMeteredMinimum.validity()

                    override fun visitMatrixWithDisplayName(
                        matrixWithDisplayName: MatrixWithDisplayName
                    ) = matrixWithDisplayName.validity()

                    override fun visitBulkWithProration(bulkWithProration: BulkWithProration) =
                        bulkWithProration.validity()

                    override fun visitGroupedTieredPackage(
                        groupedTieredPackage: GroupedTieredPackage
                    ) = groupedTieredPackage.validity()

                    override fun visitScalableMatrixWithUnitPricing(
                        scalableMatrixWithUnitPricing: ScalableMatrixWithUnitPricing
                    ) = scalableMatrixWithUnitPricing.validity()

                    override fun visitScalableMatrixWithTieredPricing(
                        scalableMatrixWithTieredPricing: ScalableMatrixWithTieredPricing
                    ) = scalableMatrixWithTieredPricing.validity()

                    override fun visitCumulativeGroupedBulk(
                        cumulativeGroupedBulk: CumulativeGroupedBulk
                    ) = cumulativeGroupedBulk.validity()

                    override fun unknown(json: JsonValue?) = 0
                }
            )

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Body && unit == other.unit && package_ == other.package_ && matrix == other.matrix && matrixWithAllocation == other.matrixWithAllocation && tiered == other.tiered && tieredBps == other.tieredBps && bps == other.bps && bulkBps == other.bulkBps && bulk == other.bulk && thresholdTotalAmount == other.thresholdTotalAmount && tieredPackage == other.tieredPackage && groupedTiered == other.groupedTiered && maxGroupTieredPackage == other.maxGroupTieredPackage && tieredWithMinimum == other.tieredWithMinimum && packageWithAllocation == other.packageWithAllocation && tieredPackageWithMinimum == other.tieredPackageWithMinimum && unitWithPercent == other.unitWithPercent && tieredWithProration == other.tieredWithProration && unitWithProration == other.unitWithProration && groupedAllocation == other.groupedAllocation && groupedWithProratedMinimum == other.groupedWithProratedMinimum && groupedWithMeteredMinimum == other.groupedWithMeteredMinimum && matrixWithDisplayName == other.matrixWithDisplayName && bulkWithProration == other.bulkWithProration && groupedTieredPackage == other.groupedTieredPackage && scalableMatrixWithUnitPricing == other.scalableMatrixWithUnitPricing && scalableMatrixWithTieredPricing == other.scalableMatrixWithTieredPricing && cumulativeGroupedBulk == other.cumulativeGroupedBulk /* spotless:on */
        }

        override fun hashCode(): Int = /* spotless:off */ Objects.hash(unit, package_, matrix, matrixWithAllocation, tiered, tieredBps, bps, bulkBps, bulk, thresholdTotalAmount, tieredPackage, groupedTiered, maxGroupTieredPackage, tieredWithMinimum, packageWithAllocation, tieredPackageWithMinimum, unitWithPercent, tieredWithProration, unitWithProration, groupedAllocation, groupedWithProratedMinimum, groupedWithMeteredMinimum, matrixWithDisplayName, bulkWithProration, groupedTieredPackage, scalableMatrixWithUnitPricing, scalableMatrixWithTieredPricing, cumulativeGroupedBulk) /* spotless:on */

        override fun toString(): String =
            when {
                unit != null -> "Body{unit=$unit}"
                package_ != null -> "Body{package_=$package_}"
                matrix != null -> "Body{matrix=$matrix}"
                matrixWithAllocation != null -> "Body{matrixWithAllocation=$matrixWithAllocation}"
                tiered != null -> "Body{tiered=$tiered}"
                tieredBps != null -> "Body{tieredBps=$tieredBps}"
                bps != null -> "Body{bps=$bps}"
                bulkBps != null -> "Body{bulkBps=$bulkBps}"
                bulk != null -> "Body{bulk=$bulk}"
                thresholdTotalAmount != null -> "Body{thresholdTotalAmount=$thresholdTotalAmount}"
                tieredPackage != null -> "Body{tieredPackage=$tieredPackage}"
                groupedTiered != null -> "Body{groupedTiered=$groupedTiered}"
                maxGroupTieredPackage != null ->
                    "Body{maxGroupTieredPackage=$maxGroupTieredPackage}"
                tieredWithMinimum != null -> "Body{tieredWithMinimum=$tieredWithMinimum}"
                packageWithAllocation != null ->
                    "Body{packageWithAllocation=$packageWithAllocation}"
                tieredPackageWithMinimum != null ->
                    "Body{tieredPackageWithMinimum=$tieredPackageWithMinimum}"
                unitWithPercent != null -> "Body{unitWithPercent=$unitWithPercent}"
                tieredWithProration != null -> "Body{tieredWithProration=$tieredWithProration}"
                unitWithProration != null -> "Body{unitWithProration=$unitWithProration}"
                groupedAllocation != null -> "Body{groupedAllocation=$groupedAllocation}"
                groupedWithProratedMinimum != null ->
                    "Body{groupedWithProratedMinimum=$groupedWithProratedMinimum}"
                groupedWithMeteredMinimum != null ->
                    "Body{groupedWithMeteredMinimum=$groupedWithMeteredMinimum}"
                matrixWithDisplayName != null ->
                    "Body{matrixWithDisplayName=$matrixWithDisplayName}"
                bulkWithProration != null -> "Body{bulkWithProration=$bulkWithProration}"
                groupedTieredPackage != null -> "Body{groupedTieredPackage=$groupedTieredPackage}"
                scalableMatrixWithUnitPricing != null ->
                    "Body{scalableMatrixWithUnitPricing=$scalableMatrixWithUnitPricing}"
                scalableMatrixWithTieredPricing != null ->
                    "Body{scalableMatrixWithTieredPricing=$scalableMatrixWithTieredPricing}"
                cumulativeGroupedBulk != null ->
                    "Body{cumulativeGroupedBulk=$cumulativeGroupedBulk}"
                _json != null -> "Body{_unknown=$_json}"
                else -> throw IllegalStateException("Invalid Body")
            }

        companion object {

            @JvmStatic fun ofUnit(unit: Unit) = Body(unit = unit)

            @JvmStatic fun ofPackage(package_: Package) = Body(package_ = package_)

            @JvmStatic fun ofMatrix(matrix: Matrix) = Body(matrix = matrix)

            @JvmStatic
            fun ofMatrixWithAllocation(matrixWithAllocation: MatrixWithAllocation) =
                Body(matrixWithAllocation = matrixWithAllocation)

            @JvmStatic fun ofTiered(tiered: Tiered) = Body(tiered = tiered)

            @JvmStatic fun ofTieredBps(tieredBps: TieredBps) = Body(tieredBps = tieredBps)

            @JvmStatic fun ofBps(bps: Bps) = Body(bps = bps)

            @JvmStatic fun ofBulkBps(bulkBps: BulkBps) = Body(bulkBps = bulkBps)

            @JvmStatic fun ofBulk(bulk: Bulk) = Body(bulk = bulk)

            @JvmStatic
            fun ofThresholdTotalAmount(thresholdTotalAmount: ThresholdTotalAmount) =
                Body(thresholdTotalAmount = thresholdTotalAmount)

            @JvmStatic
            fun ofTieredPackage(tieredPackage: TieredPackage) = Body(tieredPackage = tieredPackage)

            @JvmStatic
            fun ofGroupedTiered(groupedTiered: GroupedTiered) = Body(groupedTiered = groupedTiered)

            @JvmStatic
            fun ofMaxGroupTieredPackage(maxGroupTieredPackage: MaxGroupTieredPackage) =
                Body(maxGroupTieredPackage = maxGroupTieredPackage)

            @JvmStatic
            fun ofTieredWithMinimum(tieredWithMinimum: TieredWithMinimum) =
                Body(tieredWithMinimum = tieredWithMinimum)

            @JvmStatic
            fun ofPackageWithAllocation(packageWithAllocation: PackageWithAllocation) =
                Body(packageWithAllocation = packageWithAllocation)

            @JvmStatic
            fun ofTieredPackageWithMinimum(tieredPackageWithMinimum: TieredPackageWithMinimum) =
                Body(tieredPackageWithMinimum = tieredPackageWithMinimum)

            @JvmStatic
            fun ofUnitWithPercent(unitWithPercent: UnitWithPercent) =
                Body(unitWithPercent = unitWithPercent)

            @JvmStatic
            fun ofTieredWithProration(tieredWithProration: TieredWithProration) =
                Body(tieredWithProration = tieredWithProration)

            @JvmStatic
            fun ofUnitWithProration(unitWithProration: UnitWithProration) =
                Body(unitWithProration = unitWithProration)

            @JvmStatic
            fun ofGroupedAllocation(groupedAllocation: GroupedAllocation) =
                Body(groupedAllocation = groupedAllocation)

            @JvmStatic
            fun ofGroupedWithProratedMinimum(
                groupedWithProratedMinimum: GroupedWithProratedMinimum
            ) = Body(groupedWithProratedMinimum = groupedWithProratedMinimum)

            @JvmStatic
            fun ofGroupedWithMeteredMinimum(groupedWithMeteredMinimum: GroupedWithMeteredMinimum) =
                Body(groupedWithMeteredMinimum = groupedWithMeteredMinimum)

            @JvmStatic
            fun ofMatrixWithDisplayName(matrixWithDisplayName: MatrixWithDisplayName) =
                Body(matrixWithDisplayName = matrixWithDisplayName)

            @JvmStatic
            fun ofBulkWithProration(bulkWithProration: BulkWithProration) =
                Body(bulkWithProration = bulkWithProration)

            @JvmStatic
            fun ofGroupedTieredPackage(groupedTieredPackage: GroupedTieredPackage) =
                Body(groupedTieredPackage = groupedTieredPackage)

            @JvmStatic
            fun ofScalableMatrixWithUnitPricing(
                scalableMatrixWithUnitPricing: ScalableMatrixWithUnitPricing
            ) = Body(scalableMatrixWithUnitPricing = scalableMatrixWithUnitPricing)

            @JvmStatic
            fun ofScalableMatrixWithTieredPricing(
                scalableMatrixWithTieredPricing: ScalableMatrixWithTieredPricing
            ) = Body(scalableMatrixWithTieredPricing = scalableMatrixWithTieredPricing)

            @JvmStatic
            fun ofCumulativeGroupedBulk(cumulativeGroupedBulk: CumulativeGroupedBulk) =
                Body(cumulativeGroupedBulk = cumulativeGroupedBulk)
        }

        /** An interface that defines how to map each variant of [Body] to a value of type [T]. */
        interface Visitor<out T> {

            fun visitUnit(unit: Unit): T

            fun visitPackage(package_: Package): T

            fun visitMatrix(matrix: Matrix): T

            fun visitMatrixWithAllocation(matrixWithAllocation: MatrixWithAllocation): T

            fun visitTiered(tiered: Tiered): T

            fun visitTieredBps(tieredBps: TieredBps): T

            fun visitBps(bps: Bps): T

            fun visitBulkBps(bulkBps: BulkBps): T

            fun visitBulk(bulk: Bulk): T

            fun visitThresholdTotalAmount(thresholdTotalAmount: ThresholdTotalAmount): T

            fun visitTieredPackage(tieredPackage: TieredPackage): T

            fun visitGroupedTiered(groupedTiered: GroupedTiered): T

            fun visitMaxGroupTieredPackage(maxGroupTieredPackage: MaxGroupTieredPackage): T

            fun visitTieredWithMinimum(tieredWithMinimum: TieredWithMinimum): T

            fun visitPackageWithAllocation(packageWithAllocation: PackageWithAllocation): T

            fun visitTieredPackageWithMinimum(tieredPackageWithMinimum: TieredPackageWithMinimum): T

            fun visitUnitWithPercent(unitWithPercent: UnitWithPercent): T

            fun visitTieredWithProration(tieredWithProration: TieredWithProration): T

            fun visitUnitWithProration(unitWithProration: UnitWithProration): T

            fun visitGroupedAllocation(groupedAllocation: GroupedAllocation): T

            fun visitGroupedWithProratedMinimum(
                groupedWithProratedMinimum: GroupedWithProratedMinimum
            ): T

            fun visitGroupedWithMeteredMinimum(
                groupedWithMeteredMinimum: GroupedWithMeteredMinimum
            ): T

            fun visitMatrixWithDisplayName(matrixWithDisplayName: MatrixWithDisplayName): T

            fun visitBulkWithProration(bulkWithProration: BulkWithProration): T

            fun visitGroupedTieredPackage(groupedTieredPackage: GroupedTieredPackage): T

            fun visitScalableMatrixWithUnitPricing(
                scalableMatrixWithUnitPricing: ScalableMatrixWithUnitPricing
            ): T

            fun visitScalableMatrixWithTieredPricing(
                scalableMatrixWithTieredPricing: ScalableMatrixWithTieredPricing
            ): T

            fun visitCumulativeGroupedBulk(cumulativeGroupedBulk: CumulativeGroupedBulk): T

            /**
             * Maps an unknown variant of [Body] to a value of type [T].
             *
             * An instance of [Body] can contain an unknown variant if it was deserialized from data
             * that doesn't match any known variant. For example, if the SDK is on an older version
             * than the API, then the API may respond with new variants that the SDK is unaware of.
             *
             * @throws OrbInvalidDataException in the default implementation.
             */
            fun unknown(json: JsonValue?): T {
                throw OrbInvalidDataException("Unknown Body: $json")
            }
        }

        internal class Deserializer : BaseDeserializer<Body>(Body::class) {

            override fun ObjectCodec.deserialize(node: JsonNode): Body {
                val json = JsonValue.fromJsonNode(node)
                val modelType =
                    json.asObject().getOrNull()?.get("model_type")?.asString()?.getOrNull()

                when (modelType) {
                    "unit" -> {
                        return tryDeserialize(node, jacksonTypeRef<Unit>())?.let {
                            Body(unit = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "package" -> {
                        return tryDeserialize(node, jacksonTypeRef<Package>())?.let {
                            Body(package_ = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "matrix" -> {
                        return tryDeserialize(node, jacksonTypeRef<Matrix>())?.let {
                            Body(matrix = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "matrix_with_allocation" -> {
                        return tryDeserialize(node, jacksonTypeRef<MatrixWithAllocation>())?.let {
                            Body(matrixWithAllocation = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "tiered" -> {
                        return tryDeserialize(node, jacksonTypeRef<Tiered>())?.let {
                            Body(tiered = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "tiered_bps" -> {
                        return tryDeserialize(node, jacksonTypeRef<TieredBps>())?.let {
                            Body(tieredBps = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "bps" -> {
                        return tryDeserialize(node, jacksonTypeRef<Bps>())?.let {
                            Body(bps = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "bulk_bps" -> {
                        return tryDeserialize(node, jacksonTypeRef<BulkBps>())?.let {
                            Body(bulkBps = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "bulk" -> {
                        return tryDeserialize(node, jacksonTypeRef<Bulk>())?.let {
                            Body(bulk = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "threshold_total_amount" -> {
                        return tryDeserialize(node, jacksonTypeRef<ThresholdTotalAmount>())?.let {
                            Body(thresholdTotalAmount = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "tiered_package" -> {
                        return tryDeserialize(node, jacksonTypeRef<TieredPackage>())?.let {
                            Body(tieredPackage = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "grouped_tiered" -> {
                        return tryDeserialize(node, jacksonTypeRef<GroupedTiered>())?.let {
                            Body(groupedTiered = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "max_group_tiered_package" -> {
                        return tryDeserialize(node, jacksonTypeRef<MaxGroupTieredPackage>())?.let {
                            Body(maxGroupTieredPackage = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "tiered_with_minimum" -> {
                        return tryDeserialize(node, jacksonTypeRef<TieredWithMinimum>())?.let {
                            Body(tieredWithMinimum = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "package_with_allocation" -> {
                        return tryDeserialize(node, jacksonTypeRef<PackageWithAllocation>())?.let {
                            Body(packageWithAllocation = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "tiered_package_with_minimum" -> {
                        return tryDeserialize(node, jacksonTypeRef<TieredPackageWithMinimum>())
                            ?.let { Body(tieredPackageWithMinimum = it, _json = json) }
                            ?: Body(_json = json)
                    }
                    "unit_with_percent" -> {
                        return tryDeserialize(node, jacksonTypeRef<UnitWithPercent>())?.let {
                            Body(unitWithPercent = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "tiered_with_proration" -> {
                        return tryDeserialize(node, jacksonTypeRef<TieredWithProration>())?.let {
                            Body(tieredWithProration = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "unit_with_proration" -> {
                        return tryDeserialize(node, jacksonTypeRef<UnitWithProration>())?.let {
                            Body(unitWithProration = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "grouped_allocation" -> {
                        return tryDeserialize(node, jacksonTypeRef<GroupedAllocation>())?.let {
                            Body(groupedAllocation = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "grouped_with_prorated_minimum" -> {
                        return tryDeserialize(node, jacksonTypeRef<GroupedWithProratedMinimum>())
                            ?.let { Body(groupedWithProratedMinimum = it, _json = json) }
                            ?: Body(_json = json)
                    }
                    "grouped_with_metered_minimum" -> {
                        return tryDeserialize(node, jacksonTypeRef<GroupedWithMeteredMinimum>())
                            ?.let { Body(groupedWithMeteredMinimum = it, _json = json) }
                            ?: Body(_json = json)
                    }
                    "matrix_with_display_name" -> {
                        return tryDeserialize(node, jacksonTypeRef<MatrixWithDisplayName>())?.let {
                            Body(matrixWithDisplayName = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "bulk_with_proration" -> {
                        return tryDeserialize(node, jacksonTypeRef<BulkWithProration>())?.let {
                            Body(bulkWithProration = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "grouped_tiered_package" -> {
                        return tryDeserialize(node, jacksonTypeRef<GroupedTieredPackage>())?.let {
                            Body(groupedTieredPackage = it, _json = json)
                        } ?: Body(_json = json)
                    }
                    "scalable_matrix_with_unit_pricing" -> {
                        return tryDeserialize(node, jacksonTypeRef<ScalableMatrixWithUnitPricing>())
                            ?.let { Body(scalableMatrixWithUnitPricing = it, _json = json) }
                            ?: Body(_json = json)
                    }
                    "scalable_matrix_with_tiered_pricing" -> {
                        return tryDeserialize(
                                node,
                                jacksonTypeRef<ScalableMatrixWithTieredPricing>(),
                            )
                            ?.let { Body(scalableMatrixWithTieredPricing = it, _json = json) }
                            ?: Body(_json = json)
                    }
                    "cumulative_grouped_bulk" -> {
                        return tryDeserialize(node, jacksonTypeRef<CumulativeGroupedBulk>())?.let {
                            Body(cumulativeGroupedBulk = it, _json = json)
                        } ?: Body(_json = json)
                    }
                }

                return Body(_json = json)
            }
        }

        internal class Serializer : BaseSerializer<Body>(Body::class) {

            override fun serialize(
                value: Body,
                generator: JsonGenerator,
                provider: SerializerProvider,
            ) {
                when {
                    value.unit != null -> generator.writeObject(value.unit)
                    value.package_ != null -> generator.writeObject(value.package_)
                    value.matrix != null -> generator.writeObject(value.matrix)
                    value.matrixWithAllocation != null ->
                        generator.writeObject(value.matrixWithAllocation)
                    value.tiered != null -> generator.writeObject(value.tiered)
                    value.tieredBps != null -> generator.writeObject(value.tieredBps)
                    value.bps != null -> generator.writeObject(value.bps)
                    value.bulkBps != null -> generator.writeObject(value.bulkBps)
                    value.bulk != null -> generator.writeObject(value.bulk)
                    value.thresholdTotalAmount != null ->
                        generator.writeObject(value.thresholdTotalAmount)
                    value.tieredPackage != null -> generator.writeObject(value.tieredPackage)
                    value.groupedTiered != null -> generator.writeObject(value.groupedTiered)
                    value.maxGroupTieredPackage != null ->
                        generator.writeObject(value.maxGroupTieredPackage)
                    value.tieredWithMinimum != null ->
                        generator.writeObject(value.tieredWithMinimum)
                    value.packageWithAllocation != null ->
                        generator.writeObject(value.packageWithAllocation)
                    value.tieredPackageWithMinimum != null ->
                        generator.writeObject(value.tieredPackageWithMinimum)
                    value.unitWithPercent != null -> generator.writeObject(value.unitWithPercent)
                    value.tieredWithProration != null ->
                        generator.writeObject(value.tieredWithProration)
                    value.unitWithProration != null ->
                        generator.writeObject(value.unitWithProration)
                    value.groupedAllocation != null ->
                        generator.writeObject(value.groupedAllocation)
                    value.groupedWithProratedMinimum != null ->
                        generator.writeObject(value.groupedWithProratedMinimum)
                    value.groupedWithMeteredMinimum != null ->
                        generator.writeObject(value.groupedWithMeteredMinimum)
                    value.matrixWithDisplayName != null ->
                        generator.writeObject(value.matrixWithDisplayName)
                    value.bulkWithProration != null ->
                        generator.writeObject(value.bulkWithProration)
                    value.groupedTieredPackage != null ->
                        generator.writeObject(value.groupedTieredPackage)
                    value.scalableMatrixWithUnitPricing != null ->
                        generator.writeObject(value.scalableMatrixWithUnitPricing)
                    value.scalableMatrixWithTieredPricing != null ->
                        generator.writeObject(value.scalableMatrixWithTieredPricing)
                    value.cumulativeGroupedBulk != null ->
                        generator.writeObject(value.cumulativeGroupedBulk)
                    value._json != null -> generator.writeObject(value._json)
                    else -> throw IllegalStateException("Invalid Body")
                }
            }
        }

        class Unit
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val unitConfig: JsonField<UnitConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_config")
                @ExcludeMissing
                unitConfig: JsonField<UnitConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                unitConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("unit")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun unitConfig(): UnitConfig = unitConfig.getRequired("unit_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [unitConfig].
             *
             * Unlike [unitConfig], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("unit_config")
            @ExcludeMissing
            fun _unitConfig(): JsonField<UnitConfig> = unitConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [Unit].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .unitConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [Unit]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("unit")
                private var name: JsonField<String>? = null
                private var unitConfig: JsonField<UnitConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(unit: Unit) = apply {
                    cadence = unit.cadence
                    currency = unit.currency
                    itemId = unit.itemId
                    modelType = unit.modelType
                    name = unit.name
                    unitConfig = unit.unitConfig
                    billableMetricId = unit.billableMetricId
                    billedInAdvance = unit.billedInAdvance
                    billingCycleConfiguration = unit.billingCycleConfiguration
                    conversionRate = unit.conversionRate
                    externalPriceId = unit.externalPriceId
                    fixedPriceQuantity = unit.fixedPriceQuantity
                    invoiceGroupingKey = unit.invoiceGroupingKey
                    invoicingCycleConfiguration = unit.invoicingCycleConfiguration
                    metadata = unit.metadata
                    additionalProperties = unit.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("unit")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun unitConfig(unitConfig: UnitConfig) = unitConfig(JsonField.of(unitConfig))

                /**
                 * Sets [Builder.unitConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.unitConfig] with a well-typed [UnitConfig] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun unitConfig(unitConfig: JsonField<UnitConfig>) = apply {
                    this.unitConfig = unitConfig
                }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [Unit].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .unitConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): Unit =
                    Unit(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired("unitConfig", unitConfig),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): Unit = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("unit")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                unitConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("unit")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (unitConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class UnitConfig
            private constructor(
                private val unitAmount: JsonField<String>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    unitAmount: JsonField<String> = JsonMissing.of()
                ) : this(unitAmount, mutableMapOf())

                /**
                 * Rate per unit of usage
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                /**
                 * Returns the raw JSON value of [unitAmount].
                 *
                 * Unlike [unitAmount], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("unit_amount")
                @ExcludeMissing
                fun _unitAmount(): JsonField<String> = unitAmount

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [UnitConfig].
                     *
                     * The following fields are required:
                     * ```java
                     * .unitAmount()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [UnitConfig]. */
                class Builder internal constructor() {

                    private var unitAmount: JsonField<String>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(unitConfig: UnitConfig) = apply {
                        unitAmount = unitConfig.unitAmount
                        additionalProperties = unitConfig.additionalProperties.toMutableMap()
                    }

                    /** Rate per unit of usage */
                    fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                    /**
                     * Sets [Builder.unitAmount] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.unitAmount] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun unitAmount(unitAmount: JsonField<String>) = apply {
                        this.unitAmount = unitAmount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [UnitConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .unitAmount()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): UnitConfig =
                        UnitConfig(
                            checkRequired("unitAmount", unitAmount),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): UnitConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    unitAmount()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int = (if (unitAmount.asKnown().isPresent) 1 else 0)

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is UnitConfig && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(unitAmount, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "UnitConfig{unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Unit && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && unitConfig == other.unitConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, unitConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "Unit{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, unitConfig=$unitConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class Package
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val packageConfig: JsonField<PackageConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("package_config")
                @ExcludeMissing
                packageConfig: JsonField<PackageConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                packageConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("package")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun packageConfig(): PackageConfig = packageConfig.getRequired("package_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [packageConfig].
             *
             * Unlike [packageConfig], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("package_config")
            @ExcludeMissing
            fun _packageConfig(): JsonField<PackageConfig> = packageConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [Package].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .packageConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [Package]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("package")
                private var name: JsonField<String>? = null
                private var packageConfig: JsonField<PackageConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(package_: Package) = apply {
                    cadence = package_.cadence
                    currency = package_.currency
                    itemId = package_.itemId
                    modelType = package_.modelType
                    name = package_.name
                    packageConfig = package_.packageConfig
                    billableMetricId = package_.billableMetricId
                    billedInAdvance = package_.billedInAdvance
                    billingCycleConfiguration = package_.billingCycleConfiguration
                    conversionRate = package_.conversionRate
                    externalPriceId = package_.externalPriceId
                    fixedPriceQuantity = package_.fixedPriceQuantity
                    invoiceGroupingKey = package_.invoiceGroupingKey
                    invoicingCycleConfiguration = package_.invoicingCycleConfiguration
                    metadata = package_.metadata
                    additionalProperties = package_.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("package")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun packageConfig(packageConfig: PackageConfig) =
                    packageConfig(JsonField.of(packageConfig))

                /**
                 * Sets [Builder.packageConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.packageConfig] with a well-typed [PackageConfig]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun packageConfig(packageConfig: JsonField<PackageConfig>) = apply {
                    this.packageConfig = packageConfig
                }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [Package].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .packageConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): Package =
                    Package(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired("packageConfig", packageConfig),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): Package = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("package")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                packageConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("package")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (packageConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class PackageConfig
            private constructor(
                private val packageAmount: JsonField<String>,
                private val packageSize: JsonField<Long>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("package_amount")
                    @ExcludeMissing
                    packageAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("package_size")
                    @ExcludeMissing
                    packageSize: JsonField<Long> = JsonMissing.of(),
                ) : this(packageAmount, packageSize, mutableMapOf())

                /**
                 * A currency amount to rate usage by
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun packageAmount(): String = packageAmount.getRequired("package_amount")

                /**
                 * An integer amount to represent package size. For example, 1000 here would divide
                 * usage by 1000 before multiplying by package_amount in rating
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun packageSize(): Long = packageSize.getRequired("package_size")

                /**
                 * Returns the raw JSON value of [packageAmount].
                 *
                 * Unlike [packageAmount], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("package_amount")
                @ExcludeMissing
                fun _packageAmount(): JsonField<String> = packageAmount

                /**
                 * Returns the raw JSON value of [packageSize].
                 *
                 * Unlike [packageSize], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("package_size")
                @ExcludeMissing
                fun _packageSize(): JsonField<Long> = packageSize

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [PackageConfig].
                     *
                     * The following fields are required:
                     * ```java
                     * .packageAmount()
                     * .packageSize()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [PackageConfig]. */
                class Builder internal constructor() {

                    private var packageAmount: JsonField<String>? = null
                    private var packageSize: JsonField<Long>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(packageConfig: PackageConfig) = apply {
                        packageAmount = packageConfig.packageAmount
                        packageSize = packageConfig.packageSize
                        additionalProperties = packageConfig.additionalProperties.toMutableMap()
                    }

                    /** A currency amount to rate usage by */
                    fun packageAmount(packageAmount: String) =
                        packageAmount(JsonField.of(packageAmount))

                    /**
                     * Sets [Builder.packageAmount] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.packageAmount] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun packageAmount(packageAmount: JsonField<String>) = apply {
                        this.packageAmount = packageAmount
                    }

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    fun packageSize(packageSize: Long) = packageSize(JsonField.of(packageSize))

                    /**
                     * Sets [Builder.packageSize] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.packageSize] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun packageSize(packageSize: JsonField<Long>) = apply {
                        this.packageSize = packageSize
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [PackageConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .packageAmount()
                     * .packageSize()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): PackageConfig =
                        PackageConfig(
                            checkRequired("packageAmount", packageAmount),
                            checkRequired("packageSize", packageSize),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): PackageConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    packageAmount()
                    packageSize()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (packageAmount.asKnown().isPresent) 1 else 0) +
                        (if (packageSize.asKnown().isPresent) 1 else 0)

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is PackageConfig && packageAmount == other.packageAmount && packageSize == other.packageSize && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(packageAmount, packageSize, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "PackageConfig{packageAmount=$packageAmount, packageSize=$packageSize, additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Package && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && packageConfig == other.packageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, packageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "Package{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, packageConfig=$packageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class Matrix
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val matrixConfig: JsonField<MatrixConfig>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("matrix_config")
                @ExcludeMissing
                matrixConfig: JsonField<MatrixConfig> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                matrixConfig,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun matrixConfig(): MatrixConfig = matrixConfig.getRequired("matrix_config")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("matrix")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [matrixConfig].
             *
             * Unlike [matrixConfig], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("matrix_config")
            @ExcludeMissing
            fun _matrixConfig(): JsonField<MatrixConfig> = matrixConfig

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [Matrix].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .matrixConfig()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [Matrix]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var matrixConfig: JsonField<MatrixConfig>? = null
                private var modelType: JsonValue = JsonValue.from("matrix")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(matrix: Matrix) = apply {
                    cadence = matrix.cadence
                    currency = matrix.currency
                    itemId = matrix.itemId
                    matrixConfig = matrix.matrixConfig
                    modelType = matrix.modelType
                    name = matrix.name
                    billableMetricId = matrix.billableMetricId
                    billedInAdvance = matrix.billedInAdvance
                    billingCycleConfiguration = matrix.billingCycleConfiguration
                    conversionRate = matrix.conversionRate
                    externalPriceId = matrix.externalPriceId
                    fixedPriceQuantity = matrix.fixedPriceQuantity
                    invoiceGroupingKey = matrix.invoiceGroupingKey
                    invoicingCycleConfiguration = matrix.invoicingCycleConfiguration
                    metadata = matrix.metadata
                    additionalProperties = matrix.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                fun matrixConfig(matrixConfig: MatrixConfig) =
                    matrixConfig(JsonField.of(matrixConfig))

                /**
                 * Sets [Builder.matrixConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.matrixConfig] with a well-typed [MatrixConfig]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun matrixConfig(matrixConfig: JsonField<MatrixConfig>) = apply {
                    this.matrixConfig = matrixConfig
                }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("matrix")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [Matrix].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .matrixConfig()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): Matrix =
                    Matrix(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        checkRequired("matrixConfig", matrixConfig),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): Matrix = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                matrixConfig().validate()
                _modelType().let {
                    if (it != JsonValue.from("matrix")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    (matrixConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    modelType.let { if (it == JsonValue.from("matrix")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class MatrixConfig
            private constructor(
                private val defaultUnitAmount: JsonField<String>,
                private val dimensions: JsonField<List<String?>>,
                private val matrixValues: JsonField<List<MatrixValue>>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    defaultUnitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    dimensions: JsonField<List<String?>> = JsonMissing.of(),
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    matrixValues: JsonField<List<MatrixValue>> = JsonMissing.of(),
                ) : this(defaultUnitAmount, dimensions, matrixValues, mutableMapOf())

                /**
                 * Default per unit rate for any usage not bucketed into a specified matrix_value
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun defaultUnitAmount(): String =
                    defaultUnitAmount.getRequired("default_unit_amount")

                /**
                 * One or two event property values to evaluate matrix groups by
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun dimensions(): List<String?> = dimensions.getRequired("dimensions")

                /**
                 * Matrix values for specified matrix grouping keys
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun matrixValues(): List<MatrixValue> = matrixValues.getRequired("matrix_values")

                /**
                 * Returns the raw JSON value of [defaultUnitAmount].
                 *
                 * Unlike [defaultUnitAmount], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("default_unit_amount")
                @ExcludeMissing
                fun _defaultUnitAmount(): JsonField<String> = defaultUnitAmount

                /**
                 * Returns the raw JSON value of [dimensions].
                 *
                 * Unlike [dimensions], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("dimensions")
                @ExcludeMissing
                fun _dimensions(): JsonField<List<String?>> = dimensions

                /**
                 * Returns the raw JSON value of [matrixValues].
                 *
                 * Unlike [matrixValues], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("matrix_values")
                @ExcludeMissing
                fun _matrixValues(): JsonField<List<MatrixValue>> = matrixValues

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [MatrixConfig].
                     *
                     * The following fields are required:
                     * ```java
                     * .defaultUnitAmount()
                     * .dimensions()
                     * .matrixValues()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [MatrixConfig]. */
                class Builder internal constructor() {

                    private var defaultUnitAmount: JsonField<String>? = null
                    private var dimensions: JsonField<MutableList<String?>>? = null
                    private var matrixValues: JsonField<MutableList<MatrixValue>>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(matrixConfig: MatrixConfig) = apply {
                        defaultUnitAmount = matrixConfig.defaultUnitAmount
                        dimensions = matrixConfig.dimensions.map { it.toMutableList() }
                        matrixValues = matrixConfig.matrixValues.map { it.toMutableList() }
                        additionalProperties = matrixConfig.additionalProperties.toMutableMap()
                    }

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    fun defaultUnitAmount(defaultUnitAmount: String) =
                        defaultUnitAmount(JsonField.of(defaultUnitAmount))

                    /**
                     * Sets [Builder.defaultUnitAmount] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.defaultUnitAmount] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun defaultUnitAmount(defaultUnitAmount: JsonField<String>) = apply {
                        this.defaultUnitAmount = defaultUnitAmount
                    }

                    /** One or two event property values to evaluate matrix groups by */
                    fun dimensions(dimensions: List<String?>) = dimensions(JsonField.of(dimensions))

                    /**
                     * Sets [Builder.dimensions] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.dimensions] with a well-typed
                     * `List<String?>` value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun dimensions(dimensions: JsonField<List<String?>>) = apply {
                        this.dimensions = dimensions.map { it.toMutableList() }
                    }

                    /**
                     * Adds a single [String] to [dimensions].
                     *
                     * @throws IllegalStateException if the field was previously set to a non-list.
                     */
                    fun addDimension(dimension: String) = apply {
                        dimensions =
                            (dimensions ?: JsonField.of(mutableListOf())).also {
                                checkKnown("dimensions", it).add(dimension)
                            }
                    }

                    /** Matrix values for specified matrix grouping keys */
                    fun matrixValues(matrixValues: List<MatrixValue>) =
                        matrixValues(JsonField.of(matrixValues))

                    /**
                     * Sets [Builder.matrixValues] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.matrixValues] with a well-typed
                     * `List<MatrixValue>` value instead. This method is primarily for setting the
                     * field to an undocumented or not yet supported value.
                     */
                    fun matrixValues(matrixValues: JsonField<List<MatrixValue>>) = apply {
                        this.matrixValues = matrixValues.map { it.toMutableList() }
                    }

                    /**
                     * Adds a single [MatrixValue] to [matrixValues].
                     *
                     * @throws IllegalStateException if the field was previously set to a non-list.
                     */
                    fun addMatrixValue(matrixValue: MatrixValue) = apply {
                        matrixValues =
                            (matrixValues ?: JsonField.of(mutableListOf())).also {
                                checkKnown("matrixValues", it).add(matrixValue)
                            }
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [MatrixConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .defaultUnitAmount()
                     * .dimensions()
                     * .matrixValues()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): MatrixConfig =
                        MatrixConfig(
                            checkRequired("defaultUnitAmount", defaultUnitAmount),
                            checkRequired("dimensions", dimensions).map { it.toImmutable() },
                            checkRequired("matrixValues", matrixValues).map { it.toImmutable() },
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): MatrixConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    defaultUnitAmount()
                    dimensions()
                    matrixValues().forEach { it.validate() }
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (defaultUnitAmount.asKnown().isPresent) 1 else 0) +
                        (dimensions.asKnown().getOrNull()?.sumOf {
                            (if (it == null) 0 else 1).toInt()
                        } ?: 0) +
                        (matrixValues.asKnown().getOrNull()?.sumOf { it.validity().toInt() } ?: 0)

                class MatrixValue
                private constructor(
                    private val dimensionValues: JsonField<List<String?>>,
                    private val unitAmount: JsonField<String>,
                    private val additionalProperties: MutableMap<String, JsonValue>,
                ) {

                    @JsonCreator
                    private constructor(
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        dimensionValues: JsonField<List<String?>> = JsonMissing.of(),
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        unitAmount: JsonField<String> = JsonMissing.of(),
                    ) : this(dimensionValues, unitAmount, mutableMapOf())

                    /**
                     * One or two matrix keys to filter usage to this Matrix value by. For example,
                     * ["region", "tier"] could be used to filter cloud usage by a cloud region and
                     * an instance tier.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun dimensionValues(): List<String?> =
                        dimensionValues.getRequired("dimension_values")

                    /**
                     * Unit price for the specified dimension_values
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                    /**
                     * Returns the raw JSON value of [dimensionValues].
                     *
                     * Unlike [dimensionValues], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("dimension_values")
                    @ExcludeMissing
                    fun _dimensionValues(): JsonField<List<String?>> = dimensionValues

                    /**
                     * Returns the raw JSON value of [unitAmount].
                     *
                     * Unlike [unitAmount], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    fun _unitAmount(): JsonField<String> = unitAmount

                    @JsonAnySetter
                    private fun putAdditionalProperty(key: String, value: JsonValue) {
                        additionalProperties.put(key, value)
                    }

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> =
                        Collections.unmodifiableMap(additionalProperties)

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [MatrixValue].
                         *
                         * The following fields are required:
                         * ```java
                         * .dimensionValues()
                         * .unitAmount()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [MatrixValue]. */
                    class Builder internal constructor() {

                        private var dimensionValues: JsonField<MutableList<String?>>? = null
                        private var unitAmount: JsonField<String>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixValue: MatrixValue) = apply {
                            dimensionValues = matrixValue.dimensionValues.map { it.toMutableList() }
                            unitAmount = matrixValue.unitAmount
                            additionalProperties = matrixValue.additionalProperties.toMutableMap()
                        }

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        fun dimensionValues(dimensionValues: List<String?>) =
                            dimensionValues(JsonField.of(dimensionValues))

                        /**
                         * Sets [Builder.dimensionValues] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.dimensionValues] with a well-typed
                         * `List<String?>` value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun dimensionValues(dimensionValues: JsonField<List<String?>>) = apply {
                            this.dimensionValues = dimensionValues.map { it.toMutableList() }
                        }

                        /**
                         * Adds a single [String] to [dimensionValues].
                         *
                         * @throws IllegalStateException if the field was previously set to a
                         *   non-list.
                         */
                        fun addDimensionValue(dimensionValue: String) = apply {
                            dimensionValues =
                                (dimensionValues ?: JsonField.of(mutableListOf())).also {
                                    checkKnown("dimensionValues", it).add(dimensionValue)
                                }
                        }

                        /** Unit price for the specified dimension_values */
                        fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                        /**
                         * Sets [Builder.unitAmount] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.unitAmount] with a well-typed [String]
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun unitAmount(unitAmount: JsonField<String>) = apply {
                            this.unitAmount = unitAmount
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        /**
                         * Returns an immutable instance of [MatrixValue].
                         *
                         * Further updates to this [Builder] will not mutate the returned instance.
                         *
                         * The following fields are required:
                         * ```java
                         * .dimensionValues()
                         * .unitAmount()
                         * ```
                         *
                         * @throws IllegalStateException if any required field is unset.
                         */
                        fun build(): MatrixValue =
                            MatrixValue(
                                checkRequired("dimensionValues", dimensionValues).map {
                                    it.toImmutable()
                                },
                                checkRequired("unitAmount", unitAmount),
                                additionalProperties.toMutableMap(),
                            )
                    }

                    private var validated: Boolean = false

                    fun validate(): MatrixValue = apply {
                        if (validated) {
                            return@apply
                        }

                        dimensionValues()
                        unitAmount()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int =
                        (dimensionValues.asKnown().getOrNull()?.sumOf {
                            (if (it == null) 0 else 1).toInt()
                        } ?: 0) + (if (unitAmount.asKnown().isPresent) 1 else 0)

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixValue && dimensionValues == other.dimensionValues && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(dimensionValues, unitAmount, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixValue{dimensionValues=$dimensionValues, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is MatrixConfig && defaultUnitAmount == other.defaultUnitAmount && dimensions == other.dimensions && matrixValues == other.matrixValues && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(defaultUnitAmount, dimensions, matrixValues, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "MatrixConfig{defaultUnitAmount=$defaultUnitAmount, dimensions=$dimensions, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Matrix && cadence == other.cadence && currency == other.currency && itemId == other.itemId && matrixConfig == other.matrixConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, matrixConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "Matrix{cadence=$cadence, currency=$currency, itemId=$itemId, matrixConfig=$matrixConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class MatrixWithAllocation
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val matrixWithAllocationConfig: JsonField<MatrixWithAllocationConfig>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("matrix_with_allocation_config")
                @ExcludeMissing
                matrixWithAllocationConfig: JsonField<MatrixWithAllocationConfig> =
                    JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                matrixWithAllocationConfig,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun matrixWithAllocationConfig(): MatrixWithAllocationConfig =
                matrixWithAllocationConfig.getRequired("matrix_with_allocation_config")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("matrix_with_allocation")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [matrixWithAllocationConfig].
             *
             * Unlike [matrixWithAllocationConfig], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("matrix_with_allocation_config")
            @ExcludeMissing
            fun _matrixWithAllocationConfig(): JsonField<MatrixWithAllocationConfig> =
                matrixWithAllocationConfig

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [MatrixWithAllocation].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .matrixWithAllocationConfig()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [MatrixWithAllocation]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var matrixWithAllocationConfig: JsonField<MatrixWithAllocationConfig>? =
                    null
                private var modelType: JsonValue = JsonValue.from("matrix_with_allocation")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(matrixWithAllocation: MatrixWithAllocation) = apply {
                    cadence = matrixWithAllocation.cadence
                    currency = matrixWithAllocation.currency
                    itemId = matrixWithAllocation.itemId
                    matrixWithAllocationConfig = matrixWithAllocation.matrixWithAllocationConfig
                    modelType = matrixWithAllocation.modelType
                    name = matrixWithAllocation.name
                    billableMetricId = matrixWithAllocation.billableMetricId
                    billedInAdvance = matrixWithAllocation.billedInAdvance
                    billingCycleConfiguration = matrixWithAllocation.billingCycleConfiguration
                    conversionRate = matrixWithAllocation.conversionRate
                    externalPriceId = matrixWithAllocation.externalPriceId
                    fixedPriceQuantity = matrixWithAllocation.fixedPriceQuantity
                    invoiceGroupingKey = matrixWithAllocation.invoiceGroupingKey
                    invoicingCycleConfiguration = matrixWithAllocation.invoicingCycleConfiguration
                    metadata = matrixWithAllocation.metadata
                    additionalProperties = matrixWithAllocation.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                fun matrixWithAllocationConfig(
                    matrixWithAllocationConfig: MatrixWithAllocationConfig
                ) = matrixWithAllocationConfig(JsonField.of(matrixWithAllocationConfig))

                /**
                 * Sets [Builder.matrixWithAllocationConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.matrixWithAllocationConfig] with a well-typed
                 * [MatrixWithAllocationConfig] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun matrixWithAllocationConfig(
                    matrixWithAllocationConfig: JsonField<MatrixWithAllocationConfig>
                ) = apply { this.matrixWithAllocationConfig = matrixWithAllocationConfig }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("matrix_with_allocation")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [MatrixWithAllocation].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .matrixWithAllocationConfig()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): MatrixWithAllocation =
                    MatrixWithAllocation(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        checkRequired("matrixWithAllocationConfig", matrixWithAllocationConfig),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): MatrixWithAllocation = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                matrixWithAllocationConfig().validate()
                _modelType().let {
                    if (it != JsonValue.from("matrix_with_allocation")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    (matrixWithAllocationConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    modelType.let { if (it == JsonValue.from("matrix_with_allocation")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class MatrixWithAllocationConfig
            private constructor(
                private val allocation: JsonField<Double>,
                private val defaultUnitAmount: JsonField<String>,
                private val dimensions: JsonField<List<String?>>,
                private val matrixValues: JsonField<List<MatrixValue>>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("allocation")
                    @ExcludeMissing
                    allocation: JsonField<Double> = JsonMissing.of(),
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    defaultUnitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    dimensions: JsonField<List<String?>> = JsonMissing.of(),
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    matrixValues: JsonField<List<MatrixValue>> = JsonMissing.of(),
                ) : this(allocation, defaultUnitAmount, dimensions, matrixValues, mutableMapOf())

                /**
                 * Allocation to be used to calculate the price
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun allocation(): Double = allocation.getRequired("allocation")

                /**
                 * Default per unit rate for any usage not bucketed into a specified matrix_value
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun defaultUnitAmount(): String =
                    defaultUnitAmount.getRequired("default_unit_amount")

                /**
                 * One or two event property values to evaluate matrix groups by
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun dimensions(): List<String?> = dimensions.getRequired("dimensions")

                /**
                 * Matrix values for specified matrix grouping keys
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun matrixValues(): List<MatrixValue> = matrixValues.getRequired("matrix_values")

                /**
                 * Returns the raw JSON value of [allocation].
                 *
                 * Unlike [allocation], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("allocation")
                @ExcludeMissing
                fun _allocation(): JsonField<Double> = allocation

                /**
                 * Returns the raw JSON value of [defaultUnitAmount].
                 *
                 * Unlike [defaultUnitAmount], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("default_unit_amount")
                @ExcludeMissing
                fun _defaultUnitAmount(): JsonField<String> = defaultUnitAmount

                /**
                 * Returns the raw JSON value of [dimensions].
                 *
                 * Unlike [dimensions], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("dimensions")
                @ExcludeMissing
                fun _dimensions(): JsonField<List<String?>> = dimensions

                /**
                 * Returns the raw JSON value of [matrixValues].
                 *
                 * Unlike [matrixValues], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("matrix_values")
                @ExcludeMissing
                fun _matrixValues(): JsonField<List<MatrixValue>> = matrixValues

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [MatrixWithAllocationConfig].
                     *
                     * The following fields are required:
                     * ```java
                     * .allocation()
                     * .defaultUnitAmount()
                     * .dimensions()
                     * .matrixValues()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [MatrixWithAllocationConfig]. */
                class Builder internal constructor() {

                    private var allocation: JsonField<Double>? = null
                    private var defaultUnitAmount: JsonField<String>? = null
                    private var dimensions: JsonField<MutableList<String?>>? = null
                    private var matrixValues: JsonField<MutableList<MatrixValue>>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(matrixWithAllocationConfig: MatrixWithAllocationConfig) =
                        apply {
                            allocation = matrixWithAllocationConfig.allocation
                            defaultUnitAmount = matrixWithAllocationConfig.defaultUnitAmount
                            dimensions =
                                matrixWithAllocationConfig.dimensions.map { it.toMutableList() }
                            matrixValues =
                                matrixWithAllocationConfig.matrixValues.map { it.toMutableList() }
                            additionalProperties =
                                matrixWithAllocationConfig.additionalProperties.toMutableMap()
                        }

                    /** Allocation to be used to calculate the price */
                    fun allocation(allocation: Double) = allocation(JsonField.of(allocation))

                    /**
                     * Sets [Builder.allocation] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.allocation] with a well-typed [Double] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun allocation(allocation: JsonField<Double>) = apply {
                        this.allocation = allocation
                    }

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    fun defaultUnitAmount(defaultUnitAmount: String) =
                        defaultUnitAmount(JsonField.of(defaultUnitAmount))

                    /**
                     * Sets [Builder.defaultUnitAmount] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.defaultUnitAmount] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun defaultUnitAmount(defaultUnitAmount: JsonField<String>) = apply {
                        this.defaultUnitAmount = defaultUnitAmount
                    }

                    /** One or two event property values to evaluate matrix groups by */
                    fun dimensions(dimensions: List<String?>) = dimensions(JsonField.of(dimensions))

                    /**
                     * Sets [Builder.dimensions] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.dimensions] with a well-typed
                     * `List<String?>` value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun dimensions(dimensions: JsonField<List<String?>>) = apply {
                        this.dimensions = dimensions.map { it.toMutableList() }
                    }

                    /**
                     * Adds a single [String] to [dimensions].
                     *
                     * @throws IllegalStateException if the field was previously set to a non-list.
                     */
                    fun addDimension(dimension: String) = apply {
                        dimensions =
                            (dimensions ?: JsonField.of(mutableListOf())).also {
                                checkKnown("dimensions", it).add(dimension)
                            }
                    }

                    /** Matrix values for specified matrix grouping keys */
                    fun matrixValues(matrixValues: List<MatrixValue>) =
                        matrixValues(JsonField.of(matrixValues))

                    /**
                     * Sets [Builder.matrixValues] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.matrixValues] with a well-typed
                     * `List<MatrixValue>` value instead. This method is primarily for setting the
                     * field to an undocumented or not yet supported value.
                     */
                    fun matrixValues(matrixValues: JsonField<List<MatrixValue>>) = apply {
                        this.matrixValues = matrixValues.map { it.toMutableList() }
                    }

                    /**
                     * Adds a single [MatrixValue] to [matrixValues].
                     *
                     * @throws IllegalStateException if the field was previously set to a non-list.
                     */
                    fun addMatrixValue(matrixValue: MatrixValue) = apply {
                        matrixValues =
                            (matrixValues ?: JsonField.of(mutableListOf())).also {
                                checkKnown("matrixValues", it).add(matrixValue)
                            }
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [MatrixWithAllocationConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .allocation()
                     * .defaultUnitAmount()
                     * .dimensions()
                     * .matrixValues()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): MatrixWithAllocationConfig =
                        MatrixWithAllocationConfig(
                            checkRequired("allocation", allocation),
                            checkRequired("defaultUnitAmount", defaultUnitAmount),
                            checkRequired("dimensions", dimensions).map { it.toImmutable() },
                            checkRequired("matrixValues", matrixValues).map { it.toImmutable() },
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): MatrixWithAllocationConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    allocation()
                    defaultUnitAmount()
                    dimensions()
                    matrixValues().forEach { it.validate() }
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (allocation.asKnown().isPresent) 1 else 0) +
                        (if (defaultUnitAmount.asKnown().isPresent) 1 else 0) +
                        (dimensions.asKnown().getOrNull()?.sumOf {
                            (if (it == null) 0 else 1).toInt()
                        } ?: 0) +
                        (matrixValues.asKnown().getOrNull()?.sumOf { it.validity().toInt() } ?: 0)

                class MatrixValue
                private constructor(
                    private val dimensionValues: JsonField<List<String?>>,
                    private val unitAmount: JsonField<String>,
                    private val additionalProperties: MutableMap<String, JsonValue>,
                ) {

                    @JsonCreator
                    private constructor(
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        dimensionValues: JsonField<List<String?>> = JsonMissing.of(),
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        unitAmount: JsonField<String> = JsonMissing.of(),
                    ) : this(dimensionValues, unitAmount, mutableMapOf())

                    /**
                     * One or two matrix keys to filter usage to this Matrix value by. For example,
                     * ["region", "tier"] could be used to filter cloud usage by a cloud region and
                     * an instance tier.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun dimensionValues(): List<String?> =
                        dimensionValues.getRequired("dimension_values")

                    /**
                     * Unit price for the specified dimension_values
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                    /**
                     * Returns the raw JSON value of [dimensionValues].
                     *
                     * Unlike [dimensionValues], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("dimension_values")
                    @ExcludeMissing
                    fun _dimensionValues(): JsonField<List<String?>> = dimensionValues

                    /**
                     * Returns the raw JSON value of [unitAmount].
                     *
                     * Unlike [unitAmount], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    fun _unitAmount(): JsonField<String> = unitAmount

                    @JsonAnySetter
                    private fun putAdditionalProperty(key: String, value: JsonValue) {
                        additionalProperties.put(key, value)
                    }

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> =
                        Collections.unmodifiableMap(additionalProperties)

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [MatrixValue].
                         *
                         * The following fields are required:
                         * ```java
                         * .dimensionValues()
                         * .unitAmount()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [MatrixValue]. */
                    class Builder internal constructor() {

                        private var dimensionValues: JsonField<MutableList<String?>>? = null
                        private var unitAmount: JsonField<String>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixValue: MatrixValue) = apply {
                            dimensionValues = matrixValue.dimensionValues.map { it.toMutableList() }
                            unitAmount = matrixValue.unitAmount
                            additionalProperties = matrixValue.additionalProperties.toMutableMap()
                        }

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        fun dimensionValues(dimensionValues: List<String?>) =
                            dimensionValues(JsonField.of(dimensionValues))

                        /**
                         * Sets [Builder.dimensionValues] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.dimensionValues] with a well-typed
                         * `List<String?>` value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun dimensionValues(dimensionValues: JsonField<List<String?>>) = apply {
                            this.dimensionValues = dimensionValues.map { it.toMutableList() }
                        }

                        /**
                         * Adds a single [String] to [dimensionValues].
                         *
                         * @throws IllegalStateException if the field was previously set to a
                         *   non-list.
                         */
                        fun addDimensionValue(dimensionValue: String) = apply {
                            dimensionValues =
                                (dimensionValues ?: JsonField.of(mutableListOf())).also {
                                    checkKnown("dimensionValues", it).add(dimensionValue)
                                }
                        }

                        /** Unit price for the specified dimension_values */
                        fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                        /**
                         * Sets [Builder.unitAmount] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.unitAmount] with a well-typed [String]
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun unitAmount(unitAmount: JsonField<String>) = apply {
                            this.unitAmount = unitAmount
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        /**
                         * Returns an immutable instance of [MatrixValue].
                         *
                         * Further updates to this [Builder] will not mutate the returned instance.
                         *
                         * The following fields are required:
                         * ```java
                         * .dimensionValues()
                         * .unitAmount()
                         * ```
                         *
                         * @throws IllegalStateException if any required field is unset.
                         */
                        fun build(): MatrixValue =
                            MatrixValue(
                                checkRequired("dimensionValues", dimensionValues).map {
                                    it.toImmutable()
                                },
                                checkRequired("unitAmount", unitAmount),
                                additionalProperties.toMutableMap(),
                            )
                    }

                    private var validated: Boolean = false

                    fun validate(): MatrixValue = apply {
                        if (validated) {
                            return@apply
                        }

                        dimensionValues()
                        unitAmount()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int =
                        (dimensionValues.asKnown().getOrNull()?.sumOf {
                            (if (it == null) 0 else 1).toInt()
                        } ?: 0) + (if (unitAmount.asKnown().isPresent) 1 else 0)

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixValue && dimensionValues == other.dimensionValues && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(dimensionValues, unitAmount, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixValue{dimensionValues=$dimensionValues, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is MatrixWithAllocationConfig && allocation == other.allocation && defaultUnitAmount == other.defaultUnitAmount && dimensions == other.dimensions && matrixValues == other.matrixValues && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(allocation, defaultUnitAmount, dimensions, matrixValues, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "MatrixWithAllocationConfig{allocation=$allocation, defaultUnitAmount=$defaultUnitAmount, dimensions=$dimensions, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is MatrixWithAllocation && cadence == other.cadence && currency == other.currency && itemId == other.itemId && matrixWithAllocationConfig == other.matrixWithAllocationConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, matrixWithAllocationConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "MatrixWithAllocation{cadence=$cadence, currency=$currency, itemId=$itemId, matrixWithAllocationConfig=$matrixWithAllocationConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class Tiered
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val tieredConfig: JsonField<TieredConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_config")
                @ExcludeMissing
                tieredConfig: JsonField<TieredConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                tieredConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("tiered")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun tieredConfig(): TieredConfig = tieredConfig.getRequired("tiered_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [tieredConfig].
             *
             * Unlike [tieredConfig], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("tiered_config")
            @ExcludeMissing
            fun _tieredConfig(): JsonField<TieredConfig> = tieredConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [Tiered].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .tieredConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [Tiered]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("tiered")
                private var name: JsonField<String>? = null
                private var tieredConfig: JsonField<TieredConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(tiered: Tiered) = apply {
                    cadence = tiered.cadence
                    currency = tiered.currency
                    itemId = tiered.itemId
                    modelType = tiered.modelType
                    name = tiered.name
                    tieredConfig = tiered.tieredConfig
                    billableMetricId = tiered.billableMetricId
                    billedInAdvance = tiered.billedInAdvance
                    billingCycleConfiguration = tiered.billingCycleConfiguration
                    conversionRate = tiered.conversionRate
                    externalPriceId = tiered.externalPriceId
                    fixedPriceQuantity = tiered.fixedPriceQuantity
                    invoiceGroupingKey = tiered.invoiceGroupingKey
                    invoicingCycleConfiguration = tiered.invoicingCycleConfiguration
                    metadata = tiered.metadata
                    additionalProperties = tiered.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("tiered")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun tieredConfig(tieredConfig: TieredConfig) =
                    tieredConfig(JsonField.of(tieredConfig))

                /**
                 * Sets [Builder.tieredConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.tieredConfig] with a well-typed [TieredConfig]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun tieredConfig(tieredConfig: JsonField<TieredConfig>) = apply {
                    this.tieredConfig = tieredConfig
                }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [Tiered].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .tieredConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): Tiered =
                    Tiered(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired("tieredConfig", tieredConfig),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): Tiered = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("tiered")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                tieredConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("tiered")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (tieredConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class TieredConfig
            private constructor(
                private val tiers: JsonField<List<Tier>>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    tiers: JsonField<List<Tier>> = JsonMissing.of()
                ) : this(tiers, mutableMapOf())

                /**
                 * Tiers for rating based on total usage quantities into the specified tier
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun tiers(): List<Tier> = tiers.getRequired("tiers")

                /**
                 * Returns the raw JSON value of [tiers].
                 *
                 * Unlike [tiers], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("tiers") @ExcludeMissing fun _tiers(): JsonField<List<Tier>> = tiers

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [TieredConfig].
                     *
                     * The following fields are required:
                     * ```java
                     * .tiers()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [TieredConfig]. */
                class Builder internal constructor() {

                    private var tiers: JsonField<MutableList<Tier>>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(tieredConfig: TieredConfig) = apply {
                        tiers = tieredConfig.tiers.map { it.toMutableList() }
                        additionalProperties = tieredConfig.additionalProperties.toMutableMap()
                    }

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                    /**
                     * Sets [Builder.tiers] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.tiers] with a well-typed `List<Tier>` value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun tiers(tiers: JsonField<List<Tier>>) = apply {
                        this.tiers = tiers.map { it.toMutableList() }
                    }

                    /**
                     * Adds a single [Tier] to [tiers].
                     *
                     * @throws IllegalStateException if the field was previously set to a non-list.
                     */
                    fun addTier(tier: Tier) = apply {
                        tiers =
                            (tiers ?: JsonField.of(mutableListOf())).also {
                                checkKnown("tiers", it).add(tier)
                            }
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [TieredConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .tiers()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): TieredConfig =
                        TieredConfig(
                            checkRequired("tiers", tiers).map { it.toImmutable() },
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): TieredConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    tiers().forEach { it.validate() }
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (tiers.asKnown().getOrNull()?.sumOf { it.validity().toInt() } ?: 0)

                class Tier
                private constructor(
                    private val firstUnit: JsonField<Double>,
                    private val unitAmount: JsonField<String>,
                    private val lastUnit: JsonField<Double>,
                    private val additionalProperties: MutableMap<String, JsonValue>,
                ) {

                    @JsonCreator
                    private constructor(
                        @JsonProperty("first_unit")
                        @ExcludeMissing
                        firstUnit: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("last_unit")
                        @ExcludeMissing
                        lastUnit: JsonField<Double> = JsonMissing.of(),
                    ) : this(firstUnit, unitAmount, lastUnit, mutableMapOf())

                    /**
                     * Exclusive tier starting value
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun firstUnit(): Double = firstUnit.getRequired("first_unit")

                    /**
                     * Amount per unit
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                    /**
                     * Inclusive tier ending value. If null, this is treated as the last tier
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type
                     *   (e.g. if the server responded with an unexpected value).
                     */
                    fun lastUnit(): Optional<Double> = lastUnit.getOptional("last_unit")

                    /**
                     * Returns the raw JSON value of [firstUnit].
                     *
                     * Unlike [firstUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("first_unit")
                    @ExcludeMissing
                    fun _firstUnit(): JsonField<Double> = firstUnit

                    /**
                     * Returns the raw JSON value of [unitAmount].
                     *
                     * Unlike [unitAmount], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    fun _unitAmount(): JsonField<String> = unitAmount

                    /**
                     * Returns the raw JSON value of [lastUnit].
                     *
                     * Unlike [lastUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("last_unit")
                    @ExcludeMissing
                    fun _lastUnit(): JsonField<Double> = lastUnit

                    @JsonAnySetter
                    private fun putAdditionalProperty(key: String, value: JsonValue) {
                        additionalProperties.put(key, value)
                    }

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> =
                        Collections.unmodifiableMap(additionalProperties)

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [Tier].
                         *
                         * The following fields are required:
                         * ```java
                         * .firstUnit()
                         * .unitAmount()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Tier]. */
                    class Builder internal constructor() {

                        private var firstUnit: JsonField<Double>? = null
                        private var unitAmount: JsonField<String>? = null
                        private var lastUnit: JsonField<Double> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tier: Tier) = apply {
                            firstUnit = tier.firstUnit
                            unitAmount = tier.unitAmount
                            lastUnit = tier.lastUnit
                            additionalProperties = tier.additionalProperties.toMutableMap()
                        }

                        /** Exclusive tier starting value */
                        fun firstUnit(firstUnit: Double) = firstUnit(JsonField.of(firstUnit))

                        /**
                         * Sets [Builder.firstUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.firstUnit] with a well-typed [Double]
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun firstUnit(firstUnit: JsonField<Double>) = apply {
                            this.firstUnit = firstUnit
                        }

                        /** Amount per unit */
                        fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                        /**
                         * Sets [Builder.unitAmount] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.unitAmount] with a well-typed [String]
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun unitAmount(unitAmount: JsonField<String>) = apply {
                            this.unitAmount = unitAmount
                        }

                        /**
                         * Inclusive tier ending value. If null, this is treated as the last tier
                         */
                        fun lastUnit(lastUnit: Double?) = lastUnit(JsonField.ofNullable(lastUnit))

                        /**
                         * Alias for [Builder.lastUnit].
                         *
                         * This unboxed primitive overload exists for backwards compatibility.
                         */
                        fun lastUnit(lastUnit: Double) = lastUnit(lastUnit as Double?)

                        /** Alias for calling [Builder.lastUnit] with `lastUnit.orElse(null)`. */
                        fun lastUnit(lastUnit: Optional<Double>) = lastUnit(lastUnit.getOrNull())

                        /**
                         * Sets [Builder.lastUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.lastUnit] with a well-typed [Double]
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun lastUnit(lastUnit: JsonField<Double>) = apply {
                            this.lastUnit = lastUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        /**
                         * Returns an immutable instance of [Tier].
                         *
                         * Further updates to this [Builder] will not mutate the returned instance.
                         *
                         * The following fields are required:
                         * ```java
                         * .firstUnit()
                         * .unitAmount()
                         * ```
                         *
                         * @throws IllegalStateException if any required field is unset.
                         */
                        fun build(): Tier =
                            Tier(
                                checkRequired("firstUnit", firstUnit),
                                checkRequired("unitAmount", unitAmount),
                                lastUnit,
                                additionalProperties.toMutableMap(),
                            )
                    }

                    private var validated: Boolean = false

                    fun validate(): Tier = apply {
                        if (validated) {
                            return@apply
                        }

                        firstUnit()
                        unitAmount()
                        lastUnit()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int =
                        (if (firstUnit.asKnown().isPresent) 1 else 0) +
                            (if (unitAmount.asKnown().isPresent) 1 else 0) +
                            (if (lastUnit.asKnown().isPresent) 1 else 0)

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Tier && firstUnit == other.firstUnit && unitAmount == other.unitAmount && lastUnit == other.lastUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(firstUnit, unitAmount, lastUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "Tier{firstUnit=$firstUnit, unitAmount=$unitAmount, lastUnit=$lastUnit, additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is TieredConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "TieredConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Tiered && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredConfig == other.tieredConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "Tiered{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredConfig=$tieredConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class TieredBps
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val tieredBpsConfig: JsonField<TieredBpsConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_bps_config")
                @ExcludeMissing
                tieredBpsConfig: JsonField<TieredBpsConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                tieredBpsConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("tiered_bps")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun tieredBpsConfig(): TieredBpsConfig =
                tieredBpsConfig.getRequired("tiered_bps_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [tieredBpsConfig].
             *
             * Unlike [tieredBpsConfig], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("tiered_bps_config")
            @ExcludeMissing
            fun _tieredBpsConfig(): JsonField<TieredBpsConfig> = tieredBpsConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [TieredBps].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .tieredBpsConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [TieredBps]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("tiered_bps")
                private var name: JsonField<String>? = null
                private var tieredBpsConfig: JsonField<TieredBpsConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(tieredBps: TieredBps) = apply {
                    cadence = tieredBps.cadence
                    currency = tieredBps.currency
                    itemId = tieredBps.itemId
                    modelType = tieredBps.modelType
                    name = tieredBps.name
                    tieredBpsConfig = tieredBps.tieredBpsConfig
                    billableMetricId = tieredBps.billableMetricId
                    billedInAdvance = tieredBps.billedInAdvance
                    billingCycleConfiguration = tieredBps.billingCycleConfiguration
                    conversionRate = tieredBps.conversionRate
                    externalPriceId = tieredBps.externalPriceId
                    fixedPriceQuantity = tieredBps.fixedPriceQuantity
                    invoiceGroupingKey = tieredBps.invoiceGroupingKey
                    invoicingCycleConfiguration = tieredBps.invoicingCycleConfiguration
                    metadata = tieredBps.metadata
                    additionalProperties = tieredBps.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("tiered_bps")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun tieredBpsConfig(tieredBpsConfig: TieredBpsConfig) =
                    tieredBpsConfig(JsonField.of(tieredBpsConfig))

                /**
                 * Sets [Builder.tieredBpsConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.tieredBpsConfig] with a well-typed
                 * [TieredBpsConfig] value instead. This method is primarily for setting the field
                 * to an undocumented or not yet supported value.
                 */
                fun tieredBpsConfig(tieredBpsConfig: JsonField<TieredBpsConfig>) = apply {
                    this.tieredBpsConfig = tieredBpsConfig
                }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [TieredBps].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .tieredBpsConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): TieredBps =
                    TieredBps(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired("tieredBpsConfig", tieredBpsConfig),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): TieredBps = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("tiered_bps")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                tieredBpsConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("tiered_bps")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (tieredBpsConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class TieredBpsConfig
            private constructor(
                private val tiers: JsonField<List<Tier>>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    tiers: JsonField<List<Tier>> = JsonMissing.of()
                ) : this(tiers, mutableMapOf())

                /**
                 * Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
                 * tiers
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun tiers(): List<Tier> = tiers.getRequired("tiers")

                /**
                 * Returns the raw JSON value of [tiers].
                 *
                 * Unlike [tiers], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("tiers") @ExcludeMissing fun _tiers(): JsonField<List<Tier>> = tiers

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [TieredBpsConfig].
                     *
                     * The following fields are required:
                     * ```java
                     * .tiers()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [TieredBpsConfig]. */
                class Builder internal constructor() {

                    private var tiers: JsonField<MutableList<Tier>>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(tieredBpsConfig: TieredBpsConfig) = apply {
                        tiers = tieredBpsConfig.tiers.map { it.toMutableList() }
                        additionalProperties = tieredBpsConfig.additionalProperties.toMutableMap()
                    }

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                    /**
                     * Sets [Builder.tiers] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.tiers] with a well-typed `List<Tier>` value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun tiers(tiers: JsonField<List<Tier>>) = apply {
                        this.tiers = tiers.map { it.toMutableList() }
                    }

                    /**
                     * Adds a single [Tier] to [tiers].
                     *
                     * @throws IllegalStateException if the field was previously set to a non-list.
                     */
                    fun addTier(tier: Tier) = apply {
                        tiers =
                            (tiers ?: JsonField.of(mutableListOf())).also {
                                checkKnown("tiers", it).add(tier)
                            }
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [TieredBpsConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .tiers()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): TieredBpsConfig =
                        TieredBpsConfig(
                            checkRequired("tiers", tiers).map { it.toImmutable() },
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): TieredBpsConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    tiers().forEach { it.validate() }
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (tiers.asKnown().getOrNull()?.sumOf { it.validity().toInt() } ?: 0)

                class Tier
                private constructor(
                    private val bps: JsonField<Double>,
                    private val minimumAmount: JsonField<String>,
                    private val maximumAmount: JsonField<String>,
                    private val perUnitMaximum: JsonField<String>,
                    private val additionalProperties: MutableMap<String, JsonValue>,
                ) {

                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps")
                        @ExcludeMissing
                        bps: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("minimum_amount")
                        @ExcludeMissing
                        minimumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        maximumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        perUnitMaximum: JsonField<String> = JsonMissing.of(),
                    ) : this(bps, minimumAmount, maximumAmount, perUnitMaximum, mutableMapOf())

                    /**
                     * Per-event basis point rate
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun bps(): Double = bps.getRequired("bps")

                    /**
                     * Exclusive tier starting value
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                    /**
                     * Inclusive tier ending value
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type
                     *   (e.g. if the server responded with an unexpected value).
                     */
                    fun maximumAmount(): Optional<String> =
                        maximumAmount.getOptional("maximum_amount")

                    /**
                     * Per unit maximum to charge
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type
                     *   (e.g. if the server responded with an unexpected value).
                     */
                    fun perUnitMaximum(): Optional<String> =
                        perUnitMaximum.getOptional("per_unit_maximum")

                    /**
                     * Returns the raw JSON value of [bps].
                     *
                     * Unlike [bps], this method doesn't throw if the JSON field has an unexpected
                     * type.
                     */
                    @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                    /**
                     * Returns the raw JSON value of [minimumAmount].
                     *
                     * Unlike [minimumAmount], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("minimum_amount")
                    @ExcludeMissing
                    fun _minimumAmount(): JsonField<String> = minimumAmount

                    /**
                     * Returns the raw JSON value of [maximumAmount].
                     *
                     * Unlike [maximumAmount], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("maximum_amount")
                    @ExcludeMissing
                    fun _maximumAmount(): JsonField<String> = maximumAmount

                    /**
                     * Returns the raw JSON value of [perUnitMaximum].
                     *
                     * Unlike [perUnitMaximum], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                    @JsonAnySetter
                    private fun putAdditionalProperty(key: String, value: JsonValue) {
                        additionalProperties.put(key, value)
                    }

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> =
                        Collections.unmodifiableMap(additionalProperties)

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [Tier].
                         *
                         * The following fields are required:
                         * ```java
                         * .bps()
                         * .minimumAmount()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Tier]. */
                    class Builder internal constructor() {

                        private var bps: JsonField<Double>? = null
                        private var minimumAmount: JsonField<String>? = null
                        private var maximumAmount: JsonField<String> = JsonMissing.of()
                        private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tier: Tier) = apply {
                            bps = tier.bps
                            minimumAmount = tier.minimumAmount
                            maximumAmount = tier.maximumAmount
                            perUnitMaximum = tier.perUnitMaximum
                            additionalProperties = tier.additionalProperties.toMutableMap()
                        }

                        /** Per-event basis point rate */
                        fun bps(bps: Double) = bps(JsonField.of(bps))

                        /**
                         * Sets [Builder.bps] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.bps] with a well-typed [Double] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                        /** Exclusive tier starting value */
                        fun minimumAmount(minimumAmount: String) =
                            minimumAmount(JsonField.of(minimumAmount))

                        /**
                         * Sets [Builder.minimumAmount] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.minimumAmount] with a well-typed
                         * [String] value instead. This method is primarily for setting the field to
                         * an undocumented or not yet supported value.
                         */
                        fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                            this.minimumAmount = minimumAmount
                        }

                        /** Inclusive tier ending value */
                        fun maximumAmount(maximumAmount: String?) =
                            maximumAmount(JsonField.ofNullable(maximumAmount))

                        /**
                         * Alias for calling [Builder.maximumAmount] with
                         * `maximumAmount.orElse(null)`.
                         */
                        fun maximumAmount(maximumAmount: Optional<String>) =
                            maximumAmount(maximumAmount.getOrNull())

                        /**
                         * Sets [Builder.maximumAmount] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.maximumAmount] with a well-typed
                         * [String] value instead. This method is primarily for setting the field to
                         * an undocumented or not yet supported value.
                         */
                        fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                            this.maximumAmount = maximumAmount
                        }

                        /** Per unit maximum to charge */
                        fun perUnitMaximum(perUnitMaximum: String?) =
                            perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                        /**
                         * Alias for calling [Builder.perUnitMaximum] with
                         * `perUnitMaximum.orElse(null)`.
                         */
                        fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                            perUnitMaximum(perUnitMaximum.getOrNull())

                        /**
                         * Sets [Builder.perUnitMaximum] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.perUnitMaximum] with a well-typed
                         * [String] value instead. This method is primarily for setting the field to
                         * an undocumented or not yet supported value.
                         */
                        fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                            this.perUnitMaximum = perUnitMaximum
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        /**
                         * Returns an immutable instance of [Tier].
                         *
                         * Further updates to this [Builder] will not mutate the returned instance.
                         *
                         * The following fields are required:
                         * ```java
                         * .bps()
                         * .minimumAmount()
                         * ```
                         *
                         * @throws IllegalStateException if any required field is unset.
                         */
                        fun build(): Tier =
                            Tier(
                                checkRequired("bps", bps),
                                checkRequired("minimumAmount", minimumAmount),
                                maximumAmount,
                                perUnitMaximum,
                                additionalProperties.toMutableMap(),
                            )
                    }

                    private var validated: Boolean = false

                    fun validate(): Tier = apply {
                        if (validated) {
                            return@apply
                        }

                        bps()
                        minimumAmount()
                        maximumAmount()
                        perUnitMaximum()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int =
                        (if (bps.asKnown().isPresent) 1 else 0) +
                            (if (minimumAmount.asKnown().isPresent) 1 else 0) +
                            (if (maximumAmount.asKnown().isPresent) 1 else 0) +
                            (if (perUnitMaximum.asKnown().isPresent) 1 else 0)

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Tier && bps == other.bps && minimumAmount == other.minimumAmount && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(bps, minimumAmount, maximumAmount, perUnitMaximum, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "Tier{bps=$bps, minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is TieredBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "TieredBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is TieredBps && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredBpsConfig == other.tieredBpsConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredBpsConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "TieredBps{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredBpsConfig=$tieredBpsConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class Bps
        private constructor(
            private val bpsConfig: JsonField<BpsConfig>,
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("bps_config")
                @ExcludeMissing
                bpsConfig: JsonField<BpsConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                bpsConfig,
                cadence,
                currency,
                itemId,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun bpsConfig(): BpsConfig = bpsConfig.getRequired("bps_config")

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("bps")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [bpsConfig].
             *
             * Unlike [bpsConfig], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("bps_config")
            @ExcludeMissing
            fun _bpsConfig(): JsonField<BpsConfig> = bpsConfig

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [Bps].
                 *
                 * The following fields are required:
                 * ```java
                 * .bpsConfig()
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [Bps]. */
            class Builder internal constructor() {

                private var bpsConfig: JsonField<BpsConfig>? = null
                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("bps")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(bps: Bps) = apply {
                    bpsConfig = bps.bpsConfig
                    cadence = bps.cadence
                    currency = bps.currency
                    itemId = bps.itemId
                    modelType = bps.modelType
                    name = bps.name
                    billableMetricId = bps.billableMetricId
                    billedInAdvance = bps.billedInAdvance
                    billingCycleConfiguration = bps.billingCycleConfiguration
                    conversionRate = bps.conversionRate
                    externalPriceId = bps.externalPriceId
                    fixedPriceQuantity = bps.fixedPriceQuantity
                    invoiceGroupingKey = bps.invoiceGroupingKey
                    invoicingCycleConfiguration = bps.invoicingCycleConfiguration
                    metadata = bps.metadata
                    additionalProperties = bps.additionalProperties.toMutableMap()
                }

                fun bpsConfig(bpsConfig: BpsConfig) = bpsConfig(JsonField.of(bpsConfig))

                /**
                 * Sets [Builder.bpsConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.bpsConfig] with a well-typed [BpsConfig] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun bpsConfig(bpsConfig: JsonField<BpsConfig>) = apply {
                    this.bpsConfig = bpsConfig
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("bps")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [Bps].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .bpsConfig()
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): Bps =
                    Bps(
                        checkRequired("bpsConfig", bpsConfig),
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): Bps = apply {
                if (validated) {
                    return@apply
                }

                bpsConfig().validate()
                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("bps")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (bpsConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("bps")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            class BpsConfig
            private constructor(
                private val bps: JsonField<Double>,
                private val perUnitMaximum: JsonField<String>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("bps") @ExcludeMissing bps: JsonField<Double> = JsonMissing.of(),
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    perUnitMaximum: JsonField<String> = JsonMissing.of(),
                ) : this(bps, perUnitMaximum, mutableMapOf())

                /**
                 * Basis point take rate per event
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun bps(): Double = bps.getRequired("bps")

                /**
                 * Optional currency amount maximum to cap spend per event
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun perUnitMaximum(): Optional<String> =
                    perUnitMaximum.getOptional("per_unit_maximum")

                /**
                 * Returns the raw JSON value of [bps].
                 *
                 * Unlike [bps], this method doesn't throw if the JSON field has an unexpected type.
                 */
                @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                /**
                 * Returns the raw JSON value of [perUnitMaximum].
                 *
                 * Unlike [perUnitMaximum], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("per_unit_maximum")
                @ExcludeMissing
                fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [BpsConfig].
                     *
                     * The following fields are required:
                     * ```java
                     * .bps()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BpsConfig]. */
                class Builder internal constructor() {

                    private var bps: JsonField<Double>? = null
                    private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(bpsConfig: BpsConfig) = apply {
                        bps = bpsConfig.bps
                        perUnitMaximum = bpsConfig.perUnitMaximum
                        additionalProperties = bpsConfig.additionalProperties.toMutableMap()
                    }

                    /** Basis point take rate per event */
                    fun bps(bps: Double) = bps(JsonField.of(bps))

                    /**
                     * Sets [Builder.bps] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.bps] with a well-typed [Double] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                    /** Optional currency amount maximum to cap spend per event */
                    fun perUnitMaximum(perUnitMaximum: String?) =
                        perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                    /**
                     * Alias for calling [Builder.perUnitMaximum] with
                     * `perUnitMaximum.orElse(null)`.
                     */
                    fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                        perUnitMaximum(perUnitMaximum.getOrNull())

                    /**
                     * Sets [Builder.perUnitMaximum] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.perUnitMaximum] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                        this.perUnitMaximum = perUnitMaximum
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BpsConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .bps()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BpsConfig =
                        BpsConfig(
                            checkRequired("bps", bps),
                            perUnitMaximum,
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BpsConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    bps()
                    perUnitMaximum()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (bps.asKnown().isPresent) 1 else 0) +
                        (if (perUnitMaximum.asKnown().isPresent) 1 else 0)

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BpsConfig && bps == other.bps && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bps, perUnitMaximum, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BpsConfig{bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Bps && bpsConfig == other.bpsConfig && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(bpsConfig, cadence, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "Bps{bpsConfig=$bpsConfig, cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class BulkBps
        private constructor(
            private val bulkBpsConfig: JsonField<BulkBpsConfig>,
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("bulk_bps_config")
                @ExcludeMissing
                bulkBpsConfig: JsonField<BulkBpsConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                bulkBpsConfig,
                cadence,
                currency,
                itemId,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun bulkBpsConfig(): BulkBpsConfig = bulkBpsConfig.getRequired("bulk_bps_config")

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("bulk_bps")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [bulkBpsConfig].
             *
             * Unlike [bulkBpsConfig], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("bulk_bps_config")
            @ExcludeMissing
            fun _bulkBpsConfig(): JsonField<BulkBpsConfig> = bulkBpsConfig

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [BulkBps].
                 *
                 * The following fields are required:
                 * ```java
                 * .bulkBpsConfig()
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [BulkBps]. */
            class Builder internal constructor() {

                private var bulkBpsConfig: JsonField<BulkBpsConfig>? = null
                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("bulk_bps")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(bulkBps: BulkBps) = apply {
                    bulkBpsConfig = bulkBps.bulkBpsConfig
                    cadence = bulkBps.cadence
                    currency = bulkBps.currency
                    itemId = bulkBps.itemId
                    modelType = bulkBps.modelType
                    name = bulkBps.name
                    billableMetricId = bulkBps.billableMetricId
                    billedInAdvance = bulkBps.billedInAdvance
                    billingCycleConfiguration = bulkBps.billingCycleConfiguration
                    conversionRate = bulkBps.conversionRate
                    externalPriceId = bulkBps.externalPriceId
                    fixedPriceQuantity = bulkBps.fixedPriceQuantity
                    invoiceGroupingKey = bulkBps.invoiceGroupingKey
                    invoicingCycleConfiguration = bulkBps.invoicingCycleConfiguration
                    metadata = bulkBps.metadata
                    additionalProperties = bulkBps.additionalProperties.toMutableMap()
                }

                fun bulkBpsConfig(bulkBpsConfig: BulkBpsConfig) =
                    bulkBpsConfig(JsonField.of(bulkBpsConfig))

                /**
                 * Sets [Builder.bulkBpsConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.bulkBpsConfig] with a well-typed [BulkBpsConfig]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun bulkBpsConfig(bulkBpsConfig: JsonField<BulkBpsConfig>) = apply {
                    this.bulkBpsConfig = bulkBpsConfig
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("bulk_bps")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [BulkBps].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .bulkBpsConfig()
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): BulkBps =
                    BulkBps(
                        checkRequired("bulkBpsConfig", bulkBpsConfig),
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): BulkBps = apply {
                if (validated) {
                    return@apply
                }

                bulkBpsConfig().validate()
                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("bulk_bps")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (bulkBpsConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("bulk_bps")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            class BulkBpsConfig
            private constructor(
                private val tiers: JsonField<List<Tier>>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    tiers: JsonField<List<Tier>> = JsonMissing.of()
                ) : this(tiers, mutableMapOf())

                /**
                 * Tiers for a bulk BPS pricing model where all usage is aggregated to a single tier
                 * based on total volume
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun tiers(): List<Tier> = tiers.getRequired("tiers")

                /**
                 * Returns the raw JSON value of [tiers].
                 *
                 * Unlike [tiers], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("tiers") @ExcludeMissing fun _tiers(): JsonField<List<Tier>> = tiers

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [BulkBpsConfig].
                     *
                     * The following fields are required:
                     * ```java
                     * .tiers()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BulkBpsConfig]. */
                class Builder internal constructor() {

                    private var tiers: JsonField<MutableList<Tier>>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(bulkBpsConfig: BulkBpsConfig) = apply {
                        tiers = bulkBpsConfig.tiers.map { it.toMutableList() }
                        additionalProperties = bulkBpsConfig.additionalProperties.toMutableMap()
                    }

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                    /**
                     * Sets [Builder.tiers] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.tiers] with a well-typed `List<Tier>` value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun tiers(tiers: JsonField<List<Tier>>) = apply {
                        this.tiers = tiers.map { it.toMutableList() }
                    }

                    /**
                     * Adds a single [Tier] to [tiers].
                     *
                     * @throws IllegalStateException if the field was previously set to a non-list.
                     */
                    fun addTier(tier: Tier) = apply {
                        tiers =
                            (tiers ?: JsonField.of(mutableListOf())).also {
                                checkKnown("tiers", it).add(tier)
                            }
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BulkBpsConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .tiers()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BulkBpsConfig =
                        BulkBpsConfig(
                            checkRequired("tiers", tiers).map { it.toImmutable() },
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BulkBpsConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    tiers().forEach { it.validate() }
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (tiers.asKnown().getOrNull()?.sumOf { it.validity().toInt() } ?: 0)

                class Tier
                private constructor(
                    private val bps: JsonField<Double>,
                    private val maximumAmount: JsonField<String>,
                    private val perUnitMaximum: JsonField<String>,
                    private val additionalProperties: MutableMap<String, JsonValue>,
                ) {

                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps")
                        @ExcludeMissing
                        bps: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        maximumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        perUnitMaximum: JsonField<String> = JsonMissing.of(),
                    ) : this(bps, maximumAmount, perUnitMaximum, mutableMapOf())

                    /**
                     * Basis points to rate on
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun bps(): Double = bps.getRequired("bps")

                    /**
                     * Upper bound for tier
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type
                     *   (e.g. if the server responded with an unexpected value).
                     */
                    fun maximumAmount(): Optional<String> =
                        maximumAmount.getOptional("maximum_amount")

                    /**
                     * The maximum amount to charge for any one event
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type
                     *   (e.g. if the server responded with an unexpected value).
                     */
                    fun perUnitMaximum(): Optional<String> =
                        perUnitMaximum.getOptional("per_unit_maximum")

                    /**
                     * Returns the raw JSON value of [bps].
                     *
                     * Unlike [bps], this method doesn't throw if the JSON field has an unexpected
                     * type.
                     */
                    @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                    /**
                     * Returns the raw JSON value of [maximumAmount].
                     *
                     * Unlike [maximumAmount], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("maximum_amount")
                    @ExcludeMissing
                    fun _maximumAmount(): JsonField<String> = maximumAmount

                    /**
                     * Returns the raw JSON value of [perUnitMaximum].
                     *
                     * Unlike [perUnitMaximum], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                    @JsonAnySetter
                    private fun putAdditionalProperty(key: String, value: JsonValue) {
                        additionalProperties.put(key, value)
                    }

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> =
                        Collections.unmodifiableMap(additionalProperties)

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [Tier].
                         *
                         * The following fields are required:
                         * ```java
                         * .bps()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Tier]. */
                    class Builder internal constructor() {

                        private var bps: JsonField<Double>? = null
                        private var maximumAmount: JsonField<String> = JsonMissing.of()
                        private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tier: Tier) = apply {
                            bps = tier.bps
                            maximumAmount = tier.maximumAmount
                            perUnitMaximum = tier.perUnitMaximum
                            additionalProperties = tier.additionalProperties.toMutableMap()
                        }

                        /** Basis points to rate on */
                        fun bps(bps: Double) = bps(JsonField.of(bps))

                        /**
                         * Sets [Builder.bps] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.bps] with a well-typed [Double] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                        /** Upper bound for tier */
                        fun maximumAmount(maximumAmount: String?) =
                            maximumAmount(JsonField.ofNullable(maximumAmount))

                        /**
                         * Alias for calling [Builder.maximumAmount] with
                         * `maximumAmount.orElse(null)`.
                         */
                        fun maximumAmount(maximumAmount: Optional<String>) =
                            maximumAmount(maximumAmount.getOrNull())

                        /**
                         * Sets [Builder.maximumAmount] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.maximumAmount] with a well-typed
                         * [String] value instead. This method is primarily for setting the field to
                         * an undocumented or not yet supported value.
                         */
                        fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                            this.maximumAmount = maximumAmount
                        }

                        /** The maximum amount to charge for any one event */
                        fun perUnitMaximum(perUnitMaximum: String?) =
                            perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                        /**
                         * Alias for calling [Builder.perUnitMaximum] with
                         * `perUnitMaximum.orElse(null)`.
                         */
                        fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                            perUnitMaximum(perUnitMaximum.getOrNull())

                        /**
                         * Sets [Builder.perUnitMaximum] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.perUnitMaximum] with a well-typed
                         * [String] value instead. This method is primarily for setting the field to
                         * an undocumented or not yet supported value.
                         */
                        fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                            this.perUnitMaximum = perUnitMaximum
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        /**
                         * Returns an immutable instance of [Tier].
                         *
                         * Further updates to this [Builder] will not mutate the returned instance.
                         *
                         * The following fields are required:
                         * ```java
                         * .bps()
                         * ```
                         *
                         * @throws IllegalStateException if any required field is unset.
                         */
                        fun build(): Tier =
                            Tier(
                                checkRequired("bps", bps),
                                maximumAmount,
                                perUnitMaximum,
                                additionalProperties.toMutableMap(),
                            )
                    }

                    private var validated: Boolean = false

                    fun validate(): Tier = apply {
                        if (validated) {
                            return@apply
                        }

                        bps()
                        maximumAmount()
                        perUnitMaximum()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int =
                        (if (bps.asKnown().isPresent) 1 else 0) +
                            (if (maximumAmount.asKnown().isPresent) 1 else 0) +
                            (if (perUnitMaximum.asKnown().isPresent) 1 else 0)

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Tier && bps == other.bps && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(bps, maximumAmount, perUnitMaximum, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "Tier{bps=$bps, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BulkBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BulkBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is BulkBps && bulkBpsConfig == other.bulkBpsConfig && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(bulkBpsConfig, cadence, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "BulkBps{bulkBpsConfig=$bulkBpsConfig, cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class Bulk
        private constructor(
            private val bulkConfig: JsonField<BulkConfig>,
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("bulk_config")
                @ExcludeMissing
                bulkConfig: JsonField<BulkConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                bulkConfig,
                cadence,
                currency,
                itemId,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun bulkConfig(): BulkConfig = bulkConfig.getRequired("bulk_config")

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("bulk")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [bulkConfig].
             *
             * Unlike [bulkConfig], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("bulk_config")
            @ExcludeMissing
            fun _bulkConfig(): JsonField<BulkConfig> = bulkConfig

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [Bulk].
                 *
                 * The following fields are required:
                 * ```java
                 * .bulkConfig()
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [Bulk]. */
            class Builder internal constructor() {

                private var bulkConfig: JsonField<BulkConfig>? = null
                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("bulk")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(bulk: Bulk) = apply {
                    bulkConfig = bulk.bulkConfig
                    cadence = bulk.cadence
                    currency = bulk.currency
                    itemId = bulk.itemId
                    modelType = bulk.modelType
                    name = bulk.name
                    billableMetricId = bulk.billableMetricId
                    billedInAdvance = bulk.billedInAdvance
                    billingCycleConfiguration = bulk.billingCycleConfiguration
                    conversionRate = bulk.conversionRate
                    externalPriceId = bulk.externalPriceId
                    fixedPriceQuantity = bulk.fixedPriceQuantity
                    invoiceGroupingKey = bulk.invoiceGroupingKey
                    invoicingCycleConfiguration = bulk.invoicingCycleConfiguration
                    metadata = bulk.metadata
                    additionalProperties = bulk.additionalProperties.toMutableMap()
                }

                fun bulkConfig(bulkConfig: BulkConfig) = bulkConfig(JsonField.of(bulkConfig))

                /**
                 * Sets [Builder.bulkConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.bulkConfig] with a well-typed [BulkConfig] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun bulkConfig(bulkConfig: JsonField<BulkConfig>) = apply {
                    this.bulkConfig = bulkConfig
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("bulk")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [Bulk].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .bulkConfig()
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): Bulk =
                    Bulk(
                        checkRequired("bulkConfig", bulkConfig),
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): Bulk = apply {
                if (validated) {
                    return@apply
                }

                bulkConfig().validate()
                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("bulk")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (bulkConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("bulk")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            class BulkConfig
            private constructor(
                private val tiers: JsonField<List<Tier>>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    tiers: JsonField<List<Tier>> = JsonMissing.of()
                ) : this(tiers, mutableMapOf())

                /**
                 * Bulk tiers for rating based on total usage volume
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun tiers(): List<Tier> = tiers.getRequired("tiers")

                /**
                 * Returns the raw JSON value of [tiers].
                 *
                 * Unlike [tiers], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("tiers") @ExcludeMissing fun _tiers(): JsonField<List<Tier>> = tiers

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [BulkConfig].
                     *
                     * The following fields are required:
                     * ```java
                     * .tiers()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BulkConfig]. */
                class Builder internal constructor() {

                    private var tiers: JsonField<MutableList<Tier>>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(bulkConfig: BulkConfig) = apply {
                        tiers = bulkConfig.tiers.map { it.toMutableList() }
                        additionalProperties = bulkConfig.additionalProperties.toMutableMap()
                    }

                    /** Bulk tiers for rating based on total usage volume */
                    fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                    /**
                     * Sets [Builder.tiers] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.tiers] with a well-typed `List<Tier>` value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun tiers(tiers: JsonField<List<Tier>>) = apply {
                        this.tiers = tiers.map { it.toMutableList() }
                    }

                    /**
                     * Adds a single [Tier] to [tiers].
                     *
                     * @throws IllegalStateException if the field was previously set to a non-list.
                     */
                    fun addTier(tier: Tier) = apply {
                        tiers =
                            (tiers ?: JsonField.of(mutableListOf())).also {
                                checkKnown("tiers", it).add(tier)
                            }
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BulkConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .tiers()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BulkConfig =
                        BulkConfig(
                            checkRequired("tiers", tiers).map { it.toImmutable() },
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BulkConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    tiers().forEach { it.validate() }
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (tiers.asKnown().getOrNull()?.sumOf { it.validity().toInt() } ?: 0)

                class Tier
                private constructor(
                    private val unitAmount: JsonField<String>,
                    private val maximumUnits: JsonField<Double>,
                    private val additionalProperties: MutableMap<String, JsonValue>,
                ) {

                    @JsonCreator
                    private constructor(
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("maximum_units")
                        @ExcludeMissing
                        maximumUnits: JsonField<Double> = JsonMissing.of(),
                    ) : this(unitAmount, maximumUnits, mutableMapOf())

                    /**
                     * Amount per unit
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                    /**
                     * Upper bound for this tier
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type
                     *   (e.g. if the server responded with an unexpected value).
                     */
                    fun maximumUnits(): Optional<Double> = maximumUnits.getOptional("maximum_units")

                    /**
                     * Returns the raw JSON value of [unitAmount].
                     *
                     * Unlike [unitAmount], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    fun _unitAmount(): JsonField<String> = unitAmount

                    /**
                     * Returns the raw JSON value of [maximumUnits].
                     *
                     * Unlike [maximumUnits], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("maximum_units")
                    @ExcludeMissing
                    fun _maximumUnits(): JsonField<Double> = maximumUnits

                    @JsonAnySetter
                    private fun putAdditionalProperty(key: String, value: JsonValue) {
                        additionalProperties.put(key, value)
                    }

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> =
                        Collections.unmodifiableMap(additionalProperties)

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [Tier].
                         *
                         * The following fields are required:
                         * ```java
                         * .unitAmount()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Tier]. */
                    class Builder internal constructor() {

                        private var unitAmount: JsonField<String>? = null
                        private var maximumUnits: JsonField<Double> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tier: Tier) = apply {
                            unitAmount = tier.unitAmount
                            maximumUnits = tier.maximumUnits
                            additionalProperties = tier.additionalProperties.toMutableMap()
                        }

                        /** Amount per unit */
                        fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                        /**
                         * Sets [Builder.unitAmount] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.unitAmount] with a well-typed [String]
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun unitAmount(unitAmount: JsonField<String>) = apply {
                            this.unitAmount = unitAmount
                        }

                        /** Upper bound for this tier */
                        fun maximumUnits(maximumUnits: Double?) =
                            maximumUnits(JsonField.ofNullable(maximumUnits))

                        /**
                         * Alias for [Builder.maximumUnits].
                         *
                         * This unboxed primitive overload exists for backwards compatibility.
                         */
                        fun maximumUnits(maximumUnits: Double) =
                            maximumUnits(maximumUnits as Double?)

                        /**
                         * Alias for calling [Builder.maximumUnits] with
                         * `maximumUnits.orElse(null)`.
                         */
                        fun maximumUnits(maximumUnits: Optional<Double>) =
                            maximumUnits(maximumUnits.getOrNull())

                        /**
                         * Sets [Builder.maximumUnits] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.maximumUnits] with a well-typed [Double]
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun maximumUnits(maximumUnits: JsonField<Double>) = apply {
                            this.maximumUnits = maximumUnits
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        /**
                         * Returns an immutable instance of [Tier].
                         *
                         * Further updates to this [Builder] will not mutate the returned instance.
                         *
                         * The following fields are required:
                         * ```java
                         * .unitAmount()
                         * ```
                         *
                         * @throws IllegalStateException if any required field is unset.
                         */
                        fun build(): Tier =
                            Tier(
                                checkRequired("unitAmount", unitAmount),
                                maximumUnits,
                                additionalProperties.toMutableMap(),
                            )
                    }

                    private var validated: Boolean = false

                    fun validate(): Tier = apply {
                        if (validated) {
                            return@apply
                        }

                        unitAmount()
                        maximumUnits()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int =
                        (if (unitAmount.asKnown().isPresent) 1 else 0) +
                            (if (maximumUnits.asKnown().isPresent) 1 else 0)

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Tier && unitAmount == other.unitAmount && maximumUnits == other.maximumUnits && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(unitAmount, maximumUnits, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "Tier{unitAmount=$unitAmount, maximumUnits=$maximumUnits, additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BulkConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BulkConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Bulk && bulkConfig == other.bulkConfig && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(bulkConfig, cadence, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "Bulk{bulkConfig=$bulkConfig, cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class ThresholdTotalAmount
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("threshold_total_amount_config")
                @ExcludeMissing
                thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                thresholdTotalAmountConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("threshold_total_amount")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun thresholdTotalAmountConfig(): ThresholdTotalAmountConfig =
                thresholdTotalAmountConfig.getRequired("threshold_total_amount_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [thresholdTotalAmountConfig].
             *
             * Unlike [thresholdTotalAmountConfig], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("threshold_total_amount_config")
            @ExcludeMissing
            fun _thresholdTotalAmountConfig(): JsonField<ThresholdTotalAmountConfig> =
                thresholdTotalAmountConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [ThresholdTotalAmount].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .thresholdTotalAmountConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [ThresholdTotalAmount]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("threshold_total_amount")
                private var name: JsonField<String>? = null
                private var thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>? =
                    null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(thresholdTotalAmount: ThresholdTotalAmount) = apply {
                    cadence = thresholdTotalAmount.cadence
                    currency = thresholdTotalAmount.currency
                    itemId = thresholdTotalAmount.itemId
                    modelType = thresholdTotalAmount.modelType
                    name = thresholdTotalAmount.name
                    thresholdTotalAmountConfig = thresholdTotalAmount.thresholdTotalAmountConfig
                    billableMetricId = thresholdTotalAmount.billableMetricId
                    billedInAdvance = thresholdTotalAmount.billedInAdvance
                    billingCycleConfiguration = thresholdTotalAmount.billingCycleConfiguration
                    conversionRate = thresholdTotalAmount.conversionRate
                    externalPriceId = thresholdTotalAmount.externalPriceId
                    fixedPriceQuantity = thresholdTotalAmount.fixedPriceQuantity
                    invoiceGroupingKey = thresholdTotalAmount.invoiceGroupingKey
                    invoicingCycleConfiguration = thresholdTotalAmount.invoicingCycleConfiguration
                    metadata = thresholdTotalAmount.metadata
                    additionalProperties = thresholdTotalAmount.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("threshold_total_amount")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun thresholdTotalAmountConfig(
                    thresholdTotalAmountConfig: ThresholdTotalAmountConfig
                ) = thresholdTotalAmountConfig(JsonField.of(thresholdTotalAmountConfig))

                /**
                 * Sets [Builder.thresholdTotalAmountConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.thresholdTotalAmountConfig] with a well-typed
                 * [ThresholdTotalAmountConfig] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun thresholdTotalAmountConfig(
                    thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>
                ) = apply { this.thresholdTotalAmountConfig = thresholdTotalAmountConfig }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [ThresholdTotalAmount].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .thresholdTotalAmountConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): ThresholdTotalAmount =
                    ThresholdTotalAmount(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired("thresholdTotalAmountConfig", thresholdTotalAmountConfig),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): ThresholdTotalAmount = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("threshold_total_amount")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                thresholdTotalAmountConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("threshold_total_amount")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (thresholdTotalAmountConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ThresholdTotalAmountConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [ThresholdTotalAmountConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [ThresholdTotalAmountConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(thresholdTotalAmountConfig: ThresholdTotalAmountConfig) =
                        apply {
                            additionalProperties =
                                thresholdTotalAmountConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [ThresholdTotalAmountConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): ThresholdTotalAmountConfig =
                        ThresholdTotalAmountConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): ThresholdTotalAmountConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is ThresholdTotalAmountConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "ThresholdTotalAmountConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is ThresholdTotalAmount && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && thresholdTotalAmountConfig == other.thresholdTotalAmountConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, thresholdTotalAmountConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "ThresholdTotalAmount{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, thresholdTotalAmountConfig=$thresholdTotalAmountConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class TieredPackage
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val tieredPackageConfig: JsonField<TieredPackageConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_package_config")
                @ExcludeMissing
                tieredPackageConfig: JsonField<TieredPackageConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                tieredPackageConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("tiered_package")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun tieredPackageConfig(): TieredPackageConfig =
                tieredPackageConfig.getRequired("tiered_package_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [tieredPackageConfig].
             *
             * Unlike [tieredPackageConfig], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("tiered_package_config")
            @ExcludeMissing
            fun _tieredPackageConfig(): JsonField<TieredPackageConfig> = tieredPackageConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [TieredPackage].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .tieredPackageConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [TieredPackage]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("tiered_package")
                private var name: JsonField<String>? = null
                private var tieredPackageConfig: JsonField<TieredPackageConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(tieredPackage: TieredPackage) = apply {
                    cadence = tieredPackage.cadence
                    currency = tieredPackage.currency
                    itemId = tieredPackage.itemId
                    modelType = tieredPackage.modelType
                    name = tieredPackage.name
                    tieredPackageConfig = tieredPackage.tieredPackageConfig
                    billableMetricId = tieredPackage.billableMetricId
                    billedInAdvance = tieredPackage.billedInAdvance
                    billingCycleConfiguration = tieredPackage.billingCycleConfiguration
                    conversionRate = tieredPackage.conversionRate
                    externalPriceId = tieredPackage.externalPriceId
                    fixedPriceQuantity = tieredPackage.fixedPriceQuantity
                    invoiceGroupingKey = tieredPackage.invoiceGroupingKey
                    invoicingCycleConfiguration = tieredPackage.invoicingCycleConfiguration
                    metadata = tieredPackage.metadata
                    additionalProperties = tieredPackage.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("tiered_package")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun tieredPackageConfig(tieredPackageConfig: TieredPackageConfig) =
                    tieredPackageConfig(JsonField.of(tieredPackageConfig))

                /**
                 * Sets [Builder.tieredPackageConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.tieredPackageConfig] with a well-typed
                 * [TieredPackageConfig] value instead. This method is primarily for setting the
                 * field to an undocumented or not yet supported value.
                 */
                fun tieredPackageConfig(tieredPackageConfig: JsonField<TieredPackageConfig>) =
                    apply {
                        this.tieredPackageConfig = tieredPackageConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [TieredPackage].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .tieredPackageConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): TieredPackage =
                    TieredPackage(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired("tieredPackageConfig", tieredPackageConfig),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): TieredPackage = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("tiered_package")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                tieredPackageConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("tiered_package")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (tieredPackageConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class TieredPackageConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [TieredPackageConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [TieredPackageConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(tieredPackageConfig: TieredPackageConfig) = apply {
                        additionalProperties =
                            tieredPackageConfig.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [TieredPackageConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): TieredPackageConfig =
                        TieredPackageConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): TieredPackageConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is TieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "TieredPackageConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is TieredPackage && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredPackageConfig == other.tieredPackageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredPackageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "TieredPackage{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredPackageConfig=$tieredPackageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class GroupedTiered
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val groupedTieredConfig: JsonField<GroupedTieredConfig>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_tiered_config")
                @ExcludeMissing
                groupedTieredConfig: JsonField<GroupedTieredConfig> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                groupedTieredConfig,
                itemId,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun groupedTieredConfig(): GroupedTieredConfig =
                groupedTieredConfig.getRequired("grouped_tiered_config")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("grouped_tiered")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [groupedTieredConfig].
             *
             * Unlike [groupedTieredConfig], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("grouped_tiered_config")
            @ExcludeMissing
            fun _groupedTieredConfig(): JsonField<GroupedTieredConfig> = groupedTieredConfig

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [GroupedTiered].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .groupedTieredConfig()
                 * .itemId()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [GroupedTiered]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var groupedTieredConfig: JsonField<GroupedTieredConfig>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("grouped_tiered")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(groupedTiered: GroupedTiered) = apply {
                    cadence = groupedTiered.cadence
                    currency = groupedTiered.currency
                    groupedTieredConfig = groupedTiered.groupedTieredConfig
                    itemId = groupedTiered.itemId
                    modelType = groupedTiered.modelType
                    name = groupedTiered.name
                    billableMetricId = groupedTiered.billableMetricId
                    billedInAdvance = groupedTiered.billedInAdvance
                    billingCycleConfiguration = groupedTiered.billingCycleConfiguration
                    conversionRate = groupedTiered.conversionRate
                    externalPriceId = groupedTiered.externalPriceId
                    fixedPriceQuantity = groupedTiered.fixedPriceQuantity
                    invoiceGroupingKey = groupedTiered.invoiceGroupingKey
                    invoicingCycleConfiguration = groupedTiered.invoicingCycleConfiguration
                    metadata = groupedTiered.metadata
                    additionalProperties = groupedTiered.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                fun groupedTieredConfig(groupedTieredConfig: GroupedTieredConfig) =
                    groupedTieredConfig(JsonField.of(groupedTieredConfig))

                /**
                 * Sets [Builder.groupedTieredConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.groupedTieredConfig] with a well-typed
                 * [GroupedTieredConfig] value instead. This method is primarily for setting the
                 * field to an undocumented or not yet supported value.
                 */
                fun groupedTieredConfig(groupedTieredConfig: JsonField<GroupedTieredConfig>) =
                    apply {
                        this.groupedTieredConfig = groupedTieredConfig
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("grouped_tiered")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [GroupedTiered].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .groupedTieredConfig()
                 * .itemId()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): GroupedTiered =
                    GroupedTiered(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("groupedTieredConfig", groupedTieredConfig),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): GroupedTiered = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                groupedTieredConfig().validate()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("grouped_tiered")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (groupedTieredConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("grouped_tiered")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class GroupedTieredConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [GroupedTieredConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [GroupedTieredConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(groupedTieredConfig: GroupedTieredConfig) = apply {
                        additionalProperties =
                            groupedTieredConfig.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [GroupedTieredConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): GroupedTieredConfig =
                        GroupedTieredConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): GroupedTieredConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is GroupedTieredConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "GroupedTieredConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is GroupedTiered && cadence == other.cadence && currency == other.currency && groupedTieredConfig == other.groupedTieredConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedTieredConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "GroupedTiered{cadence=$cadence, currency=$currency, groupedTieredConfig=$groupedTieredConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class MaxGroupTieredPackage
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val maxGroupTieredPackageConfig: JsonField<MaxGroupTieredPackageConfig>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("max_group_tiered_package_config")
                @ExcludeMissing
                maxGroupTieredPackageConfig: JsonField<MaxGroupTieredPackageConfig> =
                    JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                maxGroupTieredPackageConfig,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun maxGroupTieredPackageConfig(): MaxGroupTieredPackageConfig =
                maxGroupTieredPackageConfig.getRequired("max_group_tiered_package_config")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("max_group_tiered_package")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [maxGroupTieredPackageConfig].
             *
             * Unlike [maxGroupTieredPackageConfig], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("max_group_tiered_package_config")
            @ExcludeMissing
            fun _maxGroupTieredPackageConfig(): JsonField<MaxGroupTieredPackageConfig> =
                maxGroupTieredPackageConfig

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [MaxGroupTieredPackage].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .maxGroupTieredPackageConfig()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [MaxGroupTieredPackage]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var maxGroupTieredPackageConfig: JsonField<MaxGroupTieredPackageConfig>? =
                    null
                private var modelType: JsonValue = JsonValue.from("max_group_tiered_package")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(maxGroupTieredPackage: MaxGroupTieredPackage) = apply {
                    cadence = maxGroupTieredPackage.cadence
                    currency = maxGroupTieredPackage.currency
                    itemId = maxGroupTieredPackage.itemId
                    maxGroupTieredPackageConfig = maxGroupTieredPackage.maxGroupTieredPackageConfig
                    modelType = maxGroupTieredPackage.modelType
                    name = maxGroupTieredPackage.name
                    billableMetricId = maxGroupTieredPackage.billableMetricId
                    billedInAdvance = maxGroupTieredPackage.billedInAdvance
                    billingCycleConfiguration = maxGroupTieredPackage.billingCycleConfiguration
                    conversionRate = maxGroupTieredPackage.conversionRate
                    externalPriceId = maxGroupTieredPackage.externalPriceId
                    fixedPriceQuantity = maxGroupTieredPackage.fixedPriceQuantity
                    invoiceGroupingKey = maxGroupTieredPackage.invoiceGroupingKey
                    invoicingCycleConfiguration = maxGroupTieredPackage.invoicingCycleConfiguration
                    metadata = maxGroupTieredPackage.metadata
                    additionalProperties = maxGroupTieredPackage.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                fun maxGroupTieredPackageConfig(
                    maxGroupTieredPackageConfig: MaxGroupTieredPackageConfig
                ) = maxGroupTieredPackageConfig(JsonField.of(maxGroupTieredPackageConfig))

                /**
                 * Sets [Builder.maxGroupTieredPackageConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.maxGroupTieredPackageConfig] with a well-typed
                 * [MaxGroupTieredPackageConfig] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun maxGroupTieredPackageConfig(
                    maxGroupTieredPackageConfig: JsonField<MaxGroupTieredPackageConfig>
                ) = apply { this.maxGroupTieredPackageConfig = maxGroupTieredPackageConfig }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("max_group_tiered_package")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [MaxGroupTieredPackage].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .maxGroupTieredPackageConfig()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): MaxGroupTieredPackage =
                    MaxGroupTieredPackage(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        checkRequired("maxGroupTieredPackageConfig", maxGroupTieredPackageConfig),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): MaxGroupTieredPackage = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                maxGroupTieredPackageConfig().validate()
                _modelType().let {
                    if (it != JsonValue.from("max_group_tiered_package")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    (maxGroupTieredPackageConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    modelType.let {
                        if (it == JsonValue.from("max_group_tiered_package")) 1 else 0
                    } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class MaxGroupTieredPackageConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [MaxGroupTieredPackageConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [MaxGroupTieredPackageConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(maxGroupTieredPackageConfig: MaxGroupTieredPackageConfig) =
                        apply {
                            additionalProperties =
                                maxGroupTieredPackageConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [MaxGroupTieredPackageConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): MaxGroupTieredPackageConfig =
                        MaxGroupTieredPackageConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): MaxGroupTieredPackageConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is MaxGroupTieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "MaxGroupTieredPackageConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is MaxGroupTieredPackage && cadence == other.cadence && currency == other.currency && itemId == other.itemId && maxGroupTieredPackageConfig == other.maxGroupTieredPackageConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, maxGroupTieredPackageConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "MaxGroupTieredPackage{cadence=$cadence, currency=$currency, itemId=$itemId, maxGroupTieredPackageConfig=$maxGroupTieredPackageConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class TieredWithMinimum
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_with_minimum_config")
                @ExcludeMissing
                tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                tieredWithMinimumConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("tiered_with_minimum")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun tieredWithMinimumConfig(): TieredWithMinimumConfig =
                tieredWithMinimumConfig.getRequired("tiered_with_minimum_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [tieredWithMinimumConfig].
             *
             * Unlike [tieredWithMinimumConfig], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("tiered_with_minimum_config")
            @ExcludeMissing
            fun _tieredWithMinimumConfig(): JsonField<TieredWithMinimumConfig> =
                tieredWithMinimumConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [TieredWithMinimum].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .tieredWithMinimumConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [TieredWithMinimum]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("tiered_with_minimum")
                private var name: JsonField<String>? = null
                private var tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(tieredWithMinimum: TieredWithMinimum) = apply {
                    cadence = tieredWithMinimum.cadence
                    currency = tieredWithMinimum.currency
                    itemId = tieredWithMinimum.itemId
                    modelType = tieredWithMinimum.modelType
                    name = tieredWithMinimum.name
                    tieredWithMinimumConfig = tieredWithMinimum.tieredWithMinimumConfig
                    billableMetricId = tieredWithMinimum.billableMetricId
                    billedInAdvance = tieredWithMinimum.billedInAdvance
                    billingCycleConfiguration = tieredWithMinimum.billingCycleConfiguration
                    conversionRate = tieredWithMinimum.conversionRate
                    externalPriceId = tieredWithMinimum.externalPriceId
                    fixedPriceQuantity = tieredWithMinimum.fixedPriceQuantity
                    invoiceGroupingKey = tieredWithMinimum.invoiceGroupingKey
                    invoicingCycleConfiguration = tieredWithMinimum.invoicingCycleConfiguration
                    metadata = tieredWithMinimum.metadata
                    additionalProperties = tieredWithMinimum.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("tiered_with_minimum")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun tieredWithMinimumConfig(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                    tieredWithMinimumConfig(JsonField.of(tieredWithMinimumConfig))

                /**
                 * Sets [Builder.tieredWithMinimumConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.tieredWithMinimumConfig] with a well-typed
                 * [TieredWithMinimumConfig] value instead. This method is primarily for setting the
                 * field to an undocumented or not yet supported value.
                 */
                fun tieredWithMinimumConfig(
                    tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>
                ) = apply { this.tieredWithMinimumConfig = tieredWithMinimumConfig }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [TieredWithMinimum].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .tieredWithMinimumConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): TieredWithMinimum =
                    TieredWithMinimum(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired("tieredWithMinimumConfig", tieredWithMinimumConfig),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): TieredWithMinimum = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("tiered_with_minimum")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                tieredWithMinimumConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("tiered_with_minimum")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (tieredWithMinimumConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class TieredWithMinimumConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [TieredWithMinimumConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [TieredWithMinimumConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(tieredWithMinimumConfig: TieredWithMinimumConfig) = apply {
                        additionalProperties =
                            tieredWithMinimumConfig.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [TieredWithMinimumConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): TieredWithMinimumConfig =
                        TieredWithMinimumConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): TieredWithMinimumConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is TieredWithMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "TieredWithMinimumConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is TieredWithMinimum && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithMinimumConfig == other.tieredWithMinimumConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredWithMinimumConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "TieredWithMinimum{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredWithMinimumConfig=$tieredWithMinimumConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class PackageWithAllocation
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val packageWithAllocationConfig: JsonField<PackageWithAllocationConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("package_with_allocation_config")
                @ExcludeMissing
                packageWithAllocationConfig: JsonField<PackageWithAllocationConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                packageWithAllocationConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("package_with_allocation")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun packageWithAllocationConfig(): PackageWithAllocationConfig =
                packageWithAllocationConfig.getRequired("package_with_allocation_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [packageWithAllocationConfig].
             *
             * Unlike [packageWithAllocationConfig], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("package_with_allocation_config")
            @ExcludeMissing
            fun _packageWithAllocationConfig(): JsonField<PackageWithAllocationConfig> =
                packageWithAllocationConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [PackageWithAllocation].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .packageWithAllocationConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [PackageWithAllocation]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("package_with_allocation")
                private var name: JsonField<String>? = null
                private var packageWithAllocationConfig: JsonField<PackageWithAllocationConfig>? =
                    null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(packageWithAllocation: PackageWithAllocation) = apply {
                    cadence = packageWithAllocation.cadence
                    currency = packageWithAllocation.currency
                    itemId = packageWithAllocation.itemId
                    modelType = packageWithAllocation.modelType
                    name = packageWithAllocation.name
                    packageWithAllocationConfig = packageWithAllocation.packageWithAllocationConfig
                    billableMetricId = packageWithAllocation.billableMetricId
                    billedInAdvance = packageWithAllocation.billedInAdvance
                    billingCycleConfiguration = packageWithAllocation.billingCycleConfiguration
                    conversionRate = packageWithAllocation.conversionRate
                    externalPriceId = packageWithAllocation.externalPriceId
                    fixedPriceQuantity = packageWithAllocation.fixedPriceQuantity
                    invoiceGroupingKey = packageWithAllocation.invoiceGroupingKey
                    invoicingCycleConfiguration = packageWithAllocation.invoicingCycleConfiguration
                    metadata = packageWithAllocation.metadata
                    additionalProperties = packageWithAllocation.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("package_with_allocation")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun packageWithAllocationConfig(
                    packageWithAllocationConfig: PackageWithAllocationConfig
                ) = packageWithAllocationConfig(JsonField.of(packageWithAllocationConfig))

                /**
                 * Sets [Builder.packageWithAllocationConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.packageWithAllocationConfig] with a well-typed
                 * [PackageWithAllocationConfig] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun packageWithAllocationConfig(
                    packageWithAllocationConfig: JsonField<PackageWithAllocationConfig>
                ) = apply { this.packageWithAllocationConfig = packageWithAllocationConfig }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [PackageWithAllocation].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .packageWithAllocationConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): PackageWithAllocation =
                    PackageWithAllocation(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired("packageWithAllocationConfig", packageWithAllocationConfig),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): PackageWithAllocation = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("package_with_allocation")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                packageWithAllocationConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let {
                        if (it == JsonValue.from("package_with_allocation")) 1 else 0
                    } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (packageWithAllocationConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class PackageWithAllocationConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [PackageWithAllocationConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [PackageWithAllocationConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(packageWithAllocationConfig: PackageWithAllocationConfig) =
                        apply {
                            additionalProperties =
                                packageWithAllocationConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [PackageWithAllocationConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): PackageWithAllocationConfig =
                        PackageWithAllocationConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): PackageWithAllocationConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is PackageWithAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "PackageWithAllocationConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is PackageWithAllocation && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && packageWithAllocationConfig == other.packageWithAllocationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, packageWithAllocationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "PackageWithAllocation{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, packageWithAllocationConfig=$packageWithAllocationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class TieredPackageWithMinimum
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val tieredPackageWithMinimumConfig: JsonField<TieredPackageWithMinimumConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_package_with_minimum_config")
                @ExcludeMissing
                tieredPackageWithMinimumConfig: JsonField<TieredPackageWithMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                tieredPackageWithMinimumConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("tiered_package_with_minimum")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun tieredPackageWithMinimumConfig(): TieredPackageWithMinimumConfig =
                tieredPackageWithMinimumConfig.getRequired("tiered_package_with_minimum_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [tieredPackageWithMinimumConfig].
             *
             * Unlike [tieredPackageWithMinimumConfig], this method doesn't throw if the JSON field
             * has an unexpected type.
             */
            @JsonProperty("tiered_package_with_minimum_config")
            @ExcludeMissing
            fun _tieredPackageWithMinimumConfig(): JsonField<TieredPackageWithMinimumConfig> =
                tieredPackageWithMinimumConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [TieredPackageWithMinimum].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .tieredPackageWithMinimumConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [TieredPackageWithMinimum]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("tiered_package_with_minimum")
                private var name: JsonField<String>? = null
                private var tieredPackageWithMinimumConfig:
                    JsonField<TieredPackageWithMinimumConfig>? =
                    null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(tieredPackageWithMinimum: TieredPackageWithMinimum) = apply {
                    cadence = tieredPackageWithMinimum.cadence
                    currency = tieredPackageWithMinimum.currency
                    itemId = tieredPackageWithMinimum.itemId
                    modelType = tieredPackageWithMinimum.modelType
                    name = tieredPackageWithMinimum.name
                    tieredPackageWithMinimumConfig =
                        tieredPackageWithMinimum.tieredPackageWithMinimumConfig
                    billableMetricId = tieredPackageWithMinimum.billableMetricId
                    billedInAdvance = tieredPackageWithMinimum.billedInAdvance
                    billingCycleConfiguration = tieredPackageWithMinimum.billingCycleConfiguration
                    conversionRate = tieredPackageWithMinimum.conversionRate
                    externalPriceId = tieredPackageWithMinimum.externalPriceId
                    fixedPriceQuantity = tieredPackageWithMinimum.fixedPriceQuantity
                    invoiceGroupingKey = tieredPackageWithMinimum.invoiceGroupingKey
                    invoicingCycleConfiguration =
                        tieredPackageWithMinimum.invoicingCycleConfiguration
                    metadata = tieredPackageWithMinimum.metadata
                    additionalProperties =
                        tieredPackageWithMinimum.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("tiered_package_with_minimum")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun tieredPackageWithMinimumConfig(
                    tieredPackageWithMinimumConfig: TieredPackageWithMinimumConfig
                ) = tieredPackageWithMinimumConfig(JsonField.of(tieredPackageWithMinimumConfig))

                /**
                 * Sets [Builder.tieredPackageWithMinimumConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.tieredPackageWithMinimumConfig] with a
                 * well-typed [TieredPackageWithMinimumConfig] value instead. This method is
                 * primarily for setting the field to an undocumented or not yet supported value.
                 */
                fun tieredPackageWithMinimumConfig(
                    tieredPackageWithMinimumConfig: JsonField<TieredPackageWithMinimumConfig>
                ) = apply { this.tieredPackageWithMinimumConfig = tieredPackageWithMinimumConfig }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [TieredPackageWithMinimum].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .tieredPackageWithMinimumConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): TieredPackageWithMinimum =
                    TieredPackageWithMinimum(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired(
                            "tieredPackageWithMinimumConfig",
                            tieredPackageWithMinimumConfig,
                        ),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): TieredPackageWithMinimum = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("tiered_package_with_minimum")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                tieredPackageWithMinimumConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let {
                        if (it == JsonValue.from("tiered_package_with_minimum")) 1 else 0
                    } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (tieredPackageWithMinimumConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class TieredPackageWithMinimumConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [TieredPackageWithMinimumConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [TieredPackageWithMinimumConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        tieredPackageWithMinimumConfig: TieredPackageWithMinimumConfig
                    ) = apply {
                        additionalProperties =
                            tieredPackageWithMinimumConfig.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [TieredPackageWithMinimumConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): TieredPackageWithMinimumConfig =
                        TieredPackageWithMinimumConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): TieredPackageWithMinimumConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is TieredPackageWithMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "TieredPackageWithMinimumConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is TieredPackageWithMinimum && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredPackageWithMinimumConfig == other.tieredPackageWithMinimumConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredPackageWithMinimumConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "TieredPackageWithMinimum{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredPackageWithMinimumConfig=$tieredPackageWithMinimumConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class UnitWithPercent
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val unitWithPercentConfig: JsonField<UnitWithPercentConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_with_percent_config")
                @ExcludeMissing
                unitWithPercentConfig: JsonField<UnitWithPercentConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                unitWithPercentConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("unit_with_percent")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun unitWithPercentConfig(): UnitWithPercentConfig =
                unitWithPercentConfig.getRequired("unit_with_percent_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [unitWithPercentConfig].
             *
             * Unlike [unitWithPercentConfig], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("unit_with_percent_config")
            @ExcludeMissing
            fun _unitWithPercentConfig(): JsonField<UnitWithPercentConfig> = unitWithPercentConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [UnitWithPercent].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .unitWithPercentConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [UnitWithPercent]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("unit_with_percent")
                private var name: JsonField<String>? = null
                private var unitWithPercentConfig: JsonField<UnitWithPercentConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(unitWithPercent: UnitWithPercent) = apply {
                    cadence = unitWithPercent.cadence
                    currency = unitWithPercent.currency
                    itemId = unitWithPercent.itemId
                    modelType = unitWithPercent.modelType
                    name = unitWithPercent.name
                    unitWithPercentConfig = unitWithPercent.unitWithPercentConfig
                    billableMetricId = unitWithPercent.billableMetricId
                    billedInAdvance = unitWithPercent.billedInAdvance
                    billingCycleConfiguration = unitWithPercent.billingCycleConfiguration
                    conversionRate = unitWithPercent.conversionRate
                    externalPriceId = unitWithPercent.externalPriceId
                    fixedPriceQuantity = unitWithPercent.fixedPriceQuantity
                    invoiceGroupingKey = unitWithPercent.invoiceGroupingKey
                    invoicingCycleConfiguration = unitWithPercent.invoicingCycleConfiguration
                    metadata = unitWithPercent.metadata
                    additionalProperties = unitWithPercent.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("unit_with_percent")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun unitWithPercentConfig(unitWithPercentConfig: UnitWithPercentConfig) =
                    unitWithPercentConfig(JsonField.of(unitWithPercentConfig))

                /**
                 * Sets [Builder.unitWithPercentConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.unitWithPercentConfig] with a well-typed
                 * [UnitWithPercentConfig] value instead. This method is primarily for setting the
                 * field to an undocumented or not yet supported value.
                 */
                fun unitWithPercentConfig(unitWithPercentConfig: JsonField<UnitWithPercentConfig>) =
                    apply {
                        this.unitWithPercentConfig = unitWithPercentConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [UnitWithPercent].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .unitWithPercentConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): UnitWithPercent =
                    UnitWithPercent(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired("unitWithPercentConfig", unitWithPercentConfig),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): UnitWithPercent = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("unit_with_percent")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                unitWithPercentConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("unit_with_percent")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (unitWithPercentConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class UnitWithPercentConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [UnitWithPercentConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [UnitWithPercentConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(unitWithPercentConfig: UnitWithPercentConfig) = apply {
                        additionalProperties =
                            unitWithPercentConfig.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [UnitWithPercentConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): UnitWithPercentConfig =
                        UnitWithPercentConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): UnitWithPercentConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is UnitWithPercentConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "UnitWithPercentConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is UnitWithPercent && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithPercentConfig == other.unitWithPercentConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, unitWithPercentConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "UnitWithPercent{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, unitWithPercentConfig=$unitWithPercentConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class TieredWithProration
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val tieredWithProrationConfig: JsonField<TieredWithProrationConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_with_proration_config")
                @ExcludeMissing
                tieredWithProrationConfig: JsonField<TieredWithProrationConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                tieredWithProrationConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("tiered_with_proration")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun tieredWithProrationConfig(): TieredWithProrationConfig =
                tieredWithProrationConfig.getRequired("tiered_with_proration_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [tieredWithProrationConfig].
             *
             * Unlike [tieredWithProrationConfig], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("tiered_with_proration_config")
            @ExcludeMissing
            fun _tieredWithProrationConfig(): JsonField<TieredWithProrationConfig> =
                tieredWithProrationConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [TieredWithProration].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .tieredWithProrationConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [TieredWithProration]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("tiered_with_proration")
                private var name: JsonField<String>? = null
                private var tieredWithProrationConfig: JsonField<TieredWithProrationConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(tieredWithProration: TieredWithProration) = apply {
                    cadence = tieredWithProration.cadence
                    currency = tieredWithProration.currency
                    itemId = tieredWithProration.itemId
                    modelType = tieredWithProration.modelType
                    name = tieredWithProration.name
                    tieredWithProrationConfig = tieredWithProration.tieredWithProrationConfig
                    billableMetricId = tieredWithProration.billableMetricId
                    billedInAdvance = tieredWithProration.billedInAdvance
                    billingCycleConfiguration = tieredWithProration.billingCycleConfiguration
                    conversionRate = tieredWithProration.conversionRate
                    externalPriceId = tieredWithProration.externalPriceId
                    fixedPriceQuantity = tieredWithProration.fixedPriceQuantity
                    invoiceGroupingKey = tieredWithProration.invoiceGroupingKey
                    invoicingCycleConfiguration = tieredWithProration.invoicingCycleConfiguration
                    metadata = tieredWithProration.metadata
                    additionalProperties = tieredWithProration.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("tiered_with_proration")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun tieredWithProrationConfig(
                    tieredWithProrationConfig: TieredWithProrationConfig
                ) = tieredWithProrationConfig(JsonField.of(tieredWithProrationConfig))

                /**
                 * Sets [Builder.tieredWithProrationConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.tieredWithProrationConfig] with a well-typed
                 * [TieredWithProrationConfig] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun tieredWithProrationConfig(
                    tieredWithProrationConfig: JsonField<TieredWithProrationConfig>
                ) = apply { this.tieredWithProrationConfig = tieredWithProrationConfig }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [TieredWithProration].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .tieredWithProrationConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): TieredWithProration =
                    TieredWithProration(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired("tieredWithProrationConfig", tieredWithProrationConfig),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): TieredWithProration = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("tiered_with_proration")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                tieredWithProrationConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("tiered_with_proration")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (tieredWithProrationConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class TieredWithProrationConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [TieredWithProrationConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [TieredWithProrationConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(tieredWithProrationConfig: TieredWithProrationConfig) =
                        apply {
                            additionalProperties =
                                tieredWithProrationConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [TieredWithProrationConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): TieredWithProrationConfig =
                        TieredWithProrationConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): TieredWithProrationConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is TieredWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "TieredWithProrationConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is TieredWithProration && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithProrationConfig == other.tieredWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "TieredWithProration{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredWithProrationConfig=$tieredWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class UnitWithProration
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val unitWithProrationConfig: JsonField<UnitWithProrationConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_with_proration_config")
                @ExcludeMissing
                unitWithProrationConfig: JsonField<UnitWithProrationConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                unitWithProrationConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("unit_with_proration")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun unitWithProrationConfig(): UnitWithProrationConfig =
                unitWithProrationConfig.getRequired("unit_with_proration_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [unitWithProrationConfig].
             *
             * Unlike [unitWithProrationConfig], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("unit_with_proration_config")
            @ExcludeMissing
            fun _unitWithProrationConfig(): JsonField<UnitWithProrationConfig> =
                unitWithProrationConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [UnitWithProration].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .unitWithProrationConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [UnitWithProration]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("unit_with_proration")
                private var name: JsonField<String>? = null
                private var unitWithProrationConfig: JsonField<UnitWithProrationConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(unitWithProration: UnitWithProration) = apply {
                    cadence = unitWithProration.cadence
                    currency = unitWithProration.currency
                    itemId = unitWithProration.itemId
                    modelType = unitWithProration.modelType
                    name = unitWithProration.name
                    unitWithProrationConfig = unitWithProration.unitWithProrationConfig
                    billableMetricId = unitWithProration.billableMetricId
                    billedInAdvance = unitWithProration.billedInAdvance
                    billingCycleConfiguration = unitWithProration.billingCycleConfiguration
                    conversionRate = unitWithProration.conversionRate
                    externalPriceId = unitWithProration.externalPriceId
                    fixedPriceQuantity = unitWithProration.fixedPriceQuantity
                    invoiceGroupingKey = unitWithProration.invoiceGroupingKey
                    invoicingCycleConfiguration = unitWithProration.invoicingCycleConfiguration
                    metadata = unitWithProration.metadata
                    additionalProperties = unitWithProration.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("unit_with_proration")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun unitWithProrationConfig(unitWithProrationConfig: UnitWithProrationConfig) =
                    unitWithProrationConfig(JsonField.of(unitWithProrationConfig))

                /**
                 * Sets [Builder.unitWithProrationConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.unitWithProrationConfig] with a well-typed
                 * [UnitWithProrationConfig] value instead. This method is primarily for setting the
                 * field to an undocumented or not yet supported value.
                 */
                fun unitWithProrationConfig(
                    unitWithProrationConfig: JsonField<UnitWithProrationConfig>
                ) = apply { this.unitWithProrationConfig = unitWithProrationConfig }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [UnitWithProration].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .unitWithProrationConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): UnitWithProration =
                    UnitWithProration(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired("unitWithProrationConfig", unitWithProrationConfig),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): UnitWithProration = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("unit_with_proration")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                unitWithProrationConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("unit_with_proration")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (unitWithProrationConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class UnitWithProrationConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [UnitWithProrationConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [UnitWithProrationConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(unitWithProrationConfig: UnitWithProrationConfig) = apply {
                        additionalProperties =
                            unitWithProrationConfig.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [UnitWithProrationConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): UnitWithProrationConfig =
                        UnitWithProrationConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): UnitWithProrationConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is UnitWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "UnitWithProrationConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is UnitWithProration && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithProrationConfig == other.unitWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, unitWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "UnitWithProration{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, unitWithProrationConfig=$unitWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class GroupedAllocation
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val groupedAllocationConfig: JsonField<GroupedAllocationConfig>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_allocation_config")
                @ExcludeMissing
                groupedAllocationConfig: JsonField<GroupedAllocationConfig> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                groupedAllocationConfig,
                itemId,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun groupedAllocationConfig(): GroupedAllocationConfig =
                groupedAllocationConfig.getRequired("grouped_allocation_config")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("grouped_allocation")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [groupedAllocationConfig].
             *
             * Unlike [groupedAllocationConfig], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("grouped_allocation_config")
            @ExcludeMissing
            fun _groupedAllocationConfig(): JsonField<GroupedAllocationConfig> =
                groupedAllocationConfig

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [GroupedAllocation].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .groupedAllocationConfig()
                 * .itemId()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [GroupedAllocation]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var groupedAllocationConfig: JsonField<GroupedAllocationConfig>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("grouped_allocation")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(groupedAllocation: GroupedAllocation) = apply {
                    cadence = groupedAllocation.cadence
                    currency = groupedAllocation.currency
                    groupedAllocationConfig = groupedAllocation.groupedAllocationConfig
                    itemId = groupedAllocation.itemId
                    modelType = groupedAllocation.modelType
                    name = groupedAllocation.name
                    billableMetricId = groupedAllocation.billableMetricId
                    billedInAdvance = groupedAllocation.billedInAdvance
                    billingCycleConfiguration = groupedAllocation.billingCycleConfiguration
                    conversionRate = groupedAllocation.conversionRate
                    externalPriceId = groupedAllocation.externalPriceId
                    fixedPriceQuantity = groupedAllocation.fixedPriceQuantity
                    invoiceGroupingKey = groupedAllocation.invoiceGroupingKey
                    invoicingCycleConfiguration = groupedAllocation.invoicingCycleConfiguration
                    metadata = groupedAllocation.metadata
                    additionalProperties = groupedAllocation.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                fun groupedAllocationConfig(groupedAllocationConfig: GroupedAllocationConfig) =
                    groupedAllocationConfig(JsonField.of(groupedAllocationConfig))

                /**
                 * Sets [Builder.groupedAllocationConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.groupedAllocationConfig] with a well-typed
                 * [GroupedAllocationConfig] value instead. This method is primarily for setting the
                 * field to an undocumented or not yet supported value.
                 */
                fun groupedAllocationConfig(
                    groupedAllocationConfig: JsonField<GroupedAllocationConfig>
                ) = apply { this.groupedAllocationConfig = groupedAllocationConfig }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("grouped_allocation")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [GroupedAllocation].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .groupedAllocationConfig()
                 * .itemId()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): GroupedAllocation =
                    GroupedAllocation(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("groupedAllocationConfig", groupedAllocationConfig),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): GroupedAllocation = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                groupedAllocationConfig().validate()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("grouped_allocation")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (groupedAllocationConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("grouped_allocation")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class GroupedAllocationConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [GroupedAllocationConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [GroupedAllocationConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(groupedAllocationConfig: GroupedAllocationConfig) = apply {
                        additionalProperties =
                            groupedAllocationConfig.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [GroupedAllocationConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): GroupedAllocationConfig =
                        GroupedAllocationConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): GroupedAllocationConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is GroupedAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "GroupedAllocationConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is GroupedAllocation && cadence == other.cadence && currency == other.currency && groupedAllocationConfig == other.groupedAllocationConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedAllocationConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "GroupedAllocation{cadence=$cadence, currency=$currency, groupedAllocationConfig=$groupedAllocationConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class GroupedWithProratedMinimum
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val groupedWithProratedMinimumConfig:
                JsonField<GroupedWithProratedMinimumConfig>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_with_prorated_minimum_config")
                @ExcludeMissing
                groupedWithProratedMinimumConfig: JsonField<GroupedWithProratedMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                groupedWithProratedMinimumConfig,
                itemId,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun groupedWithProratedMinimumConfig(): GroupedWithProratedMinimumConfig =
                groupedWithProratedMinimumConfig.getRequired("grouped_with_prorated_minimum_config")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("grouped_with_prorated_minimum")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [groupedWithProratedMinimumConfig].
             *
             * Unlike [groupedWithProratedMinimumConfig], this method doesn't throw if the JSON
             * field has an unexpected type.
             */
            @JsonProperty("grouped_with_prorated_minimum_config")
            @ExcludeMissing
            fun _groupedWithProratedMinimumConfig(): JsonField<GroupedWithProratedMinimumConfig> =
                groupedWithProratedMinimumConfig

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [GroupedWithProratedMinimum].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .groupedWithProratedMinimumConfig()
                 * .itemId()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [GroupedWithProratedMinimum]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var groupedWithProratedMinimumConfig:
                    JsonField<GroupedWithProratedMinimumConfig>? =
                    null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("grouped_with_prorated_minimum")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(groupedWithProratedMinimum: GroupedWithProratedMinimum) = apply {
                    cadence = groupedWithProratedMinimum.cadence
                    currency = groupedWithProratedMinimum.currency
                    groupedWithProratedMinimumConfig =
                        groupedWithProratedMinimum.groupedWithProratedMinimumConfig
                    itemId = groupedWithProratedMinimum.itemId
                    modelType = groupedWithProratedMinimum.modelType
                    name = groupedWithProratedMinimum.name
                    billableMetricId = groupedWithProratedMinimum.billableMetricId
                    billedInAdvance = groupedWithProratedMinimum.billedInAdvance
                    billingCycleConfiguration = groupedWithProratedMinimum.billingCycleConfiguration
                    conversionRate = groupedWithProratedMinimum.conversionRate
                    externalPriceId = groupedWithProratedMinimum.externalPriceId
                    fixedPriceQuantity = groupedWithProratedMinimum.fixedPriceQuantity
                    invoiceGroupingKey = groupedWithProratedMinimum.invoiceGroupingKey
                    invoicingCycleConfiguration =
                        groupedWithProratedMinimum.invoicingCycleConfiguration
                    metadata = groupedWithProratedMinimum.metadata
                    additionalProperties =
                        groupedWithProratedMinimum.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                fun groupedWithProratedMinimumConfig(
                    groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                ) = groupedWithProratedMinimumConfig(JsonField.of(groupedWithProratedMinimumConfig))

                /**
                 * Sets [Builder.groupedWithProratedMinimumConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.groupedWithProratedMinimumConfig] with a
                 * well-typed [GroupedWithProratedMinimumConfig] value instead. This method is
                 * primarily for setting the field to an undocumented or not yet supported value.
                 */
                fun groupedWithProratedMinimumConfig(
                    groupedWithProratedMinimumConfig: JsonField<GroupedWithProratedMinimumConfig>
                ) = apply {
                    this.groupedWithProratedMinimumConfig = groupedWithProratedMinimumConfig
                }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("grouped_with_prorated_minimum")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [GroupedWithProratedMinimum].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .groupedWithProratedMinimumConfig()
                 * .itemId()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): GroupedWithProratedMinimum =
                    GroupedWithProratedMinimum(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired(
                            "groupedWithProratedMinimumConfig",
                            groupedWithProratedMinimumConfig,
                        ),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): GroupedWithProratedMinimum = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                groupedWithProratedMinimumConfig().validate()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("grouped_with_prorated_minimum")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (groupedWithProratedMinimumConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let {
                        if (it == JsonValue.from("grouped_with_prorated_minimum")) 1 else 0
                    } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class GroupedWithProratedMinimumConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [GroupedWithProratedMinimumConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [GroupedWithProratedMinimumConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                    ) = apply {
                        additionalProperties =
                            groupedWithProratedMinimumConfig.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [GroupedWithProratedMinimumConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): GroupedWithProratedMinimumConfig =
                        GroupedWithProratedMinimumConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): GroupedWithProratedMinimumConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is GroupedWithProratedMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "GroupedWithProratedMinimumConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is GroupedWithProratedMinimum && cadence == other.cadence && currency == other.currency && groupedWithProratedMinimumConfig == other.groupedWithProratedMinimumConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedWithProratedMinimumConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "GroupedWithProratedMinimum{cadence=$cadence, currency=$currency, groupedWithProratedMinimumConfig=$groupedWithProratedMinimumConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class GroupedWithMeteredMinimum
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val groupedWithMeteredMinimumConfig: JsonField<GroupedWithMeteredMinimumConfig>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_with_metered_minimum_config")
                @ExcludeMissing
                groupedWithMeteredMinimumConfig: JsonField<GroupedWithMeteredMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                groupedWithMeteredMinimumConfig,
                itemId,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun groupedWithMeteredMinimumConfig(): GroupedWithMeteredMinimumConfig =
                groupedWithMeteredMinimumConfig.getRequired("grouped_with_metered_minimum_config")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("grouped_with_metered_minimum")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [groupedWithMeteredMinimumConfig].
             *
             * Unlike [groupedWithMeteredMinimumConfig], this method doesn't throw if the JSON field
             * has an unexpected type.
             */
            @JsonProperty("grouped_with_metered_minimum_config")
            @ExcludeMissing
            fun _groupedWithMeteredMinimumConfig(): JsonField<GroupedWithMeteredMinimumConfig> =
                groupedWithMeteredMinimumConfig

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [GroupedWithMeteredMinimum].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .groupedWithMeteredMinimumConfig()
                 * .itemId()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [GroupedWithMeteredMinimum]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var groupedWithMeteredMinimumConfig:
                    JsonField<GroupedWithMeteredMinimumConfig>? =
                    null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("grouped_with_metered_minimum")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(groupedWithMeteredMinimum: GroupedWithMeteredMinimum) = apply {
                    cadence = groupedWithMeteredMinimum.cadence
                    currency = groupedWithMeteredMinimum.currency
                    groupedWithMeteredMinimumConfig =
                        groupedWithMeteredMinimum.groupedWithMeteredMinimumConfig
                    itemId = groupedWithMeteredMinimum.itemId
                    modelType = groupedWithMeteredMinimum.modelType
                    name = groupedWithMeteredMinimum.name
                    billableMetricId = groupedWithMeteredMinimum.billableMetricId
                    billedInAdvance = groupedWithMeteredMinimum.billedInAdvance
                    billingCycleConfiguration = groupedWithMeteredMinimum.billingCycleConfiguration
                    conversionRate = groupedWithMeteredMinimum.conversionRate
                    externalPriceId = groupedWithMeteredMinimum.externalPriceId
                    fixedPriceQuantity = groupedWithMeteredMinimum.fixedPriceQuantity
                    invoiceGroupingKey = groupedWithMeteredMinimum.invoiceGroupingKey
                    invoicingCycleConfiguration =
                        groupedWithMeteredMinimum.invoicingCycleConfiguration
                    metadata = groupedWithMeteredMinimum.metadata
                    additionalProperties =
                        groupedWithMeteredMinimum.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                fun groupedWithMeteredMinimumConfig(
                    groupedWithMeteredMinimumConfig: GroupedWithMeteredMinimumConfig
                ) = groupedWithMeteredMinimumConfig(JsonField.of(groupedWithMeteredMinimumConfig))

                /**
                 * Sets [Builder.groupedWithMeteredMinimumConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.groupedWithMeteredMinimumConfig] with a
                 * well-typed [GroupedWithMeteredMinimumConfig] value instead. This method is
                 * primarily for setting the field to an undocumented or not yet supported value.
                 */
                fun groupedWithMeteredMinimumConfig(
                    groupedWithMeteredMinimumConfig: JsonField<GroupedWithMeteredMinimumConfig>
                ) = apply { this.groupedWithMeteredMinimumConfig = groupedWithMeteredMinimumConfig }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("grouped_with_metered_minimum")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [GroupedWithMeteredMinimum].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .groupedWithMeteredMinimumConfig()
                 * .itemId()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): GroupedWithMeteredMinimum =
                    GroupedWithMeteredMinimum(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired(
                            "groupedWithMeteredMinimumConfig",
                            groupedWithMeteredMinimumConfig,
                        ),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): GroupedWithMeteredMinimum = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                groupedWithMeteredMinimumConfig().validate()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("grouped_with_metered_minimum")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (groupedWithMeteredMinimumConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let {
                        if (it == JsonValue.from("grouped_with_metered_minimum")) 1 else 0
                    } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class GroupedWithMeteredMinimumConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [GroupedWithMeteredMinimumConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [GroupedWithMeteredMinimumConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        groupedWithMeteredMinimumConfig: GroupedWithMeteredMinimumConfig
                    ) = apply {
                        additionalProperties =
                            groupedWithMeteredMinimumConfig.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [GroupedWithMeteredMinimumConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): GroupedWithMeteredMinimumConfig =
                        GroupedWithMeteredMinimumConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): GroupedWithMeteredMinimumConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is GroupedWithMeteredMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "GroupedWithMeteredMinimumConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is GroupedWithMeteredMinimum && cadence == other.cadence && currency == other.currency && groupedWithMeteredMinimumConfig == other.groupedWithMeteredMinimumConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedWithMeteredMinimumConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "GroupedWithMeteredMinimum{cadence=$cadence, currency=$currency, groupedWithMeteredMinimumConfig=$groupedWithMeteredMinimumConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class MatrixWithDisplayName
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val matrixWithDisplayNameConfig: JsonField<MatrixWithDisplayNameConfig>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("matrix_with_display_name_config")
                @ExcludeMissing
                matrixWithDisplayNameConfig: JsonField<MatrixWithDisplayNameConfig> =
                    JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                matrixWithDisplayNameConfig,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun matrixWithDisplayNameConfig(): MatrixWithDisplayNameConfig =
                matrixWithDisplayNameConfig.getRequired("matrix_with_display_name_config")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("matrix_with_display_name")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [matrixWithDisplayNameConfig].
             *
             * Unlike [matrixWithDisplayNameConfig], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("matrix_with_display_name_config")
            @ExcludeMissing
            fun _matrixWithDisplayNameConfig(): JsonField<MatrixWithDisplayNameConfig> =
                matrixWithDisplayNameConfig

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [MatrixWithDisplayName].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .matrixWithDisplayNameConfig()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [MatrixWithDisplayName]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var matrixWithDisplayNameConfig: JsonField<MatrixWithDisplayNameConfig>? =
                    null
                private var modelType: JsonValue = JsonValue.from("matrix_with_display_name")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(matrixWithDisplayName: MatrixWithDisplayName) = apply {
                    cadence = matrixWithDisplayName.cadence
                    currency = matrixWithDisplayName.currency
                    itemId = matrixWithDisplayName.itemId
                    matrixWithDisplayNameConfig = matrixWithDisplayName.matrixWithDisplayNameConfig
                    modelType = matrixWithDisplayName.modelType
                    name = matrixWithDisplayName.name
                    billableMetricId = matrixWithDisplayName.billableMetricId
                    billedInAdvance = matrixWithDisplayName.billedInAdvance
                    billingCycleConfiguration = matrixWithDisplayName.billingCycleConfiguration
                    conversionRate = matrixWithDisplayName.conversionRate
                    externalPriceId = matrixWithDisplayName.externalPriceId
                    fixedPriceQuantity = matrixWithDisplayName.fixedPriceQuantity
                    invoiceGroupingKey = matrixWithDisplayName.invoiceGroupingKey
                    invoicingCycleConfiguration = matrixWithDisplayName.invoicingCycleConfiguration
                    metadata = matrixWithDisplayName.metadata
                    additionalProperties = matrixWithDisplayName.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                fun matrixWithDisplayNameConfig(
                    matrixWithDisplayNameConfig: MatrixWithDisplayNameConfig
                ) = matrixWithDisplayNameConfig(JsonField.of(matrixWithDisplayNameConfig))

                /**
                 * Sets [Builder.matrixWithDisplayNameConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.matrixWithDisplayNameConfig] with a well-typed
                 * [MatrixWithDisplayNameConfig] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun matrixWithDisplayNameConfig(
                    matrixWithDisplayNameConfig: JsonField<MatrixWithDisplayNameConfig>
                ) = apply { this.matrixWithDisplayNameConfig = matrixWithDisplayNameConfig }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("matrix_with_display_name")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [MatrixWithDisplayName].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .matrixWithDisplayNameConfig()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): MatrixWithDisplayName =
                    MatrixWithDisplayName(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        checkRequired("matrixWithDisplayNameConfig", matrixWithDisplayNameConfig),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): MatrixWithDisplayName = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                matrixWithDisplayNameConfig().validate()
                _modelType().let {
                    if (it != JsonValue.from("matrix_with_display_name")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    (matrixWithDisplayNameConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    modelType.let {
                        if (it == JsonValue.from("matrix_with_display_name")) 1 else 0
                    } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class MatrixWithDisplayNameConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [MatrixWithDisplayNameConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [MatrixWithDisplayNameConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(matrixWithDisplayNameConfig: MatrixWithDisplayNameConfig) =
                        apply {
                            additionalProperties =
                                matrixWithDisplayNameConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [MatrixWithDisplayNameConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): MatrixWithDisplayNameConfig =
                        MatrixWithDisplayNameConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): MatrixWithDisplayNameConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is MatrixWithDisplayNameConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "MatrixWithDisplayNameConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is MatrixWithDisplayName && cadence == other.cadence && currency == other.currency && itemId == other.itemId && matrixWithDisplayNameConfig == other.matrixWithDisplayNameConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, matrixWithDisplayNameConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "MatrixWithDisplayName{cadence=$cadence, currency=$currency, itemId=$itemId, matrixWithDisplayNameConfig=$matrixWithDisplayNameConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class BulkWithProration
        private constructor(
            private val bulkWithProrationConfig: JsonField<BulkWithProrationConfig>,
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("bulk_with_proration_config")
                @ExcludeMissing
                bulkWithProrationConfig: JsonField<BulkWithProrationConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                bulkWithProrationConfig,
                cadence,
                currency,
                itemId,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun bulkWithProrationConfig(): BulkWithProrationConfig =
                bulkWithProrationConfig.getRequired("bulk_with_proration_config")

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("bulk_with_proration")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [bulkWithProrationConfig].
             *
             * Unlike [bulkWithProrationConfig], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("bulk_with_proration_config")
            @ExcludeMissing
            fun _bulkWithProrationConfig(): JsonField<BulkWithProrationConfig> =
                bulkWithProrationConfig

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [BulkWithProration].
                 *
                 * The following fields are required:
                 * ```java
                 * .bulkWithProrationConfig()
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [BulkWithProration]. */
            class Builder internal constructor() {

                private var bulkWithProrationConfig: JsonField<BulkWithProrationConfig>? = null
                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("bulk_with_proration")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(bulkWithProration: BulkWithProration) = apply {
                    bulkWithProrationConfig = bulkWithProration.bulkWithProrationConfig
                    cadence = bulkWithProration.cadence
                    currency = bulkWithProration.currency
                    itemId = bulkWithProration.itemId
                    modelType = bulkWithProration.modelType
                    name = bulkWithProration.name
                    billableMetricId = bulkWithProration.billableMetricId
                    billedInAdvance = bulkWithProration.billedInAdvance
                    billingCycleConfiguration = bulkWithProration.billingCycleConfiguration
                    conversionRate = bulkWithProration.conversionRate
                    externalPriceId = bulkWithProration.externalPriceId
                    fixedPriceQuantity = bulkWithProration.fixedPriceQuantity
                    invoiceGroupingKey = bulkWithProration.invoiceGroupingKey
                    invoicingCycleConfiguration = bulkWithProration.invoicingCycleConfiguration
                    metadata = bulkWithProration.metadata
                    additionalProperties = bulkWithProration.additionalProperties.toMutableMap()
                }

                fun bulkWithProrationConfig(bulkWithProrationConfig: BulkWithProrationConfig) =
                    bulkWithProrationConfig(JsonField.of(bulkWithProrationConfig))

                /**
                 * Sets [Builder.bulkWithProrationConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.bulkWithProrationConfig] with a well-typed
                 * [BulkWithProrationConfig] value instead. This method is primarily for setting the
                 * field to an undocumented or not yet supported value.
                 */
                fun bulkWithProrationConfig(
                    bulkWithProrationConfig: JsonField<BulkWithProrationConfig>
                ) = apply { this.bulkWithProrationConfig = bulkWithProrationConfig }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("bulk_with_proration")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [BulkWithProration].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .bulkWithProrationConfig()
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): BulkWithProration =
                    BulkWithProration(
                        checkRequired("bulkWithProrationConfig", bulkWithProrationConfig),
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): BulkWithProration = apply {
                if (validated) {
                    return@apply
                }

                bulkWithProrationConfig().validate()
                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("bulk_with_proration")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (bulkWithProrationConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("bulk_with_proration")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            class BulkWithProrationConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BulkWithProrationConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BulkWithProrationConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(bulkWithProrationConfig: BulkWithProrationConfig) = apply {
                        additionalProperties =
                            bulkWithProrationConfig.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BulkWithProrationConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): BulkWithProrationConfig =
                        BulkWithProrationConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): BulkWithProrationConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BulkWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BulkWithProrationConfig{additionalProperties=$additionalProperties}"
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is BulkWithProration && bulkWithProrationConfig == other.bulkWithProrationConfig && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(bulkWithProrationConfig, cadence, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "BulkWithProration{bulkWithProrationConfig=$bulkWithProrationConfig, cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class GroupedTieredPackage
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val groupedTieredPackageConfig: JsonField<GroupedTieredPackageConfig>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_tiered_package_config")
                @ExcludeMissing
                groupedTieredPackageConfig: JsonField<GroupedTieredPackageConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                groupedTieredPackageConfig,
                itemId,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun groupedTieredPackageConfig(): GroupedTieredPackageConfig =
                groupedTieredPackageConfig.getRequired("grouped_tiered_package_config")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("grouped_tiered_package")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [groupedTieredPackageConfig].
             *
             * Unlike [groupedTieredPackageConfig], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("grouped_tiered_package_config")
            @ExcludeMissing
            fun _groupedTieredPackageConfig(): JsonField<GroupedTieredPackageConfig> =
                groupedTieredPackageConfig

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [GroupedTieredPackage].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .groupedTieredPackageConfig()
                 * .itemId()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [GroupedTieredPackage]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var groupedTieredPackageConfig: JsonField<GroupedTieredPackageConfig>? =
                    null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("grouped_tiered_package")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(groupedTieredPackage: GroupedTieredPackage) = apply {
                    cadence = groupedTieredPackage.cadence
                    currency = groupedTieredPackage.currency
                    groupedTieredPackageConfig = groupedTieredPackage.groupedTieredPackageConfig
                    itemId = groupedTieredPackage.itemId
                    modelType = groupedTieredPackage.modelType
                    name = groupedTieredPackage.name
                    billableMetricId = groupedTieredPackage.billableMetricId
                    billedInAdvance = groupedTieredPackage.billedInAdvance
                    billingCycleConfiguration = groupedTieredPackage.billingCycleConfiguration
                    conversionRate = groupedTieredPackage.conversionRate
                    externalPriceId = groupedTieredPackage.externalPriceId
                    fixedPriceQuantity = groupedTieredPackage.fixedPriceQuantity
                    invoiceGroupingKey = groupedTieredPackage.invoiceGroupingKey
                    invoicingCycleConfiguration = groupedTieredPackage.invoicingCycleConfiguration
                    metadata = groupedTieredPackage.metadata
                    additionalProperties = groupedTieredPackage.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                fun groupedTieredPackageConfig(
                    groupedTieredPackageConfig: GroupedTieredPackageConfig
                ) = groupedTieredPackageConfig(JsonField.of(groupedTieredPackageConfig))

                /**
                 * Sets [Builder.groupedTieredPackageConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.groupedTieredPackageConfig] with a well-typed
                 * [GroupedTieredPackageConfig] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun groupedTieredPackageConfig(
                    groupedTieredPackageConfig: JsonField<GroupedTieredPackageConfig>
                ) = apply { this.groupedTieredPackageConfig = groupedTieredPackageConfig }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("grouped_tiered_package")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [GroupedTieredPackage].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .groupedTieredPackageConfig()
                 * .itemId()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): GroupedTieredPackage =
                    GroupedTieredPackage(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("groupedTieredPackageConfig", groupedTieredPackageConfig),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): GroupedTieredPackage = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                groupedTieredPackageConfig().validate()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("grouped_tiered_package")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (groupedTieredPackageConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let { if (it == JsonValue.from("grouped_tiered_package")) 1 else 0 } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class GroupedTieredPackageConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [GroupedTieredPackageConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [GroupedTieredPackageConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(groupedTieredPackageConfig: GroupedTieredPackageConfig) =
                        apply {
                            additionalProperties =
                                groupedTieredPackageConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [GroupedTieredPackageConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): GroupedTieredPackageConfig =
                        GroupedTieredPackageConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): GroupedTieredPackageConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is GroupedTieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "GroupedTieredPackageConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is GroupedTieredPackage && cadence == other.cadence && currency == other.currency && groupedTieredPackageConfig == other.groupedTieredPackageConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedTieredPackageConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "GroupedTieredPackage{cadence=$cadence, currency=$currency, groupedTieredPackageConfig=$groupedTieredPackageConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class ScalableMatrixWithUnitPricing
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val scalableMatrixWithUnitPricingConfig:
                JsonField<ScalableMatrixWithUnitPricingConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("scalable_matrix_with_unit_pricing_config")
                @ExcludeMissing
                scalableMatrixWithUnitPricingConfig:
                    JsonField<ScalableMatrixWithUnitPricingConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                scalableMatrixWithUnitPricingConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("scalable_matrix_with_unit_pricing")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun scalableMatrixWithUnitPricingConfig(): ScalableMatrixWithUnitPricingConfig =
                scalableMatrixWithUnitPricingConfig.getRequired(
                    "scalable_matrix_with_unit_pricing_config"
                )

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [scalableMatrixWithUnitPricingConfig].
             *
             * Unlike [scalableMatrixWithUnitPricingConfig], this method doesn't throw if the JSON
             * field has an unexpected type.
             */
            @JsonProperty("scalable_matrix_with_unit_pricing_config")
            @ExcludeMissing
            fun _scalableMatrixWithUnitPricingConfig():
                JsonField<ScalableMatrixWithUnitPricingConfig> = scalableMatrixWithUnitPricingConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [ScalableMatrixWithUnitPricing].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .scalableMatrixWithUnitPricingConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [ScalableMatrixWithUnitPricing]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue =
                    JsonValue.from("scalable_matrix_with_unit_pricing")
                private var name: JsonField<String>? = null
                private var scalableMatrixWithUnitPricingConfig:
                    JsonField<ScalableMatrixWithUnitPricingConfig>? =
                    null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(scalableMatrixWithUnitPricing: ScalableMatrixWithUnitPricing) =
                    apply {
                        cadence = scalableMatrixWithUnitPricing.cadence
                        currency = scalableMatrixWithUnitPricing.currency
                        itemId = scalableMatrixWithUnitPricing.itemId
                        modelType = scalableMatrixWithUnitPricing.modelType
                        name = scalableMatrixWithUnitPricing.name
                        scalableMatrixWithUnitPricingConfig =
                            scalableMatrixWithUnitPricing.scalableMatrixWithUnitPricingConfig
                        billableMetricId = scalableMatrixWithUnitPricing.billableMetricId
                        billedInAdvance = scalableMatrixWithUnitPricing.billedInAdvance
                        billingCycleConfiguration =
                            scalableMatrixWithUnitPricing.billingCycleConfiguration
                        conversionRate = scalableMatrixWithUnitPricing.conversionRate
                        externalPriceId = scalableMatrixWithUnitPricing.externalPriceId
                        fixedPriceQuantity = scalableMatrixWithUnitPricing.fixedPriceQuantity
                        invoiceGroupingKey = scalableMatrixWithUnitPricing.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            scalableMatrixWithUnitPricing.invoicingCycleConfiguration
                        metadata = scalableMatrixWithUnitPricing.metadata
                        additionalProperties =
                            scalableMatrixWithUnitPricing.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("scalable_matrix_with_unit_pricing")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun scalableMatrixWithUnitPricingConfig(
                    scalableMatrixWithUnitPricingConfig: ScalableMatrixWithUnitPricingConfig
                ) =
                    scalableMatrixWithUnitPricingConfig(
                        JsonField.of(scalableMatrixWithUnitPricingConfig)
                    )

                /**
                 * Sets [Builder.scalableMatrixWithUnitPricingConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.scalableMatrixWithUnitPricingConfig] with a
                 * well-typed [ScalableMatrixWithUnitPricingConfig] value instead. This method is
                 * primarily for setting the field to an undocumented or not yet supported value.
                 */
                fun scalableMatrixWithUnitPricingConfig(
                    scalableMatrixWithUnitPricingConfig:
                        JsonField<ScalableMatrixWithUnitPricingConfig>
                ) = apply {
                    this.scalableMatrixWithUnitPricingConfig = scalableMatrixWithUnitPricingConfig
                }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [ScalableMatrixWithUnitPricing].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .scalableMatrixWithUnitPricingConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): ScalableMatrixWithUnitPricing =
                    ScalableMatrixWithUnitPricing(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired(
                            "scalableMatrixWithUnitPricingConfig",
                            scalableMatrixWithUnitPricingConfig,
                        ),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): ScalableMatrixWithUnitPricing = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("scalable_matrix_with_unit_pricing")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                scalableMatrixWithUnitPricingConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let {
                        if (it == JsonValue.from("scalable_matrix_with_unit_pricing")) 1 else 0
                    } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (scalableMatrixWithUnitPricingConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ScalableMatrixWithUnitPricingConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [ScalableMatrixWithUnitPricingConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [ScalableMatrixWithUnitPricingConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        scalableMatrixWithUnitPricingConfig: ScalableMatrixWithUnitPricingConfig
                    ) = apply {
                        additionalProperties =
                            scalableMatrixWithUnitPricingConfig.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [ScalableMatrixWithUnitPricingConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): ScalableMatrixWithUnitPricingConfig =
                        ScalableMatrixWithUnitPricingConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): ScalableMatrixWithUnitPricingConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is ScalableMatrixWithUnitPricingConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "ScalableMatrixWithUnitPricingConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is ScalableMatrixWithUnitPricing && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && scalableMatrixWithUnitPricingConfig == other.scalableMatrixWithUnitPricingConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, scalableMatrixWithUnitPricingConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "ScalableMatrixWithUnitPricing{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, scalableMatrixWithUnitPricingConfig=$scalableMatrixWithUnitPricingConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class ScalableMatrixWithTieredPricing
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val scalableMatrixWithTieredPricingConfig:
                JsonField<ScalableMatrixWithTieredPricingConfig>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("scalable_matrix_with_tiered_pricing_config")
                @ExcludeMissing
                scalableMatrixWithTieredPricingConfig:
                    JsonField<ScalableMatrixWithTieredPricingConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                currency,
                itemId,
                modelType,
                name,
                scalableMatrixWithTieredPricingConfig,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("scalable_matrix_with_tiered_pricing")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun scalableMatrixWithTieredPricingConfig(): ScalableMatrixWithTieredPricingConfig =
                scalableMatrixWithTieredPricingConfig.getRequired(
                    "scalable_matrix_with_tiered_pricing_config"
                )

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [scalableMatrixWithTieredPricingConfig].
             *
             * Unlike [scalableMatrixWithTieredPricingConfig], this method doesn't throw if the JSON
             * field has an unexpected type.
             */
            @JsonProperty("scalable_matrix_with_tiered_pricing_config")
            @ExcludeMissing
            fun _scalableMatrixWithTieredPricingConfig():
                JsonField<ScalableMatrixWithTieredPricingConfig> =
                scalableMatrixWithTieredPricingConfig

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [ScalableMatrixWithTieredPricing].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .scalableMatrixWithTieredPricingConfig()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [ScalableMatrixWithTieredPricing]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue =
                    JsonValue.from("scalable_matrix_with_tiered_pricing")
                private var name: JsonField<String>? = null
                private var scalableMatrixWithTieredPricingConfig:
                    JsonField<ScalableMatrixWithTieredPricingConfig>? =
                    null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(
                    scalableMatrixWithTieredPricing: ScalableMatrixWithTieredPricing
                ) = apply {
                    cadence = scalableMatrixWithTieredPricing.cadence
                    currency = scalableMatrixWithTieredPricing.currency
                    itemId = scalableMatrixWithTieredPricing.itemId
                    modelType = scalableMatrixWithTieredPricing.modelType
                    name = scalableMatrixWithTieredPricing.name
                    scalableMatrixWithTieredPricingConfig =
                        scalableMatrixWithTieredPricing.scalableMatrixWithTieredPricingConfig
                    billableMetricId = scalableMatrixWithTieredPricing.billableMetricId
                    billedInAdvance = scalableMatrixWithTieredPricing.billedInAdvance
                    billingCycleConfiguration =
                        scalableMatrixWithTieredPricing.billingCycleConfiguration
                    conversionRate = scalableMatrixWithTieredPricing.conversionRate
                    externalPriceId = scalableMatrixWithTieredPricing.externalPriceId
                    fixedPriceQuantity = scalableMatrixWithTieredPricing.fixedPriceQuantity
                    invoiceGroupingKey = scalableMatrixWithTieredPricing.invoiceGroupingKey
                    invoicingCycleConfiguration =
                        scalableMatrixWithTieredPricing.invoicingCycleConfiguration
                    metadata = scalableMatrixWithTieredPricing.metadata
                    additionalProperties =
                        scalableMatrixWithTieredPricing.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("scalable_matrix_with_tiered_pricing")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                fun scalableMatrixWithTieredPricingConfig(
                    scalableMatrixWithTieredPricingConfig: ScalableMatrixWithTieredPricingConfig
                ) =
                    scalableMatrixWithTieredPricingConfig(
                        JsonField.of(scalableMatrixWithTieredPricingConfig)
                    )

                /**
                 * Sets [Builder.scalableMatrixWithTieredPricingConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.scalableMatrixWithTieredPricingConfig] with a
                 * well-typed [ScalableMatrixWithTieredPricingConfig] value instead. This method is
                 * primarily for setting the field to an undocumented or not yet supported value.
                 */
                fun scalableMatrixWithTieredPricingConfig(
                    scalableMatrixWithTieredPricingConfig:
                        JsonField<ScalableMatrixWithTieredPricingConfig>
                ) = apply {
                    this.scalableMatrixWithTieredPricingConfig =
                        scalableMatrixWithTieredPricingConfig
                }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [ScalableMatrixWithTieredPricing].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .currency()
                 * .itemId()
                 * .name()
                 * .scalableMatrixWithTieredPricingConfig()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): ScalableMatrixWithTieredPricing =
                    ScalableMatrixWithTieredPricing(
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        checkRequired(
                            "scalableMatrixWithTieredPricingConfig",
                            scalableMatrixWithTieredPricingConfig,
                        ),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): ScalableMatrixWithTieredPricing = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("scalable_matrix_with_tiered_pricing")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                scalableMatrixWithTieredPricingConfig().validate()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let {
                        if (it == JsonValue.from("scalable_matrix_with_tiered_pricing")) 1 else 0
                    } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (scalableMatrixWithTieredPricingConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ScalableMatrixWithTieredPricingConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [ScalableMatrixWithTieredPricingConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [ScalableMatrixWithTieredPricingConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        scalableMatrixWithTieredPricingConfig: ScalableMatrixWithTieredPricingConfig
                    ) = apply {
                        additionalProperties =
                            scalableMatrixWithTieredPricingConfig.additionalProperties
                                .toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [ScalableMatrixWithTieredPricingConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): ScalableMatrixWithTieredPricingConfig =
                        ScalableMatrixWithTieredPricingConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): ScalableMatrixWithTieredPricingConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is ScalableMatrixWithTieredPricingConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "ScalableMatrixWithTieredPricingConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is ScalableMatrixWithTieredPricing && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && scalableMatrixWithTieredPricingConfig == other.scalableMatrixWithTieredPricingConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, scalableMatrixWithTieredPricingConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "ScalableMatrixWithTieredPricing{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, scalableMatrixWithTieredPricingConfig=$scalableMatrixWithTieredPricingConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        class CumulativeGroupedBulk
        private constructor(
            private val cadence: JsonField<Cadence>,
            private val cumulativeGroupedBulkConfig: JsonField<CumulativeGroupedBulkConfig>,
            private val currency: JsonField<String>,
            private val itemId: JsonField<String>,
            private val modelType: JsonValue,
            private val name: JsonField<String>,
            private val billableMetricId: JsonField<String>,
            private val billedInAdvance: JsonField<Boolean>,
            private val billingCycleConfiguration: JsonField<BillingCycleConfiguration>,
            private val conversionRate: JsonField<Double>,
            private val externalPriceId: JsonField<String>,
            private val fixedPriceQuantity: JsonField<Double>,
            private val invoiceGroupingKey: JsonField<String>,
            private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>,
            private val metadata: JsonField<Metadata>,
            private val additionalProperties: MutableMap<String, JsonValue>,
        ) {

            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("cumulative_grouped_bulk_config")
                @ExcludeMissing
                cumulativeGroupedBulkConfig: JsonField<CumulativeGroupedBulkConfig> =
                    JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type") @ExcludeMissing modelType: JsonValue = JsonMissing.of(),
                @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                metadata: JsonField<Metadata> = JsonMissing.of(),
            ) : this(
                cadence,
                cumulativeGroupedBulkConfig,
                currency,
                itemId,
                modelType,
                name,
                billableMetricId,
                billedInAdvance,
                billingCycleConfiguration,
                conversionRate,
                externalPriceId,
                fixedPriceQuantity,
                invoiceGroupingKey,
                invoicingCycleConfiguration,
                metadata,
                mutableMapOf(),
            )

            /**
             * The cadence to bill for this price on.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cumulativeGroupedBulkConfig(): CumulativeGroupedBulkConfig =
                cumulativeGroupedBulkConfig.getRequired("cumulative_grouped_bulk_config")

            /**
             * An ISO 4217 currency string for which this price is billed in.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * The id of the item the price will be associated with.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun itemId(): String = itemId.getRequired("item_id")

            /**
             * Expected to always return the following:
             * ```java
             * JsonValue.from("cumulative_grouped_bulk")
             * ```
             *
             * However, this method can be useful for debugging and logging (e.g. if the server
             * responded with an unexpected value).
             */
            @JsonProperty("model_type") @ExcludeMissing fun _modelType(): JsonValue = modelType

            /**
             * The name of the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is usage-based.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billableMetricId(): Optional<String> =
                billableMetricId.getOptional("billable_metric_id")

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if this is
             * true, and in-arrears if this is false.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billedInAdvance(): Optional<Boolean> =
                billedInAdvance.getOptional("billed_in_advance")

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                billingCycleConfiguration.getOptional("billing_cycle_configuration")

            /**
             * The per unit conversion rate of the price currency to the invoicing currency.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun conversionRate(): Optional<Double> = conversionRate.getOptional("conversion_rate")

            /**
             * An alias for the price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun externalPriceId(): Optional<String> =
                externalPriceId.getOptional("external_price_id")

            /**
             * If the Price represents a fixed cost, this represents the quantity of units applied.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun fixedPriceQuantity(): Optional<Double> =
                fixedPriceQuantity.getOptional("fixed_price_quantity")

            /**
             * The property used to group this price on an invoice
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoiceGroupingKey(): Optional<String> =
                invoiceGroupingKey.getOptional("invoice_grouping_key")

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration.getOptional("invoicing_cycle_configuration")

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
             *   server responded with an unexpected value).
             */
            fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [cumulativeGroupedBulkConfig].
             *
             * Unlike [cumulativeGroupedBulkConfig], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("cumulative_grouped_bulk_config")
            @ExcludeMissing
            fun _cumulativeGroupedBulkConfig(): JsonField<CumulativeGroupedBulkConfig> =
                cumulativeGroupedBulkConfig

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [itemId].
             *
             * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

            /**
             * Returns the raw JSON value of [name].
             *
             * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

            /**
             * Returns the raw JSON value of [billableMetricId].
             *
             * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * Returns the raw JSON value of [billedInAdvance].
             *
             * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * Returns the raw JSON value of [billingCycleConfiguration].
             *
             * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                billingCycleConfiguration

            /**
             * Returns the raw JSON value of [conversionRate].
             *
             * Unlike [conversionRate], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * Returns the raw JSON value of [externalPriceId].
             *
             * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * Returns the raw JSON value of [fixedPriceQuantity].
             *
             * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /**
             * Returns the raw JSON value of [invoiceGroupingKey].
             *
             * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Returns the raw JSON value of [invoicingCycleConfiguration].
             *
             * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field has
             * an unexpected type.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                invoicingCycleConfiguration

            /**
             * Returns the raw JSON value of [metadata].
             *
             * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnySetter
            private fun putAdditionalProperty(key: String, value: JsonValue) {
                additionalProperties.put(key, value)
            }

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> =
                Collections.unmodifiableMap(additionalProperties)

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [CumulativeGroupedBulk].
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .cumulativeGroupedBulkConfig()
                 * .currency()
                 * .itemId()
                 * .name()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [CumulativeGroupedBulk]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var cumulativeGroupedBulkConfig: JsonField<CumulativeGroupedBulkConfig>? =
                    null
                private var currency: JsonField<String>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonValue = JsonValue.from("cumulative_grouped_bulk")
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(cumulativeGroupedBulk: CumulativeGroupedBulk) = apply {
                    cadence = cumulativeGroupedBulk.cadence
                    cumulativeGroupedBulkConfig = cumulativeGroupedBulk.cumulativeGroupedBulkConfig
                    currency = cumulativeGroupedBulk.currency
                    itemId = cumulativeGroupedBulk.itemId
                    modelType = cumulativeGroupedBulk.modelType
                    name = cumulativeGroupedBulk.name
                    billableMetricId = cumulativeGroupedBulk.billableMetricId
                    billedInAdvance = cumulativeGroupedBulk.billedInAdvance
                    billingCycleConfiguration = cumulativeGroupedBulk.billingCycleConfiguration
                    conversionRate = cumulativeGroupedBulk.conversionRate
                    externalPriceId = cumulativeGroupedBulk.externalPriceId
                    fixedPriceQuantity = cumulativeGroupedBulk.fixedPriceQuantity
                    invoiceGroupingKey = cumulativeGroupedBulk.invoiceGroupingKey
                    invoicingCycleConfiguration = cumulativeGroupedBulk.invoicingCycleConfiguration
                    metadata = cumulativeGroupedBulk.metadata
                    additionalProperties = cumulativeGroupedBulk.additionalProperties.toMutableMap()
                }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                fun cumulativeGroupedBulkConfig(
                    cumulativeGroupedBulkConfig: CumulativeGroupedBulkConfig
                ) = cumulativeGroupedBulkConfig(JsonField.of(cumulativeGroupedBulkConfig))

                /**
                 * Sets [Builder.cumulativeGroupedBulkConfig] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cumulativeGroupedBulkConfig] with a well-typed
                 * [CumulativeGroupedBulkConfig] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun cumulativeGroupedBulkConfig(
                    cumulativeGroupedBulkConfig: JsonField<CumulativeGroupedBulkConfig>
                ) = apply { this.cumulativeGroupedBulkConfig = cumulativeGroupedBulkConfig }

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /**
                 * Sets [Builder.itemId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.itemId] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                /**
                 * Sets the field to an arbitrary JSON value.
                 *
                 * It is usually unnecessary to call this method because the field defaults to the
                 * following:
                 * ```java
                 * JsonValue.from("cumulative_grouped_bulk")
                 * ```
                 *
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun modelType(modelType: JsonValue) = apply { this.modelType = modelType }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /**
                 * Sets [Builder.name] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.name] with a well-typed [String] value instead.
                 * This method is primarily for setting the field to an undocumented or not yet
                 * supported value.
                 */
                fun name(name: JsonField<String>) = apply { this.name = name }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) =
                    billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * Alias for calling [Builder.billableMetricId] with
                 * `billableMetricId.orElse(null)`.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) =
                    billableMetricId(billableMetricId.getOrNull())

                /**
                 * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billableMetricId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                    this.billableMetricId = billableMetricId
                }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) =
                    billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * Alias for [Builder.billedInAdvance].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) =
                    billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * Alias for calling [Builder.billedInAdvance] with `billedInAdvance.orElse(null)`.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                    billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                    this.billedInAdvance = billedInAdvance
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: BillingCycleConfiguration?
                ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * Alias for calling [Builder.billingCycleConfiguration] with
                 * `billingCycleConfiguration.orElse(null)`.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: Optional<BillingCycleConfiguration>
                ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                 * [BillingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun billingCycleConfiguration(
                    billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) =
                    conversionRate(JsonField.ofNullable(conversionRate))

                /**
                 * Alias for [Builder.conversionRate].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun conversionRate(conversionRate: Double) =
                    conversionRate(conversionRate as Double?)

                /**
                 * Alias for calling [Builder.conversionRate] with `conversionRate.orElse(null)`.
                 */
                fun conversionRate(conversionRate: Optional<Double>) =
                    conversionRate(conversionRate.getOrNull())

                /**
                 * Sets [Builder.conversionRate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.conversionRate] with a well-typed [Double] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun conversionRate(conversionRate: JsonField<Double>) = apply {
                    this.conversionRate = conversionRate
                }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) =
                    externalPriceId(JsonField.ofNullable(externalPriceId))

                /**
                 * Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`.
                 */
                fun externalPriceId(externalPriceId: Optional<String>) =
                    externalPriceId(externalPriceId.getOrNull())

                /**
                 * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.externalPriceId] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                    this.externalPriceId = externalPriceId
                }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                    fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * Alias for [Builder.fixedPriceQuantity].
                 *
                 * This unboxed primitive overload exists for backwards compatibility.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                    fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * Alias for calling [Builder.fixedPriceQuantity] with
                 * `fixedPriceQuantity.orElse(null)`.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                    fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.fixedPriceQuantity] with a well-typed [Double]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                    this.fixedPriceQuantity = fixedPriceQuantity
                }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                    invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /**
                 * Alias for calling [Builder.invoiceGroupingKey] with
                 * `invoiceGroupingKey.orElse(null)`.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                    invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /**
                 * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoiceGroupingKey] with a well-typed [String]
                 * value instead. This method is primarily for setting the field to an undocumented
                 * or not yet supported value.
                 */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                    this.invoiceGroupingKey = invoiceGroupingKey
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: InvoicingCycleConfiguration?
                ) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Alias for calling [Builder.invoicingCycleConfiguration] with
                 * `invoicingCycleConfiguration.orElse(null)`.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.invoicingCycleConfiguration] with a well-typed
                 * [InvoicingCycleConfiguration] value instead. This method is primarily for setting
                 * the field to an undocumented or not yet supported value.
                 */
                fun invoicingCycleConfiguration(
                    invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * Sets [Builder.metadata] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                /**
                 * Returns an immutable instance of [CumulativeGroupedBulk].
                 *
                 * Further updates to this [Builder] will not mutate the returned instance.
                 *
                 * The following fields are required:
                 * ```java
                 * .cadence()
                 * .cumulativeGroupedBulkConfig()
                 * .currency()
                 * .itemId()
                 * .name()
                 * ```
                 *
                 * @throws IllegalStateException if any required field is unset.
                 */
                fun build(): CumulativeGroupedBulk =
                    CumulativeGroupedBulk(
                        checkRequired("cadence", cadence),
                        checkRequired("cumulativeGroupedBulkConfig", cumulativeGroupedBulkConfig),
                        checkRequired("currency", currency),
                        checkRequired("itemId", itemId),
                        modelType,
                        checkRequired("name", name),
                        billableMetricId,
                        billedInAdvance,
                        billingCycleConfiguration,
                        conversionRate,
                        externalPriceId,
                        fixedPriceQuantity,
                        invoiceGroupingKey,
                        invoicingCycleConfiguration,
                        metadata,
                        additionalProperties.toMutableMap(),
                    )
            }

            private var validated: Boolean = false

            fun validate(): CumulativeGroupedBulk = apply {
                if (validated) {
                    return@apply
                }

                cadence().validate()
                cumulativeGroupedBulkConfig().validate()
                currency()
                itemId()
                _modelType().let {
                    if (it != JsonValue.from("cumulative_grouped_bulk")) {
                        throw OrbInvalidDataException("'modelType' is invalid, received $it")
                    }
                }
                name()
                billableMetricId()
                billedInAdvance()
                billingCycleConfiguration().ifPresent { it.validate() }
                conversionRate()
                externalPriceId()
                fixedPriceQuantity()
                invoiceGroupingKey()
                invoicingCycleConfiguration().ifPresent { it.validate() }
                metadata().ifPresent { it.validate() }
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                (cadence.asKnown().getOrNull()?.validity() ?: 0) +
                    (cumulativeGroupedBulkConfig.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (currency.asKnown().isPresent) 1 else 0) +
                    (if (itemId.asKnown().isPresent) 1 else 0) +
                    modelType.let {
                        if (it == JsonValue.from("cumulative_grouped_bulk")) 1 else 0
                    } +
                    (if (name.asKnown().isPresent) 1 else 0) +
                    (if (billableMetricId.asKnown().isPresent) 1 else 0) +
                    (if (billedInAdvance.asKnown().isPresent) 1 else 0) +
                    (billingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (if (conversionRate.asKnown().isPresent) 1 else 0) +
                    (if (externalPriceId.asKnown().isPresent) 1 else 0) +
                    (if (fixedPriceQuantity.asKnown().isPresent) 1 else 0) +
                    (if (invoiceGroupingKey.asKnown().isPresent) 1 else 0) +
                    (invoicingCycleConfiguration.asKnown().getOrNull()?.validity() ?: 0) +
                    (metadata.asKnown().getOrNull()?.validity() ?: 0)

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                private var validated: Boolean = false

                fun validate(): Cadence = apply {
                    if (validated) {
                        return@apply
                    }

                    known()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class CumulativeGroupedBulkConfig
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [CumulativeGroupedBulkConfig].
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [CumulativeGroupedBulkConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(cumulativeGroupedBulkConfig: CumulativeGroupedBulkConfig) =
                        apply {
                            additionalProperties =
                                cumulativeGroupedBulkConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [CumulativeGroupedBulkConfig].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): CumulativeGroupedBulkConfig =
                        CumulativeGroupedBulkConfig(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): CumulativeGroupedBulkConfig = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is CumulativeGroupedBulkConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "CumulativeGroupedBulkConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or months.
             */
            class BillingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties =
                                billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [BillingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced. If
             * unspecified, a single invoice is produced per billing cycle.
             */
            class InvoicingCycleConfiguration
            private constructor(
                private val duration: JsonField<Long>,
                private val durationUnit: JsonField<DurationUnit>,
                private val additionalProperties: MutableMap<String, JsonValue>,
            ) {

                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                ) : this(duration, durationUnit, mutableMapOf())

                /**
                 * The duration of the billing period.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun duration(): Long = duration.getRequired("duration")

                /**
                 * The unit of billing period duration.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /**
                 * Returns the raw JSON value of [duration].
                 *
                 * Unlike [duration], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /**
                 * Returns the raw JSON value of [durationUnit].
                 *
                 * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnySetter
                private fun putAdditionalProperty(key: String, value: JsonValue) {
                    additionalProperties.put(key, value)
                }

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> =
                    Collections.unmodifiableMap(additionalProperties)

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /**
                     * Sets [Builder.duration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.duration] with a well-typed [Long] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) =
                        durationUnit(JsonField.of(durationUnit))

                    /**
                     * Sets [Builder.durationUnit] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.durationUnit] with a well-typed
                     * [DurationUnit] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                        this.durationUnit = durationUnit
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [InvoicingCycleConfiguration].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     *
                     * The following fields are required:
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     *
                     * @throws IllegalStateException if any required field is unset.
                     */
                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                            checkRequired("duration", duration),
                            checkRequired("durationUnit", durationUnit),
                            additionalProperties.toMutableMap(),
                        )
                }

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration = apply {
                    if (validated) {
                        return@apply
                    }

                    duration()
                    durationUnit().validate()
                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    (if (duration.asKnown().isPresent) 1 else 0) +
                        (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

                /** The unit of billing period duration. */
                class DurationUnit
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    private var validated: Boolean = false

                    fun validate(): DurationUnit = apply {
                        if (validated) {
                            return@apply
                        }

                        known()
                        validated = true
                    }

                    fun isValid(): Boolean =
                        try {
                            validate()
                            true
                        } catch (e: OrbInvalidDataException) {
                            false
                        }

                    /**
                     * Returns a score indicating how many valid values are contained in this object
                     * recursively.
                     *
                     * Used for best match union deserialization.
                     */
                    @JvmSynthetic
                    internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            class Metadata
            @JsonCreator
            private constructor(
                @com.fasterxml.jackson.annotation.JsonValue
                private val additionalProperties: Map<String, JsonValue>
            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) = apply {
                        additionalProperties = metadata.additionalProperties.toMutableMap()
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    /**
                     * Returns an immutable instance of [Metadata].
                     *
                     * Further updates to this [Builder] will not mutate the returned instance.
                     */
                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                private var validated: Boolean = false

                fun validate(): Metadata = apply {
                    if (validated) {
                        return@apply
                    }

                    validated = true
                }

                fun isValid(): Boolean =
                    try {
                        validate()
                        true
                    } catch (e: OrbInvalidDataException) {
                        false
                    }

                /**
                 * Returns a score indicating how many valid values are contained in this object
                 * recursively.
                 *
                 * Used for best match union deserialization.
                 */
                @JvmSynthetic
                internal fun validity(): Int =
                    additionalProperties.count { (_, value) ->
                        !value.isNull() && !value.isMissing()
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is CumulativeGroupedBulk && cadence == other.cadence && cumulativeGroupedBulkConfig == other.cumulativeGroupedBulkConfig && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, cumulativeGroupedBulkConfig, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "CumulativeGroupedBulk{cadence=$cadence, cumulativeGroupedBulkConfig=$cumulativeGroupedBulkConfig, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is PriceCreateParams && body == other.body && additionalHeaders == other.additionalHeaders && additionalQueryParams == other.additionalQueryParams /* spotless:on */
    }

    override fun hashCode(): Int = /* spotless:off */ Objects.hash(body, additionalHeaders, additionalQueryParams) /* spotless:on */

    override fun toString() =
        "PriceCreateParams{body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
